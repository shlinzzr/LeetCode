{"id":938872936,"question_id":2642,"lang":"java","lang_name":"Java","time":"1 year, 1 month","timestamp":1682329388,"status":10,"status_display":"Accepted","runtime":"74 ms","url":"/submissions/detail/938872936/","is_pending":"Not Pending","title":"Time to Cross a Bridge","memory":"50.6 MB","code":"class Solution {\n    public int findCrossingTime(int n, int k, int[][] time) {\n        int ans = 0, free = 0; \n        \n        PriorityQueue<int[]> leftWait = new PriorityQueue<>((a, b)->a[0]-b[0]); \n        PriorityQueue<int[]> rightWait = new PriorityQueue<>((a, b)->a[0]-b[0]); \n        PriorityQueue<int[]> leftArrival = new PriorityQueue<>((a, b)->(a[0] != b[0] ? b[0]-a[0] : b[1]-a[1]));\n        PriorityQueue<int[]> rightArrival = new PriorityQueue<>((a, b)->(a[0] != b[0] ? b[0]-a[0] : b[1]-a[1])); \n        for (int i = 0; i < time.length; ++i) \n            leftArrival.add(new int[]{time[i][0]+time[i][2], i}); \n        while (n > 0 || rightWait.size() > 0 || rightArrival.size() > 0) {\n            if (rightArrival.isEmpty() && (rightWait.isEmpty() || rightWait.peek()[0] > free) && (n == 0 || leftArrival.isEmpty() && (leftWait.isEmpty() || leftWait.peek()[0] > free))) {\n                int cand = Integer.MAX_VALUE; \n                if (n > 0 && leftWait.size() > 0) cand = Math.min(cand, leftWait.peek()[0]); \n                if (rightWait.size() > 0) cand = Math.min(cand, rightWait.peek()[0]); \n                free = cand; \n            }\n            while (leftWait.size() > 0 && leftWait.peek()[0] <= free) {\n                int i = leftWait.poll()[1]; \n                leftArrival.add(new int[] {time[i][0] + time[i][2], i}); \n            }\n            while (rightWait.size() > 0 && rightWait.peek()[0] <= free) {\n                int i = rightWait.poll()[1]; \n                rightArrival.add(new int[] {time[i][0] + time[i][2], i}); \n            }\n            if (rightArrival.size() > 0) {\n                int i = rightArrival.poll()[1]; \n                free += time[i][2]; \n                if (n > 0) leftWait.add(new int[] {free+time[i][3], i}); \n                else ans = Math.max(ans, free); \n            } else {\n                int i = leftArrival.poll()[1]; \n                free += time[i][0]; \n                rightWait.add(new int[] {free+time[i][1], i}); \n                --n; \n            }\n        }\n        return ans; \n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111","title_slug":"time-to-cross-a-bridge","has_notes":false,"flag_type":1}