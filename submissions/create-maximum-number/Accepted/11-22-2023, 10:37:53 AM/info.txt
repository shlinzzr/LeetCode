{"id":1103870413,"question_id":321,"lang":"java","lang_name":"Java","time":"6Â months, 3Â weeks","timestamp":1700620673,"status":10,"status_display":"Accepted","runtime":"56 ms","url":"/submissions/detail/1103870413/","is_pending":"Not Pending","title":"Create Maximum Number","memory":"44.7 MB","code":"class Solution {\n    public int[] maxNumber(int[] nums1, int[] nums2, int k) {\n\n        int[] res = new int[k];\n        for(int i=0; i<=k; i++){\n\n            if(i>nums1.length || k-i>nums2.length)\n                continue;\n\n            int[] tmp1 = getMax(nums1, i);\n            int[] tmp2 = getMax(nums2, k-i);\n\n            int[] tmp = merge(tmp1, tmp2, k);\n\n            if (greater(tmp, 0, res, 0)) \n                res = tmp;\n        }\n\n        return res;\n    }\n\n\n    private int[] getMax(int[] nums, int k){\n        Stack<Integer> st = new Stack<>();\n        int len = nums.length;\n        int del = len-k;\n\n        for(int i=0; i<len; i++){\n            while(!st.isEmpty() && nums[st.peek()]<nums[i] && del>0){\n                st.pop();\n                del--;\n            }\n            st.push(i);\n        }\n\n        while(del>0 && !st.isEmpty()){\n            st.pop();\n            del--;\n        }\n\n        int[] res = new int[st.size()];\n        int idx= 0;\n        for(int i : st){\n            res[idx++] = nums[i];\n        }\n\n        return res;\n    }\n\n    private int[] merge(int[] nums1, int[] nums2, int k) {\n        int[] ans = new int[k];\n        for (int i = 0, j = 0, r = 0; r < k; ++r)\n            ans[r] = greater(nums1, i, nums2, j) ? nums1[i++] : nums2[j++];\n        return ans;\n    }\n\n    public boolean greater(int[] nums1, int i, int[] nums2, int j) {\n    while (i < nums1.length && j < nums2.length && nums1[i] == nums2[j]) {\n        i++;\n        j++;\n    }\n    return j == nums2.length || (i < nums1.length && nums1[i] > nums2[j]);\n}\n        \n    // private int[] merge(int[] nums1, int[] nums2){\n\n    //     int m = nums1.length;\n    //     int n = nums2.length;\n\n    //     int[] res = new int[m+n];\n\n    \n    //     int i=0, j=0, idx=0;\n    //     while(i<m && j<n){\n\n    //         if(nums1[i]>nums2[j]){\n    //             res[idx++] = nums1[i++];\n    //         }else{\n    //             res[idx++] = nums2[j++];\n    //         }\n    //     }\n\n    //     while(i<m){\n    //         res[idx++] = nums1[i++];\n    //     }\n\n    //     while(j<n){\n    //         res[idx++] = nums2[j++];\n    //     }\n\n    //     return res;\n    // }\n\n    // private boolean greater(int[] tmp, int[] res){\n    //     int len = tmp.length;\n\n    //     for(int i=0; i<len; i++){\n    //         if(tmp[i]==res[i])\n    //             continue;\n\n    //         else if(tmp[i]>res[i])\n    //             return true;\n    //         else \n    //             return false;\n    //     }\n\n    //     return false;\n    \n    // }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"create-maximum-number","has_notes":false,"flag_type":1}