{"id":872482932,"question_id":399,"lang":"java","lang_name":"Java","time":"1 year, 5 months","timestamp":1672989921,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/872482932/","is_pending":"Not Pending","title":"Evaluate Division","memory":"43 MB","code":"class Solution {\n    public double[] calcEquation(List<List<String>> eq, double[] vals, List<List<String>> q) {\n        \n        Map<String, Map<String, Double>> m = new HashMap<>();\n        for (int i = 0; i < vals.length; i++) {\n            m.putIfAbsent(eq.get(i).get(0), new HashMap<>());\n            m.putIfAbsent(eq.get(i).get(1), new HashMap<>());\n            m.get(eq.get(i).get(0)).put(eq.get(i).get(1), vals[i]);\n            m.get(eq.get(i).get(1)).put(eq.get(i).get(0), 1 / vals[i]);\n        }\n        double[] r = new double[q.size()];\n        for (int i = 0; i < q.size(); i++)\n            r[i] = dfs(q.get(i).get(0), q.get(i).get(1), 1, m, new HashSet<>());\n        return r;\n    }\n\n    private  double dfs(String s, String t, double r, Map<String, Map<String, Double>> m, Set<String> seen) {\n        if (!m.containsKey(s) || !seen.add(s)) return -1;\n        if (s.equals(t)) return r;\n        Map<String, Double> next = m.get(s);\n        for (String c : next.keySet()) {\n            double result = dfs(c, t, r * next.get(c), m, seen);\n            if (result != -1) return result;\n        }\n        return -1;\n    }\n}","compare_result":"111111111111111111111111","title_slug":"evaluate-division","has_notes":false,"flag_type":1}