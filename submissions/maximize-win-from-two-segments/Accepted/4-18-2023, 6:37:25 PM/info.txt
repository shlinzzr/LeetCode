{"id":935742033,"question_id":2673,"lang":"java","lang_name":"Java","time":"1 year, 1 month","timestamp":1681814245,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/935742033/","is_pending":"Not Pending","title":"Maximize Win From Two Segments","memory":"52.4 MB","code":"class Solution {\n    public int maximizeWin(int[] P, int k) {\n        int len = P.length;\n        \n        // if(k==0)\n        //     return 0;\n        \n        if(P[len-1]-P[0]<=2*k)\n            return len;\n        \n        \n\n        //huifeng https://www.youtube.com/watch?v=0Tjuy464sP8\n        \n        int[] pre = new int[len];\n        int[] post = new int[len];\n        \n        int max= 0 ; \n        \n        int st=0;\n        for(int ed=0; ed<len; ed++){\n            \n            while(P[ed]-P[st]>k){\n                st++;\n            }\n            \n            max = Math.max(max, ed-st+1);\n            pre[ed] = max;\n        }\n        \n        max = 0;\n        int ed=len-1;\n        for(st=len-1; st>=0; st--){\n            while(P[ed]-P[st]>k){\n                ed--;\n            }\n            \n            \n            max = Math.max(max, ed-st+1);\n            post[st] = max;\n        }\n        \n        // System.out.println(pre[0] + \" \" + post[0]);\n        int res = 0;\n        for(int i=0; i+1<len ; i++){\n            res = Math.max(res, pre[i]+post[i+1]);\n        }\n        \n        return res;\n        \n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximize-win-from-two-segments","has_notes":false,"flag_type":1}