{"id":946490477,"question_id":2558,"lang":"java","lang_name":"Java","time":"1 year, 1 month","timestamp":1683531818,"status":10,"status_display":"Accepted","runtime":"90 ms","url":"/submissions/detail/946490477/","is_pending":"Not Pending","title":"Minimum Number of Operations to Sort a Binary Tree by Level","memory":"76.5 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public int minimumOperations(TreeNode root) {\n        List<List<Integer>> list = new ArrayList<>();\n        \n        helper(root, list, 0);\n        \n        int cnt=0;\n        \n        for(List<Integer> row : list){\n            \n            int st = 0, ed=row.size()-1;\n            \n            cnt += helper2(row);\n            \n        }\n        \n        return cnt;\n        \n        \n    }\n    \n    \n    private void helper(TreeNode root, List<List<Integer>> list, int lv){\n        if(root==null)\n            return;\n        \n        if(list.size()<lv+1)\n            list.add(new ArrayList<>());\n        \n        list.get(lv).add(root.val);\n        \n        helper(root.left, list, lv+1);\n        helper(root.right, list, lv+1);\n    \n        \n    }\n    \n    \n    private int  helper2(List<Integer> list) {\n        int swaps = 0;\n        int[] sorted = new int[list.size()];\n        for(int i=0; i<sorted.length; i++) sorted[i] = list.get(i);\n        Arrays.sort(sorted);\n        Map<Integer, Integer> ind = new HashMap<>();\n        for(int i=0; i<list.size(); i++) ind.put(list.get(i), i);\n        \n        for(int i=0; i<list.size(); i++) {\n            if(list.get(i) != sorted[i]) {\n                swaps++;\n                ind.put(list.get(i), ind.get(sorted[i]));\n                list.set(ind.get(sorted[i]), list.get(i));\n            }\n        }\n        return swaps;\n    }\n}\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-number-of-operations-to-sort-a-binary-tree-by-level","has_notes":false,"flag_type":1}