{"id":1123288949,"question_id":1447,"lang":"java","lang_name":"Java","time":"5 months, 3 weeks","timestamp":1702978040,"status":10,"status_display":"Accepted","runtime":"57 ms","url":"/submissions/detail/1123288949/","is_pending":"Not Pending","title":"Jump Game IV","memory":"55.2 MB","code":"class Solution {\n    public int minJumps(int[] arr) {\n        int len = arr.length;\n\n\n        HashMap<Integer, List<Integer>> map = new HashMap<>();\n        for(int i=0; i<len; i++){\n            map.putIfAbsent(arr[i], new ArrayList<>());\n            map.get(arr[i]).add(i);\n        }\n\n        Queue<Integer> q = new LinkedList<>();\n        q.offer(0);\n\n        boolean[] seen = new boolean[len];\n\n        int step = 0;\n        while(!q.isEmpty()){\n          \n            int siz = q.size();\n            for(int cnt=0; cnt<siz; cnt++){\n                int i = q.poll();\n\n                if(i==len-1)\n                    return step;\n\n                if(map.containsKey(arr[i])){\n\n                    for(int idx : map.get(arr[i])){\n                        if(seen[idx]==false){\n                            q.offer(idx);\n                            seen[idx]=true;\n                        }\n                    }\n                    map.remove(arr[i]);\n                   \n                }\n\n                if(i-1>0 && seen[i-1]==false){\n                    q.offer(i-1);\n                    seen[i-1]=true;\n                }\n\n                if(i+1< len && seen[i+1]==false){\n                    q.offer(i+1);\n                    seen[i+1]=true;\n                }\n            }\n              step++;\n        }\n\n        return -1;\n\n    }\n}","compare_result":"111111111111111111111111111111111","title_slug":"jump-game-iv","has_notes":false,"flag_type":1}