{"id":794621749,"question_id":16,"lang":"java","lang_name":"Java","time":"1 year, 9 months","timestamp":1662630189,"status":10,"status_display":"Accepted","runtime":"71 ms","url":"/submissions/detail/794621749/","is_pending":"Not Pending","title":"3Sum Closest","memory":"49 MB","code":"class Solution {\n    public int threeSumClosest(int[] nums, int target) {\n        TreeSet<Integer> set = new TreeSet<>();\n        Arrays.sort(nums);\n          \n        int resAbs = Integer.MAX_VALUE;\n        int res = -1000;\n        \n        for(int i=0; i<nums.length; i++){\n            \n            int j = i+1;\n            int k = nums.length-1;\n            \n            while(j<k){\n                \n                int sum = nums[i] + nums[j] + nums[k];\n                \n                int disAbs = Math.abs( sum-target );\n                if(disAbs<resAbs){\n                    resAbs = disAbs;\n                    res = sum ;\n                }\n                \n                \n                if (sum > target) {\n                    k--;\n                } else {\n                    j++;\n                }\n                \n                \n                // if(!set.contains(sum)){\n                //     set.add(sum);\n                //     int floor = set.floor(target)!=null? set.floor(target) : Integer.MIN_VALUE;\n                //     int ceil = set.ceiling(target)!=null? set.ceiling(target) : Integer.MAX_VALUE;                                           \n                // }\n            }\n        }\n        \n        return res;\n        \n        \n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"3sum-closest","has_notes":false,"flag_type":1}