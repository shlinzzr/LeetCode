{"id":762231985,"question_id":2042,"lang":"java","lang_name":"Java","time":"1 year, 10 months","timestamp":1659349190,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/762231985/","is_pending":"Not Pending","title":"Maximum Product Difference Between Two Pairs","memory":"53.9 MB","code":"class Solution {\n    \n//            // Big-O(NlgN)\n//     public int maxProductDifference(int[] nums) {\n \n//         Arrays.sort(nums);\n        \n//         return Math.abs(nums[0]* nums[1] - nums[nums.length-1]*nums[nums.length-2]);\n        \n//     }\n    \n    \n    // O(N)\n    public int maxProductDifference(int[] nums) {\n\tint largest = 0, secondLargest = 0, smallest = Integer.MAX_VALUE, secondSmallest = Integer.MAX_VALUE;\n\tfor(int i=0;i<nums.length;i++) {\n\t\tif(nums[i]>=largest) {\n\t\t\tsecondLargest = largest;\n\t\t\tlargest = nums[i];\n\t\t} else if(nums[i]>secondLargest) secondLargest = nums[i];\n\t\tif(nums[i]<=smallest) {\n\t\t\tsecondSmallest = smallest;\n\t\t\tsmallest = nums[i];\n\t\t} else if(nums[i]<secondSmallest) secondSmallest = nums[i];\n\t}\n\treturn largest * secondLargest - smallest * secondSmallest;\n}\n    \n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-product-difference-between-two-pairs","has_notes":false,"flag_type":1}