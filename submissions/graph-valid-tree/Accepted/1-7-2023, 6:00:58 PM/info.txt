{"id":873193219,"question_id":261,"lang":"java","lang_name":"Java","time":"1 year, 5 months","timestamp":1673085658,"status":10,"status_display":"Accepted","runtime":"21 ms","url":"/submissions/detail/873193219/","is_pending":"Not Pending","title":"Graph Valid Tree","memory":"43.4 MB","code":"class Solution {\n    public boolean validTree(int n, int[][] edges) {\n        HashMap<Integer, HashSet<Integer>> map = new HashMap<>();\n        for(int i=0; i<edges.length; i++){\n            map.putIfAbsent(edges[i][0], new HashSet<>());\n            map.putIfAbsent(edges[i][1], new HashSet<>());\n            map.get(edges[i][0]).add(edges[i][1]);\n            map.get(edges[i][1]).add(edges[i][0]);\n        }\n        \n        boolean[] seen = new boolean[n];\n        Queue<int[]> q = new LinkedList<>();\n        seen[0] = true;\n        q.add(new int[]{0,0});\n        \n        \n        while(!q.isEmpty()){\n            \n            int[] p = q.poll();\n            \n            HashSet<Integer> set = map.get(p[1]);\n            if(set==null)\n                continue;\n            \n            for(int s: set){\n                if(s==p[0])\n                    continue;\n                \n                if(s!=p[1] && seen[s]==true)\n                    return false;\n                \n                System.out.println(Arrays.asList(p[1],s));\n                \n                q.offer(new int[]{p[1], s});\n                seen[s]=true;\n            }\n        }\n        \n        for(boolean b : seen){\n            if(b==false)\n                return false;\n        }\n        \n        \n        return true;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111","title_slug":"graph-valid-tree","has_notes":false,"flag_type":1}