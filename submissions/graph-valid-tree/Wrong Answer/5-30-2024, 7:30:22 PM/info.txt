{"id":1272307013,"question_id":261,"lang":"java","lang_name":"Java","time":"1 week, 6 days","timestamp":1717068622,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1272307013/","is_pending":"Not Pending","title":"Graph Valid Tree","memory":"N/A","code":"class Solution {\n\n    Map<Integer, List<Integer>> adjs;\n    public boolean validTree(int n, int[][] edges) {\n        \n\n        // tree mean's that no cycle\n        // define \" what is  valid tree \"\n        // recur, or union find ?\n\n\n        \n        adjs = new HashMap<>();\n        for(int[] e : edges){\n            adjs.putIfAbsent(e[0], new ArrayList<>());\n            adjs.get(e[0]).add(e[1]);\n            adjs.putIfAbsent(e[1], new ArrayList<>());\n            adjs.get(e[1]).add(e[0]);\n        }\n\n        // Queue<Integer> q = new LinkedList<>();\n        for(int key : adjs.keySet()){\n            if(adjs.get(key).size()==1){ //edge\n                Set<Integer> seen = new HashSet<>();\n                seen.add(key);\n                seen.add(adjs.get(key).get(0));\n                if(helper(key, adjs.get(key).get(0), seen)==false)\n                    return false;\n            }\n        }\n        return true;\n\n    }\n\n    private boolean helper(int parent, int curr, Set<Integer> seen){\n        \n        for(int next: adjs.get(curr)){\n            if(next==parent) continue;\n            if(seen.add(next)==false) return false;\n            boolean rt = helper(curr, next, seen);\n            if(rt==false) return false;\n        }\n\n        return true;\n\n    }\n}\n\n        // Set<Integer> seen = new HashSet<>();\n\n        // while(!q.isEmpty()){\n        //     int size = q.size();\n        //     while(size-->0){\n        //         int p = q.poll();\n\n        //         if(seen.contains(p)) return false;\n\n        //         for(int adj : adjs.get(p)){\n\n        //         }\n\n\n\n\n        //     }\n        // }\n\n        \n        \n\n        ","compare_result":"111100000011011001111000001110100011111111101","title_slug":"graph-valid-tree","has_notes":false,"flag_type":1}