{"id":903415570,"question_id":1701,"lang":"java","lang_name":"Java","time":"1Â year, 3Â months","timestamp":1677142242,"status":10,"status_display":"Accepted","runtime":"79 ms","url":"/submissions/detail/903415570/","is_pending":"Not Pending","title":"Remove Max Number of Edges to Keep Graph Fully Traversable","memory":"151.7 MB","code":"class Solution {\n    \n    int[] parent;\n    \n    public int maxNumEdgesToRemove(int n, int[][] edges) {\n        \n        Arrays.sort(edges, (a,b)-> b[0]!=a[0] ? b[0]-a[0] : a[1]-b[1]);\n        \n        parent = new int[n+1];\n        for(int i=0; i<n; i++) parent[i] = i;\n        int cnt1 = 0;\n        int cnt2 = 0;\n        int res =0;\n        \n        for(int[] ed : edges){\n            \n            if(ed[0]!=3)\n                continue;\n            \n            int root = find(ed[1]);\n            int node = find(ed[2]);\n            \n            if(root!=node){\n                parent[node] = root;\n                cnt1++;\n                cnt2++;\n            }else{\n                res++;\n            }\n        }\n        \n       \n        /*for(int[] ed : edges){\n            \n            if(ed[0]==3)\n                continue;\n            \n            int root = find(ed[1]);\n            int node = find(ed[2]);\n            \n            if(root!=node){\n                parent[node] = root;\n                cnt--;\n            }else{\n                res++;\n            }\n        }*/\n        \n         int[] parentcpy = parent.clone();\n        for (int[] edge : edges) {\n            if (edge[0] == 1) {\n                if (union(edge[1], edge[2])) {\n                    cnt1++;\n                }\n                else {\n                    res++;\n                }\n            }\n        }\n        \n        parent = parentcpy;\n        for (int[] edge : edges) {\n            if (edge[0] == 2) {\n                if (union(edge[1], edge[2])) {\n                    cnt2++;\n                }\n                else {\n                    res++;\n                }\n            }\n        }\n        \n        \n        \n        return cnt1==n-1 && cnt2==n-1? res : -1;\n        \n    }\n    \n     public boolean union(int x, int y) {\n        int px = find(x);\n        int py = find(y);\n        if (px == py) {\n            return false;\n        }\n        parent[px] = py;\n        return true;\n    }\n    \n    \n    private int find(int x){\n        if(parent[x]==x)\n            return x;\n        \n        parent[x] = find(parent[x]);\n        return parent[x];\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"remove-max-number-of-edges-to-keep-graph-fully-traversable","has_notes":false,"flag_type":1}