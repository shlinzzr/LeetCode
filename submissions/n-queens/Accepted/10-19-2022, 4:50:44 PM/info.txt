{"id":825798745,"question_id":51,"lang":"java","lang_name":"Java","time":"1 year, 7 months","timestamp":1666169444,"status":10,"status_display":"Accepted","runtime":"5 ms","url":"/submissions/detail/825798745/","is_pending":"Not Pending","title":"N-Queens","memory":"45.2 MB","code":"class Solution {\n    \n    List<List<String>> res;\n    int len=0;\n    char[][] board;\n    \n    \n    public List<List<String>> solveNQueens(int n) {\n        \n        res = new ArrayList<>();\n        len =n;\n        board = new char[n][n];\n        for(char[] b: board){\n            Arrays.fill(b, '.');    \n        }\n        \n        dfs(0);\n        \n        \n        return res;\n    }\n    \n    private void dfs(int i){\n        \n        if(i==len){\n            res.add(construct(board));\n            return;\n        }\n        \n        for(int j=0; j<len; j++){\n            \n            if(isValid(i, j)){\n                board[i][j]='Q';\n                dfs(i+1);\n                board[i][j]='.';\n            }\n            \n        }\n        \n    }\n    \n    \n    private boolean isValid(int r, int c){\n        \n        for(int i=0; i<r; i++){\n            if(board[i][c]=='Q') return false;\n        }\n        \n        for(int j=0; j<c; j++){\n            if(board[r][j]=='Q')return false;\n        }\n        \n        int k=1;\n        while(r-k>=0 && c-k>=0){\n            if(board[r-k][c-k]=='Q') return false;\n            k++;\n        }\n        k=1;\n        while(r-k>=0 && c+k<len){\n            if(board[r-k][c+k]=='Q') return false;\n            k++;\n        }\n        \n        return true;\n    }\n    \n    \n    private List<String> construct(char[][] board) {\n        List<String> list = new LinkedList<String>();\n        for(int i = 0; i < board.length; i++) {\n            String s = new String(board[i]);\n            list.add(s);\n        }\n        return list;\n    }\n}","compare_result":"111111111","title_slug":"n-queens","has_notes":false,"flag_type":1}