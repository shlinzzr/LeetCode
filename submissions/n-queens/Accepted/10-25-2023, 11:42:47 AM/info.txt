{"id":1083495598,"question_id":51,"lang":"java","lang_name":"Java","time":"7 months, 3 weeks","timestamp":1698205367,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/1083495598/","is_pending":"Not Pending","title":"N-Queens","memory":"43.8 MB","code":"class Solution {\n    public List<List<String>> solveNQueens(int n) {\n    List<List<String>> res = new ArrayList<>();\n        \n        char[][] mat = new char[n][n];\n        for(char[] arr : mat)\n            Arrays.fill(arr, '.');\n        \n\n           helper(res, mat, n, 0);\n        \n        return res;\n    }\n\n    private void helper(List<List<String>> res, char[][] mat, int n, int i){\n        \n        if(i==n){\n            List<String> list =new ArrayList<>();\n            for(char[] r: mat){\n                list.add(new String(r));\n            }\n            res.add(list);\n            return;\n        }\n\n        for(int j=0; j<n; j++){\n            if(isValid(mat, i, j)==true) {\n                mat[i][j] = 'Q';\n                helper(res, mat, n, i+1);\n                mat[i][j] = '.';\n            }\n        }\n        \n\n    }\n\n      private boolean isValid(char[][] board, int r, int c){\n        \n         int len = board.length;\n         \n         // check vertical\n        for(int i=0; i<r; i++){\n            if(board[i][c]=='Q') return false;\n        }\n        \n         // check horizontal\n        for(int j=0; j<c; j++){\n            if(board[r][j]=='Q')return false;\n        }\n         \n         //check top left\n        int k=1;\n        while(r-k>=0 && c-k>=0){\n            if(board[r-k][c-k]=='Q') return false;\n            k++;\n        }\n         \n         // check top right\n        k=1;\n        while(r-k>=0 && c+k<len){\n            if(board[r-k][c+k]=='Q') return false;\n            k++;\n        }\n        \n        return true;\n    }\n    \n}","compare_result":"111111111","title_slug":"n-queens","has_notes":false,"flag_type":1}