{"id":1013459873,"question_id":2914,"lang":"java","lang_name":"Java","time":"10 months, 1 week","timestamp":1691292073,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1013459873/","is_pending":"Not Pending","title":"Find the Safest Path in a Grid","memory":"N/A","code":"class Solution {\n    public int maximumSafenessFactor(List<List<Integer>> grid) {\n        int h = grid.size();\n        int w = grid.get(0).size();\n        \n        List<int[]> list = new ArrayList<>();\n        \n        \n        for(int i=0; i<h; i++){\n            for(int j=0; j<w; j++){\n                \n                if(grid.get(i).get(j)==1)\n                    list.add(new int[]{i,j});\n            }\n            \n        }\n        \n        \n        if(grid.get(0).get(0)==1 || grid.get(h-1).get(w-1)==1)\n            return 0;\n        \n        int[][] dirs = new int[][]{{1,0}, {0,1}, {-1,0}, {0,-1}};\n        \n        int max =0;\n        \n        boolean[][] seen = new boolean[h][w];\n        \n        Queue<int[]> q = new LinkedList<>();\n        q.offer(new int[]{0,0});\n        \n        while(!q.isEmpty()){\n            \n            int[] p = q.poll();\n            \n            for(int[] d: dirs){\n                \n                int r = p[0]+d[0];\n                int c = p[1]+d[1];\n                \n                if(r<0 || c<0 || r>=h || c>=w || seen[r][c] || grid.get(r).get(c)==1)\n                    continue;\n                \n                int min = Integer.MAX_VALUE;\n                for(int[] pt : list){\n                    min = Math.min(min , Math.abs(pt[0]-r) + Math.abs(pt[1]- c));\n                }\n                \n                max = Math.max(max, min);\n                q.offer(new int[]{r,c});\n            }\n        }\n        \n        return max;\n        \n    }\n}","compare_resulttitle_slug":"find-the-safest-path-in-a-grid","has_notes":false,"flag_type":1}