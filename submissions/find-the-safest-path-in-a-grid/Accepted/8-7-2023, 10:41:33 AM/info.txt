{"id":1014298538,"question_id":2914,"lang":"java","lang_name":"Java","time":"10 months, 1 week","timestamp":1691376093,"status":10,"status_display":"Accepted","runtime":"193 ms","url":"/submissions/detail/1014298538/","is_pending":"Not Pending","title":"Find the Safest Path in a Grid","memory":"70.6 MB","code":"class Solution {\n    \n    int[][] dirs = new int[][]{{1,0}, {0,1}, {-1,0}, {0,-1}};\n    public int maximumSafenessFactor(List<List<Integer>> grid) {\n        \n        int h = grid.size();\n        int w = grid.get(0).size();\n        \n        int[][] gd = new int[h][w];\n           \n        Queue<int[]> q = new LinkedList<>();\n        \n        for (int i=0; i<h; i++){\n            for (int j=0; j<w; j++){\n                gd[i][j] = grid.get(i).get(j);\n                if (grid.get(i).get(j)==1)\n                    q.offer(new int[]{i,j});\n            }\n        }\n        \n        while (!q.isEmpty())\n        {\n            int siz = q.size();\n            while (siz>0)\n            {\n                int[] p = q.poll();\n                \n                for(int[] d : dirs){\n                    \n                    int r = p[0]+d[0];\n                    int c = p[1]+d[1];\n                \n                    if(r<0 || c<0 || r>=h || c>=w || gd[r][c]!=0)\n                        continue;\n                    \n                    gd[r][c] = gd[p[0]][p[1]]+1;\n                    q.offer(new int[]{r,c});\n                }\n                siz--;\n            }\n        }\n        \n        int left = 0, right = h;\n        while (left < right)\n        {\n            int mid = right-(right-left)/2;\n            if (isOK(mid, gd))\n                left = mid;\n            else\n                right = mid-1;\n        }\n        \n        return left;\n    }\n    \n    private boolean isOK(int distance, int[][] gd)\n    {\n        int h = gd.length;\n        int w = gd[0].length;\n        \n        boolean[][] seen = new boolean[h][w];\n        \n        if (gd[0][0]<=distance) \n            return false;\n        \n        \n        Queue<int[]> q = new LinkedList<>();\n        \n        q.offer(new int[]{0,0});\n        seen[0][0] = true;\n        \n        while (!q.isEmpty())\n        {\n            \n            int[] p = q.poll();\n            for(int[] d : dirs)\n            {\n                int r = p[0]+d[0];\n                int c = p[1]+d[1];\n                \n                if(r<0 || c<0 || r>=h || c>=w || seen[r][c] || gd[r][c]<=distance)\n                    continue;\n                \n                if (r==h-1 && c==w-1) \n                    return true;\n                \n                seen[r][c] = true; \n                q.offer(new int[]{r,c});\n            }\n        }\n        \n        return false;\n    }\n        \n        \n//         int h = grid.size();\n//         int w = grid.get(0).size();\n        \n//         List<int[]> list = new ArrayList<>();\n        \n        \n//         for(int i=0; i<h; i++){\n//             for(int j=0; j<w; j++){\n//                 if(grid.get(i).get(j)==1)\n//                     list.add(new int[]{i,j});\n//             }\n//         }\n        \n        \n//         if(grid.get(0).get(0)==1 || grid.get(h-1).get(w-1)==1)\n//             return 0;\n        \n//         int[][] dirs = new int[][]{{1,0}, {0,1}, {-1,0}, {0,-1}};\n        \n//         int max =0;\n        \n//         boolean[][] seen = new boolean[h][w];\n        \n//         Queue<int[]> q = new LinkedList<>();\n//         q.offer(new int[]{0,0});\n//         seen[0][0]=true;\n        \n//         int min = Integer.MAX_VALUE;\n        \n//         while(!q.isEmpty()){\n            \n//             int[] p = q.poll();\n            \n//             for(int[] d: dirs){\n                \n//                 int r = p[0]+d[0];\n//                 int c = p[1]+d[1];\n                \n//                 if(r<0 || c<0 || r>=h || c>=w || seen[r][c] || grid.get(r).get(c)==1)\n//                     continue;\n                \n                \n//                 for(int[] pt : list){\n//                     min = Math.min(min , Math.abs(pt[0]-r) + Math.abs(pt[1]-c));\n//                 }\n                \n//                 // max = Math.max(max, min);\n//                 seen[r][c] = true;\n//                 q.offer(new int[]{r,c});\n//             }\n//         }\n        \n//         return min;\n        \n//     }\n}","compare_resulttitle_slug":"find-the-safest-path-in-a-grid","has_notes":false,"flag_type":1}