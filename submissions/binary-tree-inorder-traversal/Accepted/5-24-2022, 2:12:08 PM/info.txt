{"id":705999615,"question_id":94,"lang":"java","lang_name":"Java","time":"2Â years","timestamp":1653372728,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/705999615/","is_pending":"Not Pending","title":"Binary Tree Inorder Traversal","memory":"42.3 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public List<Integer> inorderTraversal(TreeNode root) {\n        \n        List<Integer> list = new ArrayList<Integer>();\n        \n        Stack<TreeNode> stack = new Stack<TreeNode>();\n        \n        TreeNode  curr = root;\n        \n        while(curr!=null || !stack.isEmpty()){\n            while ( curr !=null){\n                 stack.push(curr);\n                curr = curr.left;\n            }\n            curr = stack.pop();\n            list.add(curr.val);\n            curr = curr.right;\n           \n            \n        }\n        \n        return list;\n        \n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-tree-inorder-traversal","has_notes":false,"flag_type":1}