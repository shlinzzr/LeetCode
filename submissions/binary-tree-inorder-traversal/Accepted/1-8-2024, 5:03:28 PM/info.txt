{"id":1140299787,"question_id":94,"lang":"java","lang_name":"Java","time":"5Â months","timestamp":1704704608,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1140299787/","is_pending":"Not Pending","title":"Binary Tree Inorder Traversal","memory":"41.4 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public List<Integer> inorderTraversal(TreeNode root) {\n        List<Integer> res = new ArrayList<>();\n        inorder(root, res);\n        return res;\n    }\n\n    private void inorder(TreeNode root, List<Integer> list ){\n        if(root==null) return;\n       \n        inorder(root.left, list);\n        list.add(root.val);\n        inorder(root.right, list);\n     \n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-tree-inorder-traversal","has_notes":false,"flag_type":1}