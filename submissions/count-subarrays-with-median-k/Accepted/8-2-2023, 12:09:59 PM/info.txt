{"id":1009929214,"question_id":2574,"lang":"java","lang_name":"Java","time":"10 months, 2 weeks","timestamp":1690949399,"status":10,"status_display":"Accepted","runtime":"24 ms","url":"/submissions/detail/1009929214/","is_pending":"Not Pending","title":"Count Subarrays With Median K","memory":"55.2 MB","code":"class Solution {\n    public int countSubarrays(int[] nums, int k) {\n        // <k:-1, ==k: 0, >k:1\n        \n        int len = nums.length;\n        \n        for(int i=0; i<len; i++){\n            if(nums[i]<k)\n                nums[i]=-1;\n            else if(nums[i]==k)\n                nums[i]=0;\n            else\n                nums[i]=1;\n        }\n        \n        // find\n        // [-1, 0, 1]   odd length, sum=0\n        // [-1, 0, 1, 1] even length sum=1\n        \n        \n        Map<Integer, Integer> oddSum = new HashMap<>();\n        Map<Integer, Integer> evenSum = new HashMap<>();\n        evenSum.put(0, 1);\n        \n        int presum = 0;\n        int res = 0;\n        for (int i=0; i<nums.length; i++)\n        {\n            presum += nums[i];\n            if (i%2==0) // odd length\n            {   \n                // 0 1.  2 3 4\n                // x x [ x x x]\n                //   j       i\n                // find evenSum 0\n                res += evenSum.getOrDefault(presum,  0);\n                \n                \n                // 0 1 2  3 4\n                // x x x[ x x]\n                //     j    i\n                // find oddSum 1\n                res +=  oddSum.getOrDefault(presum-1, 0);\n                oddSum.put(presum, oddSum.getOrDefault(presum, 0)+1);\n                \n                \n            } else{ // even length\n                \n                // 0 1 2.  3 4 5\n                // x x x [ x x x]\n                //             i\n                // find oddSum 1\n                \n                res +=  oddSum.getOrDefault(presum,  0);\n                res += evenSum.getOrDefault(presum-1,0);\n                evenSum.put(presum, evenSum.getOrDefault(presum, 0)+1);\n            }\n        }\n        \n        return res;\n        \n        \n        // [3,2,1,4,5] => [-1, -1, -1, 0, 1]\n        //.     presum => [-1, -2, -3, -3, -2]\n        // map : (0, -1)  \n        \n        // x x x x x [ x x x x ]\n        //.            \n        \n//         Map<Integer, Integer> map = new HashMap<>();\n//         map.put(0, 1);\n        \n//         int presum=0;\n//         int res = 0;\n        \n//         for(int i=0; i<len; i++){\n//             presum += nums[i];\n            \n//             res += map.getOrDefault(presum, 0);\n            \n//             map.put(presum, map.getOrDefault(presum,0)+1);\n//         }\n        \n//         return res;\n        \n        \n        \n        \n      \n        \n        \n        \n    }\n}","compare_result":"111111111111111111111111111111111111111111111","title_slug":"count-subarrays-with-median-k","has_notes":false,"flag_type":1}