{"id":1124764409,"question_id":1891,"lang":"java","lang_name":"Java","time":"5 months, 3 weeks","timestamp":1703133076,"status":10,"status_display":"Accepted","runtime":"1074 ms","url":"/submissions/detail/1124764409/","is_pending":"Not Pending","title":"Count Pairs Of Nodes","memory":"115.8 MB","code":"class Solution {\n\tpublic int[] countPairs(int n, int[][] edges, int[] queries) {\n\t\tint[] indeg = new int[n+1];\t\t\n\n        //calculating the indegree for each node\n\t\tfor(int i = 0 ; i < edges.length ; i++) {\n\t\t\tindeg[edges[i][0]]++;\n\t\t\tindeg[edges[i][1]]++;\t\t\t\n\t\t}\n\t\t\n\t\tint[] duplicate = indeg.clone();\n\t\t\n\t\tArrays.sort(duplicate);\n\t\t\n\n        //Putting all the edges with its frequency in a hashmap\n\t\tHashMap<String,Integer> map = new HashMap<>();\n\t\tfor(int i = 0 ; i < edges.length ; i++) {\n\t\t\tint a = edges[i][0];\n\t\t\tint b = edges[i][1];\n\t\t\tif(a>b) {\n\t\t\t\tint temp = a;\n\t\t\t\ta=b;\n\t\t\t\tb=temp;\n\t\t\t}\n\n            String key = a+\"#\"+b;\n            map.put(key, map.getOrDefault(key, 0)+1);\n\t\t}\n\n\t\tint[] ans = new int[queries.length];\n\t\tfor(int i=0; i<queries.length; i++) {\n            int query = queries[i];\n            \n\t\t\tint total = twosum(duplicate, query);\n\t\t\tSet<String> keys = map.keySet(); // a#b\n\t\t\tfor(String edge : keys) {\n\t\t\t\tString[] vtxs = edge.split(\"#\");\n\t\t\t\tint a = Integer.parseInt(vtxs[0]);//1st vertex of the edge \n\t\t\t\tint b = Integer.parseInt(vtxs[1]);//2nd vertex of the edge\n\t\t\t\t\n\t\t\t\tif(indeg[a]+indeg[b]>query && indeg[a]+indeg[b]-map.get(edge)<=query)//if the pair qualified earlier and doesn't qualify when each edge is considered once\n\t\t\t\t{\n\t\t\t\t\ttotal--;\t\n\t\t\t\t}\n\t\t\t}\n\t\t\tans[i]=total;\n\t\t}\n\t\t\n\t\treturn ans;\n    }\n\n     public int twosum(int[] arr,int query)\n\t{\n\t\tint left = 1;//beginning point\n\t\tint right = arr.length-1;//ending point\n\t\tint total = 0;\n\t\twhile(left<right)\n\t\t{\n\t\t\tif(arr[left]+arr[right]>query)\n\t\t\t{\n\t\t\t\ttotal+=(right-left);\n\t\t\t\tright--;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tleft++;\n\t\t\t}\t\t\t\n\t\t}\n\t\treturn total; //pairs with sum of indegrees>query\n\t}\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111","title_slug":"count-pairs-of-nodes","has_notes":false,"flag_type":1}