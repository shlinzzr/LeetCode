{"id":1278394435,"question_id":1694,"lang":"java","lang_name":"Java","time":"1 week","timestamp":1717586718,"status":20,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/1278394435/","is_pending":"Not Pending","title":"Make Sum Divisible by P","memory":"N/A","code":"class Solution {\n    public int minSubarray(int[] nums, int p) {\n\n        // pre-condition\n\n        long sum = 0 ;\n        for(int n : nums)\n            sum += n;\n        long offset = sum%p;\n        if(offset==0) return 0;\n\n        // 100 200 300 307 400 \n        // 100 300 600 907 1307 p=100\n        // target = 7\n\n        // find that cursum - preusm\n        System.out.println (target);\n\n\n        int len = nums.length;\n        Map<Long, Integer> map = new HashMap<>(); // sum, idx\n        map.put(0L, -1);\n        int res = len;\n\n        long[] presum = new long[len];\n        for(int i=0; i<len; i++){\n            presum[i] = i==0 ? nums[i] : presum[i-1] + nums[i];\n\n            long mod =  (presum[i]-target+p)%p;  // +p to avoid negative mod\n\n            // (presum[i]-offset)%p == presum[j] 如果有在map內找到 \n            // 表示 presum[i]-presum[j] 這段中間的subarray 包含了 offset\n            //去掉中間這段 表示前後都可以被p 整除 \n            // => x x x x [x x x x ]  x x x x \n            //          j        i \n            // presum[i] = presum[j] + offset => find( presum[i]-offset )\n\n            if(map.containsKey(mod)){\n                res = Math.min(res, i-map.get(mod));\n            }\n\n            map.put(presum[i]%p, i);\n             System.out.println ( map);\n        }\n        return res == len ? -1 : res;\n\n        \n    }\n}","compare_result":null,"title_slug":"make-sum-divisible-by-p","has_notes":false,"flag_type":1}