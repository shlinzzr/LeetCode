{"id":684540123,"question_id":617,"lang":"java","lang_name":"Java","time":"2 years, 1 month","timestamp":1650512775,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/684540123/","is_pending":"Not Pending","title":"Merge Two Binary Trees","memory":"51.3 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public TreeNode mergeTrees(TreeNode root1, TreeNode root2) {\n        \n        if(root1==null)\n            return root2;\n        if(root2==null)\n            return root1;\n        \n        traversal(root1, root2);\n        \n        return root1;\n    }\n    \n    private void traversal(TreeNode n1, TreeNode n2){\n        \n        n1.val += n2.val;\n        \n        if(n1.left !=null && n2.left!=null){\n            traversal(n1.left, n2.left);\n            \n        }\n        \n        if(n1.right !=null && n2.right!=null){\n            traversal(n1.right, n2.right);\n        }\n        \n        if(n1.left==null && n2.left!=null){\n            n1.left = n2.left;\n        }\n        \n        if(n1.right==null && n2.right!=null){\n            n1.right = n2.right;\n        }\n            \n            \n        \n    } \n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"merge-two-binary-trees","has_notes":false,"flag_type":1}