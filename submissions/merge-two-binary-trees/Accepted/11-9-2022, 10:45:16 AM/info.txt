{"id":839813555,"question_id":617,"lang":"java","lang_name":"Java","time":"1 year, 7 months","timestamp":1667961916,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/839813555/","is_pending":"Not Pending","title":"Merge Two Binary Trees","memory":"52.1 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public TreeNode mergeTrees(TreeNode root1, TreeNode root2) {\n        \n        TreeNode root= new TreeNode();\n        \n         if(root1==null && root2==null){\n             return null;\n         }\n        \n        \n        if(root1!=null && root2!=null){\n            root.val = root1.val+root2.val;\n        }else{\n            \n            if(root2!=null)\n                root.val=root2.val;\n            else\n                root.val=root1.val;\n        }\n        \n        \n        root.left = mergeTrees(root1==null? null : root1.left, root2==null? null : root2.left);\n        root.right = mergeTrees(root1==null? null : root1.right,  root2==null? null : root2.right);\n        \n        return root;\n        \n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"merge-two-binary-trees","has_notes":false,"flag_type":1}