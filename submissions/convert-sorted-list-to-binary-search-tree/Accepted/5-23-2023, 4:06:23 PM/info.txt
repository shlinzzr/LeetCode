{"id":955651891,"question_id":109,"lang":"java","lang_name":"Java","time":"1Â year","timestamp":1684829183,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/955651891/","is_pending":"Not Pending","title":"Convert Sorted List to Binary Search Tree","memory":"44.9 MB","code":"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\n/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public TreeNode sortedListToBST(ListNode head) {\n        if(head==null )\n            return null;\n        \n        if(head.next==null){\n            return new TreeNode(head.val);\n        }\n        \n        ListNode fast = head;\n        ListNode slow = head;\n        \n        ListNode prev = null;\n        while(fast!=null && fast.next!=null){\n            fast = fast.next.next;\n            prev = slow;\n            slow = slow.next;\n        }\n        if(prev!=null)\n            prev.next = null;\n        \n        TreeNode root = new TreeNode(slow.val);\n        \n        root.left = sortedListToBST(head);\n        root.right = sortedListToBST(slow.next);\n        \n        \n        return root;\n    }\n}","compare_result":"11111111111111111111111111111111","title_slug":"convert-sorted-list-to-binary-search-tree","has_notes":false,"flag_type":1}