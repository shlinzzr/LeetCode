{"id":911368874,"question_id":209,"lang":"java","lang_name":"Java","time":"1 year, 3 months","timestamp":1678266574,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/911368874/","is_pending":"Not Pending","title":"Minimum Size Subarray Sum","memory":"N/A","code":"class Solution {\n    public int minSubArrayLen(int target, int[] nums) {\n        int len = nums.length;\n        \n        for(int i=1; i<len; i++){\n            nums[i] += nums[i-1];\n        }\n        // for(int i=0; i<len; i++){\n        //     System.out.println(nums[i]);\n        // }\n        \n        int min = Integer.MAX_VALUE;\n        TreeMap<Integer, Integer> map = new TreeMap<>();\n        \n        for(int i=0; i<len; i++){\n            map.put(nums[i], i);\n            \n            \n            Integer key = map.floorKey(nums[i]-target);\n            if(key!=null)\n                min = Math.min(min, i-map.get(key));\n        }\n        \n        return min==Integer.MAX_VALUE ? 0 : min;\n            \n    \n    }\n}","compare_result":"11110111110100111110","title_slug":"minimum-size-subarray-sum","has_notes":false,"flag_type":1}