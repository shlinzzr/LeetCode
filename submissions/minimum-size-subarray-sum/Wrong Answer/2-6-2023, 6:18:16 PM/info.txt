{"id":892569415,"question_id":209,"lang":"java","lang_name":"Java","time":"1 year, 4 months","timestamp":1675678696,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/892569415/","is_pending":"Not Pending","title":"Minimum Size Subarray Sum","memory":"N/A","code":"class Solution {\n    public int minSubArrayLen(int target, int[] nums) {\n        \n        \n        // presum + sliding window\n        \n        int len = nums.length;\n        \n        int sum =0;\n        \n        int min = Integer.MAX_VALUE;\n        \n        // (st, ed]\n        \n        int st=-1;\n        for(int ed=0; ed<len; ed++){\n            \n            sum+=nums[ed];\n            \n            while(ed>=st && sum>=target){\n                min = Math.min(min, ed-st);\n                st++;\n                sum-=nums[st];\n            }\n        }\n        \n        return min==Integer.MAX_VALUE ? -1 : min;\n            \n        \n        \n    }\n}","compare_result":"11011011111111110111","title_slug":"minimum-size-subarray-sum","has_notes":false,"flag_type":1}