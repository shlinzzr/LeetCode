{"id":809637183,"question_id":300,"lang":"java","lang_name":"Java","time":"1 year, 8 months","timestamp":1664263318,"status":20,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/809637183/","is_pending":"Not Pending","title":"Longest Increasing Subsequence","memory":"N/A","code":"class Solution {\n    public int lengthOfLIS(int[] nums) {\n        \n        // https://leetcode.com/problems/longest-increasing-subsequence/discuss/2395527/3-Approaches%3A-Backtrack-DP-Binary-Search\n        \n        // https://www.youtube.com/watch?v=l2rCz7skAlk\n        // bottom-up dp O(n^2)\n        \n        int[] dp = new int[nums.length];\n        Arrays.fill(dp, 1);\n        int max=0;\n        for(int i=0; i<nums.length;i++){\n            for(int j=0; j<i; j++){\n                \n                if(nums[i]>nums[j]){\n                    dp[i] = Math.max(dp[i], dp[j] +1);    \n                }\n            }\n            \n            max = Math.max(max, dp[i]);\n            \n        }\n        \n        return max;\n        \n    }\n}\n\n\n// // binarySearch O(nlogn)\n\n// class Solution {\n//     public int lengthOfLIS(int[] nums) {\n        \n//         int[] tail = new int[nums.length];\n//         tail[0] = nums[0];\n//         int maxLen = 1;\n        \n//          for (int i = 1; i < nums.length; i++) {\n//             if (nums[i] > tail[maxLen - 1]) { // if(cur>tail) append @ tail\n//                 tail[maxLen] = nums[i];\n//                 maxLen++;\n                \n                \n//             } else {  // find the current number in tail array , replace by nums[i]\n//                 int left = 0;\n//                 int right = maxLen - 1;\n//                 while (left < right) {\n//                     int mid = left + (right - left) / 2;\n//                     if (tail[mid] < nums[i]) {\n//                         left = mid + 1;\n//                     } else {\n//                         right = mid;\n//                     }\n//                 }\n\n//                 tail[left] = nums[i];\n//             }\n//         }\n        \n//         return maxLen;\n        \n//     }\n    \n   \n    \n}","compare_result":null,"title_slug":"longest-increasing-subsequence","has_notes":false,"flag_type":1}