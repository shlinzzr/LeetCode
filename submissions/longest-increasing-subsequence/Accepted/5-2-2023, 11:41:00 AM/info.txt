{"id":942979372,"question_id":300,"lang":"java","lang_name":"Java","time":"1 year, 1 month","timestamp":1682998860,"status":10,"status_display":"Accepted","runtime":"6 ms","url":"/submissions/detail/942979372/","is_pending":"Not Pending","title":"Longest Increasing Subsequence","memory":"42.6 MB","code":"class Solution {\n    public int lengthOfLIS(int[] nums) {\n        \n//          solution1 : O(n^2) : 70ms\n//         int len = nums.length;\n        \n//         int[] dp = new int[len];\n//         Arrays.fill(dp, 1);\n        \n//         for(int ed= 0; ed<len; ed++){\n//             for(int st=0; st<ed; st++){\n//                 if(nums[ed]>nums[st])\n//                     dp[ed] = Math.max(dp[ed], dp[st]+1);\n//             }\n//         }\n//         int longest = 0;\n//         for (int c: dp) {\n//             longest = Math.max(longest, c);\n//         }\n//         return longest;\n        \n        /*\n        // solution 2 O(n^2) with Intelligently subseq : 7ms\n        ArrayList<Integer> sub = new ArrayList<>();\n        sub.add(nums[0]);\n        \n        for (int i = 1; i < nums.length; i++) {\n            int num = nums[i];\n            if (num > sub.get(sub.size() - 1)) {\n                sub.add(num);\n            } else {\n                // Find the first element in sub that is greater than or equal to num\n                int j = 0;\n                while (num > sub.get(j)) {\n                    j += 1;\n                }\n                \n                sub.set(j, num);\n            }\n        }\n        \n        return sub.size();\n        */\n        \n        // solution 3:   same with sol2 .... but : O(nlgn) improve with binary search\n        ArrayList<Integer> sub = new ArrayList<>();\n        sub.add(nums[0]);\n        \n        for (int i = 1; i < nums.length; i++) {\n            int num = nums[i];\n            if (num > sub.get(sub.size() - 1)) {\n                sub.add(num);\n            } else {\n                int j = binarySearch(sub, num);\n                sub.set(j, num);\n            }\n        }\n        \n        return sub.size();\n    }\n    \n    private int binarySearch(ArrayList<Integer> sub, int num) {\n        int left = 0;\n        int right = sub.size() - 1;\n        \n        while (left < right) {\n            int mid = (left + right) / 2;\n            if (sub.get(mid) == num) {\n                return mid;\n            }\n            \n            if (sub.get(mid) < num) {\n                left = mid + 1;\n            } else {\n                right = mid;\n            }\n        }\n        \n        return left;\n        \n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111","title_slug":"longest-increasing-subsequence","has_notes":false,"flag_type":1}