{"id":1137327217,"question_id":300,"lang":"java","lang_name":"Java","time":"5 months, 1 week","timestamp":1704433685,"status":10,"status_display":"Accepted","runtime":"6 ms","url":"/submissions/detail/1137327217/","is_pending":"Not Pending","title":"Longest Increasing Subsequence","memory":"43.8 MB","code":"class Solution {\n    public int lengthOfLIS(int[] nums) {\n        int len = nums.length;\n\n        List<Integer> list= new ArrayList<>();\n\n        for(int i=0; i<len; i++){\n\n            if(list.isEmpty()){\n                list.add(nums[i]);\n            }else if(list.get(list.size()-1)<nums[i]){\n                list.add(nums[i]);\n\n            }else {\n                int idx = binarySearch(list, nums[i]);\n                list.set(idx, nums[i]);\n            }\n        }\n\n        return list.size();\n    }\n\n\n    private int binarySearch(List<Integer> list, int n){\n\n        int st = 0, ed = list.size()-1;\n\n\n        // 1 3 5, insert 4\n\n        while(st<ed){\n            int mid = st + (ed-st)/2;\n\n            if(list.get(mid)<n){\n                st = mid+1;\n            }else{\n                ed = mid;\n            }\n\n        }\n\n        return st;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111","title_slug":"longest-increasing-subsequence","has_notes":false,"flag_type":1}