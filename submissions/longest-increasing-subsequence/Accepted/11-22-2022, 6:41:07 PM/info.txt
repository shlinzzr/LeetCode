{"id":847966875,"question_id":300,"lang":"java","lang_name":"Java","time":"1 year, 6 months","timestamp":1669113667,"status":10,"status_display":"Accepted","runtime":"78 ms","url":"/submissions/detail/847966875/","is_pending":"Not Pending","title":"Longest Increasing Subsequence","memory":"43.5 MB","code":"class Solution {\n    public int lengthOfLIS(int[] nums) {\n        int len  = nums.length;\n        \n        \n        int[] dp = new int[len];\n        Arrays.fill(dp, 1);\n        int max=0;\n        for(int i=0; i<len;i++){\n            for(int j=0; j<i; j++){\n                \n                if(nums[i]>nums[j]){\n                    dp[i] = Math.max(dp[i], dp[j] +1);    \n                }\n            }\n            \n            max = Math.max(max, dp[i]);\n            \n        }\n        \n        return max;\n        \n        \n        \n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111","title_slug":"longest-increasing-subsequence","has_notes":false,"flag_type":1}