{"id":768065398,"question_id":300,"lang":"java","lang_name":"Java","time":"1 year, 10 months","timestamp":1659928555,"status":10,"status_display":"Accepted","runtime":"85 ms","url":"/submissions/detail/768065398/","is_pending":"Not Pending","title":"Longest Increasing Subsequence","memory":"44.7 MB","code":"class Solution {\n    public int lengthOfLIS(int[] nums) {\n        \n        // https://leetcode.com/problems/longest-increasing-subsequence/discuss/2395527/3-Approaches%3A-Backtrack-DP-Binary-Search\n        \n        // https://www.youtube.com/watch?v=l2rCz7skAlk\n        \n        \n        int[] dp = new int[nums.length];\n        Arrays.fill(dp, 1);\n        int max=0;\n        for(int i=0; i<nums.length;i++){\n            \n            for(int j=0; j<i; j++){\n                \n                if(nums[i]>nums[j]){\n                    dp[i] = Math.max(dp[i], dp[j] +1);    \n                }\n            }\n            \n            max = Math.max(max, dp[i]);\n            \n        }\n        \n        return max;\n        \n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111","title_slug":"longest-increasing-subsequence","has_notes":false,"flag_type":1}