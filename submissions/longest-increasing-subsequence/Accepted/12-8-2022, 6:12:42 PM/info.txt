{"id":856573966,"question_id":300,"lang":"java","lang_name":"Java","time":"1 year, 6 months","timestamp":1670494362,"status":10,"status_display":"Accepted","runtime":"74 ms","url":"/submissions/detail/856573966/","is_pending":"Not Pending","title":"Longest Increasing Subsequence","memory":"44.4 MB","code":"class Solution {\n    public int lengthOfLIS(int[] nums) {\n        \n        int res=0;\n        \n        int len = nums.length;\n        int[] dp = new int[len+1];\n        Arrays.fill(dp, 1);\n        // dp[i]定義為以i為最後一個element的時候 最長的LIS\n        for(int i=0; i<len; i++){\n            for(int j=0; j<i; j++){\n                \n               if(nums[i]>nums[j]){\n                   dp[i] = Math.max(dp[i], dp[j]+1);\n               }\n            }\n            \n            res = Math.max(res, dp[i]);\n        }\n        \n        return res;\n        \n        \n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111","title_slug":"longest-increasing-subsequence","has_notes":false,"flag_type":1}