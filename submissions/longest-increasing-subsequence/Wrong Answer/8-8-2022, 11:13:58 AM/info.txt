{"id":768064306,"question_id":300,"lang":"java","lang_name":"Java","time":"1 year, 10 months","timestamp":1659928438,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/768064306/","is_pending":"Not Pending","title":"Longest Increasing Subsequence","memory":"N/A","code":"class Solution {\n    public int lengthOfLIS(int[] nums) {\n        int[] dp = new int[nums.length];\n        Arrays.fill(dp, 1);\n        \n        for(int i=0; i<nums.length;i++){\n            \n            for(int j=0; j<i; j++){\n                \n                if(nums[i]>nums[j]){\n                    dp[i] = Math.max(dp[i], dp[j] +1);    \n                }\n            }\n        }\n        \n        return dp[nums.length-1];\n        \n    }\n}","compare_result":"111111111111111011111111001111011111001000000000001000","title_slug":"longest-increasing-subsequence","has_notes":false,"flag_type":1}