{"id":942973301,"question_id":300,"lang":"java","lang_name":"Java","time":"1 year, 1 month","timestamp":1682997926,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/942973301/","is_pending":"Not Pending","title":"Longest Increasing Subsequence","memory":"N/A","code":"class Solution {\n    public int lengthOfLIS(int[] nums) {\n        int len = nums.length;\n        \n        int[] dp = new int[len];\n        Arrays.fill(dp, 1);\n        \n        for(int ed= 0; ed<len; ed++){\n            for(int st=0; st<ed; st++){\n                \n                if(nums[ed]>nums[st])\n                    dp[ed] = Math.max(dp[ed], dp[st]+1);\n            }\n        }\n        \n        \n        \n        \n        \n        return dp[len-1];\n        \n    }\n}","compare_result":"111111111111111011111111001111011111001000000000001000","title_slug":"longest-increasing-subsequence","has_notes":false,"flag_type":1}