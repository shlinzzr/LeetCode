{"id":888616140,"question_id":300,"lang":"java","lang_name":"Java","time":"1 year, 4 months","timestamp":1675151333,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/888616140/","is_pending":"Not Pending","title":"Longest Increasing Subsequence","memory":"N/A","code":"class Solution {\n    public int lengthOfLIS(int[] nums) {\n        int len = nums.length;\n        int[] dp = new int[len];\n        dp[0]=1;\n        for(int i=1; i<len;i++){\n            \n            dp[i]=1;\n            for(int j=0; j<i;j++){\n                if(nums[j]<nums[i]){\n                    dp[i]=dp[j]+1;\n                }\n            }\n            \n        }\n        \n        int res = 0;\n        for(int n : dp){\n            res = Math.max(res, n);\n        }\n        return res;\n    }\n}","compare_result":"101111111111111010010111111111101110000000000000000000","title_slug":"longest-increasing-subsequence","has_notes":false,"flag_type":1}