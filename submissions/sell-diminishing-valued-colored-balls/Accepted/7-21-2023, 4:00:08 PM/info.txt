{"id":1000004411,"question_id":1771,"lang":"java","lang_name":"Java","time":"10 months, 3 weeks","timestamp":1689926408,"status":10,"status_display":"Accepted","runtime":"37 ms","url":"/submissions/detail/1000004411/","is_pending":"Not Pending","title":"Sell Diminishing-Valued Colored Balls","memory":"54.5 MB","code":"class Solution {\n      public int maxProfit(int[] inventory, int orders) {\n        int lo = 1, hi = Arrays.stream(inventory).max().getAsInt();\n        Arrays.sort(inventory);\n\n        while (lo < hi) {\n            int mid = lo + (hi - lo + 1) / 2;\n            if (getCount(inventory, mid) < orders)\n                hi = mid - 1;\n            else\n                lo = mid;\n        }\n\n        int minPrice = lo, ordered = 0;\n        long profit = 0;\n\n        for (int i = inventory.length - 1; i >= 0; i--) {\n            int curPrice = inventory[i];\n            if (curPrice <= minPrice) break;\n            profit += (long) (curPrice + minPrice + 1) * (curPrice - minPrice) / 2;\n            ordered += curPrice - minPrice;\n        }\n\n        profit += (long) minPrice * (orders - ordered);\n        profit = profit % 1000000007;\n        return (int) profit;\n    }\n\n    private long getCount(int[] inventory, int mid) {\n        long count = 0;\n        for (int i = inventory.length - 1; i >= 0; i--) {\n            if (inventory[i] < mid) break;\n            count += inventory[i] - mid + 1;\n        }\n        return count;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"sell-diminishing-valued-colored-balls","has_notes":false,"flag_type":1}