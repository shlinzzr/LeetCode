{"id":1051024442,"question_id":3081,"lang":"java","lang_name":"Java","time":"9Â months","timestamp":1694878632,"status":10,"status_display":"Accepted","runtime":"138 ms","url":"/submissions/detail/1051024442/","is_pending":"Not Pending","title":"Minimum Array Length After Pair Removals","memory":"59.6 MB","code":"class Solution {\n    public int minLengthAfterRemovals(List<Integer> nums) {\n        \n//         int len = nums.size();\n//         HashMap<Integer, Integer> map = new HashMap<>();\n//         for(int n : nums){\n//             map.put(n, map.getOrDefault(n,0)+1);\n//         }\n        \n//         List<Integer> list = new ArrayList<>(map.keySet());\n//         int prev = map.get(list.get(0));\n//         for(int i=1; i<list.size(); i++){\n            \n//         }\n        \n        \n        \n        \n        int len = nums.size();\n        HashMap<Integer, Integer> map = new HashMap<>();\n        for(int n : nums){\n            map.put(n, map.getOrDefault(n,0)+1);\n        }\n        \n        PriorityQueue<Map.Entry<Integer, Integer>> pq = new PriorityQueue<>(\n            (a,b)-> b.getValue()-a.getValue()\n        );\n        // pq.addAll(map.entrySet());\n        \n        \n      \n        \n        // HashSet<Integer> rm = new HashSet<>();\n        \n//         HashMap<Integer, List<Integer>> valmap = new HashMap<>();\n//         for(Map.Entry<Integer, Integer> en : map.entrySet()){\n            \n//             int k = en.getKey();\n//             int v = en.getValue();\n            \n//             valmap.putIfAbsent(v, new ArrayList<>());\n//             valmap.get(v).add(k);\n//             if(valmap.get(v).size()>=3 && v%2==0)\n//                 // rm.addAll(valmap.get(v));\n//                 rm.add(v);\n//         }\n        \n        // System.out.println(valmap.values());\n        //  System.out.println(rm);\n        \n        \n//         HashMap<Integer, Integer> tmp = new HashMap<>();\n        \n//         for(Map.Entry<Integer, Integer> en : map.entrySet()){\n             \n//             int k = en.getKey();\n//             int v = en.getValue();\n            \n//             if(rm.contains(v))\n//                 continue;\n//             else\n//                 tmp.put(k,v);\n            \n//         }\n        \n        pq.addAll(map.entrySet());\n        \n        // 2 2 2 3 3 3 4 4 4\n        // 23 24 34\n        \n        while(pq.size()>=2){\n            Map.Entry<Integer, Integer> en1 = pq.poll();\n            Map.Entry<Integer, Integer> en2 = pq.poll();\n            \n            // System.out.println(en1.getKey() + \" \" + en1.getValue()+ \" ...\"+ en2.getKey() + \":\"+en2.getValue());\n            \n            // if(en1.getValue()==en2.getValue()){\n                 en1.setValue(en1.getValue()-1);\n                en2.setValue(en2.getValue()-1);\n                \n                if(en1.getValue()>0)\n                  pq.offer(en1);\n                 if(en2.getValue()>0)\n                 pq.offer(en2);\n                \n//             }else if(en1.getValue()>en2.getValue()){\n//                 en1.setValue(en1.getValue()-en2.getValue());\n//                 pq.offer(en1);\n                \n//             }else if(en2.getValue()>en1.getValue()){\n//                 en2.setValue(en2.getValue()-en1.getValue());\n//                 pq.offer(en2);\n            // }\n        }\n        \n        if(pq.size()==0)\n            return 0;\n        \n        return pq.peek().getValue();\n    }\n    \n    //[1,1,2,2,3,3,3]\n}","compare_resulttitle_slug":"minimum-array-length-after-pair-removals","has_notes":false,"flag_type":1}