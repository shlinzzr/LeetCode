{"id":1257480520,"question_id":1331,"lang":"java","lang_name":"Java","time":"4 weeks, 1 day","timestamp":1715659762,"status":10,"status_display":"Accepted","runtime":"78 ms","url":"/submissions/detail/1257480520/","is_pending":"Not Pending","title":"Path with Maximum Gold","memory":"41.9 MB","code":"class Solution {\n    public int getMaximumGold(int[][] grid) {\n        \n        boolean visited[][] = new boolean[grid.length][grid[0].length];\n        \n        int maxSum = -1;\n        for(int i = 0; i < grid.length; i++) {\n            for(int j = 0; j < grid[0].length; j++) {\n                    visited = new boolean[grid.length][grid[0].length];\n                    maxSum = Math.max(maxSum,DFS(i,j,visited,grid));\n            }\n        }\n        return maxSum;\n    }\n    \n    int DFS(int i,int j, boolean[][] visited, int grid[][]) {\n        if(i < 0 || j < 0 || i >= grid.length || j >= grid[0].length || grid[i][j] == 0 || visited[i][j])\n            return 0;\n        \n        visited[i][j] = true;\n        int temp = -1;\n        temp = Math.max(temp,grid[i][j]+DFS(i+1,j,visited,grid));\n        temp = Math.max(temp,grid[i][j]+DFS(i-1,j,visited,grid));\n        temp = Math.max(temp,grid[i][j]+DFS(i,j+1,visited,grid));\n        temp = Math.max(temp,grid[i][j]+DFS(i,j-1,visited,grid));\n        visited[i][j] = false;\n        return temp;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111","title_slug":"path-with-maximum-gold","has_notes":false,"flag_type":1}