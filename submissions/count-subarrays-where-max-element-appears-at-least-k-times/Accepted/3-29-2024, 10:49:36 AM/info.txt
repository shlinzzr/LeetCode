{"id":1216907279,"question_id":3213,"lang":"java","lang_name":"Java","time":"2 months, 2 weeks","timestamp":1711680576,"status":10,"status_display":"Accepted","runtime":"549 ms","url":"/submissions/detail/1216907279/","is_pending":"Not Pending","title":"Count Subarrays Where Max Element Appears at Least K Times","memory":"60.3 MB","code":"class Solution {\n    public long countSubarrays(int[] nums, int k) {\n\n        int max = 0;\n        for(int n : nums){\n            max = Math.max(max, n);\n        }\n            \n\n        long res = 0;\n        int len = nums.length;\n\n        TreeMap<Integer, Integer> map = new TreeMap<>();\n\n        int ed= 0;\n        for(int st = 0; st<len; st++){\n\n            while(ed<len &&  map.getOrDefault(max,0)<k){\n                map.put(nums[ed], map.getOrDefault(nums[ed],0)+1);\n                ed++;\n            }\n\n            if(map.getOrDefault(max,0)>=k){\n                res+=len-ed+1;\n            }\n            // System.out.println(res);\n\n            map.put(nums[st], map.get(nums[st])-1);\n            if(map.get(nums[st])==0) map.remove(nums[st]);\n        }\n\n        return res;\n    }\n}","compare_resulttitle_slug":"count-subarrays-where-max-element-appears-at-least-k-times","has_notes":false,"flag_type":1}