{"id":1116171251,"question_id":3213,"lang":"java","lang_name":"Java","time":"6Â months","timestamp":1702179041,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1116171251/","is_pending":"Not Pending","title":"Count Subarrays Where Max Element Appears at Least K Times","memory":"N/A","code":"class Solution {\n    public long countSubarrays(int[] nums, int k) {\n        \n        TreeMap<Integer, Integer> map = new TreeMap<>();// nums[i], freq\n        \n        TreeMap<Integer, Set<Integer>> fmap = new TreeMap<>(); // freq , Set<nums[i]>\n        \n        int len = nums.length;\n        \n        int res = 0;\n        int ed =0;\n       \n        for(int st=0; st<len;st++){\n            \n            \n            while(ed==0 || (ed<len && map.get(map.lastKey())<k)){\n                \n                map.put(nums[ed], map.getOrDefault(nums[ed],0)+1);\n                int f = map.get(nums[ed]);\n                fmap.putIfAbsent(f, new HashSet<>());\n                fmap.get(f).add(nums[ed]);\n                \n                ed++;\n                \n            }\n            // System.out.println(st + \" \"+ed + \" res=\"+fmap.lastKey());\n//             \n            \n            //= [1,3,2,3,3], k = 2\n                  // ed\n            \n            if(fmap.lastKey()>=k)\n                res+=len-ed+1;\n            \n             // System.out.println(st + \" \"+(ed-1) + \" res=\"+res);\n//            \n            \n            int f = map.get(nums[st]);\n            fmap.get(f).remove(nums[st]);\n            if(fmap.get(f).size()==0)\n                fmap.remove(f);\n                                    \n            map.put(nums[st], map.getOrDefault(nums[st],0)-1);\n           \n            \n          \n        }\n        \n        return res;\n            \n    }\n}","compare_resulttitle_slug":"count-subarrays-where-max-element-appears-at-least-k-times","has_notes":false,"flag_type":1}