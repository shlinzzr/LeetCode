{"id":718529044,"question_id":3,"lang":"java","lang_name":"Java","time":"2Â years","timestamp":1654826627,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/718529044/","is_pending":"Not Pending","title":"Longest Substring Without Repeating Characters","memory":"43.7 MB","code":"// class Solution { // 116ms\n//     public int lengthOfLongestSubstring(String s) {\n        \n//         int max = 0;\n//         for(int i=0; i<s.length(); i++){\n            \n//             HashSet<Character> set = new HashSet<>();\n            \n//             for(int j=i; j<s.length(); j++){\n                \n//                 if(set.contains(s.charAt(j))){\n//                     break;\n//                 }\n                \n//                 set.add(s.charAt(j));\n                \n//             }\n            \n//             if(set.size()>max)\n//                 max = set.size();\n            \n            \n//         }\n        \n//         return max;\n//     }\n// }\n\n// class Solution {  //  11ms\n//     public int lengthOfLongestSubstring(String s) {\n        \n//         int max = 0;\n        \n//         HashMap<Character, Integer> map = new HashMap<>();\n        \n//         for(int i=0, j=0; i<s.length(); i++){\n            \n//              // i=0, i=1, i=2, i=3\n            \n//             if(map.containsKey(s.charAt(i))){ // a, b\n//                 j = Math.max(j, map.get(s.charAt(i))+1);  // j=2,  j=1\n//             }\n            \n//             map.put(s.charAt(i), i);   // (a,0) (b,1)->(b,2)\n//             max = Math.max(max , i-j+1);\n                \n//         }\n        \n//         return max;\n//     }\n// }\n\nclass Solution {  //  1ms\n    public int lengthOfLongestSubstring(String s) {\n        \n        if(s.length()<=1)\n            return s.length();\n        \n        int left=0, right=0, max = 0;\n        int[] chars = new int[128];\n        \n        while(right < s.length()){\n\n                        \n            char c = s.charAt(right);\n            if(chars[c] >0){\n                left = Math.max(left, chars[c]);\n            }\n            \n            max = Math.max(max , right-left+1); //1\n            chars[c] = ++right;\n        }\n        \n        return max;\n    }\n}","compare_resulttitle_slug":"longest-substring-without-repeating-characters","has_notes":false,"flag_type":1}