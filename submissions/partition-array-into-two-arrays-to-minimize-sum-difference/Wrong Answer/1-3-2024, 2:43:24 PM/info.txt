{"id":1135373728,"question_id":2162,"lang":"java","lang_name":"Java","time":"5 months, 1 week","timestamp":1704264204,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1135373728/","is_pending":"Not Pending","title":"Partition Array Into Two Arrays to Minimize Sum Difference","memory":"N/A","code":"class Solution {\n\n    int min = Integer.MAX_VALUE;\n    long total = 0;\n    public int minimumDifference(int[] nums) {\n        int len = nums.length;\n\n        int n = len/2;\n\n        \n        for(int i=0; i<len; i++){\n            total+= nums[i];\n        }\n\n        // Long[][] dp = new Long[31][(1<<30)];\n\n        dfs(nums, 0, 0, 0);\n\n        return min;\n    }\n\n    private void dfs(int[] nums, int idx, int state, long cur/*, Long[][] dp*/){\n\n        if(idx==nums.length){\n            long a = total-cur;\n            min = (int) Math.min(min, Math.abs(a-cur));\n            return ;\n        }\n\n        // if(dp[idx][state]!=null) return;\n\n        for(int i=0; i<nums.length; i++){\n            if((state & (1<<i))==0){\n                int nextState = (state | (1<<i));\n                dfs(nums, idx+1, nextState, cur+nums[i]);\n            }\n        }\n\n        // dp[idx][state] = min;\n        // return;\n\n    }\n\n    \n\n}","compare_result":"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"partition-array-into-two-arrays-to-minimize-sum-difference","has_notes":false,"flag_type":1}