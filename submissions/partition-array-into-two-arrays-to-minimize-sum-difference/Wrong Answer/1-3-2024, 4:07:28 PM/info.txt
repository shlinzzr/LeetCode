{"id":1135438769,"question_id":2162,"lang":"java","lang_name":"Java","time":"5 months, 1 week","timestamp":1704269248,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1135438769/","is_pending":"Not Pending","title":"Partition Array Into Two Arrays to Minimize Sum Difference","memory":"N/A","code":"class Solution {\n    public int minimumDifference(int[] nums) {\n        int len = nums.length;\n        int n = len/2;\n\n        List<Integer> nums1 = new ArrayList<>();\n        List<Integer> nums2 = new ArrayList<>();\n        for(int i=0; i<n; i++)\n            nums1.add(nums[i]);\n        for(int i=n; i<2*n; i++)\n            nums2.add(nums[i]);\n\n        Map<Long, TreeSet<Long>> map2 = helper(nums2); //挑幾個數字, List<sum是多少>\n        long sum = accmulate(nums);\n        long ret = Long.MAX_VALUE;\n\n\n        // 前面15個挑i個, 32767種排列組合 後面15個挑n-i=j個 \n        for(int state=0; state<(1<<n); state++){\n            long x = 0;\n            int i = popcnt(state); //算挑幾個\n            for(int k=0; k<n; k++){\n                if( ((state>>k)&1) ==0 ){\n                    x+=(long)nums1.get(k);\n                }\n            }\n\n            long j=n-i;\n            Long key = map2.get(j).floor(sum/2-x);\n            if(key!=null){\n                ret = Math.min(ret, Math.abs(key*x + 2*x-sum));\n            }\n            if(key!=null && key!=map2.get(j).first()){\n                key = map2.get(j).lower(key);\n                ret = Math.min(ret, Math.abs(key*2+2*x-sum));\n            }\n        }\n\n        return (int)ret;\n        \n    }\n\n    private int popcnt(int state){\n        int cnt = 0;\n        while(state>0){\n            cnt += state&1;\n            state>>=1;\n        }\n        return cnt;\n    }\n\n    private long accmulate(int[] nums){\n        long sum = 0 ;\n        for(int n : nums){\n            sum += (long)n;\n        }\n        return sum;\n    }\n\n    private TreeMap<Long, TreeSet<Long>> helper(  List<Integer> nums){\n        TreeMap<Long, TreeSet<Long>> map = new TreeMap<>();\n        int n = nums.size();\n        for(int state=0; state<(1<<n); state++){\n            long sum = 0 ;\n            int k = popcnt(state);\n            for(int i=0; i<n; i++){\n                if((((state>>i)&1) ==1))\n                    sum += (long) nums.get(i);\n            }\n\n            map.putIfAbsent((long)k, new TreeSet<>());\n            map.get((long)k).add(sum);\n        }\n\n        return map;\n\n    }\n}","compare_result":"001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001100101110000000000000000000000000000000000000000000","title_slug":"partition-array-into-two-arrays-to-minimize-sum-difference","has_notes":false,"flag_type":1}