{"id":1208969113,"question_id":2175,"lang":"java","lang_name":"Java","time":"2 months, 3 weeks","timestamp":1710926871,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1208969113/","is_pending":"Not Pending","title":"Count Nodes With the Highest Score","memory":"N/A","code":"class Solution {\n     Map<Integer, List<Integer>> g ;\n     Map<Integer, Integer> cntMap;\n     Map<Integer, List<Integer>> childCnt;\n    public int countHighestScoreNodes(int[] parents) {\n        g = new HashMap<>();\n        cntMap = new HashMap<>();\n        childCnt = new HashMap<>();\n\n        int len = parents.length;\n        for(int i=1; i<len ;i++){\n            g.putIfAbsent(i , new ArrayList());\n            g.get(i).add(parents[i]);\n        }\n\n        int sum = getCnt(0);\n\n        int res = 0;\n        for(int i=0; i<len ;i++){\n            int ans = sum-cntMap.getOrDefault(i,1);\n\n            int tmp = 1;\n            for(int child : childCnt.get(i)){\n                tmp*=child;\n            }\n\n            if(ans!=0)\n                tmp*=ans;\n            res += tmp;\n\n        }\n\n        return res;\n\n        \n    }\n\n    private int getCnt(int cur){ // 包含自己的個數\n        if(!g.containsKey(cur)){\n            return 1;\n        }\n\n\n        childCnt.putIfAbsent(cur, new ArrayList<>());\n        int sum =1 ;\n        for(int child : g.get(cur)){\n            int cnt = getCnt(child);\n            childCnt.get(cur).add(cnt);\n            sum += cnt;\n        }\n\n        cntMap.put(cur, sum);\n        return sum;\n\n    }\n}","compare_result":"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"count-nodes-with-the-highest-score","has_notes":false,"flag_type":1}