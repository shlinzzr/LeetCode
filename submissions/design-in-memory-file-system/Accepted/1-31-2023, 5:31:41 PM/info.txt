{"id":888658192,"question_id":588,"lang":"java","lang_name":"Java","time":"1 year, 4 months","timestamp":1675157501,"status":10,"status_display":"Accepted","runtime":"48 ms","url":"/submissions/detail/888658192/","is_pending":"Not Pending","title":"Design In-Memory File System","memory":"43.2 MB","code":"class FileSystem {\n\n    \n    TrieNode root;\n    \n    \n    class TrieNode{\n        TreeMap<String, TrieNode> map;\n        String self=\"\";\n        boolean isFile;\n        String content;\n        \n        public TrieNode(String self){\n            map= new TreeMap<>();\n            this.self = self;\n            isFile=false;      \n            content=null;\n        }\n    }\n    \n    \n    \n    public FileSystem() {\n        root = new TrieNode(\"//\");\n        \n    }\n    \n    public List<String> ls(String path) {\n         System.out.println(\"path=\"+path);\n        \n        //file , dir in lexicographic order\n        \n        List<String> res = new ArrayList<>();\n        TrieNode node = root;\n        \n        \n        if(!path.equals(\"/\")){\n             String[] parr = path.split(\"/\");\n            int i=1;\n            while(i<parr.length){\n                \n                System.out.println(\"parr[i]=\"+parr[i]);\n                \n                if(node.map.containsKey(parr[i])){\n                    node = node.map.get(parr[i]);\n                    i++;\n                }else{\n                    return new ArrayList<>();\n                }\n            }\n        }\n        \n        System.out.println(node.map.keySet().size());\n        if(node.isFile==true){\n            res.add(node.self);\n        }else{\n            System.out.println(node.map.keySet().size());\n            for(String k : node.map.keySet()){\n                res.add(k);\n            }\n        }\n        \n        return res;\n    }\n    \n    public void mkdir(String path) {\n        \n        String[] parr = path.split(\"/\");\n        TrieNode node = root;\n        int i=1;\n        \n        while(i<parr.length){\n            \n            if(!node.map.containsKey(parr[i])){\n                node.map.put(parr[i], new TrieNode(parr[i]));\n            }\n            node = node.map.get(parr[i]);\n            i++;\n        }\n        \n        \n        \n    }\n    \n    public void addContentToFile(String filePath, String content) {\n        \n        String[] parr = filePath.split(\"/\");\n        TrieNode node = root;\n        int i=1;\n        while(i<parr.length){\n            System.out.println(\"add parr[i]=\"+parr[i]);\n            if(!node.map.containsKey(parr[i])){\n                node.map.put(parr[i], new TrieNode(parr[i]));\n            }\n            node = node.map.get(parr[i]);\n            i++;\n        }\n        node.isFile=true;\n        node.content= node.content==null? content: node.content + content;\n    }\n    \n    public String readContentFromFile(String filePath) {\n        \n        String[] parr = filePath.split(\"/\");\n        TrieNode node = root;\n        int i=1;\n        while(i<parr.length){\n            if(node.map.containsKey(parr[i])){\n                node = node.map.get(parr[i]);\n                i++;\n            }else{\n                return null;\n            }\n        }\n        \n        if(node.isFile==false)\n            return null;\n        \n        return node.content;\n        \n    }\n}\n\n/**\n * Your FileSystem object will be instantiated and called as such:\n * FileSystem obj = new FileSystem();\n * List<String> param_1 = obj.ls(path);\n * obj.mkdir(path);\n * obj.addContentToFile(filePath,content);\n * String param_4 = obj.readContentFromFile(filePath);\n */","compare_result":"111111111111111111111111111111111111111111111111111111111111111","title_slug":"design-in-memory-file-system","has_notes":false,"flag_type":1}