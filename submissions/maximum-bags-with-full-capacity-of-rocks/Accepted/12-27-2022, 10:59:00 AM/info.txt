{"id":866091992,"question_id":2366,"lang":"java","lang_name":"Java","time":"1 year, 5 months","timestamp":1672109940,"status":10,"status_display":"Accepted","runtime":"15 ms","url":"/submissions/detail/866091992/","is_pending":"Not Pending","title":"Maximum Bags With Full Capacity of Rocks","memory":"54.3 MB","code":"class Solution {\n    public int maximumBags(int[] capacity, int[] rocks, int additionalRocks) {\n        int len = capacity.length;\n        int[] need = new int[len];\n        \n        for(int i=0;i<len; i++){\n            need[i] = capacity[i]-rocks[i];\n        }\n        \n        Arrays.sort(need);\n        \n        \n        int res=0;\n        for(int i=0; i<len && additionalRocks>0; i++){\n            \n            if(need[i]==0){\n                res++;\n                continue;\n            }\n                \n            \n            else if(need[i]>0 && additionalRocks>=need[i]){\n                additionalRocks-=need[i];\n                res++;\n            }else{\n                break;\n            }\n        }\n        \n        return res;\n            \n        \n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-bags-with-full-capacity-of-rocks","has_notes":false,"flag_type":1}