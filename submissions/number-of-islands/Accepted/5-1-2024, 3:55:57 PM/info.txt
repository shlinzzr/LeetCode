{"id":1246354887,"question_id":200,"lang":"java","lang_name":"Java","time":"1 month, 1 week","timestamp":1714550157,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/1246354887/","is_pending":"Not Pending","title":"Number of Islands","memory":"49.4 MB","code":"class Solution {\n    public int numIslands(char[][] grid) {\n        int h = grid.length;\n        int w = grid[0].length;\n        \n        int cnt= 0 ;\n        boolean[][] seen = new boolean[h][w];\n        for(int i=0; i<h; i++){\n            for(int j=0; j<w; j++){\n                \n                if(grid[i][j]=='1' && seen[i][j]==false){\n                    dfs(grid, i, j, seen);\n                    cnt++;\n                }\n                \n            }\n        }\n        \n        return cnt;\n        \n    }\n    \n    int[][] dirs = new int[][]{{0,1},{1,0},{0,-1},{-1,0}};\n    private void dfs(char[][] grid, int i, int j, boolean[][]seen){\n        \n        int h = grid.length;\n        int w = grid[0].length; \n        \n        seen[i][j] = true;\n        \n        for(int[] d : dirs){\n            int r = i+d[0];\n            int c = j+d[1];\n            \n            if(r<0 || c<0 || r>=h || c>=w || seen[r][c] || grid[r][c]=='0') continue;\n            dfs(grid, r, c , seen);\n        }\n        \n        \n        \n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111","title_slug":"number-of-islands","has_notes":false,"flag_type":1}