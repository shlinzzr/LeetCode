{"id":951338983,"question_id":200,"lang":"java","lang_name":"Java","time":"1Â year","timestamp":1684230512,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/951338983/","is_pending":"Not Pending","title":"Number of Islands","memory":"51.4 MB","code":"class Solution {\n    public int numIslands(char[][] grid) {\n        \n        int h = grid.length;\n        int w = grid[0].length;\n        \n        boolean[][] seen = new boolean[h][w];\n        \n        int cnt = 0;\n        \n        for(int i=0; i<h; i++){\n            for(int j=0; j<w; j++){\n                \n                if(grid[i][j]=='1' && seen[i][j]==false){\n                    cnt++;\n                    bfs(grid, i, j, seen);\n                }\n            }\n        }\n        \n        return cnt;\n        \n        \n    }\n    \n    \n    private void bfs(char[][] grid, int i, int j, boolean[][] seen){\n        int h = grid.length;\n        int w = grid[0].length;\n        \n        if(i<0 || j<0 || i>=h || j>=w || seen[i][j] || grid[i][j]=='0')\n            return;\n        \n        seen[i][j]=true;\n        \n        bfs(grid, i+1, j, seen);\n        bfs(grid, i-1, j, seen);\n        bfs(grid, i, j+1, seen);\n        bfs(grid, i, j-1, seen);\n        \n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111","title_slug":"number-of-islands","has_notes":false,"flag_type":1}