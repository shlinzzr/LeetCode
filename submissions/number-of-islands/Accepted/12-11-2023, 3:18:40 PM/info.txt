{"id":1117025732,"question_id":200,"lang":"java","lang_name":"Java","time":"6Â months","timestamp":1702279120,"status":10,"status_display":"Accepted","runtime":"6 ms","url":"/submissions/detail/1117025732/","is_pending":"Not Pending","title":"Number of Islands","memory":"50.3 MB","code":"class Solution {\n    public int numIslands(char[][] grid) {\n        int h = grid.length;\n        int w = grid[0].length;\n\n        int cnt =0;\n        boolean[][] seen = new boolean[h][w];\n        for(int i=0; i<h;i ++){\n            for(int j=0; j<w; j++){\n                if(seen[i][j]==false && grid[i][j]=='1'){\n                    bfs(grid, i, j, seen);\n                    cnt++;\n                }\n            }\n        }\n\n        return cnt;\n    }\n\n    private void bfs(char[][] grid, int i, int j, boolean[][] seen){\n        int h = grid.length;\n        int w = grid[0].length;\n\n        Queue<int[]> q = new LinkedList<>();\n        q.offer(new int[]{i,j});\n        seen[i][j] =true;\n\n        int[][] dirs = new int[][]{{1,0}, {-1,0},{0,1},{0,-1}};\n        while(!q.isEmpty()){\n\n            int[] p = q.poll();\n            for(int[] d: dirs){\n                int r = p[0] + d[0];\n                int c = p[1] + d[1];\n                if(r<0 || c<0 || r>= h|| c>=w || seen[r][c] || grid[r][c]=='0')\n                    continue;\n\n                seen[r][c] = true;\n                q.offer(new int[]{r,c});\n            }\n        }\n\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111","title_slug":"number-of-islands","has_notes":false,"flag_type":1}