{"id":770102535,"question_id":200,"lang":"java","lang_name":"Java","time":"1 year, 10 months","timestamp":1660124900,"status":10,"status_display":"Accepted","runtime":"11 ms","url":"/submissions/detail/770102535/","is_pending":"Not Pending","title":"Number of Islands","memory":"56.2 MB","code":"class Solution {\n    public int numIslands(char[][] grid) {\n        \n        int cnt=0;\n        int h = grid.length;\n        int w = grid[0].length;\n        \n        for(int r=0; r<h; r++){\n            for(int c=0; c<w; c++){\n                \n                if(grid[r][c]=='1'){\n                    bfs(grid, new int[]{c, r});\n                    cnt++;\n                }\n            }\n        }\n        \n        return cnt;\n        \n    }\n    \n    private void bfs(char[][] grid, int[] p){\n        \n        Queue<int[]> qq = new LinkedList<>();\n        grid[p[1]][p[0]]='2';\n        qq.offer(p);\n        \n        int[][] dirs = new int[][]{{0,1}, {0,-1}, {1,0}, {-1,0}};\n        \n        while(!qq.isEmpty()){\n            \n            int[] cell = qq.poll();\n            \n            // System.out.println(\"x=\"+cell[0] + \" y=\" + cell[1]);\n            \n            for(int[] d : dirs){\n                int px = cell[0] + d[0];\n                int py = cell[1] + d[1];\n\n                if(px<0 || px>=grid[0].length || py<0 || py>=grid.length || grid[py][px]!='1')\n                    continue;\n                \n                \n                \n                \n                grid[py][px]='2';\n                qq.offer(new int[]{px, py});\n            }\n        }\n    }\n            \n   \n}","compare_result":"1111111111111111111111111111111111111111111111111","title_slug":"number-of-islands","has_notes":false,"flag_type":1}