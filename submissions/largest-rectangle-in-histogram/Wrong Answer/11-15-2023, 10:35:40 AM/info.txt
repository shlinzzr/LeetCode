{"id":1099074967,"question_id":84,"lang":"java","lang_name":"Java","time":"7Â months","timestamp":1700015740,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1099074967/","is_pending":"Not Pending","title":"Largest Rectangle in Histogram","memory":"N/A","code":"class Solution {\n    public int largestRectangleArea(int[] heights) {\n        int len = heights.length;\n\n        int[] nextSmaller = new int[len];\n        Stack<Integer> st = new Stack<>();\n\n       // 123456\n       //\n        Arrays.fill(nextSmaller, len);\n\n        for(int i=0; i<len; i++){\n\n            while(!st.isEmpty() && heights[st.peek()]>heights[i]){\n                nextSmaller[st.pop()] = i;\n            }\n            st.push(i);\n        }\n\n        int[] prevSmaller = new int[len];\n        Arrays.fill(prevSmaller, 0);\n        st.clear();\n        for(int i=len-1; i>=0; i--){\n            while(!st.isEmpty() && heights[st.peek()]>heights[i]){\n                prevSmaller[st.pop()] = i;\n            }\n            st.push(i);\n        }\n\n\n        int res = 0;\n        for(int i=0; i<len; i++){\n            res = Math.max(res, (nextSmaller[i]-prevSmaller[i]-1)*heights[i]);\n        }\n\n        return res;\n\n    }\n}","compare_result":"11100100100111010110011011111111111111001111000001101111111011011101101011111011111111101010101010","title_slug":"largest-rectangle-in-histogram","has_notes":false,"flag_type":1}