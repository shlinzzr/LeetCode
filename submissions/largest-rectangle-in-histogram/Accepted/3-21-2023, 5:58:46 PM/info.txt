{"id":919403816,"question_id":84,"lang":"java","lang_name":"Java","time":"1 year, 2 months","timestamp":1679392726,"status":10,"status_display":"Accepted","runtime":"226 ms","url":"/submissions/detail/919403816/","is_pending":"Not Pending","title":"Largest Rectangle in Histogram","memory":"54.5 MB","code":"class Solution {\n    public int largestRectangleArea(int[] H) {\n        \n        // heights[i] * (nextSmaller-prevSmaller-1)\n        \n        int len = H.length;\n        \n        Stack<Integer> st = new Stack<>();\n        int[] nextSmaller = new int[len];\n        Arrays.fill(nextSmaller, len);\n        \n        for(int i=0; i<len; i++){\n            if(!st.isEmpty()){\n                while(!st.isEmpty() && H[st.peek()]>H[i] ){\n                    nextSmaller[st.peek()] = i;\n                    st.pop();\n                }\n            }\n            st.push(i);\n        }\n        \n        int[] prevSmaller = new int[len];\n        st = new Stack<>();\n        Arrays.fill(prevSmaller, -1);\n        for(int i=len-1; i>=0; i--){\n            if(!st.isEmpty()){\n                while(!st.isEmpty() && H[st.peek()]>H[i]){\n                    prevSmaller[st.peek()] = i;\n                    st.pop();\n                }\n            }\n            st.push(i);\n        }\n        \n        \n        int max =0;\n        for(int i=0; i<len; i++){\n            max = Math.max(max, H[i] * (nextSmaller[i]-prevSmaller[i]-1));\n        }\n        \n        return max;\n        \n        \n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"largest-rectangle-in-histogram","has_notes":false,"flag_type":1}