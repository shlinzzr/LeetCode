{"id":898953074,"question_id":84,"lang":"java","lang_name":"Java","time":"1 year, 3 months","timestamp":1676527929,"status":10,"status_display":"Accepted","runtime":"182 ms","url":"/submissions/detail/898953074/","is_pending":"Not Pending","title":"Largest Rectangle in Histogram","memory":"54.2 MB","code":"class Solution {\n    public int largestRectangleArea(int[] heights) {\n        // height[i] * (nextSmaller-prevSmaller-1)\n        \n        int len = heights.length;\n        \n        int[] nextSmaller = new int[len];\n        Arrays.fill(nextSmaller, len);\n        Stack<Integer> st = new Stack<>();\n        for(int i=0; i<len; i++){\n            while(!st.isEmpty() && heights[i] < heights[st.peek()]){\n                nextSmaller[st.pop()] = i;\n            }\n            st.push(i);\n        }\n        \n//         for(int n : nextSmaller){\n//             System.out.print(n + \", \");\n//         }\n//         System.out.println();\n        \n        \n        int[] prevSmaller = new int[len];\n        Arrays.fill(prevSmaller, -1);\n        st = new Stack<>();\n        for(int i=len-1; i>=0; i--){\n            while(!st.isEmpty() && heights[i] < heights[st.peek()]){\n                prevSmaller[st.pop()] = i;\n            }\n            st.push(i);\n        }\n\n        \n        int max = 0;\n        for(int i=0; i<len; i++){\n            int area = heights[i] * (nextSmaller[i] - prevSmaller[i]-1);\n            max = Math.max(max, area);\n        }\n        \n        return max;\n        \n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"largest-rectangle-in-histogram","has_notes":false,"flag_type":1}