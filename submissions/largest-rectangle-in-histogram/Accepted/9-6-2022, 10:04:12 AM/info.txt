{"id":792617876,"question_id":84,"lang":"java","lang_name":"Java","time":"1 year, 9 months","timestamp":1662429852,"status":10,"status_display":"Accepted","runtime":"185 ms","url":"/submissions/detail/792617876/","is_pending":"Not Pending","title":"Largest Rectangle in Histogram","memory":"89.9 MB","code":"class Solution {\n    public int largestRectangleArea(int[] h) {\n      int n = h.length, i = 0, max = 0;\n\n      Stack<Integer> st = new Stack<>();\n\n      while (i < n) {\n        // as long as the current bar is shorter than the last one in the stack\n        // we keep popping out the stack and calculate the area based on\n        // the popped bar\n        while (!st.isEmpty() && h[i] < h[st.peek()]) {\n            // tricky part is how to handle the index of the left bound\n            \n            int pop = st.pop();\n            // System.out.println(pop + \" \" + (st.isEmpty() ? 0:st.peek()));\n            max = Math.max(max, h[pop] * (i - (st.isEmpty() ? 0 : st.peek() + 1)));\n        }\n        // put current bar's index to the stack\n        st.push(i++);\n      }\n\n      // finally pop out any bar left in the stack and calculate the area based on it\n      while (!st.isEmpty()) {\n        max = Math.max(max, h[st.pop()] * (n - (st.isEmpty() ? 0 : st.peek() + 1)));\n      }\n\n      return max;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"largest-rectangle-in-histogram","has_notes":false,"flag_type":1}