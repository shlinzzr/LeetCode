{"id":1233747416,"question_id":84,"lang":"java","lang_name":"Java","time":"1 month, 3 weeks","timestamp":1713251907,"status":10,"status_display":"Accepted","runtime":"96 ms","url":"/submissions/detail/1233747416/","is_pending":"Not Pending","title":"Largest Rectangle in Histogram","memory":"62 MB","code":"class Solution {\n    public int largestRectangleArea(int[] heights) {\n        int len = heights.length;\n\n        int[] nextSmaller = new int[len];\n        Arrays.fill(nextSmaller, len);\n\n        Stack<Integer> st = new Stack<>();\n        for(int i=0; i<len; i++){\n            int h = heights[i];\n\n            if(!st.isEmpty()){\n                while(!st.isEmpty() && heights[st.peek()]>h){\n                    nextSmaller[st.pop()] = i;\n                }\n            }\n            st.push(i);\n        }\n        st.clear();\n\n        int[] prevSmaller = new int[len];\n        Arrays.fill(prevSmaller, -1);\n        for(int i=len-1; i>=0; i--){\n            \n            int h = heights[i];\n            if(!st.isEmpty()){\n                while(!st.isEmpty() && h < heights[st.peek()]){\n                    prevSmaller[st.pop()] = i;\n                }\n            }\n            st.push(i);\n        }\n\n        int res= 0 ;\n        for(int i=0; i<len; i++){\n            \n            int left = prevSmaller[i]+1;\n            int right = nextSmaller[i]-1;\n\n            res = Math.max(res, (right-left+1)* heights[i]);\n        }\n\n        return res;\n\n        \n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"largest-rectangle-in-histogram","has_notes":false,"flag_type":1}