{"id":1273796413,"question_id":1352,"lang":"java","lang_name":"Java","time":"1 week, 4 days","timestamp":1717214002,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1273796413/","is_pending":"Not Pending","title":"Maximum Profit in Job Scheduling","memory":"N/A","code":"class Solution {\n\n    class Task{\n        int st;\n        int ed;\n        int p;\n        public Task(int st, int ed, int p){\n            this.st = st;\n            this.ed = ed;\n            this.p = p;\n        }\n    }\n    public int jobScheduling(int[] startTime, int[] endTime, int[] profit) {\n        int len = profit.length;\n\n        List<Task> list = new ArrayList<>();\n        for(int i=0; i<len; i++){\n            Task task = new Task(startTime[i], endTime[i], profit[i]);\n            list.add(task);\n        }\n\n        Collections.sort(list, (a,b)-> a.st!=b.st ? a.st-b.st : a.ed-b.ed);\n\n\n\n        Task prev = list.get(0);\n        int sum = 0;\n        for(int i=1; i<len; i++){\n            Task curr = list.get(i);\n\n            if(prev.ed <= curr.st){\n                sum += prev.p;\n                prev = curr;\n                continue;\n            }\n\n            if(curr.p<=prev.p){\n                continue;\n            }else{\n                prev.p = curr.p;\n                prev.ed = curr.ed;\n            }\n        }\n\n        sum += prev.p;\n\n\n        return sum;\n\n\n        \n    }\n}","compare_result":"10111111011000000000000000000111111","title_slug":"maximum-profit-in-job-scheduling","has_notes":false,"flag_type":1}