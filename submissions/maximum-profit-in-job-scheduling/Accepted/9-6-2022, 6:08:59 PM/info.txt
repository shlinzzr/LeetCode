{"id":792903817,"question_id":1352,"lang":"java","lang_name":"Java","time":"1 year, 9 months","timestamp":1662458939,"status":10,"status_display":"Accepted","runtime":"63 ms","url":"/submissions/detail/792903817/","is_pending":"Not Pending","title":"Maximum Profit in Job Scheduling","memory":"72.6 MB","code":"class Solution {\n    public int jobScheduling(int[] startTime, int[] endTime, int[] profit) {\n        int len = startTime.length;\n        int[][] jobs = new int[len][3];\n        for(int i=0; i<len; i++){\n            jobs[i] = new int[]{startTime[i], endTime[i], profit[i]};\n        }\n        \n        Arrays.sort(jobs, (a,b) -> (a[1]-b[1]));\n        \n//         TreeMap<Integer, Integer> map = new TreeMap<>();\n//         map.put(0,0);\n        \n//         for(int i=0; i<len; i++){\n//             int cur = map.floorEntry(jobs[i][0]).getValue() + jobs[i][2];\n//             if(cur>map.lastEntry().getValue()){\n//                 map.put(jobs[i][1], cur);\n//             }\n//         }\n        \n//         return map.lastEntry().getValue();\n        int n =len;\n        int[] dp = new int[n + 1];\n        for (int i = 0; i < n; i++) {\n            dp[i + 1] = Math.max(dp[i], dp[i + 1]);\n            int lo = 0, hi = i;\n            while(lo < hi - 1) {\n                int m = lo + (hi - lo)/ 2;\n                if (jobs[m][1] <= jobs[i][0]) {\n                    lo = m;\n                } else {\n                    hi = m;\n                }\n            }\n            dp[i + 1] = Math.max(dp[i + 1], ((jobs[lo][1] <= jobs[i][0]) ? dp[lo + 1] : 0) + jobs[i][2]);\n        }\n        return dp[n];\n        \n        \n    }\n}","compare_result":"111111111111111111111111111111","title_slug":"maximum-profit-in-job-scheduling","has_notes":false,"flag_type":1}