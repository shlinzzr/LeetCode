{"id":1273813039,"question_id":1352,"lang":"java","lang_name":"Java","time":"1 week, 4 days","timestamp":1717215739,"status":10,"status_display":"Accepted","runtime":"1507 ms","url":"/submissions/detail/1273813039/","is_pending":"Not Pending","title":"Maximum Profit in Job Scheduling","memory":"55 MB","code":"class Solution {\n\n    public int jobScheduling(int[] startTime, int[] endTime, int[] profit) {\n  int len = startTime.length;\n\n        int[][] jobs = new int[len+1][3];  // pre process offset\n        for(int i=0; i<len; i++){\n            jobs[i+1] = new int[]{startTime[i], endTime[i], profit[i]};\n        }\n        Arrays.sort(jobs, (a,b) ->  a[1]-b[1]);\n        \n        int dp[] = new int[len+1]; // 做到第i筆job時的 max profit\n        // dp[0] = jobs[1][2]; // 初始值 就是第1筆job的profit\n        \n        for(int i=1; i<=len; i++){\n            dp[i] = Math.max( dp[i-1], jobs[i][2]);   //不做job, profit=i-1\n            \n            for(int j=i-1; j>0; j--){ //由後往前找\"第一個\" //這裡可以改成二分搜值!!!\n                if(jobs[j][1]<=jobs[i][0]){ //找\"第一個\" : 檢查之前的job, 如果之前的edTime <= 現在的 stTime 就找到了, break\n                    \n                    dp[i] = Math.max(dp[i], dp[j]/*當時max profit*/ + jobs[i][2]/*這次job的profit*/);\n                    break;\n                }\n            }\n        }\n        return dp[len];\n\n\n        // int len = startTime.length;\n\n\n        // int[][] jobs = new int[len+1][];\n        // jobs[0] = new int[3];\n        // for(int i=0; i<len; i++){\n        //     jobs[i+1] = new int[]{startTime[i], endTime[i], profit[i]};\n        // }\n\n        // Arrays.sort(jobs, (a,b)-> a[1]-b[1]);\n\n        // int[] dp = new int[len+1];\n        // dp[0]=jobs[1][2];\n\n        // for(int i=1; i<=len; i++){\n        //     dp[i] = Math.max(dp[i-1], jobs[i][2]);\n        //     for(int j=i-1; j>0; j--){\n        //         if(jobs[j][1]<=jobs[i][0]){\n\n        //             dp[i] = Math.max(dp[i], dp[j]);\n        //             break;\n        //         }\n        //     }\n        // }\n\n        // return dp[len];\n        \n\n\n\n        /*\n\n        Task prev = list.get(0);\n        int sum = 0;\n        for(int i=1; i<len; i++){\n            Task curr = list.get(i);\n\n            if(prev.ed <= curr.st){\n                sum += prev.p;\n                prev = curr;\n                continue;\n            }\n\n            if(curr.p<=prev.p){\n                continue;\n            }else{\n                prev.p = curr.p;\n                prev.ed = curr.ed;\n            }\n        }\n\n        sum += prev.p;\n\n\n        return sum;\n*/\n\n        \n    }\n}","compare_result":"11111111111111111111111111111111111","title_slug":"maximum-profit-in-job-scheduling","has_notes":false,"flag_type":1}