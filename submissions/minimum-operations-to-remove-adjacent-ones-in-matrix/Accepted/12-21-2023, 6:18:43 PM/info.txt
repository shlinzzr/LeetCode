{"id":1124993858,"question_id":2259,"lang":"java","lang_name":"Java","time":"5 months, 3 weeks","timestamp":1703153923,"status":10,"status_display":"Accepted","runtime":"386 ms","url":"/submissions/detail/1124993858/","is_pending":"Not Pending","title":"Minimum Operations to Remove Adjacent Ones in Matrix","memory":"67.2 MB","code":"class Solution {\n\n    int m;\n    int n;\n\n    int[][] dirs = new int[][]{{0,1},{1,0},{0,-1},{-1,0}};\n\n    public int minimumOperations(int[][] grid) {\n        m = grid.length;\n        n = grid[0].length;\n        \n\n        // init to -1\n        int[][] match = new int[m][n];\n        for (int i = 0; i < m; i++){\n            Arrays.fill(match[i], -1);\n        }\n\n        int ans = 0, count = 0;\n        int[][] next = new int[m][n];\n        for (int i = 0; i < m; i++){\n            for (int j = 0; j < n; j++){\n                if (grid[i][j]==1 && dfs(i, j, ++count, grid, match, next)){\n                    ans++;\n                }\n            }\n        }\n\n        return ans/2; // divide by 2 because we want num of pairs.\n    }\n\n    private boolean dfs(int i, int j, int visited, int[][] grid, int[][] match, int[][] next){\n       \n        if (next[i][j] == visited)\n            return false;\n\n        next[i][j]=visited;\n\n        for (int[] d : dirs){\n            int r = i + d[0];\n            int c = j + d[1];\n            if (r < 0 || c < 0 || r == m || c == n || grid[r][c] == 0 || next[r][c] == visited){\n                continue;\n            }\n            if (match[r][c]==-1 || dfs(match[r][c]/n, match[r][c]%n, visited, grid, match, next)){\n                match[r][c]=i*n+j;\n                return true;\n            }\n        }\n        return false;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-operations-to-remove-adjacent-ones-in-matrix","has_notes":false,"flag_type":1}