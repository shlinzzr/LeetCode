{"id":1124988531,"question_id":2259,"lang":"java","lang_name":"Java","time":"5 months, 3 weeks","timestamp":1703153341,"status":20,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/1124988531/","is_pending":"Not Pending","title":"Minimum Operations to Remove Adjacent Ones in Matrix","memory":"N/A","code":"class Solution {\n\n    int m;\n    int n;\n\n    int[][] dirs = new int[][]{{0,1},{1,0},{0,-1},{-1,0}};\n\n    public int minimumOperations(int[][] grid) {\n        int m = grid.length;\n        int n = grid[0].length;\n        // 想法 : 這是一個bipartite graph : lc1820 => Hungurian algo\n        // buildMap\n\n        HashMap<Integer, List<Integer>> map = new HashMap<>();\n\n        for(int i=0; i<m; i++){\n            for(int j=0; j<n; j++){\n\n                if(grid[i][j]==0) continue;\n                for(int[] d : dirs){\n                    int r = i+d[0];\n                    int c = j+d[1];\n                    if(r<0 || c<0 || r>=h || c>=w || grid[r][c]!=1) continue;\n                    map.putIfAbsent(i*n+j, new ArrayList<>());\n                    map.get(i*n+j).add(r*n+c);\n                }\n\n            }\n        }\n\n\n        int ans = 0, count = 0;\n        int[] match = new int[m*n];\n        Arrays.fill(match, -1);\n\n        HashSet<Integer> seen = new HashSet<>();\n\n\n        for (int i = 0; i < m; i++){\n            for (int j = 0; j < n; j++){\n                if (grid[i][j]>0 && dfs(i, j, ++count, grid, match, seen)){\n                    ans++;\n                }\n            }\n        }\n\n        return ans/2; // divide by 2 because we want num of pairs.\n    }\n\n    private boolean dfs(int i, int j, int visited, int[][] grid, int[][] match, HashSet<Integer> seen ){\n        if (seen[i][j] == visited)\n            return false;\n\n\n        seen[i][j]=visited;\n        \n        for (int[] d : dirs){\n            int x = i + d[0];\n            int y = j + d[1];\n            if (x < 0 || y < 0 || x == m || y == n || grid[x][y] == 0 || seen[x][y] == visited){\n                continue;\n            }\n            if (match[x][y]==-1 || dfs(match[x][y]/n, match[x][y]%n, visited, grid, match, seen)){\n                match[x][y]=i*n+j;\n                return true;\n            }\n        }\n        return false;\n    }\n}","compare_result":null,"title_slug":"minimum-operations-to-remove-adjacent-ones-in-matrix","has_notes":false,"flag_type":1}