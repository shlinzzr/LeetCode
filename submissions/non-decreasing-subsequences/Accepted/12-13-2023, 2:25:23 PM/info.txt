{"id":1118604707,"question_id":491,"lang":"java","lang_name":"Java","time":"6Â months","timestamp":1702448723,"status":10,"status_display":"Accepted","runtime":"11 ms","url":"/submissions/detail/1118604707/","is_pending":"Not Pending","title":"Non-decreasing Subsequences","memory":"50.3 MB","code":"class Solution {\n    public List<List<Integer>> findSubsequences(int[] nums) {\n\n        // Arrays.sort(nums);\n\n        Set<List<Integer>> res =new HashSet<>();\n\n        int len = nums.length;\n\n        helper(nums, res,  new ArrayList<>(), 0);\n\n        return new ArrayList<>(res);\n    }\n\n    private void helper(int[] nums, Set<List<Integer>> res, List<Integer> curr, int st){\n\n        if(curr.size()>1){\n            res.add(new ArrayList<>(curr));\n        }\n\n        int len = nums.length;\n        for(int i=st; i<len; i++){\n\n            if(curr.isEmpty() || curr.get(curr.size()-1)<=nums[i]){\n                curr.add(nums[i]);\n                helper(nums, res, curr, i+1);\n                curr.remove(curr.size()-1);\n            }   \n        }\n\n\n    }\n\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111","title_slug":"non-decreasing-subsequences","has_notes":false,"flag_type":1}