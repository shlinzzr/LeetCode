{"id":1118749144,"question_id":1429,"lang":"java","lang_name":"Java","time":"6Â months","timestamp":1702462475,"status":10,"status_display":"Accepted","runtime":"38 ms","url":"/submissions/detail/1118749144/","is_pending":"Not Pending","title":"Verbal Arithmetic Puzzle","memory":"44.2 MB","code":"class Solution {\n    public boolean isSolvable(String[] words, String result) {\n        Map<Character, Integer> letterDigitMap = new HashMap<Character, Integer>();\n        Set<Character> leadingSet = new HashSet<Character>();\n        int resultLength = result.length();\n        for (String word : words) {\n            if (word.length() > resultLength)\n                return false;\n            if (word.length() > 1)\n                leadingSet.add(word.charAt(0));\n        }\n        if (result.length() > 1)\n            leadingSet.add(result.charAt(0));\n        boolean[] used = new boolean[10];\n        int[] carry = new int[resultLength + 1];\n        return depthFirstSearch(words, result, letterDigitMap, leadingSet, used, carry, 0, 0);\n    }\n\n    public boolean depthFirstSearch(String[] words, String result, Map<Character, Integer> letterDigitMap, Set<Character> leadingSet, boolean[] used, int[] carry, int position, int wordIndex) {\n        if (position == result.length())\n            return carry[position] == 0;\n        else if (wordIndex < words.length) {\n            String word = words[wordIndex];\n            int wordLength = word.length();\n            if (wordLength <= position || letterDigitMap.containsKey(word.charAt(wordLength - position - 1)))\n                return depthFirstSearch(words, result, letterDigitMap, leadingSet, used, carry, position, wordIndex + 1);\n            else {\n                char letter = word.charAt(wordLength - position - 1);\n                int start = leadingSet.contains(letter) ? 1 : 0;\n                for (int i = start; i <= 9; i++) {\n                    if (!used[i]) {\n                        used[i] = true;\n                        letterDigitMap.put(letter, i);\n                        boolean next = depthFirstSearch(words, result, letterDigitMap, leadingSet, used, carry, position, wordIndex + 1);\n                        used[i] = false;\n                        letterDigitMap.remove(letter);\n                        if (next)\n                            return true;\n                    }\n                }\n            }\n            return false;\n        } else {\n            int remain = carry[position];\n            for (String word : words) {\n                if (word.length() > position) {\n                    char letter = word.charAt(word.length() - position - 1);\n                    remain += letterDigitMap.get(letter);\n                }\n            }\n            carry[position + 1] = remain / 10;\n            remain %= 10;\n            char letter = result.charAt(result.length() - position - 1);\n            if (letterDigitMap.containsKey(letter) && letterDigitMap.get(letter) == remain)\n                return depthFirstSearch(words, result, letterDigitMap, leadingSet, used, carry, position + 1, 0);\n            else if (!letterDigitMap.containsKey(letter) && !used[remain] && !(leadingSet.contains(letter) && remain == 0)) {\n                used[remain] = true;\n                letterDigitMap.put(letter, remain);\n                boolean next = depthFirstSearch(words, result, letterDigitMap, leadingSet, used, carry, position + 1, 0);\n                used[remain] = false;\n                letterDigitMap.remove(letter);\n                return next;\n            } else\n                return false;\n        }\n    }\n}","compare_result":"1111111111111111111111111111111111","title_slug":"verbal-arithmetic-puzzle","has_notes":false,"flag_type":1}