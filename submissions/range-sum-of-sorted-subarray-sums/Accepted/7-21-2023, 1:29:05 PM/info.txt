{"id":999906032,"question_id":1615,"lang":"java","lang_name":"Java","time":"10 months, 3 weeks","timestamp":1689917345,"status":10,"status_display":"Accepted","runtime":"692 ms","url":"/submissions/detail/999906032/","is_pending":"Not Pending","title":"Range Sum of Sorted Subarray Sums","memory":"69 MB","code":"class Solution {\n    public int rangeSum(int[] nums, int n, int left, int right) {\n        int len = nums.length;\n        List<Integer> list =new ArrayList<>();\n        \n        for(int st = 0; st<len; st++){\n            for(int ed = st; ed<len; ed++){\n                \n                int sum =0;\n                for(int i=st; i<=ed; i++){\n                    sum+= nums[i];\n                    \n                }\n                list.add(sum);\n            }\n        }\n        \n        Collections.sort(list);\n        \n        // System.out.println(list.toString());\n        \n        \n        int M = (int) 1e9+7;\n        \n        long res =0 ;\n        for(int i=left; i<=right; i++){\n            res = (res + list.get(i-1))%M;\n        }\n        \n        return (int)res;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111","title_slug":"range-sum-of-sorted-subarray-sums","has_notes":false,"flag_type":1}