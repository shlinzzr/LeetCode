{"id":79270387,"question_id":102,"lang":"c","lang_name":"C","time":"7 years, 7 months","timestamp":1476946396,"status":20,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/79270387/","is_pending":"Not Pending","title":"Binary Tree Level Order Traversal","memory":"N/A","code":"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     struct TreeNode *left;\r\n *     struct TreeNode *right;\r\n * };\r\n */\r\n/**\r\n * Return an array of arrays of size *returnSize.\r\n * The sizes of the arrays are returned as *columnSizes array.\r\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\r\n */\r\n \r\n //BFS tree 太複雜 直接看CODE  QQ  //https://discuss.leetcode.com/topic/63844/c-3ms-easy-undestanding-one-queue\r\nint** levelOrder(struct TreeNode* root, int** columnSizes, int* returnSize) {\r\n    \r\n    int *arr = malloc((returnSize+1)*sizeof(int));\r\n    \r\n    for(int i=0;i<returnSize; i++)\r\n    {\r\n         for(int j=0;j<i+1;j++)\r\n         {\r\n             arr[i] = root[j];\r\n             i++;\r\n             \r\n         }\r\n    }\r\n}","compare_result":null,"title_slug":"binary-tree-level-order-traversal","has_notes":false,"flag_type":1}