{"id":1156336592,"question_id":4,"lang":"java","lang_name":"Java","time":"4 months, 2 weeks","timestamp":1706173181,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1156336592/","is_pending":"Not Pending","title":"Median of Two Sorted Arrays","memory":"N/A","code":"class Solution {\n\n/*\nApproach 1: MergeSort : O((n + m) * log(n + m)); => copy and find mid\nApproach 2: Two-Pointer Method  O(n + m), \nApproach 3: Binary Search O(logm/logn)\n*/\n\n    public double findMedianSortedArrays(int[] A, int[] B) {\n        \n        int alen=A.length;\n        int blen=B.length;\n\n        if(alen+blen==0) \n            return 0;\n        \n        int[] arr = new int[alen+blen];\n        System.arraycopy(A, 0, arr, 0, alen);\n        System.arraycopy(B, 0, arr, alen, blen);\n        int len = alen+blen;\n        quickselect(arr, 0, len-1, len/2-1);\n      \n\n        \n        if(len%2==0) return (Double.valueOf(arr[len/2]) + Double.valueOf(arr[len/2-1]))/2;\n        \n        \n        \n        \n        return Double.valueOf(arr[len/2]);\n    }\n    \n    private void quickselect(int[] arr, int st, int ed, int k){\n\nSystem.out.println(\"quickselect st=\"+st + \" ed=\"+ed);\n        \n        if(st>=ed) return;\n        \n        int pivotIdx = partition(arr, st, ed-1, ed);\n        swap(arr, pivotIdx, ed);\n        \n        for(int a :arr){\n            System.out.print(a + \" ,\");\n        }\n\n           System.out.println(\"pivotIdx=\"+pivotIdx);\n\n        if(k==pivotIdx){\n            return;\n        }else if(k<pivotIdx){\n            quickselect(arr, st, pivotIdx-1, k);\n        }else{\n            quickselect(arr, pivotIdx+1, ed, k);\n        }\n    }\n    \n    private int partition(int[] arr, int st, int ed, int p){\n        \n        while(st<=ed){\n            \n            if(arr[st]>arr[p]){\n                swap(arr, st, ed);\n                ed--;\n            }else\n                st++;\n        }\n        \n        return st;\n    }\n    \n    private void swap(int[] arr, int a, int b){\n        int t = arr[a];\n        arr[a] = arr[b];\n        arr[b] = t;\n    }\n}\n    \n    \n    \n//     public double findMedianSortedArrays(int[] A, int[] B) {\n        \n//         int alen=A.length;\n//         int blen=B.length;\n\n//         if(alen+blen==0) \n//             return 0;\n//         //because of idx2=half-idx1,  we want len1 < len2\n//         if(alen>blen) \n//             return findMedianSortedArrays(B, A);\n\n//         int len = alen + blen;\n//         int half = len/2;\n\n//         //想法: 針對amid 做binarySearch, bmid = half-amid\n//         // and find acurr < bnext && bcurr<anext\n//         // else : \n//         int left=0, right=alen-1;\n       \n//         while(true){\n//             int amid = right-(right-left)/2; // a拿了 amid+1個\n//             int bmid = half-(amid+1)-1; // b 要拿 half-(amid+1)個, 轉成idx變成 half-(amid+1)-1\n\n//             int acurr = (amid>=0)     ? A[amid]   : Integer.MIN_VALUE; // if not legal, use bcurr\n//             int anext = (amid+1<alen) ? A[amid+1] : Integer.MAX_VALUE; // if not legal, use bnext\n//             int bcurr = (bmid>=0)     ? B[bmid]   : Integer.MIN_VALUE; // if not legal, use acurr\n//             int bnext = (bmid+1<blen) ? B[bmid+1] : Integer.MAX_VALUE; // if not legal, use anext\n\n//             if(acurr<=bnext && bcurr<= anext){ // found what we want\n                \n//                 if(len%2==0)\n//                     return ((double)Math.max(acurr, bcurr) + (double)Math.min(anext, bnext))/2;\n//                 else\n//                     return (double) Math.min(anext, bnext); //median is smaller one  \n                \n//             }else{\n//                  // means \"bcurr>anext\" or \"acurr>bnext\"\n//                 if(bcurr>anext) // 表示a太小, left=amid+1\n//                     left = amid+1; \n//                 else if(acurr>bnext) // 表示a太大, right=amid-1\n//                     right = amid-1;\n//             }\n//         }\n\n//     }\n// }","compare_resulttitle_slug":"median-of-two-sorted-arrays","has_notes":false,"flag_type":1}