{"id":1112070726,"question_id":4,"lang":"java","lang_name":"Java","time":"6 months, 1 week","timestamp":1701683507,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1112070726/","is_pending":"Not Pending","title":"Median of Two Sorted Arrays","memory":"44.6 MB","code":"class Solution {\n\n/*\nApproach 1: Merge and Sort : O((n + m) * log(n + m)); => copy and find mid\nApproach 2: Two-Pointer Method  O(n + m), \nApproach 3: Binary Search O(logm/logn)\n*/\n\n    public double findMedianSortedArrays(int[] A, int[] B) {\n        \n        int alen=A.length;\n        int blen=B.length;\n\n        if(alen+blen==0) \n            return 0;\n\n        //because of idx2=half-idx1,  we want len1 < len2\n        if(alen>blen) \n            return findMedianSortedArrays(B, A);\n\n        int len = alen + blen;\n        int half = len/2;\n\n        //想法: 針對amid 做binarySearch, bmid = half-amid\n        // and find acurr < bnext && bcurr<anext\n        // else : \n        int left=0, right=alen-1;\n       \n        while(true){\n            int amid = right-(right-left)/2; // a拿了 amid+1個\n            int bmid = half-(amid+1)-1; // b 要拿 half-(amid+1)個, 轉成idx變成 half-(amid+1)-1\n\n            int acurr = (amid>=0)     ? A[amid]   : Integer.MIN_VALUE; // if not legal, use bcurr\n            int anext = (amid+1<alen) ? A[amid+1] : Integer.MAX_VALUE; // if not legal, use bnext\n            int bcurr = (bmid>=0)     ? B[bmid]   : Integer.MIN_VALUE; // if not legal, use acurr\n            int bnext = (bmid+1<blen) ? B[bmid+1] : Integer.MAX_VALUE; // if not legal, use anext\n\n            if(acurr<=bnext && bcurr<= anext){ // found what we want\n                \n                if(len%2==0)\n                    return ((double)Math.max(acurr, bcurr) + (double)Math.min(anext, bnext))/2;\n                else\n                    return (double) Math.min(anext, bnext); //median is smaller one  \n                \n            }else{\n                 // means \"bcurr>anext\" or \"acurr>bnext\"\n                if(bcurr>anext) // 表示a太小, left=amid+1\n                    left = amid+1; \n                else if(acurr>bnext) // 表示a太大, right=amid-1\n                    right = amid-1;\n            }\n        }\n\n\n\n\n\n    }\n}","compare_resulttitle_slug":"median-of-two-sorted-arrays","has_notes":false,"flag_type":1}