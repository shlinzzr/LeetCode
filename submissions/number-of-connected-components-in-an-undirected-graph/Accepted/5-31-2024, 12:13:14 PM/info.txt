{"id":1272922488,"question_id":323,"lang":"java","lang_name":"Java","time":"1 week, 5 days","timestamp":1717128794,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1272922488/","is_pending":"Not Pending","title":"Number of Connected Components in an Undirected Graph","memory":"44.3 MB","code":"class Solution {\n\n    int[] parent;\n    public int countComponents(int n, int[][] edges) {\n\n        parent = new int[n];\n        for(int i=0; i<n; i++){\n            parent[i] = i;\n        }\n\n        for(int[] e: edges){\n            union(e[0], e[1]);\n        }\n\n        int cnt = 0;\n        for(int i=0; i<n; i++){\n            if(parent[i] ==i) cnt++;\n        }\n\n        return cnt;\n\n\n    }\n\n    private int find(int x){\n        if(parent[x]!=x) parent[x] = find(parent[x]);\n        return parent[x];\n    }\n\n    private void union(int a, int b){\n        a = find(a);\n        b = find(b);\n        if(a==b) return;\n\n        if(a<b){\n            parent[b] = a;\n        }else\n            parent[a] = b;\n    }\n}","compare_result":"11111111111111111111111111111111111111111","title_slug":"number-of-connected-components-in-an-undirected-graph","has_notes":false,"flag_type":1}