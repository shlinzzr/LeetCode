{"id":874597843,"question_id":323,"lang":"java","lang_name":"Java","time":"1 year, 5 months","timestamp":1673251546,"status":10,"status_display":"Accepted","runtime":"60 ms","url":"/submissions/detail/874597843/","is_pending":"Not Pending","title":"Number of Connected Components in an Undirected Graph","memory":"42.9 MB","code":"class Solution {\n    public int countComponents(int n, int[][] edges) {\n        HashMap<Integer, Integer> map = new HashMap<>();\n        \n        for(int i=0; i<n; i++){\n            map.put(i, i);\n        }\n        int cnt=n;\n        for(int[] eg : edges){ \n            int idx0 = find(eg[0], map);\n            int idx1 = find(eg[1], map);\n            \n            if(idx0!=idx1){\n                map.put(idx0, idx1);\n                cnt--;\n            }\n            \n        }\n        \n        return cnt;\n        \n//         HashMap<Integer, TreeSet<Integer>> unions = new HashMap<>();\n//         for(int[] eg : edges){\n//             int p = find(eg[0], map);\n            \n//             if(!unions.containsKey(p)){\n//                 unions.put(p, new TreeSet<>());\n//             }\n            \n//             unions.get(p).add(eg[1]);\n//         }\n        \n//         return unions.size();   \n    }\n    \n    private int find(int s, HashMap<Integer, Integer> map){\n        \n        return map.get(s)==s ? s : find(map.get(s), map);\n        \n    }\n}","compare_result":"11111111111111111111111111111111111111111111","title_slug":"number-of-connected-components-in-an-undirected-graph","has_notes":false,"flag_type":1}