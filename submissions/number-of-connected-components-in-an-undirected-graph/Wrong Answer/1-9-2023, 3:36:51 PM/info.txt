{"id":874584097,"question_id":323,"lang":"java","lang_name":"Java","time":"1 year, 5 months","timestamp":1673249811,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/874584097/","is_pending":"Not Pending","title":"Number of Connected Components in an Undirected Graph","memory":"N/A","code":"class Solution {\n    public int countComponents(int n, int[][] edges) {\n        HashMap<Integer, Integer> map = new HashMap<>();\n        \n        for(int i=0; i<n; i++){\n            map.put(i, i);\n        }\n        \n        for(int[] eg : edges){ \n            int idx = find(eg[1], map);\n            map.put(eg[0], idx);\n        }\n        \n        HashMap<Integer, TreeSet<Integer>> unions = new HashMap<>();\n        for(int[] eg : edges){\n            int p = find(eg[0], map);\n            \n            if(!unions.containsKey(p)){\n                unions.put(p, new TreeSet<>());\n            }\n            \n            unions.get(p).add(eg[1]);\n        }\n        \n        return unions.size();   \n    }\n    \n    \n    private int find(int s, HashMap<Integer, Integer> map){\n        \n        return map.get(s)==s ? s : find(map.get(s), map);\n        \n    }\n}","compare_result":"11111100110010011001111111011110010000000011","title_slug":"number-of-connected-components-in-an-undirected-graph","has_notes":false,"flag_type":1}