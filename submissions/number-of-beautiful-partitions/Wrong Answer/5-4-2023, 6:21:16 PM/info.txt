{"id":944296862,"question_id":2569,"lang":"java","lang_name":"Java","time":"1 year, 1 month","timestamp":1683195676,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/944296862/","is_pending":"Not Pending","title":"Number of Beautiful Partitions","memory":"N/A","code":"class Solution {\n    public int beautifulPartitions(String s, int k, int minLength) {\n        int len = s.length();\n        \n        HashSet<Integer> prime = new HashSet<>(Arrays.asList(2,3,5,7));\n        HashSet<Integer> non_prime = new HashSet<>(Arrays.asList(1,4,6,8,9));\n        \n        if(!prime.contains(s.charAt(0)-'0') || !non_prime.contains(s.charAt(len-1)-'0'))\n            return 0;\n        \n        int res =0;\n        \n        // int dp = new int[len+1];\n        \n        HashSet<Integer> list = new HashSet<>();\n        \n        for(int i=minLength-1; i<len-minLength; i++){\n            \n            if(non_prime.contains( s.charAt(i)-'0') && prime.contains(s.charAt(i+1)-'0')){\n                list.add(i);\n                System.out.println(i);\n            }\n        }\n        \n        \n        //2354 | 218 | 51 | 31\n        \n        \n        int[][] dp = new int[len+1][k+1];\n        dp[0][0]=1;\n        for(int i=1; i<=len; i++){\n            for(int j=1; j<=k; j++){\n                \n                for(int l : list){\n                    dp[i][j] += dp[i-1][j-1];\n                }\n                    \n            }\n        }\n        \n        \n        \n        \n        return dp[len][k];\n        \n    }\n    \n}","compare_result":"00000001100100001000001000000101001000110010100010010000000000000000000000","title_slug":"number-of-beautiful-partitions","has_notes":false,"flag_type":1}