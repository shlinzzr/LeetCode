{"id":1140075001,"question_id":1374,"lang":"java","lang_name":"Java","time":"5Â months","timestamp":1704685123,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1140075001/","is_pending":"Not Pending","title":"Leftmost Column with at Least a One","memory":"45.1 MB","code":"/**\n * // This is the BinaryMatrix's API interface.\n * // You should not implement it, or speculate about its implementation\n * interface BinaryMatrix {\n *     public int get(int row, int col) {}\n *     public List<Integer> dimensions {}\n * };\n */\n\nclass Solution {\n    public int leftMostColumnWithOne(BinaryMatrix binaryMatrix) {\n        int h = binaryMatrix.dimensions().get(0);\n        int w = binaryMatrix.dimensions().get(1);\n\n        int st = 0, ed = w - 1, ans = -1;\n        while (st <= ed) {\n            int mid = st + (ed - st) / 2;\n            if (existOneInColumn(binaryMatrix, h, mid)) {\n                ans = mid;          // record as current ans\n                ed = mid - 1;    // try to find in the left side\n            } else {\n                st = mid + 1;     // try to find in the right side\n            }\n        }\n        return ans;\n    }\n    boolean existOneInColumn(BinaryMatrix binaryMatrix, int h, int mid) {\n        for (int r = 0; r < h; r++) if (binaryMatrix.get(r, mid) == 1) return true;\n        return false;\n    }\n}","compare_result":"1111111111111111111111111111111111111","title_slug":"leftmost-column-with-at-least-a-one","has_notes":false,"flag_type":1}