{"id":1031258656,"question_id":718,"lang":"java","lang_name":"Java","time":"9 months, 3 weeks","timestamp":1692954660,"status":10,"status_display":"Accepted","runtime":"23 ms","url":"/submissions/detail/1031258656/","is_pending":"Not Pending","title":"Maximum Length of Repeated Subarray","memory":"53.9 MB","code":"class Solution {\n    public int findLength(int[] nums1, int[] nums2) {\n        // dp[i][j] = dp[i-1][j-1] + 1\n        // 求 max dp[i][j];\n        \n        int m = nums1.length;\n        int n = nums2.length;\n        \n        int[][] dp = new int[m+1][n+1];\n\n        //bottom up\n        int max=0;\n        for(int i=1; i<=m; i++){\n            for(int j=1; j<=n; j++){\n                \n                if(nums1[i-1]==nums2[j-1]){\n                    dp[i][j]=dp[i-1][j-1]+1;\n                }else{\n                    dp[i][j]=0;\n                }\n                max = Math.max(dp[i][j], max);\n            }\n        }\n         return max;\n        \n        //top down\n             \n        // int max = 0;\n        // int[][] dp = new int[nums1.length + 1][nums2.length + 1];\n        // for (int i = nums1.length - 1; i >= 0; --i) {\n        //     for (int j = nums2.length - 1; j >= 0; --j) {\n        //         if (nums1[i] == nums2[j]) {\n        //             dp[i][j] = dp[i+1][j+1] + 1;\n        //             if (max < dp[i][j]) max = dp[i][j];\n        //         }\n        //     }\n        // }\n        // return max;\n        \n        \n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111","title_slug":"maximum-length-of-repeated-subarray","has_notes":false,"flag_type":1}