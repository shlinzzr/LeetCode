{"id":1123089484,"question_id":1177,"lang":"java","lang_name":"Java","time":"5 months, 3 weeks","timestamp":1702958900,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1123089484/","is_pending":"Not Pending","title":"Tree Diameter","memory":"N/A","code":"class Solution {\n\n    int max =1;\n    public int treeDiameter(int[][] edges) {\n        int len = edges.length;\n        int n = len+1;\n        HashMap<Integer, List<Integer>> map = new HashMap<>();\n\n        for(int[] e : edges){\n            map.putIfAbsent(e[0], new ArrayList<>());\n            map.putIfAbsent(e[1], new ArrayList<>());\n\n            map.get(e[0]).add(e[1]);\n            map.get(e[1]).add(e[0]);\n        }\n\n        \n        getDepth(-1, 0, map);\n\n        return max;\n\n    }\n\n    private int getDepth(int parent , int root, HashMap<Integer, List<Integer>> map){\n\n        List<Integer>adjs = map.get(root);\n\n        // if(adjs.size()==1 && adjs.get(0)==parent)\n        //     return 0;\n\n\n        int max1 = 0; \n        int max2 =0;\n\n        for(int adj : adjs){\n\n            if(adj==parent)\n                continue; \n\n            int d1 = getDepth(root, adj, map);\n            if(d1>max1){\n                max2 = max1;\n                max1 = d1;\n            }else if(d1>max2){\n                max2=d1;\n            }\n        }\n        max = Math.max(max, max1 + max2);\n        // max = Math.max(max, lv + max2+1);\n        // max = Math.max(max, max1 + lv+1);\n\n        return max1+1;\n\n    }\n}","compare_result":"1111111111111111111111111110","title_slug":"tree-diameter","has_notes":false,"flag_type":1}