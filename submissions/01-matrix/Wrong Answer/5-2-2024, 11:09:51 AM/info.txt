{"id":1247031253,"question_id":542,"lang":"java","lang_name":"Java","time":"1 month, 1 week","timestamp":1714619391,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1247031253/","is_pending":"Not Pending","title":"01 Matrix","memory":"N/A","code":"class Solution {\n    public int[][] updateMatrix(int[][] mat) {\n        int h = mat.length;\n        int w = mat[0].length;\n\n        int[][] res = new int[h][w];\n        for(int i=0; i<h;i++){\n            Arrays.fill(res[i], -1);\n        }\n\n        Queue<int[]> q = new LinkedList<>();\n        \n        for(int i=0; i<h; i++){\n            for(int j=0; j<w; j++){\n                \n                if(mat[i][j]==0){\n                    q.offer(new int[]{i, j});\n                    res[i][j] = 0;\n                }\n            }\n        }\n        \n        int[][] dirs = new int[][]{{0,1}, {1,0}, {-1,0}, {0,-1}};\n        \n        int step = 0;\n        while(!q.isEmpty()){\n            int size = q.size();\n\n            while(size-->0){\n                int[] p = q.poll();\n                int y = p[0];\n                int x = p[1];\n\n                res[y][x] = step;\n\n                for(int[] d: dirs){\n                    int r = y+d[0];\n                    int c = x+d[1];\n\n                    if(r<0 || c<0 || r>=h || c>=w || mat[r][c]==0 || res[r][c]!=-1) continue;\n\n                    q.offer(new int[]{r,c});\n                }                \n            }\n            step++;\n        }\n        \n        return res;\n            \n    }\n}","compare_result":"11111100000000000000000000000000000000000000000001","title_slug":"01-matrix","has_notes":false,"flag_type":1}