{"id":840642023,"question_id":542,"lang":"java","lang_name":"Java","time":"1 year, 7 months","timestamp":1668071146,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/840642023/","is_pending":"Not Pending","title":"01 Matrix","memory":"N/A","code":"class Solution {\n    public int[][] updateMatrix(int[][] mat) {\n        \n        int h = mat.length;\n        int w = mat[0].length;\n        \n        int[][] res = new int[h][w];\n        \n        for(int i=0;i<h;i++){\n            for(int j=0; j<w; j++){\n                \n                if(mat[i][j]!=0)\n                    res[i][j] = bfs(mat, res, new int[]{i,j});\n            }\n        }\n        \n        return res;\n        \n    }\n    \n    int[][] dirs = new int[][]{{0,1}, {0,-1}, {1,0}, {-1,0}};\n    \n    \n    private int bfs(int[][] mat, int[][] res, int[] axis){\n        \n        int h = res.length;\n        int w = res[0].length;\n        \n        boolean[][] visited = new boolean[h][w];\n        \n        Queue<int[]> q = new LinkedList<>();\n        q.offer(axis);\n        int cnt=0;\n        \n        while(!q.isEmpty()){\n            \n            int siz = q.size();\n            for(int i=0; i<siz; i++){\n                axis = q.poll();\n            \n                for(int[] d : dirs){\n\n                    int r = axis[0]+d[0];\n                    int c = axis[1]+d[1];\n                    \n                    if(r>=0 && r<h && c>=0 && c<w && visited[r][c]==false){\n                        \n                        visited[r][c]=true;\n                        \n                        if(mat[r][c]==1)\n                            return cnt;\n                        \n                        q.offer(new int[]{r,c});\n                    }\n                }\n            }\n            \n            cnt++;\n        }\n        \n        return -1;\n        \n    }\n}","compare_result":"10111100000000000000000000000000000000000000000000","title_slug":"01-matrix","has_notes":false,"flag_type":1}