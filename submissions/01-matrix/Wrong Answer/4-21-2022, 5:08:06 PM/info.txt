{"id":684697864,"question_id":542,"lang":"java","lang_name":"Java","time":"2 years, 1 month","timestamp":1650532086,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/684697864/","is_pending":"Not Pending","title":"01 Matrix","memory":"N/A","code":"public class Solution {\n    public int[][] updateMatrix(int[][] matrix) {\n        int h = matrix.length;\n        int w = matrix[0].length;\n        \n        Queue<int[]> queue = new LinkedList<>();\n        for (int i = 0; i < h; i++) {\n            for (int j = 0; j < w; j++) {\n                if (matrix[i][j] == 0) {\n                    queue.offer(new int[] {i, j});\n                }\n                else {\n                    matrix[i][j] = Integer.MAX_VALUE;\n                }\n            }\n        }\n        \n        int[][] dirs = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};\n        \n        while (!queue.isEmpty()) {\n            int[] cell = queue.poll();\n            for (int[] d : dirs) {\n                int x = cell[0] + d[0];\n                int y = cell[1] + d[1];\n                if (y < 0 || y >= h || x < 0 || x >= w || \n                    matrix[y][x] <= matrix[cell[0]][cell[1]] + 1) continue;\n                queue.add(new int[] {y, x});\n                matrix[y][x] = matrix[cell[0]][cell[1]] + 1;\n            }\n        }\n        \n        return matrix;\n    }\n}","compare_result":"10111100100000000000000000000000000000000000010000","title_slug":"01-matrix","has_notes":false,"flag_type":1}