{"id":769197194,"question_id":542,"lang":"java","lang_name":"Java","time":"1 year, 10 months","timestamp":1660037364,"status":10,"status_display":"Accepted","runtime":"32 ms","url":"/submissions/detail/769197194/","is_pending":"Not Pending","title":"01 Matrix","memory":"73.4 MB","code":"class Solution {\n    public int[][] updateMatrix(int[][] mat) {\n        \n        int h = mat.length;\n        int w = mat[0].length;\n        \n        Queue<int[]> queue = new LinkedList<>();\n        \n        for(int i=0; i<h; i++){\n            for(int j=0; j<w; j++){\n                \n                if(mat[i][j]==0)\n                    queue.offer(new int[]{i, j});\n                else{\n                    mat[i][j] = Integer.MAX_VALUE;\n                }\n            }\n        }\n        \n        int[][] dirs = new int[][]{{0,1}, {0,-1}, {1,0}, {-1,0}};\n        \n        while(!queue.isEmpty()){\n            int[] cell = queue.poll();\n            for(int[] d : dirs){\n                int r = cell[0] + d[0];\n                int c = cell[1] + d[1];\n                if(r<0 || r>=h || c<0 || c>=w || mat[r][c]<= mat[cell[0]][cell[1]]+1)\n                    continue;\n                queue.offer(new int[]{r,c});\n                mat[r][c] = mat[cell[0]][cell[1]]+1;\n            }\n        }\n        \n        \n        return mat;\n        \n    }\n        \n}","compare_result":"11111111111111111111111111111111111111111111111111","title_slug":"01-matrix","has_notes":false,"flag_type":1}