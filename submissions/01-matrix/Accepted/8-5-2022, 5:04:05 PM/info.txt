{"id":765757456,"question_id":542,"lang":"java","lang_name":"Java","time":"1 year, 10 months","timestamp":1659690245,"status":10,"status_display":"Accepted","runtime":"10 ms","url":"/submissions/detail/765757456/","is_pending":"Not Pending","title":"01 Matrix","memory":"75.2 MB","code":"class Solution {\n//     public int[][] updateMatrix(int[][] mat) {\n//         int h = mat.length;\n//         int w = mat[0].length;\n        \n//         Queue<int[]> queue = new LinkedList<>();\n        \n//         for(int i=0; i<h; i++){\n//             for(int j=0; j<w; j++){\n                \n//                 if(mat[i][j]==0)\n//                     queue.offer(new int[]{j, i});\n                \n//                 else{\n//                     mat[i][j]=Integer.MAX_VALUE;\n//                 }\n//             }\n//         }\n        \n//         int[][] dirs = new int[][]{{0,1} , {0,-1}, {1, 0}, {-1, 0}};\n        \n//         while(queue.size()>0){\n//             int[] cell = queue.poll();\n//             for(int[] d : dirs){\n//                 int r = cell[0] + d[0];\n//                 int c = cell[1] + d[1];\n//                 if(r<0 || r>=h || c<0 || c>=w || mat[r][c] <= mat[cell[0]][cell[1]]+1)\n//                     continue;\n//                 queue.offer(new int[]{r,c});\n//                 mat[r][c] = mat[cell[0]][cell[1]]+1;\n//             }\n//         }\n        \n//         return mat;\n// }\n    \n    public int[][] updateMatrix(int[][] matrix) {\n    if (matrix.length == 0 || matrix[0].length == 0) {\n        return matrix;\n    }\n    int[][] dis = new int[matrix.length][matrix[0].length];\n    int range = matrix.length * matrix[0].length;\n    \n    for (int i = 0; i < matrix.length; i++) {\n        for (int j = 0; j < matrix[0].length; j++) {\n            if (matrix[i][j] == 0) {\n                dis[i][j] = 0;\n            } else {\n                int upCell = (i > 0) ? dis[i - 1][j] : range;\n                int leftCell = (j > 0) ? dis[i][j - 1] : range;\n                dis[i][j] = Math.min(upCell, leftCell) + 1;\n            }\n        }\n    }\n    \n    for (int i = matrix.length - 1; i >= 0; i--) {\n        for (int j = matrix[0].length - 1; j >= 0; j--) {\n            if (matrix[i][j] == 0) {\n                dis[i][j] = 0;\n            } else {\n                int downCell = (i < matrix.length - 1) ? dis[i + 1][j] : range;\n                int rightCell = (j < matrix[0].length - 1) ? dis[i][j + 1] : range;\n                dis[i][j] = Math.min(Math.min(downCell, rightCell) + 1, dis[i][j]);\n            }\n        }\n    }\n    \n    return dis;\n}\n    \n}","compare_result":"11111111111111111111111111111111111111111111111111","title_slug":"01-matrix","has_notes":false,"flag_type":1}