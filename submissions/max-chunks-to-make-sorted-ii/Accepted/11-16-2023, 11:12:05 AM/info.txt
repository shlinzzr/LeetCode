{"id":1099785080,"question_id":779,"lang":"java","lang_name":"Java","time":"6 months, 4 weeks","timestamp":1700104325,"status":10,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/1099785080/","is_pending":"Not Pending","title":"Max Chunks To Make Sorted II","memory":"44 MB","code":"class Solution {\n    public int maxChunksToSorted(int[] arr) {\n        Map<Integer,Integer> lack = new HashMap<>();\n        Map<Integer,Integer> more = new HashMap<>();\n\n        int[] sorted = new int[arr.length];\n        System.arraycopy(arr, 0, sorted, 0, arr.length);\n        Arrays.sort(sorted);\n\n\n        int res = 0;\n        for(int i=0; i<arr.length; i++){\n            int a = arr[i];\n            if(more.containsKey(a)){\n                more.put(a, more.get(a)-1);\n                if(more.get(a)==0)\n                    more.remove(a);\n\n            }else{\n                lack.put(a, lack.getOrDefault(a,0)+1);\n            }\n\n            int t = sorted[i];\n            if(lack.containsKey(t)){\n                lack.put(t, lack.get(t)-1);\n                if(lack.get(t)==0)\n                    lack.remove(t);\n\n            }else{\n                more.put(t, more.getOrDefault(t, 0)+1);\n            }\n\n            if(lack.isEmpty() && more.isEmpty()){\n                res++;\n            }\n\n        }\n        return res;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"max-chunks-to-make-sorted-ii","has_notes":false,"flag_type":1}