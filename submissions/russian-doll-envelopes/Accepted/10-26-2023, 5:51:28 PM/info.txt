{"id":1084504006,"question_id":354,"lang":"java","lang_name":"Java","time":"7 months, 2 weeks","timestamp":1698313888,"status":10,"status_display":"Accepted","runtime":"47 ms","url":"/submissions/detail/1084504006/","is_pending":"Not Pending","title":"Russian Doll Envelopes","memory":"95.9 MB","code":"class Solution {\n\n  // O(nlgn) maintain subseq with binarySearch \n    public int maxEnvelopes(int[][] envelopes) {\n\n        int len = envelopes.length;\n        Arrays.sort(envelopes, (a,b) -> a[0]!=b[0] ? a[0]-b[0] : b[1]-a[1]); //  sort w:asc, h:desc\n\n        List<Integer> subseq = new ArrayList<>();\n        for (int[] x: envelopes)\n        {\n            if (subseq.isEmpty() || x[1]>subseq.get(subseq.size()-1))\n                subseq.add(x[1]);\n            else{\n                int idx = binarySearch(subseq, x[1]);\n                subseq.set(idx, x[1]);\n            }\n        }\n        return subseq.size();\n    }\n\n \n    private int binarySearch(List<Integer> sub, int num) {\n        int left = 0;\n        int right = sub.size() - 1;\n        \n        while (left < right) {\n            int mid = (left + right) / 2;\n            if (sub.get(mid) == num) {\n                return mid;\n            }\n            \n            if (sub.get(mid) < num) {\n                left = mid + 1;\n            } else {\n                right = mid;\n            }\n        }\n        \n        return left;\n        \n    }\n\n\n    // // O(n^2) : TLE\n    // public int maxEnvelopes(int[][] envelopes) {\n\n    //     int len = envelopes.length;\n    //     Arrays.sort(envelopes, (a,b) -> a[0]!=b[0] ? a[0]-b[0] : b[1]-a[1]); // \n\n    //     int[] dp = new int[len];\n\n    //     for (int i=0; i<len; i++) {\n    //         dp[i] = 1;\n    //         for (int j=0; j<i; j++) {\n    //             if (envelopes[j][0]<envelopes[i][0] && envelopes[j][1]<envelopes[i][1])\n    //                 dp[i] = Math.max(dp[i], dp[j]+1);\n    //         }\n    //     }\n        \n    //     int ret = 0;\n    //     for (int i=0; i<len; i++)\n    //         ret = Math.max(ret, dp[i]);\n    //     return ret;\n    // }\n\n\n\n    // public ArrayList<Integer> lengthOfLIS(int[][] nums, int idx) {\n    //     ArrayList<Integer> list = new ArrayList<>();\n    //     list.add(0);\n        \n    //     for (int i = 1; i < nums.length; i++) {\n    //         int num = nums[i][idx];\n    //         if (num > nums[list.get(list.size() - 1)][idx]) {\n    //             list.add(i);\n    //         } else {\n    //             // Find the first element in sub that is greater than or equal to num\n    //             int j = 0;\n    //             while (num > nums[list.get(j)][idx]) {\n    //                 j += 1;\n    //             }\n                \n    //             list.set(j, i);\n    //         }\n    //     }\n\n    //     return list;\n    // }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"russian-doll-envelopes","has_notes":false,"flag_type":1}