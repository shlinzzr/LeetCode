{"id":1248159362,"question_id":354,"lang":"java","lang_name":"Java","time":"1 month, 1 week","timestamp":1714731950,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1248159362/","is_pending":"Not Pending","title":"Russian Doll Envelopes","memory":"N/A","code":"class Solution {\n    public int maxEnvelopes(int[][] env) {\n\n        int len = env.length;\n\n        Arrays.sort(env, (a,b)-> a[0]!=b[0] ? a[0]-b[0] : a[1]-b[1]); \n        // which is already ensure sort asc by width\n        // then we find the lis 2d to 1d from height\n\n        List<Integer> list = new ArrayList<>();\n        \n        for(int i=0; i<len; i++){\n            \n            int cur = env[i][1];\n\n            if( list.isEmpty() || cur > list.get(list.size()-1) ){\n                list.add(cur);\n            }else{ // cur is too small\n                int x = binarySearch(list, cur);\n                list.set(x, cur);\n            }\n\n        }\n\n        return list.size();\n        \n    }\n    // to find the first element of list \n    // which is the \"first one who greater\" than cur and replace it with smaller \"cur\"\n    private int binarySearch(List<Integer> list, int cur){\n\n        int st=0, ed= list.size()-1;\n\n        while(st<ed){ // 0 1\n            int m = st+(ed-st)/2; // 0\n\n            int mid = list.get(m);\n\n            if(mid<=cur){\n                st = m+1; //1\n            }else{\n                ed = m; //0\n            }\n        }\n\n        return st;\n    }\n}","compare_result":"111100101101100010111111110110101011110100000000010000100000000000000000000100000000110","title_slug":"russian-doll-envelopes","has_notes":false,"flag_type":1}