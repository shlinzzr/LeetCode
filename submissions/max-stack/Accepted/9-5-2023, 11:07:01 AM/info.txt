{"id":1040847333,"question_id":716,"lang":"java","lang_name":"Java","time":"9 months, 1 week","timestamp":1693883221,"status":10,"status_display":"Accepted","runtime":"60 ms","url":"/submissions/detail/1040847333/","is_pending":"Not Pending","title":"Max Stack","memory":"94.9 MB","code":"class MaxStack {\n    \n    private static class ListNode {\n        public ListNode prev, next;\n        public int value;\n        \n        public ListNode(int val) {\n            this.value = val;\n        }\n    }\n    \n    private final ListNode head;\n    private final TreeMap<Integer, LinkedList<ListNode>> map = new TreeMap<>(); \n\n    /** initialize your data structure here. */\n    public MaxStack() {\n        head = new ListNode(0);\n        head.next = head.prev = head;\n    }\n    \n    public void push(int x) {\n        ListNode node = new ListNode(x);\n        node.next = head;\n        node.prev = head.prev;\n        head.prev.next = node;\n        head.prev = node;\n        map.putIfAbsent(x, new LinkedList<>());\n        map.get(x).add(node);\n        // map.computeIfAbsent(x, k -> new LinkedList<>()).add(node);\n    }\n    \n    public int pop() {\n        ListNode tail = head.prev;\n        if (tail == head) {\n            return 0;   // no element exist\n        }\n        deleteNode(tail);\n        // since it's pop(), we are always sure that the last element in the map's value list will be the tail\n        map.get(tail.value).removeLast();\n        if (map.get(tail.value).isEmpty()) {\n            map.remove(tail.value);\n        }\n        return tail.value;\n    }\n    \n    public int top() {\n        return head.prev.value;\n    }\n    \n    public int peekMax() {\n        return map.lastKey();\n    }\n    \n    public int popMax() {\n        int max = peekMax();\n        ListNode node = map.get(max).removeLast();\n        deleteNode(node);\n        if (map.get(max).isEmpty()) {\n            map.remove(max);\n        }\n        return max;\n    }\n    \n    private void deleteNode(ListNode node) {\n        node.prev.next = node.next;\n        node.next.prev = node.prev;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"max-stack","has_notes":false,"flag_type":1}