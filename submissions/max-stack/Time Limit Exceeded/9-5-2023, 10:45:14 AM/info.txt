{"id":1040836311,"question_id":716,"lang":"java","lang_name":"Java","time":"9 months, 1 week","timestamp":1693881914,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1040836311/","is_pending":"Not Pending","title":"Max Stack","memory":"N/A","code":"// class MaxStack {\n\n//     /* TLE\n//     Stack<Integer> st;\n//     Stack<Integer> maxStack;\n    \n    \n//     public MaxStack() {\n//         st = new Stack<>();\n//         maxStack = new Stack<>();\n//     }\n    \n//     public void push(int x) {\n//         st.push(x);\n//         int max = maxStack.isEmpty() ? x : Math.max(maxStack.peek(), x);\n//         maxStack.push(max);\n//     }\n    \n//     public int pop() {\n        \n//         maxStack.pop();\n//         return st.pop();\n//     }\n    \n//     public int top() {\n//         return st.peek();\n//     }\n    \n//     public int peekMax() {\n//         return maxStack.peek();\n//     }\n    \n//     public int popMax() {\n        \n//         Stack<Integer> temp = new Stack<>();\n        \n//         int max = peekMax();\n        \n//         while(st.peek()!=max){\n//             temp.push(this.pop());\n//         }\n//         this.pop();\n        \n//         while(!temp.isEmpty()){\n//             this.push(temp.pop());\n//         }\n        \n//         return max;\n//     }*/\n    \n// }\n\n// /**\n//  * Your MaxStack object will be instantiated and called as such:\n//  * MaxStack obj = new MaxStack();\n//  * obj.push(x);\n//  * int param_2 = obj.pop();\n//  * int param_3 = obj.top();\n//  * int param_4 = obj.peekMax();\n//  * int param_5 = obj.popMax();\n//  */\n\n\nclass MaxStack {\n    Stack<Integer> stack;\n    Stack<Integer> maxStack;\n    /** initialize your data structure here. */\n    public MaxStack() {\n        stack = new Stack<>();\n        maxStack = new Stack<>();\n    }\n    \n    public void push(int x) {\n        pushHelper(x);\n    }\n    \n    public void pushHelper(int x) {\n        int tempMax = maxStack.isEmpty() ? Integer.MIN_VALUE : maxStack.peek();\n        if (x > tempMax) {\n            tempMax = x;\n        }\n        stack.push(x);\n        maxStack.push(tempMax);\n    }\n    \n    public int pop() {\n        maxStack.pop();\n        return stack.pop();\n    }\n    \n    public int top() {\n        return stack.peek();\n    }\n    \n    public int peekMax() {\n        return maxStack.peek();\n    }\n    \n    public int popMax() {\n        int max = maxStack.peek();\n        Stack<Integer> temp = new Stack<>();\n        \n        while (stack.peek() != max) {\n            temp.push(stack.pop());\n            maxStack.pop();\n        }\n        stack.pop();\n        maxStack.pop();\n        while (!temp.isEmpty()) {\n            int x = temp.pop();\n            pushHelper(x);\n        }\n        return max;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110","title_slug":"max-stack","has_notes":false,"flag_type":1}