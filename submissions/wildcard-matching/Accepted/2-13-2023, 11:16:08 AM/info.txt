{"id":896894515,"question_id":44,"lang":"java","lang_name":"Java","time":"1 year, 4 months","timestamp":1676258168,"status":10,"status_display":"Accepted","runtime":"45 ms","url":"/submissions/detail/896894515/","is_pending":"Not Pending","title":"Wildcard Matching","memory":"42.6 MB","code":"class Solution {\n    public boolean isMatch(String s, String p) {\n        int m=s.length();\n        int n=p.length();\n        \n        // dp[i][j] => the pattern [0:j] can cover the string [0:i]\n        \n        boolean[][] dp = new boolean[m+1][n+1];\n        dp[0][0]=true;\n        \n        for(int j=0; j<n; j++){\n            if(p.charAt(j)!='*')  break;\n                dp[0][j+1]=true;\n        }\n        \n        \n        for(int i=1; i<=m; i++){\n            for(int j=1; j<=n; j++){\n                \n                if(p.charAt(j-1)=='?'){\n                    dp[i][j]=dp[i-1][j-1];\n                    \n                }else if(p.charAt(j-1)=='*'){\n                    \n                    // for(int k=0; k<=i; k++){\n                    //     if(dp[k][j-1]==true) dp[i][j]=true;\n                    // }\n                    \n                    dp[i][j] = dp[i][j-1] || dp[i-1][j];\n                    \n                    \n                }else if(s.charAt(i-1)==p.charAt(j-1)){\n                    dp[i][j]=dp[i-1][j-1];\n                }\n                \n                \n            }\n        }\n        \n        return dp[m][n];\n    }\n}\n","compare_resulttitle_slug":"wildcard-matching","has_notes":false,"flag_type":1}