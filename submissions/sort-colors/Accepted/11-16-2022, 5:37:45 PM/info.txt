{"id":844471318,"question_id":75,"lang":"java","lang_name":"Java","time":"1 year, 6 months","timestamp":1668591465,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/844471318/","is_pending":"Not Pending","title":"Sort Colors","memory":"40.5 MB","code":"class Solution {\n    public void sortColors(int[] nums) {\n        \n        mergesort(nums, new int[nums.length], 0, nums.length-1);\n        \n    }\n    \n    private void mergesort(int[] nums, int[] temp, int leftStart, int rightEnd){\n        if(leftStart>=rightEnd)\n            return;\n        \n        int mid = leftStart + (rightEnd-leftStart)/2;\n        \n        mergesort(nums, temp, leftStart, mid);\n        mergesort(nums, temp, mid+1, rightEnd);\n        mergeHalves(nums, temp, leftStart, rightEnd);\n    }\n    \n    \n    private void mergeHalves(int[] nums, int[] temp, int leftStart, int rightEnd){\n        \n        int left = leftStart;\n        int leftEnd = leftStart+(rightEnd-leftStart)/2;\n        int rightStart = leftEnd +1;\n        int right = rightStart;\n        int curr=left;\n        \n        while(left<=leftEnd && right<=rightEnd){\n            \n            if(nums[left] <= nums[right]){\n                temp[curr] = nums[left];\n                left++;\n            }else{\n                temp[curr] = nums[right];\n                right++;\n            }\n            curr++;\n        }\n        \n        \n        System.arraycopy(nums, left, temp, curr, leftEnd-left+1);\n        System.arraycopy(nums, right, temp, curr, rightEnd-right+1);\n        System.arraycopy(temp, leftStart, nums, leftStart, rightEnd-leftStart+1);\n            \n        \n    }\n    \n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"sort-colors","has_notes":false,"flag_type":1}