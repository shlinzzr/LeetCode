{"id":866107069,"question_id":75,"lang":"java","lang_name":"Java","time":"1 year, 5 months","timestamp":1672112490,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/866107069/","is_pending":"Not Pending","title":"Sort Colors","memory":"N/A","code":"class Solution {\n    public void sortColors(int[] nums) {\n        int len = nums.length;\n        mergesort(nums, new int[len], 0, len-1);\n    }\n    \n    private void mergesort(int[] nums, int[]temp, int st, int ed){\n        \n        if(st>=ed)\n            return;\n        \n        int mid = st + (ed-st)/2;\n        \n        mergesort(nums, temp, 0, mid);\n        mergesort(nums, temp, mid+1, ed);\n        mergeHalves(nums, temp, st, ed);\n        \n    }\n    \n   private void mergeHalves(int[] nums, int[] temp, int leftStart, int rightEnd){\n        \n        int left = leftStart;\n        int leftEnd = leftStart+(rightEnd-leftStart)/2;\n        int rightStart = leftEnd +1;\n        int right = rightStart;\n        int curr=left;\n        \n        while(left<=leftEnd && right<=rightEnd){\n            \n            if(nums[left] <= nums[right]){\n                temp[curr] = nums[left];\n                left++;\n            }else{\n                temp[curr] = nums[right];\n                right++;\n            }\n            curr++;\n        }\n        \n        \n        System.arraycopy(nums, left, temp, curr, leftEnd-left+1);\n        System.arraycopy(nums, right, temp, curr, rightEnd-right+1);\n        System.arraycopy(temp, leftStart, nums, leftStart, rightEnd-leftStart+1);\n            \n        \n    }\n    \n}","compare_result":"111111111111111111111111111111111111111111111111111111111000000000000000000000000000000","title_slug":"sort-colors","has_notes":false,"flag_type":1}