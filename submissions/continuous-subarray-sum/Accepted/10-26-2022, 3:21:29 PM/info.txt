{"id":830531700,"question_id":523,"lang":"java","lang_name":"Java","time":"1 year, 7 months","timestamp":1666768889,"status":10,"status_display":"Accepted","runtime":"66 ms","url":"/submissions/detail/830531700/","is_pending":"Not Pending","title":"Continuous Subarray Sum","memory":"108.3 MB","code":"class Solution {\n    public boolean checkSubarraySum(int[] nums, int k) {\n        HashMap<Integer, Integer> map = new HashMap<>();\n        map.put(0, -1); // (mod, idx);\n        int sum = 0;\n        \n        for(int i=0; i<nums.length;i++){\n            \n            int n = nums[i];\n            sum+=n;\n            int m = sum%k;\n\n            \n            if(!map.containsKey(m)){\n                map.put(m, i);\n                \n            }else if(i-map.get(m)>1){\n                return true;\n            }\n            \n            \n        }\n        \n        return false;\n        \n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"continuous-subarray-sum","has_notes":false,"flag_type":1}