{"id":1281618175,"question_id":523,"lang":"java","lang_name":"Java","time":"4 days, 12 hours","timestamp":1717855688,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1281618175/","is_pending":"Not Pending","title":"Continuous Subarray Sum","memory":"N/A","code":"class Solution {\n    public boolean checkSubarraySum(int[] nums, int k) {\n        \n        Map<Integer, Integer> map = new HashMap<>();\n        int len = nums.length;\n        // int[] presum = new int[len+1];\n        // for(int i=0; i<len; i++){\n        //     presum[i+1] = nums[i]+presum[i];\n        // }\n        int sum = 0;\n\n        for(int i=0; i<len; i++){\n            sum += nums[i];\n            sum%=k;\n\n            if(map.containsKey(sum)){\n                if(i-map.get(sum)>0){\n                    return true;\n                }\n            }else{\n                map.put(sum, i);\n            }\n        }\n\n        return false;\n        \n\n\n        \n\n        \n    }\n}","compare_result":"111110101111111110100010010101111110111111111111111111111111111111111111111111111111111111111101101","title_slug":"continuous-subarray-sum","has_notes":false,"flag_type":1}