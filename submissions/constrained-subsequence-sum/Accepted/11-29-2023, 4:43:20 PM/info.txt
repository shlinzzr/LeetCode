{"id":1108760790,"question_id":1286,"lang":"java","lang_name":"Java","time":"6 months, 2 weeks","timestamp":1701247400,"status":10,"status_display":"Accepted","runtime":"32 ms","url":"/submissions/detail/1108760790/","is_pending":"Not Pending","title":"Constrained Subsequence Sum","memory":"58.9 MB","code":"class Solution {\n    public int constrainedSubsetSum(int[] nums, int k) {\n        int len = nums.length;\n        Deque<int[]> dq = new ArrayDeque<>(); // idx, total\n        //[10,2,-10,5,20], k = 2\n\n        int res = Integer.MIN_VALUE;\n\n        for(int i=0; i<len; i++){\n\n            int total = nums[i] + (!dq.isEmpty() ?  dq.peek()[1] : 0);\n            res = Math.max(res, total);\n            \n            while(!dq.isEmpty() && total > dq.peekLast()[1]){\n                dq.pollLast();\n            }\n\n            while(!dq.isEmpty() && i-dq.peek()[0]>=k){\n                dq.poll();\n            }\n\n            if(total>0)\n                dq.offer(new int[]{i, total});\n        }\n\n        return res;\n    }\n}","compare_result":"1111111111111111111111111111111111111111","title_slug":"constrained-subsequence-sum","has_notes":false,"flag_type":1}