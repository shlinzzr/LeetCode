{"id":1108751486,"question_id":1286,"lang":"java","lang_name":"Java","time":"6 months, 2 weeks","timestamp":1701246205,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1108751486/","is_pending":"Not Pending","title":"Constrained Subsequence Sum","memory":"N/A","code":"class Solution {\n    public int constrainedSubsetSum(int[] nums, int k) {\n        int len = nums.length;\n        TreeMap<Integer, Integer> map = new TreeMap<>();\n        int[] dp = new int[len];\n\n        \n        for(int i=0; i<len; i++){\n            if(map.size()>k && i-k-1>=0){\n                map.put(dp[i-k-1], map.get(dp[i-k-1])-1);\n                if(map.getOrDefault(dp[i-k-1],0)==0)\n                    map.remove(dp[i-k-1]);\n            }\n\n            dp[i] = nums[i];\n            if(map.size()>0){\n                dp[i] = Math.max(dp[i], nums[i]+map.lastKey());\n            }\n\n            map.put(dp[i], map.getOrDefault(dp[i],0)+1);\n        }\n\n        int res = Integer.MIN_VALUE;\n        for(int i=0; i<len; i++){\n            res = Math.max(res, dp[i]);\n        }\n        return res;\n\n\n\n    }\n\n    // nums [a b i c d j f] \n    // subseq : [i, j] => j-i<=k, find max sum of subseq\n}","compare_result":"1111111111111000111111110111111001011111","title_slug":"constrained-subsequence-sum","has_notes":false,"flag_type":1}