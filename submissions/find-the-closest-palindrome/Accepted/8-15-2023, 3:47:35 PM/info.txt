{"id":1021842621,"question_id":564,"lang":"java","lang_name":"Java","time":"10Â months","timestamp":1692085655,"status":10,"status_display":"Accepted","runtime":"14 ms","url":"/submissions/detail/1021842621/","is_pending":"Not Pending","title":"Find the Closest Palindrome","memory":"41.4 MB","code":"class Solution {\n    \n    // GraceMeng https://leetcode.com/problems/find-the-closest-palindrome/discuss/147949/Thinking-Process\n    \n     public String nearestPalindromic(String n) {\n        long nl = Long.parseLong(n);\n        int len = n.length();\n        \n         \n          System.out.println(nl);\n         \n         \n        //\n        // Corner cases\n        //\n        \n        // <= 10 or equal to 100, 1000, 10000, ... \n        if (nl <= 10 || (nl % 10 == 0 \n                         && n.charAt(0)=='1'\n                         && Long.parseLong(n.substring(1)) == 0)) {\n            \n            return \"\" + (nl - 1);\n        }\n        \n        // 11 or 101, 1001, 10001, 100001, ... \n        if (nl == 11 || (nl % 10 == 1 \n                         && n.charAt(0) == '1' \n                         && Long.parseLong(n.substring(1, len - 1)) == 0)) {\n            return \"\" + (nl - 2);\n        }\n        \n        // 99, 999, 9999, 99999, ...  \n        if (isAllDigitNine(n)) {\n            return \"\" + (nl + 2);\n        }\n        \n        //\n        // Construct the closest palindrome and calculate absolute difference with n\n        //\n        boolean isEvenDigits = len % 2 == 0;\n        \n        String palindromeRootStr\n            = (isEvenDigits) ? n.substring(0, len / 2) : n.substring(0, len / 2 + 1);\n        \n        int palindromeRoot = Integer.valueOf(palindromeRootStr); \n        long equal = toPalindromeDigits(\"\" + palindromeRoot, isEvenDigits);\n        long diffEqual = Math.abs(nl - equal);\n            \n        long bigger = toPalindromeDigits(\"\" + (palindromeRoot + 1), isEvenDigits);\n        long diffBigger = Math.abs(nl - bigger);\n        \n        long smaller = toPalindromeDigits(\"\" + (palindromeRoot - 1), isEvenDigits);\n        long diffSmaller = Math.abs(nl - smaller);\n         \n         System.out.println(equal + \" \" + bigger + \" \" + smaller);\n         \n        //\n        // Find the palindrome with minimum absolute differences\n        // If tie, return the smaller one\n        //\n        long closest = (diffBigger < diffSmaller) ? bigger : smaller;\n        long minDiff = Math.min(diffBigger, diffSmaller);\n        \n        if (diffEqual != 0) { // n is not a palindrome, diffEqual should be considered\n            if (diffEqual == minDiff) { // if tie\n                closest = Math.min(equal, closest);\n            } else if (diffEqual < minDiff){\n                closest = equal;\n            }\n        }\n        \n        return \"\" + closest;\n    }\n    \n    private long toPalindromeDigits(String num, boolean isEvenDigits) {\n        StringBuilder reversedNum = new StringBuilder(num).reverse();\n        String palindromeDigits = isEvenDigits\n            ? num + reversedNum.toString()\n            : num + (reversedNum.deleteCharAt(0)).toString();\n        return Long.parseLong(palindromeDigits);\n    }\n    \n    private boolean isAllDigitNine(String n) {\n        for (char ch : n.toCharArray()) {\n            if (ch != '9') {\n                return false;\n            }\n        }\n        return true;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-the-closest-palindrome","has_notes":false,"flag_type":1}