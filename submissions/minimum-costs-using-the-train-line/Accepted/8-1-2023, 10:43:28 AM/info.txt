{"id":1008990056,"question_id":2500,"lang":"java","lang_name":"Java","time":"10 months, 2 weeks","timestamp":1690857808,"status":10,"status_display":"Accepted","runtime":"36 ms","url":"/submissions/detail/1008990056/","is_pending":"Not Pending","title":"Minimum Costs Using the Train Line","memory":"79.4 MB","code":"class Solution {\n    public long[] minimumCosts(int[] regular, int[] express, int expressCost) {\n        int len = regular.length;\n        \n        \n//         // bottom-up dp]\n//         long[] res = new long[len];\n//         long[][] dp = new long[len+1][2];\n//         dp[0][1] = 0;             // 1: regular\n//         dp[0][0] = expressCost;   // 0: express\n//         // Need to spend expressCost, as we start from the regular lane initially.\n        \n//         for (int i=1; i<len+1; i++) {\n//             // Use the regular lane; no extra cost to switch to the express lane.\n//             dp[i][1] = regular[i-1] + Math.min(dp[i-1][1], dp[i-1][0]);\n//             // Use express lane; add extra cost if the previously regular lane was used.\n//             dp[i][0] = express[i-1] + Math.min(expressCost + dp[i - 1][1], dp[i - 1][0]);\n            \n//             res[i-1] = Math.min(dp[i][0], dp[i][1]);\n//         }\n//         return res; \n        \n        \n        \n        // top-down dp\n        long[][] dp = new long[len][2];  //1:regular, 0:express\n        for (int i=0; i<len; i++) {\n            Arrays.fill(dp[i], -1); // init\n        }\n        \n        // start from last stop, 1: regular lane\n        solve(len-1, 1, dp, regular, express, expressCost);\n        \n        long[] ans = new long[len];\n        // Store cost for each stop.\n        for (int i = 0 ; i < len; i++) {\n            ans[i] = dp[i][1];\n        }\n        \n        return ans;\n    }\n    \n    \n    private long solve(int i, int lane, long[][] dp, int[] regular, int[] express, int expressCost) {\n       \n        if (i < 0)  return 0;  // If all stops are covered, return 0.\n        if (dp[i][lane] != -1)  return dp[i][lane];\n        \n        // Use the regular lane; no extra cost to switch lanes if required.\n        long regularLane = regular[i] + solve(i-1, 1, dp, regular, express, expressCost);\n        // Use express lane; add expressCost if the previously regular lane was used.\n        long expressLane = (lane == 1 ? expressCost : 0) + express[i] \n                                                    + solve(i - 1, 0, dp, regular, express, expressCost);\n\n        return dp[i][lane] = Math.min(regularLane, expressLane);\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111","title_slug":"minimum-costs-using-the-train-line","has_notes":false,"flag_type":1}