{"id":874633506,"question_id":803,"lang":"java","lang_name":"Java","time":"1 year, 5 months","timestamp":1673256221,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/874633506/","is_pending":"Not Pending","title":"Cheapest Flights Within K Stops","memory":"N/A","code":"class Solution {\n    \n    int price = Integer.MAX_VALUE;\n    int dest;\n    int[][] priceList;\n    int kk;\n    public int findCheapestPrice(int n, int[][] flights, int src, int dst, int k) {\n        \n        priceList = new int[n][n];\n        dest = dst;\n        kk=k;\n        HashMap<Integer, Set<Integer>> map = new HashMap<>();\n        \n        for(int[] f : flights){\n            \n            priceList[f[0]][f[1]] = f[2];\n            map.putIfAbsent(f[0], new HashSet<>());\n            map.get(f[0]).add(f[1]);\n        }\n        \n        boolean[] seen = new boolean[n];\n        dfs(src, 0, map, seen, 0);        \n        \n        return price;\n        \n        \n    }\n    \n    \n    private void dfs(int cur, int p,  HashMap<Integer, Set<Integer>> map, boolean[] seen, int k){\n        \n        \n        if(cur==dest){\n            price=Math.min(price, p);\n            return;\n        }\n        \n        if(kk+1==k)\n            return;\n        \n        for(int next : map.get(cur)){\n            \n            if(seen[next]==false){\n                seen[next]=true;\n                p+=priceList[cur][next];\n                dfs(next, p, map, seen, k+1);\n                seen[next]=false;\n                p-=priceList[cur][next];\n            }\n            \n            \n        }\n        \n        \n        \n    }\n}","compare_result":"1110000000000000000000000000000000000000000000000000","title_slug":"cheapest-flights-within-k-stops","has_notes":false,"flag_type":1}