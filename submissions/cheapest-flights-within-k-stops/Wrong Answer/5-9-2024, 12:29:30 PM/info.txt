{"id":1253205716,"question_id":803,"lang":"java","lang_name":"Java","time":"1 month","timestamp":1715228970,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1253205716/","is_pending":"Not Pending","title":"Cheapest Flights Within K Stops","memory":"N/A","code":"class Solution {\n\n    // dijkstra : 只能拿來找 shortest path\n    public int findCheapestPrice(int n, int[][] flights, int src, int dst, int k) {\n        \n\n        Map<Integer, Map<Integer, Integer>> map = new HashMap<>();\n        buildMap(flights, map);\n\n        // System.out.println(map);\n\n        Set<Integer> seen = new HashSet<>();\n        seen.add(src);\n        int[] cost = new int[n];\n        Arrays.fill(cost, Integer.MAX_VALUE);\n        cost[src] = 0;\n\n        PriorityQueue<int[]> pq = new PriorityQueue<>(\n            (a,b)-> a[2]-b[2]\n        );\n\n        for(int adj : map.getOrDefault(src, new HashMap<>()).keySet()){\n            pq.offer(new int[]{src, adj, map.get(src).get(adj)});\n        }\n\n        int edgeCnt = 0;\n\n        System.out.println(\"pq.size()=\"+pq.size());\n\n        while(edgeCnt<=k+1 && !pq.isEmpty()){\n\n            int[] p = pq.poll();\n\n            System.out.println(p[0] + \" \" + p[1] + \" \" + p[2]);\n\n            if(seen.contains(p[1])) continue;\n\n            seen.add(p[1]);\n            cost[p[1]] = cost[p[0]] + p[2];\n            edgeCnt++;\n\n            if(p[0]==dst) return cost[dst];\n\n            for(int key : map.getOrDefault(p[1], new HashMap<>()).keySet()){\n                if(seen.contains(key)) continue;\n                pq.offer(new int[]{p[1], key, map.get(p[1]).get(key)});\n            }\n        }\n        return -1;\n\n    }\n\n\n    private void buildMap(int[][] flights, Map<Integer, Map<Integer, Integer>> map){\n        \n        for(int[] f : flights){\n            map.putIfAbsent(f[0], new HashMap<>());\n            \n            if(!map.get(f[0]).containsKey(f[1]) || map.get(f[0]).get(f[1])>f[2]){\n                map.get(f[0]).put(f[1], f[2]);\n            }\n        }\n    }\n\n\n    // Bellmen-ford \n    // public int findCheapestPrice(int n, int[][] flights, int src, int dst, int k) {\n        \n    //     int[] cost = new int[n];\n    //     Arrays.fill(cost, Integer.MAX_VALUE);\n    //     cost[src] = 0;\n        \n    //     PriorityQueue<int[]> pq = new PriorityQueue<>(\n    //         (a,b)->(a[2]-b[2])\n    //     );\n        \n    //     while(k-->=0){\n    //         int[] tmp = Arrays.copyOfRange(cost, 0, n);\n    //         for(int i=0; i<n; i++){\n    //             if(tmp[i]!=Integer.MAX_VALUE){\n    //                 for(int[] f : flights){\n    //                     if(f[0]==i)\n    //                         cost[f[1]] = Math.min(cost[f[1]], tmp[f[0]] + f[2]);\n    //                 }\n    //             }\n    //         }\n    //     }\n    //     return cost[dst]==Integer.MAX_VALUE ? -1 : cost[dst];\n        \n    // }\n}","compare_result":"000101111010000000011000000001000000010100001001100100","title_slug":"cheapest-flights-within-k-stops","has_notes":false,"flag_type":1}