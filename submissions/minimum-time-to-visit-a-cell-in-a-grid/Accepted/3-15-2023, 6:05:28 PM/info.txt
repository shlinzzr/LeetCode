{"id":915565036,"question_id":2711,"lang":"java","lang_name":"Java","time":"1 year, 3 months","timestamp":1678874728,"status":10,"status_display":"Accepted","runtime":"301 ms","url":"/submissions/detail/915565036/","is_pending":"Not Pending","title":"Minimum Time to Visit a Cell In a Grid","memory":"56.2 MB","code":"class Solution {\n    public int minimumTime(int[][] grid) {\n        if (grid[0][1] > 1 && grid[1][0] > 1) return -1;\n\n        int m = grid.length, n = grid[0].length;\n        int[][] dirs = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};\n        boolean[][] visited = new boolean[m][n];\n        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> Integer.compare(a[0], b[0]));\n        pq.offer(new int[]{grid[0][0], 0, 0});\n\n        while (!pq.isEmpty()) {\n            int[] curr = pq.poll();\n            int time = curr[0], row = curr[1], col = curr[2];\n\n            if (row == m - 1 && col == n - 1) return time;\n            if (visited[row][col]) continue;\n            visited[row][col] = true;\n\n            for (int[] dir : dirs) {\n                int r = row + dir[0], c = col + dir[1];\n                if (r < 0 || r >= m || c < 0 || c >= n || visited[r][c]) continue;\n                int wait = ((grid[r][c] - time) % 2 == 0) ? 1 : 0;\n                pq.offer(new int[]{Math.max(grid[r][c] + wait, time + 1), r, c});\n            }\n        }\n        return -1;\n    }\n}","compare_result":"1111111111111111111111111111111111111111","title_slug":"minimum-time-to-visit-a-cell-in-a-grid","has_notes":false,"flag_type":1}