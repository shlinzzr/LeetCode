{"id":923546634,"question_id":1046,"lang":"java","lang_name":"Java","time":"1 year, 2 months","timestamp":1679998267,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/923546634/","is_pending":"Not Pending","title":"Max Consecutive Ones III","memory":"44.5 MB","code":"class Solution {\n    public int longestOnes(int[] nums, int k) {\n        \n        int len = nums.length;\n        int max =0;\n        \n        \n        int cnt=0;\n        \n        \n        int st=0;\n        for(int ed=0; ed<len; ed++){\n            \n            if(nums[ed]==1){\n                max = Math.max(max, ed-st+1);\n                \n            }else{\n                cnt++;\n                while(cnt>k){\n                    if(nums[st]==0)\n                        cnt--;\n                    st++;\n                }\n                max = Math.max(max, ed-st+1);\n            }\n            \n        }\n        \n        return max;\n        \n        \n        \n        \n        \n        \n        \n        \n//         int max = 0, zero = 0; // flip at most k zero\n//         for (int st = 0, ed = 0; ed < nums.length; ed++) {\n//             if (nums[ed] == 0)                                           \n//                 zero++;\n//             while (zero > k){\n//                 if (nums[st++] == 0){\n//                     zero--;                                     \n//                 }\n//             }\n                    \n//             max = Math.max(max, ed - st + 1);\n//         }                                                               \n//         return max;             \n    }\n    //     int max = 0, \n}\n\n","compare_result":"1111111111111111111111111111111111111111111111111111","title_slug":"max-consecutive-ones-iii","has_notes":false,"flag_type":1}