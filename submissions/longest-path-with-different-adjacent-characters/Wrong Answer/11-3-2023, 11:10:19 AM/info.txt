{"id":1090311555,"question_id":2364,"lang":"java","lang_name":"Java","time":"7 months, 1 week","timestamp":1698981019,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1090311555/","is_pending":"Not Pending","title":"Longest Path With Different Adjacent Characters","memory":"N/A","code":"class Solution {\n\n    int res= 0;\n\n    public int longestPath(int[] parent, String s) {\n        List<List<Integer>> g= new ArrayList<>();\n\n        int n = parent.length;\n        if(n==1)\n            return 1;\n\n\n        for(int i=0; i<n; i++)\n            g.add(new ArrayList<>());\n        \n        for(int i=1; i<n; i++){\n            int p = parent[i];\n            g.get(p).add(i);\n        }\n\n        dfs(g, s, 0);\n        return res;\n\n    }\n\n\n    private int dfs(List<List<Integer>> g, String s, int cur){\n\n        int top1=0, top2=0;\n\n        for(int child : g.get(cur)){\n            if(s.charAt(child)!=s.charAt(cur)){\n                int path = dfs(g, s, child);\n                if(path>top1){\n                    top2 = top1;\n                    top1 = path;\n                }else if(path>top2){\n                    top2=path;\n                }\n            }\n        }\n        res = Math.max(res, 1+top1+top2);\n\n        return 1 + top1;\n    }\n}","compare_result":"1111111100011110111110111111111110111111111111101110111101110011011000110011101101101111111011101111110111110111111110001101110111011111100001","title_slug":"longest-path-with-different-adjacent-characters","has_notes":false,"flag_type":1}