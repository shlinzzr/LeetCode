{"id":893849233,"question_id":449,"lang":"java","lang_name":"Java","time":"1 year, 4 months","timestamp":1675837412,"status":10,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/893849233/","is_pending":"Not Pending","title":"Serialize and Deserialize BST","memory":"43.7 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\npublic class Codec {\n\n    // Encodes a tree to a single string.\n       public String serialize(TreeNode root) {\n        StringBuilder sb = new StringBuilder();\n        if (root == null) return \"null\";\n        //traverse it recursively if you want to, I am doing it iteratively here\n        Stack<TreeNode> st = new Stack<>();\n        st.push(root);\n        while (!st.empty()) {\n            root = st.pop();\n            sb.append(root.val).append(\",\");\n            if (root.right != null) st.push(root.right);\n            if (root.left != null) st.push(root.left);\n        }\n        return sb.toString();\n    }\n\n    // Decodes your encoded data to tree.\n    // pre-order traversal\n    public TreeNode deserialize(String data) {\n        if (data.equals(\"null\")) return null;\n        String[] strs = data.split(\",\");\n        Queue<Integer> q = new LinkedList<>();\n        for (String e : strs) {\n            q.offer(Integer.parseInt(e));\n        }\n        return getNode(q);\n    }\n    \n    // some notes:\n    //   5\n    //  3 6\n    // 2   7\n    private TreeNode getNode(Queue<Integer> q) { //q: 5,3,2,6,7\n        if (q.isEmpty()) return null;\n        TreeNode root = new TreeNode(q.poll());//root (5)\n        Queue<Integer> samllerQueue = new LinkedList<>();\n        while (!q.isEmpty() && q.peek() < root.val) {\n            samllerQueue.offer(q.poll());\n        }\n        //smallerQueue : 3,2   storing elements smaller than 5 (root)\n        root.left = getNode(samllerQueue);\n        //q: 6,7   storing elements bigger than 5 (root)\n        root.right = getNode(q);\n        return root;\n    }\n}\n\n// Your Codec object will be instantiated and called as such:\n// Codec ser = new Codec();\n// Codec deser = new Codec();\n// String tree = ser.serialize(root);\n// TreeNode ans = deser.deserialize(tree);\n// return ans;","compare_result":"11111111111111111111111111111111111111111111111111111111111111","title_slug":"serialize-and-deserialize-bst","has_notes":false,"flag_type":1}