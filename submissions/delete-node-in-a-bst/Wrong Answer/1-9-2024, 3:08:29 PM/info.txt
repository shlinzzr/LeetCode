{"id":1141209446,"question_id":450,"lang":"java","lang_name":"Java","time":"5Â months","timestamp":1704784109,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1141209446/","is_pending":"Not Pending","title":"Delete Node in a BST","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public TreeNode deleteNode(TreeNode root, int key) {\n\n        if(root==null) return null;\n\n        if(key < root.val){\n            root.left = deleteNode(root.left, key);\n        }else if(root.val>key){\n            root.right = deleteNode(root.right, key);\n        }else { // found the delete node\n            if(root.left==null){\n                return root.right;\n            }else if (root.right==null)\n                return root.left;\n            \n            // a node who has two children, retrun the min of right tree\n            root.val  = getMin(root.right);\n            root.right = deleteNode(root.right, root.val);\n        }\n\n        return root;\n    }\n\n    private int getMin(TreeNode node){\n        \n        while(node.left!=null){\n            node = node.left;\n        }\n        return node.val;\n    }\n}","compare_result":"11111101001101111011001101110101111111100000100000000010000010000000000101000000010000000001","title_slug":"delete-node-in-a-bst","has_notes":false,"flag_type":1}