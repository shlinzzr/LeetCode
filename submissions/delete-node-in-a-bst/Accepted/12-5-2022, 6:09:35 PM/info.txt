{"id":854954150,"question_id":450,"lang":"java","lang_name":"Java","time":"1 year, 6 months","timestamp":1670234975,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/854954150/","is_pending":"Not Pending","title":"Delete Node in a BST","memory":"49.7 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public TreeNode deleteNode(TreeNode root, int key) {\n        if (root == null) return root;\n        if (root.val > key) root.left = deleteNode(root.left, key);\n        else if (root.val < key) root.right = deleteNode(root.right, key);\n        else { // found node to be deleted\n            if (root.left == null) return root.right;\n            else if (root.right == null) return root.left;\n            // node with two children, replace with the inOrder successor(minVal) in the right subtree\n            root.val = getMin(root.right);\n            root.right = deleteNode(root.right, root.val);\n        }\n        return root;\n    }\n    private int getMin(TreeNode root) {\n        while (root.left != null) {root = root.left;}\n        return root.val;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"delete-node-in-a-bst","has_notes":false,"flag_type":1}