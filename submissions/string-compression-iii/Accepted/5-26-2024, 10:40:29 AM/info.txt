{"id":1268013471,"question_id":3451,"lang":"java","lang_name":"Java","time":"2 weeks, 4 days","timestamp":1716691229,"status":10,"status_display":"Accepted","runtime":"16 ms","url":"/submissions/detail/1268013471/","is_pending":"Not Pending","title":"String Compression III","memory":"46.2 MB","code":"class Solution {\n    public String compressedString(String word) {\n//         Begin with an empty string comp. While word is not empty, use the following operation:\n// Remove a maximum length prefix of word made of a single character c repeating at most 9 times.\n// Append the length of the prefix followed by c to comp.\n// Return the string comp.\n        \n        \n        StringBuilder comp = new StringBuilder();\n        char[] arr = word.toCharArray();\n        \n        int len = word.length();\n        for(int i=0; i<len ;i++){\n                \n            int j=1;\n            for( ; j<9; j++){\n                if(i+j>=len || arr[i]!=arr[i+j]) break;\n            }\n            comp.append(j).append(arr[i]);\n            i+=j-1;\n            \n        }\n        \n        return comp.toString();\n    }\n}","compare_resulttitle_slug":"string-compression-iii","has_notes":false,"flag_type":1}