{"id":920011788,"question_id":2682,"lang":"java","lang_name":"Java","time":"1 year, 2 months","timestamp":1679474729,"status":10,"status_display":"Accepted","runtime":"494 ms","url":"/submissions/detail/920011788/","is_pending":"Not Pending","title":"Count Increasing Quadruplets","memory":"223 MB","code":"class Solution {\n    public long countQuadruplets(int[] nums) {\n        \n        int n = nums.length;\n        \n        int[][] countLarger = new int[n][n], countSmaller = new int[n][n];\n        for (int i = 0; i < n; i++) {\n            int c = 0;\n            for (int j = i + 1; j < n; j++) {\n                if (nums[j] > nums[i]) {\n                    countLarger[i][j] = ++c;\n                } else {\n                    countLarger[i][j] = c;\n                }\n            }\n        }\n        for (int i = n - 1; i >= 0; i--) {\n            int c = 0;\n            for (int j = i - 1; j >= 0; j--) {\n                if (nums[j] < nums[i]) {\n                    countSmaller[j][i] = ++c;\n                } else {\n                    countSmaller[j][i] = c;\n                }\n            }\n        }       \n        long res = 0;\n        for (int j = 1; j < n - 2; j++) {\n            for (int k = j + 1; k < n - 1; k++) {\n                if (nums[k] > nums[j]) continue;\n                // find the count how many numbers smaller than nums[k] and index smaller than j, and how many numbers larger than nums[j] and index larger than k， than add the product of them into res\n                res += (countSmaller[0][k] - countSmaller[j][k]) * (countLarger[j][n - 1] - countLarger[j][k]);\n            }\n        }\n        return res;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"count-increasing-quadruplets","has_notes":false,"flag_type":1}