{"id":1278054431,"question_id":581,"lang":"java","lang_name":"Java","time":"1 week","timestamp":1717560563,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1278054431/","is_pending":"Not Pending","title":"Shortest Unsorted Continuous Subarray","memory":"45 MB","code":"class Solution {\n    public int findUnsortedSubarray(int[] nums) {\n        int len = nums.length;\n        int min = nums[len-1];\n        int max= nums[0];\n\n        // nums 要改成 non-desc \n        // 因此邊界是不用改的, from 1~len-2\n\n        int st =len-1, ed=0;\n        for(int i=1; i<len; i++){\n            max = Math.max(max, nums[i]); // 從左邊數來第i個idx (start from 0)\n            min = Math.min(min, nums[len-i-1]); // 從右邊數來第i個idx (start from 0)\n\n            if(nums[i]<max) ed = i;  // 如果現在cur比左邊看過來的max 還小 表示打破了 non-desc 更新需要修改得subarray.end\n            if(nums[len-i-1]>min) st = len-i-1; // 如\n            \n        }\n\n        return st>=ed ? 0 : ed-st+1;\n\n        \n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"shortest-unsorted-continuous-subarray","has_notes":false,"flag_type":1}