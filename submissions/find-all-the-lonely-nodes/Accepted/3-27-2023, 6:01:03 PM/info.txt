{"id":922933496,"question_id":1609,"lang":"java","lang_name":"Java","time":"1 year, 2 months","timestamp":1679911263,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/922933496/","is_pending":"Not Pending","title":"Find All The Lonely Nodes","memory":"43.4 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public List<Integer> getLonelyNodes(TreeNode root) {\n        List<Integer> res = new ArrayList<>();\n        \n        boolean isLonely = (root.left==null && root.right!=null) || (root.right==null && root.left!=null);\n        \n        helper(root, false, res);\n        return res;\n    }\n    \n    private void helper(TreeNode root, boolean single, List<Integer> res){\n        if(root==null)\n            return;\n        \n        if(single){\n            res.add(root.val);\n        }\n        \n        single = (root.left==null && root.right!=null) || (root.right==null && root.left!=null);\n        \n        helper(root.left, single, res);\n        helper(root.right, single, res);\n        \n    }\n}\n","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-all-the-lonely-nodes","has_notes":false,"flag_type":1}