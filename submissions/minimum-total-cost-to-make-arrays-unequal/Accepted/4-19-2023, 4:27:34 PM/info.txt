{"id":936252745,"question_id":2592,"lang":"java","lang_name":"Java","time":"1 year, 1 month","timestamp":1681892854,"status":10,"status_display":"Accepted","runtime":"24 ms","url":"/submissions/detail/936252745/","is_pending":"Not Pending","title":"Minimum Total Cost to Make Arrays Unequal","memory":"62.8 MB","code":"class Solution {\n    public long minimumTotalCost(int[] nums1, int[] nums2) {\n        //https://www.youtube.com/watch?v=WGcjEzidnEA\n        \n        long ans=0;\n        int count=0;\n        Map<Integer,Integer> map=new HashMap();\n        for(int i=0;i<nums1.length;i++)\n        {\n            if(nums1[i]==nums2[i])\n            {\n                ans+=i;\n                map.put(nums1[i], map.getOrDefault(nums1[i],0)+1);\n                count++;\n            }               \n        }\n        int max=0;\n        int maxcount=0;\n        for(Map.Entry<Integer,Integer> ent:map.entrySet())\n        {\n            if(ent.getValue()>maxcount)\n            {\n                maxcount=ent.getValue();\n                max=ent.getKey();\n            }\n        }\n        int swap=2*maxcount-count;\n        for(int i=0;swap>0 && i<nums1.length;i++)\n        {\n            if(nums1[i]!=nums2[i]&& nums1[i]!=max&&nums2[i]!=max)\n            {\n                ans+=i;\n                swap--;\n            }\n        }\n        return swap>0?-1:ans;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-total-cost-to-make-arrays-unequal","has_notes":false,"flag_type":1}