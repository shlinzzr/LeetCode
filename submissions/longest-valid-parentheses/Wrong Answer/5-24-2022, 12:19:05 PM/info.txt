{"id":705932145,"question_id":32,"lang":"java","lang_name":"Java","time":"2Â years","timestamp":1653365945,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/705932145/","is_pending":"Not Pending","title":"Longest Valid Parentheses","memory":"N/A","code":"class Solution {\n    public int longestValidParentheses(String s) {\n        Stack<Integer> stack = new Stack();\n        \n//         String maxStr = \"\";\n        \n//         String currStr = \"\";\n        int longest = 0, len = s.length();\n        \n        for(int i=0; i<s.length(); i++){\n            // System.out.println(\"c=\"+c);\n            char c = s.charAt(i);\n            if( c=='(' ){\n                stack.push(i);\n                \n            }else{ // c==')'\n                if(!stack.isEmpty()){\n                    \n                    if(s.charAt(stack.peek())=='(')\n                        stack.pop();\n                    else \n                        stack.push(i);\n                    \n                    \n//                      // System.out.println(\"ele=\"+ele);\n//                     if(ele=='(' && (stack.isEmpty() || currStr.isEmpty()) ) // valid                        \n//                         currStr+=\"()\";\n                    \n//                     else{\n//                         if(currStr.length()> maxStr.length())\n//                             maxStr =  currStr;\n//                         currStr = \"\";\n//                     }\n                 }\n            }\n            // System.out.println(\"currStr=\"+currStr);\n        }\n        \n\n        if(stack.isEmpty())\n            longest = len;\n        else{\n            int a = len, b =0;\n            while(!stack.isEmpty()){\n                \n                b = stack.pop();\n                longest = Math.max(longest, a-b-1);\n                a=b;\n                \n            }\n            \n            longest = Math.max(longest, a);\n        }\n            \n        \n        \n        \n        \n//         // if(!stack.isEmpty()){\n//         //     currStr = currStr.substring(stack.size(), currStr.length());\n//         // }\n        \n//           System.out.println(\"stack.size()=\"+stack.size());\n        \n// //           System.out.println(\"currStr=\"+currStr);\n        \n//         if(currStr.length()> maxStr.length())\n//             maxStr =  currStr;\n        \n        \n        return  longest;\n            \n        \n    }\n}\n\n// public class Solution {\n//     public int longestValidParentheses(String s) {\n//         LinkedList<Integer> stack = new LinkedList<>();\n//         int result = 0;\n//         stack.push(-1);\n//         for (int i = 0; i < s.length(); i++) {\n//             if (s.charAt(i) == ')' && stack.size() > 1 && s.charAt(stack.peek()) == '(') {\n//                 stack.pop();\n//                 result = Math.max(result, i - stack.peek());\n//             } else {\n//                 stack.push(i);\n//             }\n//         }\n//         return result;\n//     }\n// }","compare_result":"101100101111110011000000000100101000011100100010101001010001101101110110100010001010010001110100010000000000110001110011000100100000110000001001011100101000000000000010101010011001000100010111010010100000001001001100100010100001011","title_slug":"longest-valid-parentheses","has_notes":false,"flag_type":1}