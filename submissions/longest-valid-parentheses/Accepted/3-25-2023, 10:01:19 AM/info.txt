{"id":921589493,"question_id":32,"lang":"java","lang_name":"Java","time":"1 year, 2 months","timestamp":1679709679,"status":10,"status_display":"Accepted","runtime":"6 ms","url":"/submissions/detail/921589493/","is_pending":"Not Pending","title":"Longest Valid Parentheses","memory":"42.8 MB","code":"class Solution {\n    public int longestValidParentheses(String s) {\n        \n        int res= 0;\n        \n        Stack<Integer> stk = new Stack();    \n        stk.push(-1);\n        int ans = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == '(') {\n                stk.push(i);\n            } else {\n                stk.pop();\n                if (stk.empty()) {\n                    stk.push(i);\n                } else {\n                    ans = Math.max(ans, i - stk.peek());\n                }\n            }\n        }\n        return ans;\n            \n        \n    }\n}\n\n// public class Solution {\n//     public int longestValidParentheses(String s) {\n//         LinkedList<Integer> stack = new LinkedList<>();\n//         int result = 0;\n//         stack.push(-1);\n//         for (int i = 0; i < s.length(); i++) {\n//             if (s.charAt(i) == ')' && stack.size() > 1 && s.charAt(stack.peek()) == '(') {\n//                 stack.pop();\n//                 result = Math.max(result, i - stack.peek());\n//             } else {\n//                 stack.push(i);\n//             }\n//         }\n//         return result;\n//     }\n// }","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-valid-parentheses","has_notes":false,"flag_type":1}