{"id":1279474816,"question_id":2101,"lang":"java","lang_name":"Java","time":"6 days, 15 hours","timestamp":1717674841,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1279474816/","is_pending":"Not Pending","title":"Last Day Where You Can Still Cross","memory":"N/A","code":"class Solution {\n    // _ _ _ _\n    // _ _ _ _\n\n    int[] parent;\n    public int latestDayToCross(int row, int col, int[][] cells) {\n        col+=2;\n        parent = new int[row*col];\n        for(int i=0; i<row*col; i++){\n            parent[i] = i;\n            if(i%col==0 || i%col==col-1){\n                parent[i] = i%col;\n            }\n        }\n\n        // always check parent[0] and parent[col-1];\n\n        int[][] dirs = new int[][]{{0,1},{1,0},{-1,0}, {0,-1}};\n\n        for(int i=0; i<cells.length; i++){\n            int [] cell = cells[i];\n            int x = cell[1];\n            int y = cell[0]-1;\n            int curr = y*col+x;\n\n            for(int[] d: dirs){\n                int r = d[0] + y;\n                int c = d[1] + x;\n                if(r<0 || c<0 || r>=row || c>=col) continue;\n\n                int next = r*col+c;\n\n                union(next, curr);\n\n                if(find(0) == find(col-1)) return i;\n            }\n        }\n\n        return -1;\n        \n    }\n\n    private int find(int x){\n        if(parent[x]!=x) parent[x] = find(parent[x]);\n        return parent[x];\n    }\n\n\n    private boolean union(int i, int j){\n        int a = find(i);\n        int b = find(j);\n        if(a==b) return false;\n\n        if(a<b) parent[b]=a;\n        else parent[a]=b;\n\n        return true;\n\n\n    }\n\n}","compare_result":"1111111111010011111010010101010001101101110101100001101001100010110101010100110100010000001000010111011001101000111101","title_slug":"last-day-where-you-can-still-cross","has_notes":false,"flag_type":1}