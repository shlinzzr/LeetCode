{"id":960771234,"question_id":212,"lang":"java","lang_name":"Java","time":"1Â year","timestamp":1685517046,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/960771234/","is_pending":"Not Pending","title":"Word Search II","memory":"N/A","code":"class Solution {\n    \n    class TrieNode{\n        \n        TrieNode[] arr;\n        boolean isWord;\n        int cnt=0;\n        \n        public TrieNode(){\n            arr = new TrieNode[26];\n            cnt=0;\n        }\n    }\n    TrieNode root = new TrieNode();\n    \n    public List<String> findWords(char[][] board, String[] words) {\n        List<String> res = new ArrayList<>();\n        \n        int h = board.length;\n        int w = board[0].length;\n        \n        for(String wd: words){\n            \n            TrieNode curr = root;\n            for(int i=0; i<wd.length();i++){\n\n                char ch = wd.charAt(i);\n                \n                if(curr.arr[ch-'a']==null){\n                    curr.arr[ch-'a'] = new TrieNode();\n                }\n                curr.cnt++;\n                curr = curr.arr[ch-'a'];\n            }\n            curr.cnt++;\n            curr.isWord=true;\n        }\n        \n        for(int i=0; i<h; i++){\n            for(int j=0; j<w; j++){\n                char ch = board[i][j];\n                boolean[][] seen = new boolean[h][w];\n                if(root.arr[ch-'a']!=null){\n                    dfs(board, new int[]{i, j}, root.arr[ch-'a'], res, \"\"+board[i][j], seen);\n                }\n            }\n        }\n        \n        return res;\n        \n    }\n    \n      \n    int[][] dirs = new int[][]{{0,1}, {1,0}, {-1,0}, {0,-1}};\n    \n    \n    private void dfs(char[][] board, int[] p, TrieNode node, List<String> res, String curr, boolean[][] seen){\n\n        if(node.isWord){\n            remove(curr);\n            res.add(curr);\n            node.isWord=false;\n        }\n        \n           \n        int h = board.length;\n        int w = board[0].length;\n        \n        \n        for(int[] d: dirs){\n            \n            int r = d[0]+p[0];\n            int c = d[1]+p[1];\n            \n            if(r<0 || c<0 || r>=h || c>=w || seen[r][c])\n                continue;\n            \n            char ch = board[r][c];\n            if(node.arr[ch-'a']!=null && node.arr[ch-'a'].cnt>0){\n                seen[r][c] =true;\n                dfs(board, new int[]{r,c}, node.arr[ch-'a'], res, curr + ch, seen);\n                seen[r][c] = false;\n            }\n            \n        }\n        \n    }\n    \n    \n    private void remove(String s){\n        TrieNode node = root;\n        for(char ch: s.toCharArray()){\n            if(node.arr[ch-'a']!=null){\n                node.arr[ch-'a'].cnt--;\n                node=node.arr[ch-'a'];\n                \n            }\n            \n        }\n        node.isWord=false;\n    \n    }\n}","compare_result":"11111111011011111011111111111111101101111110111111111111111111100","title_slug":"word-search-ii","has_notes":false,"flag_type":1}