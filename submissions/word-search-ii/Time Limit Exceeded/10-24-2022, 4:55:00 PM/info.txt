{"id":829164952,"question_id":212,"lang":"java","lang_name":"Java","time":"1 year, 7 months","timestamp":1666601700,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/829164952/","is_pending":"Not Pending","title":"Word Search II","memory":"N/A","code":"class Solution {\n    \n    List<String> res;\n    boolean[][] seen;\n    public List<String> findWords(char[][] board, String[] words) {\n        \n        int h = board.length;\n        int w = board[0].length;\n        \n        seen = new boolean[h][w];\n        \n        res = new ArrayList<>();\n        for(String word : words){\n            for(int i=0; i<h;i++){\n                for(int j=0; j<w; j++){\n                    char ch = board[i][j];\n                    if(word.charAt(0)==ch){\n                        seen[i][j]=true;\n                        dfs(board, i, j, word, 0);\n                        seen = new boolean[h][w];\n                    }\n                   \n                }\n            }\n        }\n        res = new ArrayList<>(new HashSet<>(res));\n        \n        return res;\n    }\n    \n    private void dfs(char[][] board, int i, int j, String word, int idx){\n        \n        if(idx==word.length()-1){\n            res.add(word);\n            return;\n        }\n        \n        int h = board.length;\n        int w = board[0].length;\n        \n        int[][] dirs = new int[][]{{0,1}, {1,0}, {-1,0}, {0,-1}};\n        for(int[] d : dirs){\n            int r = i+d[0];\n            int c = j+d[1];\n            \n            if(r>=0 && r<h && c>=0 && c<w && seen[r][c]==false && board[r][c]==word.charAt(idx+1)){\n                seen[r][c]=true;\n                dfs(board, r, c, word, idx+1);\n                seen[r][c]=false;\n            }\n        }\n        \n        \n        \n    }\n    \n    \n//     private void dfs(char[][] board, int i, int j, String word, int idx){\n        \n//         int h = board.length;\n//         int w = board[0].length;\n        \n//         Queue<int[]> queue = new LinkedList<>();\n//         queue.add(new int[]{i, j});\n//         seen[i][j]=true;\n//         int[][] dirs = new int[][]{{0,1}, {1,0}, {-1,0}, {0,-1}};\n        \n//         while(!queue.isEmpty()){\n            \n//             if(idx==word.length()-1){\n//                 res.add(word);\n//                 return;\n//             }\n            \n//             int siz = queue.size();\n            \n//             for(int s=0; s<siz;s++){\n//                int[] p = queue.poll();\n\n//                 for(int[] d : dirs){\n//                     int r = p[0]+d[0];\n//                     int c = p[1]+d[1];\n//                     if(r>=0 && r<h && c>=0 && c<w && seen[r][c]==false){\n//                         if(board[r][c]==word.charAt(idx+1)){\n//                             System.out.println(board[r][c] + \" \"+ idx);\n//                             seen[r][c]=true;\n//                             queue.add(new int[]{r,c});\n                            \n//                         }else{\n//                             seen[r][c]=false;\n//                         }\n//                     }\n                        \n//                 } \n//             }\n//             idx++;\n//         }\n    // }\n}\n\n\n/*\n[[\"o\",\"a\",\"b\",\"n\"],\n [\"o\",\"t\",\"a\",\"e\"],\n [\"a\",\"h\",\"k\",\"r\"],\n [\"a\",\"f\",\"l\",\"v\"]]\n \n [\"oa\",\"oa\",\"oaa\"]\n \n \n [[\"a\",\"b\",\"c\"],\n  [\"a\",\"e\",\"d\"],\n  [\"a\",\"f\",\"g\"]]\n  \n  \n[\"befa\",\"abcdefg\",\"gfedcbaaa\"]\n  \n */\n\n\n\n","compare_result":"1111111111111111111111111111111111111111110000000000000000000000","title_slug":"word-search-ii","has_notes":false,"flag_type":1}