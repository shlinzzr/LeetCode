{"id":907649543,"question_id":212,"lang":"java","lang_name":"Java","time":"1 year, 3 months","timestamp":1677750971,"status":10,"status_display":"Accepted","runtime":"64 ms","url":"/submissions/detail/907649543/","is_pending":"Not Pending","title":"Word Search II","memory":"43.9 MB","code":"class Solution {\n    \n    TrieNode root;\n    \n    class TrieNode{\n        \n        TrieNode[] arr;\n        boolean isWord;\n        int count;\n\n        public TrieNode(){\n            arr = new TrieNode[26];\n            isWord=false;\n            count=0;\n        }\n    }\n    \n    \n    public List<String> findWords(char[][] board, String[] words) {\n        \n        root = new TrieNode();\n        for(String w : words){\n            TrieNode node = root;\n            for(char ch : w.toCharArray()){\n                if(node.arr[ch-'a']==null)\n                    node.arr[ch-'a']=new TrieNode();\n                node.count++;\n                node = node.arr[ch-'a'];\n                \n            }\n            node.count++;\n            node.isWord=true;\n        }\n        \n        int h = board.length;\n        int w = board[0].length;\n        \n        ArrayList<String>  res = new ArrayList<>();\n        \n        for(int i=0; i<h; i++){\n            for(int j=0; j<w; j++){\n                \n                char ch = board[i][j];\n                TrieNode node = root;\n                if(node.arr[ch-'a']!=null && node.arr[ch-'a'].count>0){\n                    boolean[][] seen = new boolean[h][w];\n                    seen[i][j]=true;\n                    dfs(board, new int[]{i,j}, seen, node.arr[ch-'a'], res, board[i][j]+\"\");\n                }\n                \n            }\n        }\n        \n        \n        res = new ArrayList<>(new HashSet<>(res));\n        return res;\n    }\n    \n    int[][] dirs = new int[][]{{0,1}, {1,0}, {-1,0}, {0,-1}};\n    \n    private void dfs(char[][]board, int[] p, boolean[][] seen, TrieNode node, List<String> res, String curr){\n        \n        int h = board.length;\n        int w = board[0].length;\n        \n        \n        if(node.isWord==true){\n            remove( curr);\n            node.isWord=false;\n            res.add(curr);\n        }\n        \n        \n        for(int[] d: dirs){\n            \n            int r = p[0]+d[0];\n            int c = p[1]+d[1];\n            \n            if(r>=0 && r<h && c>=0 && c<w && seen[r][c]==false){\n                \n                char ch = board[r][c];\n                \n                if(node.arr[ch-'a']!=null&&node.arr[ch-'a'].count>0){\n                    TrieNode temp = node;\n                    seen[r][c]=true;\n                    dfs(board, new int[]{r,c}, seen, node.arr[ch-'a'], res, curr+board[r][c]);\n                    seen[r][c]=false;\n                }\n            }\n            \n        }\n        \n        \n    }\n     private void remove( String s){\n        \n        TrieNode node = root;\n        \n        for(char c : s.toCharArray()){\n            if(node.arr[c-'a']!=null){\n                node=node.arr[c-'a'];\n                node.count--;\n            }\n        }\n    }\n    \n    \n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111","title_slug":"word-search-ii","has_notes":false,"flag_type":1}