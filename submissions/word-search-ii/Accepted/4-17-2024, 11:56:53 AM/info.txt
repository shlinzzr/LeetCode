{"id":1234519387,"question_id":212,"lang":"java","lang_name":"Java","time":"1 month, 3 weeks","timestamp":1713326213,"status":10,"status_display":"Accepted","runtime":"346 ms","url":"/submissions/detail/1234519387/","is_pending":"Not Pending","title":"Word Search II","memory":"46.1 MB","code":"class Solution {\n    \n    class TrieNode{\n        \n        TrieNode[] arr;\n        boolean isWord;\n        int cnt=0;\n        String s;\n        \n        public TrieNode(){\n            arr = new TrieNode[26];\n            cnt=0;\n        }\n    }\n\n    TrieNode root = new TrieNode();\n    \n    /*\n[[\"o\",\"a\",\"a\",\"n\"]\n,[\"e\",\"t\",\"a\",\"e\"]\n,[\"i\",\"h\",\"k\",\"r\"]\n,[\"i\",\"f\",\"l\",\"v\"]], \n\nwords = [\"oath\",\"pea\",\"eat\",\"rain\"]\n\nOutput: [\"eat\",\"oath\"]\n\n    */\n\n    public List<String> findWords(char[][] board, String[] words) {\n        List<String> res = new ArrayList<>();\n        \n        int h = board.length;\n        int w = board[0].length;\n        \n        buildTrie(words);\n\n        for(int i=0; i<h; i++){\n            for(int j=0; j<w; j++){\n                char ch = board[i][j];\n                if(root.arr[ch-'a']==null || root.arr[ch-'a'].cnt==0) continue;\n                boolean[][] seen = new boolean[h][w];\n                seen[i][j]=true;\n                TrieNode curr = root;\n                dfs(board, i, j, seen, res, curr.arr[ch-'a'], \"\"+ch);\n            }\n        }\n        return res;\n    }\n    \n\n      \n    private void dfs(char[][] board, int i, int j, boolean[][] seen, List<String> res, TrieNode curr,String str){\n        \n        if(curr.isWord){\n            res.add(curr.s);\n            remove(curr.s);\n        }\n           \n        int h = board.length;\n        int w = board[0].length;\n\n        for(int[] d: dirs){\n            int r = i+d[0];\n            int c = j+d[1];\n\n            if(r<0 || c<0 || r>=h || c>=w || seen[r][c]) continue;\n            char ch = board[r][c];\n            \n            if(curr.arr[ch-'a']==null || curr.arr[ch-'a'].cnt==0) continue;\n\n            seen[r][c] =true;\n            dfs(board, r, c, seen, res, curr.arr[ch-'a'], str+board[r][c]);\n            seen[r][c] =false;\n        }\n    }\n    \n\n    private void buildTrie(String[] words){\n        int len = words.length;\n\n       \n        for(String w : words){\n            TrieNode curr = root;\n            for(char ch : w.toCharArray()){\n                if(curr.arr[ch-'a']==null ){\n                    curr.arr[ch-'a'] = new TrieNode();   \n                }\n                curr.cnt++;\n                curr= curr.arr[ch-'a'];\n            }\n            curr.cnt++;\n            curr.s=w;\n            curr.isWord = true;\n        }\n\n    }\n      \n    int[][] dirs = new int[][]{{0,1}, {1,0}, {-1,0}, {0,-1}};\n\n    private void remove(String s){\n        TrieNode curr = root;\n\n        for(char ch : s.toCharArray()){\n\n            curr.cnt--;\n            curr = curr.arr[ch-'a'];\n        } \n        curr.isWord =false;\n    }\n    \n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111","title_slug":"word-search-ii","has_notes":false,"flag_type":1}