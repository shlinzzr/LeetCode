{"id":829185483,"question_id":212,"lang":"java","lang_name":"Java","time":"1 year, 7 months","timestamp":1666604804,"status":10,"status_display":"Accepted","runtime":"400 ms","url":"/submissions/detail/829185483/","is_pending":"Not Pending","title":"Word Search II","memory":"119 MB","code":"class Solution {\n    \n    class TrieNode{\n        \n        TrieNode[] arr;\n        boolean isWord = false;\n        int count;\n        \n        public TrieNode(){\n            arr = new TrieNode[26];\n            isWord = false;\n            count=1;\n        }\n    }\n    \n    TrieNode root;\n    List<String> res;\n    int[][] dirs = new int[][]{{0,1}, {1,0}, {-1,0}, {0,-1}};\n    boolean[][] seen;\n    \n    public List<String> findWords(char[][] board, String[] words) {\n        \n        root = new TrieNode();\n        for(String word : words){\n            \n            TrieNode node = root;\n            \n            for(char ch : word.toCharArray()){\n                \n                if(node.arr[ch-'a']==null){\n                    node.arr[ch-'a'] = new TrieNode();\n                }\n                node.count++;\n                node = node.arr[ch-'a'];\n            }\n            node.isWord=true;\n            \n        }\n        \n        int h = board.length;\n        int w = board[0].length;\n        seen = new boolean[h][w];\n        res = new ArrayList<>();\n        \n        for(int i=0; i<h;i++){\n            for(int j=0; j<w; j++){\n                TrieNode node = root;\n                seen[i][j]=true;\n                dfs(board, i, j, node, \"\");\n                seen = new boolean[h][w];\n            }\n        }\n        res = new ArrayList<>(new HashSet<>(res));\n        \n        return res;\n    }\n    \n    private void dfs(char[][] board, int i, int j, TrieNode node, String s){\n        \n        int h = board.length;\n        int w = board[0].length;\n        char ch = board[i][j];\n        \n        if(node.arr[ch-'a']==null) return;\n        \n        node = node.arr[ch-'a'];\n        if(node.count==0)\n            return;\n        s+=ch;\n        \n        if(node.isWord==true){\n            remove( s);\n            node.isWord=false;\n            res.add(s);\n        }\n            \n        \n        \n        for(int[] d : dirs){\n            int r = i+d[0];\n            int c = j+d[1];\n            \n            if(r<0 || r>=h || c<0 || c>=w  ||seen[r][c]==true)\n                continue;\n            \n            seen[r][c] = true;\n            dfs(board, r, c, node, s);\n            seen[r][c] = false;\n        }\n        \n        s = s.substring(0, s.length()-1);\n        \n    }\n    \n    private void remove( String s){\n        \n        TrieNode node = root;\n        \n        for(char c : s.toCharArray()){\n            if(node.arr[c-'a']!=null){\n                node=node.arr[c-'a'];\n                node.count--;\n            }\n        }\n    }\n    \n    \n//     private void dfs(char[][] board, int i, int j, String word, int idx){\n        \n//         if(idx==word.length()-1){\n//             res.add(word);\n//             return;\n//         }\n        \n//         int h = board.length;\n//         int w = board[0].length;\n        \n//         int[][] dirs = new int[][]{{0,1}, {1,0}, {-1,0}, {0,-1}};\n//         for(int[] d : dirs){\n//             int r = i+d[0];\n//             int c = j+d[1];\n            \n//             if(r>=0 && r<h && c>=0 && c<w && seen[r][c]==false && board[r][c]==word.charAt(idx+1)){\n//                 seen[r][c]=true;\n//                 dfs(board, r, c, word, idx+1);\n//                 seen[r][c]=false;\n//             }\n//         }\n        \n        \n        \n//     }\n    \n    \n//     private void dfs(char[][] board, int i, int j, String word, int idx){\n        \n//         int h = board.length;\n//         int w = board[0].length;\n        \n//         Queue<int[]> queue = new LinkedList<>();\n//         queue.add(new int[]{i, j});\n//         seen[i][j]=true;\n//         int[][] dirs = new int[][]{{0,1}, {1,0}, {-1,0}, {0,-1}};\n        \n//         while(!queue.isEmpty()){\n            \n//             if(idx==word.length()-1){\n//                 res.add(word);\n//                 return;\n//             }\n            \n//             int siz = queue.size();\n            \n//             for(int s=0; s<siz;s++){\n//                int[] p = queue.poll();\n\n//                 for(int[] d : dirs){\n//                     int r = p[0]+d[0];\n//                     int c = p[1]+d[1];\n//                     if(r>=0 && r<h && c>=0 && c<w && seen[r][c]==false){\n//                         if(board[r][c]==word.charAt(idx+1)){\n//                             System.out.println(board[r][c] + \" \"+ idx);\n//                             seen[r][c]=true;\n//                             queue.add(new int[]{r,c});\n                            \n//                         }else{\n//                             seen[r][c]=false;\n//                         }\n//                     }\n                        \n//                 } \n//             }\n//             idx++;\n//         }\n    // }\n}\n\n\n/*\n[[\"o\",\"a\",\"b\",\"n\"],\n [\"o\",\"t\",\"a\",\"e\"],\n [\"a\",\"h\",\"k\",\"r\"],\n [\"a\",\"f\",\"l\",\"v\"]]\n \n [\"oa\",\"oa\",\"oaa\"]\n \n \n [[\"a\",\"b\",\"c\"],\n  [\"a\",\"e\",\"d\"],\n  [\"a\",\"f\",\"g\"]]\n  \n  \n[\"befa\",\"abcdefg\",\"gfedcbaaa\"]\n  \n */\n\n\n\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111","title_slug":"word-search-ii","has_notes":false,"flag_type":1}