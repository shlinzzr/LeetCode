{"id":1154439908,"question_id":212,"lang":"java","lang_name":"Java","time":"4 months, 3 weeks","timestamp":1706002014,"status":20,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/1154439908/","is_pending":"Not Pending","title":"Word Search II","memory":"N/A","code":"class Solution {\n    \n    class TrieNode{\n        TrieNode[] arr;\n        boolean isWord=false;\n        String str=\"\";\n        int cnt = 0;\n        \n        public TrieNode(){\n            arr =  new TrieNode[26];\n        }\n    }\n    \n    TrieNode root;\n    \n    public List<String> findWords(char[][] board, String[] words) {\n        \n        Set<String> res = new HashSet<>();\n        \n        Set<String> set = new HashSet<>(Arrays.asList(words));\n        \n        int h = board.length;\n        int w = board[0].length;\n        \n        buildTrie(words);\n\n        // System.out.println(root.arr[0].arr[0].isWord+ \" \" +root.arr[0].arr[0].str);\n        \n        for(int i=0; i<h; i++){\n            for(int j=0; j<w; j++){\n                char ch = board[i][j];\n                if(root.arr[ch-'a']!=null && root.arr[ch-'a'].cnt>0){\n                    TrieNode curr = root.arr[ch-'a'];\n                    Set<String> seen = new HashSet<>();\n                    seen.add(i+\"_\"+j);\n                    helper(curr, seen, i, j, res, board);\n\n                    if(curr.isWord){\n                        res.add(curr.str);\n                    }\n                }\n            }\n        }\n        \n        return new ArrayList(res);\n        \n    }\n    \n    \n    int[][] dirs = new int[][]{{1,0}, {0,1}, {-1,0},{0,-1}};\n    private void helper(TrieNode curr, Set<String> seen, int i, int j, Set<String> res, char[][]board){\n            \n        int h = board.length;\n        int w = board[0].length;\n        \n        for(int[]d : dirs){\n            int r = i+d[0];\n            int c = j+d[1];\n            \n            if(r<0 || c<0 || r>=h || c>=w || seen.contains(r+\"_\"+c))\n                continue;\n\n            char ch = board[r][c];\n            if(curr.arr[ch-'a']==null || node.arr[ch-'a'].cnt==0)\n                continue;\n\n\n            \n            if(curr.arr[ch-'a'].isWord)\n                res.add(curr.arr[ch-'a'].str);\n            \n            seen.add(r+\"_\"+c);\n            helper(curr.arr[ch-'a'], seen, r, c, res, board);\n            seen.remove(r+\"_\"+c);\n        }\n        \n        \n    /*\n\n    [[\"o\",\"a\",\"a\",\"n\"]\n    ,[\"e\",\"t\",\"a\",\"e\"]\n    ,[\"i\",\"h\",\"k\",\"r\"]\n    ,[\"i\",\"f\",\"l\",\"v\"]]\n    */\n        \n    }\n\n      private void remove(String s){\n        TrieNode node = root;\n        for(char ch: s.toCharArray()){\n            if(node.arr[ch-'a']!=null){\n                node.arr[ch-'a'].cnt--;\n                node=node.arr[ch-'a'];\n            }\n            \n        }\n        node.isWord=false;\n    \n    }\n    \n    private void buildTrie(String[] words){\n        root = new TrieNode();\n        \n        for(String w : words){\n            \n            TrieNode curr = root;\n            for(char ch : w.toCharArray()){\n                if(curr.arr[ch-'a']==null){\n                    curr.arr[ch-'a'] = new TrieNode();\n                    curr.arr[ch-'a'].str = curr.str+ch;\n                    curr.cnt++;\n                }\n                curr = curr.arr[ch-'a'];\n            }\n\n            curr.cnt++;\n            curr.isWord = true;\n        }\n        \n    }\n}","compare_result":null,"title_slug":"word-search-ii","has_notes":false,"flag_type":1}