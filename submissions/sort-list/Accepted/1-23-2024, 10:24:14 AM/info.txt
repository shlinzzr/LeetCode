{"id":1154154859,"question_id":148,"lang":"java","lang_name":"Java","time":"4 months, 3 weeks","timestamp":1705976654,"status":10,"status_display":"Accepted","runtime":"12 ms","url":"/submissions/detail/1154154859/","is_pending":"Not Pending","title":"Sort List","memory":"55 MB","code":"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode sortList(ListNode head) {\n        \n        if(head==null || head.next==null) return head;\n        \n        ListNode slow=head, fast=head, prev=new ListNode();\n        while(fast!=null && fast.next!=null){\n            prev= slow;\n            slow = slow.next;\n            \n            fast = fast.next.next;\n        }\n        prev.next=null;\n        \n        \n        ListNode right = sortList(slow);\n        ListNode left = sortList(head);\n        \n        return merge(left, right);\n    }\n    \n    private ListNode merge(ListNode left , ListNode right){\n        \n        ListNode dummy = new ListNode();\n        ListNode curr = dummy;\n        \n        while(left!=null && right!=null){\n            \n            if(left.val<=right.val){\n                curr.next = left;\n                left = left.next;\n            }else{\n                curr.next = right;\n                right = right.next;\n            }\n            curr = curr.next;\n        }\n        \n        while(left!=null){\n            curr.next = left;\n            left = left.next;\n            curr = curr.next;\n        }\n        \n        while(right!=null){\n            curr.next = right;\n            right = right.next;\n            curr=curr.next;\n        }\n        \n        return dummy.next;\n        \n    }\n}","compare_result":"111111111111111111111111111111","title_slug":"sort-list","has_notes":false,"flag_type":1}