{"id":893941438,"question_id":148,"lang":"java","lang_name":"Java","time":"1 year, 4 months","timestamp":1675848864,"status":10,"status_display":"Accepted","runtime":"22 ms","url":"/submissions/detail/893941438/","is_pending":"Not Pending","title":"Sort List","memory":"50.9 MB","code":"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode sortList(ListNode head) {\n        if (head == null || head.next == null)\t\n            return head;\t\n        \n        \n        ListNode fast=head, slow=head, prev=null;\n        while(fast!=null && fast.next!=null){\n            prev=slow;\n            fast=fast.next.next;\n            slow=slow.next;\n        }\n        if(prev!=null)\n            prev.next=null;\n        \n        ListNode left = sortList(head);\n        ListNode right = sortList(slow);\n        ListNode res = mergeHalves(left, right);\n        \n        return res;\n    }\n    \n    \n    private ListNode mergeHalves(ListNode l1, ListNode l2){\t\n        \t\n        ListNode head = new ListNode();\t\n        ListNode curr = head;\t\n        \t\n        while(l1!=null && l2!=null){\t\n            \t\n            ListNode node = new ListNode();\t\n            \t\n            \t\n            if(l1.val<=l2.val){\t\n                node = new ListNode(l1.val);\t\n                l1=l1.next;\t\n                \t\n            }else{\t\n                node = new ListNode(l2.val);\t\n                l2=l2.next;\t\n            }\t\n            \t\n            curr.next = node;\t\n            curr=curr.next;\t\n        }\t\n        \t\n        while(l1!=null){\t\n            ListNode node = new ListNode(l1.val);\t\n            l1=l1.next;\t\n            curr.next=node;\t\n            curr=curr.next;\t\n        }\t\n        \t\n        while(l2!=null){\t\n            ListNode node = new ListNode(l2.val);\t\n            l2=l2.next;\t\n            curr.next=node;\t\n            curr=curr.next;\t\n        }\t\n        \t\n        return head.next;\t\n        \t\n    }\t\n}\n//     private ListNode mergehalves(ListNode left, ListNode right){\n        \n//         ListNode dummy = new ListNode();\n//         ListNode curr = dummy;\n//         while(left!=null && right!=null){\n            \n//             if(left.val<=right.val){\n                \n//                 ListNode node = new ListNode(left.val);\n//                 curr.next = node;\n//                 left=left.next;\n//             }else{\n//                 ListNode node = new ListNode(right.val);\n//                 curr.next = node;\n//                 right=right.next;\n//             }\n            \n//             curr=curr.next;\n//         }\n        \n//         while(left!=null){\n            \n//             ListNode node = new ListNode(left.val);\n//             curr.next = node;\n//             left=left.next;\n//             curr=curr.next;\n//         }\n        \n//         while(right!=null){\n//             ListNode node = new ListNode(right.val);\n//             curr.next = node;\n//             right=right.next;\n//             curr=curr.next;\n//         }\n        \n//         return dummy.next;\n//     }\n// }","compare_result":"111111111111111111111111111111","title_slug":"sort-list","has_notes":false,"flag_type":1}