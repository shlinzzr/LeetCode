{"id":1271348035,"question_id":572,"lang":"java","lang_name":"Java","time":"2Â weeks","timestamp":1716982232,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1271348035/","is_pending":"Not Pending","title":"Subtree of Another Tree","memory":"44.1 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public boolean isSubtree(TreeNode root, TreeNode subRoot) {\n\n        if(root==null && subRoot==null)return true;\n        if(root==null || subRoot==null) return false;\n\n        if(isSameTree(root, subRoot)) return true;\n        boolean left = isSubtree(root.left, subRoot);\n        boolean right = isSubtree(root.right, subRoot);\n\n        if(left || right ) return true;\n\n        return false;\n        \n    }\n\n    private boolean isSameTree(TreeNode a, TreeNode b){\n        if(a==null && b==null) return true;\n        if(a==null || b==null) return false;\n\n        if(a.val!=b.val) return false;\n        boolean left = isSameTree(a.left, b.left);\n        boolean right = isSameTree(a.right, b.right);\n        return left && right;\n\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"subtree-of-another-tree","has_notes":false,"flag_type":1}