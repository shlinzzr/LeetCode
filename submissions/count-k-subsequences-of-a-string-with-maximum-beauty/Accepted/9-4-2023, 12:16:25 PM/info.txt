{"id":1039958748,"question_id":3057,"lang":"java","lang_name":"Java","time":"9 months, 1 week","timestamp":1693800985,"status":10,"status_display":"Accepted","runtime":"181 ms","url":"/submissions/detail/1039958748/","is_pending":"Not Pending","title":"Count K-Subsequences of a String With Maximum Beauty","memory":"44.3 MB","code":"class Solution {\n    int k;\n    long global = 0;\n    int beauty = 0;\n    int M = (int) 1e9+7;\n    public int countKSubsequencesWithMaxBeauty(String s, int k) {\n        \n        this.k=k;\n        \n        HashMap<Character, Integer> map = new HashMap<>();\n        int len = s.length();\n        for(int i=0; i<len; i++){\n            map.put(s.charAt(i), map.getOrDefault(s.charAt(i), 0)+1);\n        }\n        \n        if(map.size()<k) return 0;\n        \n        List<Integer> list = new ArrayList<>();\n        for(int v : map.values()){\n            list.add(v);\n        }\n        \n        Collections.sort(list, Collections.reverseOrder());\n        \n        for(int i=0; i<k; i++){\n            beauty+=list.get(i);\n        }\n        \n        dfs(0, 0, 0, 1L, list);\n        \n        return (int)global;\n        \n        \n    }\n    \n    private void dfs (int curPos, int picked, int curBeauty, long res , List<Integer> list){\n        \n        if(picked>k)  return;\n        if(curBeauty>beauty) return;\n         \n        if (curBeauty == beauty && picked == k) {                     \n            global = (global+res)%M;\n            return;\n        }\n        \n        int acc = 0;\n        for(int i=curPos; i<list.size(); i++){\n            acc+=list.get(i);\n        }\n        \n        \n        if (curBeauty + acc < beauty) return;\n        \n        \n        for(int i=curPos; i<list.size(); i++){\n            \n            dfs(i+1, picked+1, curBeauty+list.get(i), res*list.get(i)%M, list);\n            \n            \n        }\n        \n        \n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"count-k-subsequences-of-a-string-with-maximum-beauty","has_notes":false,"flag_type":1}