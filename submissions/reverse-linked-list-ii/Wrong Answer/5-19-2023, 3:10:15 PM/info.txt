{"id":953195382,"question_id":92,"lang":"java","lang_name":"Java","time":"1Â year","timestamp":1684480215,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/953195382/","is_pending":"Not Pending","title":"Reverse Linked List II","memory":"N/A","code":"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode reverseBetween(ListNode head, int left, int right) {\n        List<ListNode> list = new ArrayList<>();\n        \n        ListNode dummy = new ListNode();\n        dummy.next = head;\n        list.add(dummy); // dummy\n        \n        ListNode curr = head;\n        while(curr!=null){\n            list.add(curr);\n            curr=curr.next;\n        }\n        \n        while(left<right){\n            \n            ListNode L = list.get(left);//3\n            ListNode R = list.get(right);//5\n            \n            ListNode Rnext = R.next;//null\n            ListNode Lnext = L.next;// 5\n            \n            ListNode Rprev = right==0? dummy : list.get(right-1);\n            ListNode Lprev = left==0? dummy : list.get(left-1);\n            \n            Lprev.next = R; //dummy.next = R;\n            \n            if(L.next != R){\n                R.next = Lnext; // 5 -> 5\n                Rprev.next = L; // 3->3                \n            }else{\n                R.next=L;\n            }\n            L.next = Rnext;\n            \n\n            \n            \n            left++;\n            right--;\n            \n        } \n        \n        return dummy.next;\n        \n    }\n}","compare_result":"11111111111110000111111011110101000001000010","title_slug":"reverse-linked-list-ii","has_notes":false,"flag_type":1}