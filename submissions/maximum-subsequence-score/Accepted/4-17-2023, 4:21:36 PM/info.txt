{"id":935135806,"question_id":2636,"lang":"java","lang_name":"Java","time":"1 year, 1 month","timestamp":1681719696,"status":10,"status_display":"Accepted","runtime":"102 ms","url":"/submissions/detail/935135806/","is_pending":"Not Pending","title":"Maximum Subsequence Score","memory":"63.3 MB","code":"class Solution {\n    public long maxScore(int[] nums1, int[] nums2, int k) {\n        \n        \n        \n        int len = nums1.length;\n        int[][] arr = new int[len][2];\n        \n        for (int i = 0; i < len; ++i)\n            arr[i] = new int[] {nums2[i], nums1[i]};\n        \n        Arrays.sort(arr, (a, b) -> b[0] - a[0]); //sort by num2 大到小\n        \n        PriorityQueue<Integer> pq = new PriorityQueue<>(k, (a, b) -> a - b); //小的先pop\n        \n        long res = 0, sum = 0;\n        for (int[] es : arr) {\n            pq.add(es[1]); //把nums1丟到pq;\n            \n            sum = (sum + es[1]);\n            if (pq.size() > k) \n                sum -= pq.poll();\n            \n            if (pq.size() == k) res = Math.max(res, (sum * es[0]));\n        }\n        return res;\n        \n        \n        \n        \n//         PriorityQueue<int[]> pq = new PriorityQueue<>(\n//             (a,b) -> a[0]==b[0] ? a[1]-b[1] : a[0]-b[0]\n        \n//         );\n        \n//            int len = nums1.length;\n        \n        \n//         int sum = 0;\n        \n//         for(int i=0; i<len; i++){\n            \n//             sum+=nums1[i];\n            \n//             pq.offer(new int[]{nums2[i], nums1[i]});\n\n//               if(pq.size()>k){\n//                   int[] p = pq.poll();\n//                   sum-= p[1];\n                  \n//               }\n            \n            \n            \n//             if(pq.size()==k && i!=len-1){\n//                 int[] p = pq.poll();\n//                 sum-=p[1];\n                \n//             }\n            \n            \n//         }\n        \n        \n//         int coef = Integer.MAX_VALUE;\n        \n//         for(int[] p : pq){\n            \n//             coef = Math.min(p[0], coef);\n//         }\n\n        \n//         return sum*coef;\n        \n        \n        \n        \n        \n        \n//         long[] dp = new long[k+1];\n//         int coef = 1;\n//         long total = 0;\n        \n//      \n        \n//         for(int i=1; i<len ; i++){\n            \n//             long val = (total + nums1[i]) * Math.min(coef, nums2[i]);\n            \n//             if(val>dp[i-1]){\n//                 System.out.println(\"chose \" + i);\n//                 total+= nums1[i];\n//                 coef = Math.min(coef, nums2[i]);\n//             }\n            \n//             dp[i] = Math.max(dp[i-1], val);\n            \n//         }\n        \n//         return dp[k];\n        \n        \n        \n    }\n}","compare_result":"1111111111111111111111111111","title_slug":"maximum-subsequence-score","has_notes":false,"flag_type":1}