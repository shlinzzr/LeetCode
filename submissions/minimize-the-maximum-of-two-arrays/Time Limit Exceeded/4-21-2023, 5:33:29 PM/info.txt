{"id":937347890,"question_id":2628,"lang":"java","lang_name":"Java","time":"1 year, 1 month","timestamp":1682069609,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/937347890/","is_pending":"Not Pending","title":"Minimize the Maximum of Two Arrays","memory":"N/A","code":"class Solution {\n   \n    public int minimizeSet(int d1, int d2, int u1, int u2) {\n        long left = 1, right = Long.MAX_VALUE;\n        while (left < right)\n        {\n            long mid = left + (right-left)/2;\n            if (NotEnough(d1, d2, u1, u2, mid))\n                left = mid+1;\n            else\n                right  = mid;\n        }\n        return (int)left;        \n    }\n        \n    private long lcm(long n1, long n2) {\n\n        // maximum number between n1 and n2 is stored in lcm\n        long lcm = (n1 > n2) ? n1 : n2;\n\n        // Always true\n        while(true) {\n          if( lcm % n1 == 0 && lcm % n2 == 0 ) {\n            // System.out.printf(\"The LCM of %d and %d is %d.\", n1, n2, lcm);\n            break;\n          }\n          ++lcm;\n        }\n        return lcm;\n    }\n    \n   \n\n    public boolean NotEnough(long divisor1, long divisor2, long uniqueCnt1, long uniqueCnt2, long n)\n    {\n        long a = n - n/divisor1;\n        long b = n - n/divisor2;\n        long c = n - (n/divisor1 + n/divisor2 - n/lcm(divisor1,divisor2));\n\n        if (a < uniqueCnt1) return true;\n        if (b < uniqueCnt2) return true;\n        if (a+b-c < uniqueCnt1 + uniqueCnt2) return true;\n        return false;\n    }\n}\n","compare_result":"111111111111111111111100000000000000000000000000000000000000000","title_slug":"minimize-the-maximum-of-two-arrays","has_notes":false,"flag_type":1}