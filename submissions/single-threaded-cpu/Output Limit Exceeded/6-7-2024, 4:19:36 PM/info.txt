{"id":1280348128,"question_id":1962,"lang":"java","lang_name":"Java","time":"5 days, 18 hours","timestamp":1717748376,"status":13,"status_display":"Output Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1280348128/","is_pending":"Not Pending","title":"Single-Threaded CPU","memory":"N/A","code":"class Solution {\n    public int[] getOrder(int[][] tasks) {\n\n        int len = tasks.length;\n\n        PriorityQueue<int[]> pool= new PriorityQueue<>( // en, proc, idx\n            (a,b)-> a[1]!=b[1] ? a[1]-b[1] : a[2]-b[2]\n        );\n\n        PriorityQueue<int[]> pq= new PriorityQueue<>( // en, proc, idx\n            (a,b) -> a[0]-b[0]\n        );\n\n        for(int i=0; i<len; i++){\n            pq.offer(new int[]{tasks[i][0], tasks[i][1], i});\n        }\n\n        int[] res = new int[len];\n        int idx= 0;\n        int max = pq.peek()[0];\n\n        System.out.println(\"max=\"+pq.peek()[2]);\n\n        while(idx<len){\n\n            // add task to pool from pq;\n            while(!pq.isEmpty() && pq.peek()[0]<=max){\n                pool.offer(pq.poll());    \n            }\n\n            System.out.println(idx + \" \"+ max);\n            System.out.println(\"pq=\"+pq);\n            System.out.println(\"pool=\"+pool);\n\n            int[] p = pool.poll();\n            max += p[1];\n            res[idx] = p[2];\n\n            idx++;\n        }\n\n        return res;\n\n\n\n        \n    }\n}","compare_result":"111111111111111111111110000000000000000","title_slug":"single-threaded-cpu","has_notes":false,"flag_type":1}