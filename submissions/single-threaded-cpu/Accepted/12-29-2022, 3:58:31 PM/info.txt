{"id":867386181,"question_id":1962,"lang":"java","lang_name":"Java","time":"1 year, 5 months","timestamp":1672300711,"status":10,"status_display":"Accepted","runtime":"131 ms","url":"/submissions/detail/867386181/","is_pending":"Not Pending","title":"Single-Threaded CPU","memory":"75.5 MB","code":"class Solution {\n    public int[] getOrder(int[][] tasks) {\n        int n = tasks.length;\n        int[] ans = new int[n];//待求的任务处理顺序\n        PriorityQueue<int[]> toDo = new PriorityQueue<int[]>(new Comparator<int[]>() {\n            public int compare(int[] a, int[] b) {\n                if (a[1] != b[1])//注意Integer比较用equals和compareTo\n                    return a[1] - b[1];\n                return a[2] - b[2];\n            }\n        });\n        int[][] newTasks = new int[n][3];//添加任务序号信息\n        for (int i = 0; i < n; i++) {\n            newTasks[i][0] = tasks[i][0];\n            newTasks[i][1] = tasks[i][1];\n            newTasks[i][2] = i;\n        }\n        Arrays.sort(newTasks, (t1, t2) -> t1[0] - t2[0]);//将任务按时间排序\n        \n        int t = 0, index = 0, i = 0;//当前时间，已执行任务数，已入队任务数\n        while (index < n) {\n            if (toDo.isEmpty())//若队列为空且当前时间小于下一任务起始时间，直接跳到该起始时间\n                t = Math.max(t, newTasks[i][0]);\n            while (i < n && newTasks[i][0] <= t)//将起始时间不超过当前时间的任务都入队\n                toDo.offer(newTasks[i++]);\n            int[] task = toDo.poll();//选取优先执行的任务\n            ans[index++] = task[2];\n            t += task[1];\n        }\n        return ans;\n    }\n}\n","compare_result":"111111111111111111111111111111111111111","title_slug":"single-threaded-cpu","has_notes":false,"flag_type":1}