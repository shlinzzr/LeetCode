{"id":1280361366,"question_id":1962,"lang":"java","lang_name":"Java","time":"5 days, 18 hours","timestamp":1717749485,"status":10,"status_display":"Accepted","runtime":"110 ms","url":"/submissions/detail/1280361366/","is_pending":"Not Pending","title":"Single-Threaded CPU","memory":"80.4 MB","code":"class Solution {\n    public int[] getOrder(int[][] tasks) {\n        \n        // Sort based on min task processing time or min task index.\n        // Store enqueue time, processing time, task index.\n        PriorityQueue<int[]> nextTask = new PriorityQueue<int[]>((a, b) -> (a[1] != b[1] ? (a[1] - b[1]) : (a[2] - b[2])));\n        \n        // Store task enqueue time, processing time, index.\n        int sortedTasks[][] = new int[tasks.length][3];\n        for (int i = 0; i < tasks.length; ++i) {\n            sortedTasks[i][0] = tasks[i][0];\n            sortedTasks[i][1] = tasks[i][1];\n            sortedTasks[i][2] = i;\n        }\n        \n        Arrays.sort(sortedTasks, (a, b) -> Integer.compare(a[0], b[0]));\n        int tasksProcessingOrder[] = new int[tasks.length];\n        \n        long currTime = 0;\n        int taskIndex = 0;\n        int ansIndex = 0;\n        \n        // Stop when no tasks are left in array and heap.\n        while (taskIndex < tasks.length || !nextTask.isEmpty()) {\n            if (nextTask.isEmpty() && currTime < sortedTasks[taskIndex][0]) {\n                // When the heap is empty, try updating currTime to next task's enqueue time. \n                currTime = sortedTasks[taskIndex][0];\n            }\n            \n            // Push all the tasks whose enqueueTime <= currtTime into the heap.\n            while (taskIndex < tasks.length && currTime >= sortedTasks[taskIndex][0]) { \n                nextTask.add(sortedTasks[taskIndex]);\n                ++taskIndex;\n            }\n            \n            int processTime = nextTask.peek()[1];\n            int index = nextTask.peek()[2];\n            nextTask.remove();\n            \n            // Complete this task and increment currTime.\n            currTime += processTime; \n            tasksProcessingOrder[ansIndex++] = index;\n        }\n        \n        return tasksProcessingOrder;\n    }\n}","compare_result":"111111111111111111111111111111111111111","title_slug":"single-threaded-cpu","has_notes":false,"flag_type":1}