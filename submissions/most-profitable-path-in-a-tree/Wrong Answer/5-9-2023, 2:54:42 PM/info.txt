{"id":947086843,"question_id":2564,"lang":"java","lang_name":"Java","time":"1 year, 1 month","timestamp":1683615282,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/947086843/","is_pending":"Not Pending","title":"Most Profitable Path in a Tree","memory":"N/A","code":"class Solution {\n    int max = 0;\n    HashMap<Integer, List<Integer>> adj;\n    int bob;\n    int[] amount;\n    int[] b;    \n    int ret;\n    public int mostProfitablePath(int[][] edges, int bob, int[] amount) {\n        \n        bob=bob;\n        this.amount = amount;\n        ret=0;\n        \n        int n = amount.length;\n        b = new int[n];\n        for (int i=0; i<n; i++)\n            b[i] = Integer.MAX_VALUE/2;\n        \n        \n        adj = new HashMap<>();\n        for(int[] e: edges){\n            adj.putIfAbsent(e[0], new ArrayList<>());\n            adj.putIfAbsent(e[1], new ArrayList<>());\n            adj.get(e[0]).add(e[1]);\n            adj.get(e[1]).add(e[0]);\n        }\n        \n        dfs(0, -1, 0);\n        dfs2(0, -1, 0, 0);\n        \n        return ret;\n    }\n      \n    private void dfs(int cur, int parent, int step)\n    {\n        if (cur==bob) \n        {\n            b[cur] = 0;\n            return;\n        }\n        \n        int toBob = Integer.MAX_VALUE/2;\n        for (int nxt: adj.get(cur))\n        {\n            if (nxt==parent) continue;\n            dfs(nxt, cur, step+1);\n            toBob = Math.min(toBob, b[nxt]+1);\n        }\n        b[cur] = toBob;\n        return;\n    }\n    \n    void dfs2(int cur, int parent, int step, int score)\n    {\n        if (step == b[cur])\n            score += amount[cur]/2;\n        else if (step < b[cur])\n            score += amount[cur];\n        \n        if (adj.get(cur).size()==1 && adj.get(cur).get(0)==parent)\n        {\n            ret = Math.max(ret, score);\n            return;\n        }\n                    \n        for (int nxt: adj.get(cur))\n        {\n            if (nxt==parent) continue;\n            dfs2(nxt, cur, step+1, score);          \n        }\n    }\n}","compare_result":"0000000000000000000000000000000","title_slug":"most-profitable-path-in-a-tree","has_notes":false,"flag_type":1}