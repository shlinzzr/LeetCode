{"id":1095780455,"question_id":529,"lang":"java","lang_name":"Java","time":"7Â months","timestamp":1699601902,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1095780455/","is_pending":"Not Pending","title":"Minesweeper","memory":"43.8 MB","code":"class Solution {\n    public char[][] updateBoard(char[][] board, int[] click) {\n        int m = board.length;\n        int n = board[0].length;\n\n        Queue<int[]> q = new LinkedList<>();\n        boolean[][] seen = new boolean[m][n];\n\n        if(board[click[0]][click[1]]=='M'){\n            board[click[0]][click[1]]='X';\n            return board ;\n        }\n       int[][] dirs = new int[][]{{0,1},{1,0},{0,-1}, {-1,0},{1,1},{-1,-1},{-1,1},{1,-1}};\n\n        q.offer(click);\n        seen[click[0]][click[1]]=true;\n        board[click[0]][click[1]] = checkAdjMine(board, click);\n\n        while(!q.isEmpty()){\n            \n            int siz = q.size();\n            while(siz-->0){\n\n                int[] p = q.poll();\n\n                char cur = board[p[0]][p[1]];\n                if(cur=='M'){\n                    board[p[0]][p[1]]='X';\n                    return board;\n                }\n\n                if(cur!='B')\n                    continue;\n\n                for(int[] d : dirs){\n                    int r = d[0]+p[0];\n                    int c = d[1]+p[1];\n                    if(r<0 || c<0 || r>=m || c>=n || seen[r][c])\n                        continue;\n                    seen[r][c] = true;\n                    char nxt = board[r][c];\n                    if(nxt=='E'){\n                        board[r][c] = checkAdjMine(board, new int[]{r,c});\n                        if(board[r][c]=='B')\n                            q.offer(new int[]{r,c});\n                    }\n                }\n            }\n\n          \n\n\n        }\n        return board;\n\n\n\n    }\n\n    private char checkAdjMine(char[][] board, int[] p){\n\n        if(board[p[0]][p[1]]=='M')\n            return 'X';\n\n         int m = board.length;\n        int n = board[0].length;\n        int cnt= 0;\n\n         int[][] dirs = new int[][]{{0,1},{1,0},{0,-1}, {-1,0},{1,1},{-1,-1},{-1,1},{1,-1}};\n\n        for(int[] d : dirs){\n\n            int r=d[0]+p[0];\n            int c=d[1]+p[1];\n            if(r<0||c<0 ||r>=m || c>=n)\n                continue;\n            \n            if(board[r][c]=='X' || board[r][c]=='M')\n                cnt++;\n        }\n        return cnt==0 ? 'B' : (char) (cnt+'0');\n    }\n}\n\n/*\ninput\n[[\"E\",\"M\",\"M\",\"2\",\"B\",\"B\",\"B\",\"B\"],\n[\"E\",\"E\",\"M\",\"2\",\"B\",\"B\",\"B\",\"B\"],\n[\"E\",\"E\",\"2\",\"1\",\"B\",\"B\",\"B\",\"B\"],\n[\"E\",\"M\",\"1\",\"B\",\"B\",\"B\",\"B\",\"B\"],\n[\"1\",\"2\",\"2\",\"1\",\"B\",\"B\",\"B\",\"B\"],\n[\"B\",\"1\",\"M\",\"1\",\"B\",\"B\",\"B\",\"B\"],\n[\"B\",\"1\",\"1\",\"1\",\"B\",\"B\",\"B\",\"B\"],\n[\"B\",\"B\",\"B\",\"B\",\"B\",\"B\",\"B\",\"B\"]]\n\n[[\"E\",\"E\",\"E\",\"E\",\"E\"]\n,[\"E\",\"E\",\"M\",\"E\",\"E\"]\n,[\"E\",\"E\",\"E\",\"E\",\"E\"]\n,[\"E\",\"E\",\"E\",\"E\",\"E\"]]\n\noutput\n[[\"B\",\"B\",\"B\",\"B\",\"B\",\"B\",\"1\",\"E\"]\n,[\"B\",\"1\",\"1\",\"1\",\"B\",\"B\",\"1\",\"M\"]\n,[\"1\",\"E\",\"M\",\"1\",\"B\",\"B\",\"1\",\"1\"]\n,[\"M\",\"E\",\"1\",\"1\",\"B\",\"B\",\"B\",\"B\"]\n,[\"1\",\"1\",\"B\",\"B\",\"B\",\"B\",\"B\",\"B\"]\n,[\"B\",\"B\",\"B\",\"B\",\"B\",\"B\",\"B\",\"B\"]\n,[\"B\",\"1\",\"2\",\"2\",\"1\",\"B\",\"B\",\"B\"]\n,[\"B\",\"1\",\"M\",\"M\",\"1\",\"B\",\"B\",\"B\"]]\n\n[[\"B\",\"1\",\"1\",\"1\",\"B\"]\n,[\"B\",\"1\",\"M\",\"1\",\"B\"]\n,[\"B\",\"1\",\"1\",\"1\",\"B\"]\n,[\"B\",\"B\",\"B\",\"B\",\"B\"]]\n\nexpect\n[[\"B\",\"1\",\"E\",\"1\",\"B\"]\n,[\"B\",\"1\",\"M\",\"1\",\"B\"]\n,[\"B\",\"1\",\"1\",\"1\",\"B\"]\n,[\"B\",\"B\",\"B\",\"B\",\"B\"]]\n\n\n*/","compare_result":"111111111111111111111111111111111111111111111111111111","title_slug":"minesweeper","has_notes":false,"flag_type":1}