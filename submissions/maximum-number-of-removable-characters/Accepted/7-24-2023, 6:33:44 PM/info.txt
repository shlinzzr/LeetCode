{"id":1002536348,"question_id":2027,"lang":"java","lang_name":"Java","time":"10 months, 3 weeks","timestamp":1690194824,"status":10,"status_display":"Accepted","runtime":"369 ms","url":"/submissions/detail/1002536348/","is_pending":"Not Pending","title":"Maximum Number of Removable Characters","memory":"62.8 MB","code":"class Solution {\n    public int maximumRemovals(String s, String p, int[] removable) {\n        int len = removable.length;\n        \n        HashMap<Integer, Integer> map = new HashMap<>();\n        \n        for(int i=0; i<len; i++){\n            map.put(removable[i], i);\n        }\n       \n        int st=0, ed=len;\n        while(st<ed){\n            int mid = st + (ed-st+1)/2;\n            \n            if(isOk(s, p, mid, map)){\n                st = mid;\n                \n            }else{\n                ed = mid-1;\n            }\n        }\n        \n        return st;\n        \n    }\n    \n    \n    private boolean isOk(String s, String p, int k, HashMap<Integer, Integer> map){\n        \n        int i=0, j=0;\n        \n        while(j<p.length()){ //p\n            \n            while(i<s.length() && s.charAt(i)!=p.charAt(j)){ //go through s\n                i++;\n            }\n            \n            if(i>=s.length()) break;\n            \n            if(!map.containsKey(i) || map.get(i)>=k) // 1.如果不是removable by pass, 2.k個之後bypass (只選前k個做rm)\n                j++; // go p;\n            \n            i++;\n        }\n        \n        return j==p.length();\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-number-of-removable-characters","has_notes":false,"flag_type":1}