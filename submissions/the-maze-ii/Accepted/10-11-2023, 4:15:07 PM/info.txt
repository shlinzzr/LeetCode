{"id":1072482440,"question_id":505,"lang":"java","lang_name":"Java","time":"8Â months","timestamp":1697012107,"status":10,"status_display":"Accepted","runtime":"10 ms","url":"/submissions/detail/1072482440/","is_pending":"Not Pending","title":"The Maze II","memory":"44.6 MB","code":"class Solution {\n    public int shortestDistance(int[][] maze, int[] start, int[] destination) {\n        // directions to top, bottom, left and right\n        int[][] dirs={{-1,0},{1,0},{0,-1},{0,1}};\n        // record shotest distance\n        int[][] arr =new int[maze.length][maze[0].length];\n        // Set all cell as -1\n        for(int[] a: arr){\n            Arrays.fill(a,-1);\n        }\n        // Initialize start distance to 0\n        arr[start[0]][start[1]]=0;\n        Queue<int[]> q=new LinkedList<>();\n        q.add(start);\n        while(!q.isEmpty()){\n            \n            int[] p=q.poll();\n\n            for(int[] dir : dirs){\n\n                int dis = arr[p[0]][p[1]];\n                int y=p[0];\n                int x=p[1];\n\n                while(y+dir[0]>=0 && y+dir[0]<maze.length \n                   && x+dir[1]>=0 && x+dir[1]<maze[0].length\n                   && maze[y+dir[0]][x+dir[1]]!=1){\n                    y+=dir[0];\n                    x+=dir[1];\n                    dis++;\n                }\n                // If this cell is first time to reach or the distance to this cell is shorter\n                // add it to queue and update distance\n                if(arr[y][x]==-1|| arr[y][x]>dis){\n                    q.add(new int[]{y,x});\n                    arr[y][x]=dis;\n                }\n            }\n        }\n        return arr[destination[0]][destination[1]];\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"the-maze-ii","has_notes":false,"flag_type":1}