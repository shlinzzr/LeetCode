{"id":999819227,"question_id":673,"lang":"java","lang_name":"Java","time":"10 months, 4 weeks","timestamp":1689907275,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/999819227/","is_pending":"Not Pending","title":"Number of Longest Increasing Subsequence","memory":"N/A","code":"class Solution {\n    public int findNumberOfLIS(int[] nums) {\n        int len = nums.length;\n        \n        int[] dp = new int[len+1]; // the lis at with char num\n        Arrays.fill(dp, 1);\n        dp[0]=0;\n        \n        \n        int[] times = new int[len+1];\n        Arrays.fill(times, 1);\n        \n        \n        for(int i=1; i<=len; i++){\n            for(int j=1; j<i; j++){\n                \n                // System.out.println (\"i=\"+i + \" n[i-1]=\" +nums[i-1] + \" n[j-1]=\" + nums[j-1] );\n                if(nums[i-1]< nums[j-1])\n                   continue;\n                   \n                // as-is 只算最長lis時候的code\n                \n                \n                // dp[i] = Math.max(dp[i], dp[j]+1);\n                // System.out.println(nums[i-1] + \" \" + nums[j-1] + \" dp[i]=\" + dp[i]);\n                \n                \n                // now: 為了計算有幾個\n                if(dp[j]+1>dp[i]){\n                    dp[i] = dp[j]+1;\n                    times[i] = times[j];\n                    \n                }else if(dp[j]+1==dp[i]){\n                    times[i] += times[j];\n                }\n                   \n            }\n        }\n        \n        \n        // as-is\n        // return dp[len];\n        \n        int maxLen = 0;\n        int res = 0 ;\n        for(int i=1; i<=len; i++){\n            if(dp[i]>maxLen){\n                maxLen = dp[i];\n                res = times[i];\n            }else if(dp[i]==maxLen){\n                res += times[i];\n            }\n        }\n        \n        return res;\n        \n        \n        \n    }\n}","compare_result":"1001111001111011011100000100111001011101011111111011111111101110110111010011110100111000000011000000000000000000000000000000000000010000000000000000000000111111111111111111111111111100000011111000000001011111111111111111101","title_slug":"number-of-longest-increasing-subsequence","has_notes":false,"flag_type":1}