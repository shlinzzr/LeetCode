{"id":943006276,"question_id":673,"lang":"java","lang_name":"Java","time":"1 year, 1 month","timestamp":1683002486,"status":10,"status_display":"Accepted","runtime":"23 ms","url":"/submissions/detail/943006276/","is_pending":"Not Pending","title":"Number of Longest Increasing Subsequence","memory":"42.2 MB","code":"class Solution {\n    public int findNumberOfLIS(int[] nums) {\n        \n        // huifeng :  https://www.youtube.com/watch?v=ESUKmxtA5sY\n        \n        \n        int len = nums.length;\n        \n        int[] times = new int[len];\n        int[] dp = new int[len];\n        Arrays.fill(dp, 1);\n        Arrays.fill(times, 1);\n        \n        \n        for(int ed=0; ed<len; ed++){\n            for(int st=0; st<ed; st++){\n                \n                if(nums[ed]<=nums[st])\n                    continue;\n                \n                if(dp[st]+1>dp[ed]){\n                    dp[ed] = dp[st]+1;\n                    times[ed] = times[st];\n                    \n                }else if(dp[st]+1 == dp[ed]){\n                    times[ed] += times[st];\n                }\n                \n            }\n        }\n    \n        int max = 0;\n        int res = 0;\n        \n        for(int i=0; i<len; i++){\n            \n            if(dp[i]>max){\n                max = dp[i];\n                res = times[i];\n                \n            }else if(dp[i]==max){\n                res += times[i];\n            }\n        }\n\n        \n        \n        \n        return res;\n        \n        \n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"number-of-longest-increasing-subsequence","has_notes":false,"flag_type":1}