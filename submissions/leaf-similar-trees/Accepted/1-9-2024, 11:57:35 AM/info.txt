{"id":1141061473,"question_id":904,"lang":"java","lang_name":"Java","time":"5Â months","timestamp":1704772655,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1141061473/","is_pending":"Not Pending","title":"Leaf-Similar Trees","memory":"41.3 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    List<Integer> list = new ArrayList<>();\n    int idx=0;\n    public boolean leafSimilar(TreeNode root1, TreeNode root2) {\n\n        helper(root1, false);\n\n        return helper(root2, true) && idx==list.size();\n    }\n\n    private boolean helper(TreeNode root, boolean chk){\n\n        if(root==null) return true;\n\n        if(root.left==null && root.right==null){\n            \n            if(chk==false)\n                list.add(root.val);\n            else if(idx>=list.size() || root.val!=list.get(idx++)){\n                return false;\n            }\n        }\n        boolean left = helper(root.left, chk);\n        boolean right = helper(root.right, chk);\n\n        return left&&right;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111","title_slug":"leaf-similar-trees","has_notes":false,"flag_type":1}