{"id":856415417,"question_id":904,"lang":"java","lang_name":"Java","time":"1 year, 6 months","timestamp":1670469970,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/856415417/","is_pending":"Not Pending","title":"Leaf-Similar Trees","memory":"42.4 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    \n    List<TreeNode> list1;\n    List<TreeNode> list2;\n    \n    public boolean leafSimilar(TreeNode root1, TreeNode root2) {\n        list1 = new ArrayList<>();\n        list2 = new ArrayList<>();\n        \n        helper(root1, list1);\n        helper(root2, list2);\n        \n        if(list1.size()!=list2.size())\n            return false;\n        \n        for(int i=0; i<list1.size(); i++){\n            if(list1.get(i).val!=list2.get(i).val)\n                return false;\n        }\n        \n        return true;\n        \n        \n    }\n    \n    private void helper(TreeNode root, List<TreeNode> list){\n        \n        if(root==null)\n            return;\n        \n        if(root.left==null && root.right==null)\n            list.add(root);\n        \n        helper(root.left, list);\n        helper(root.right, list);\n        \n    }\n}","compare_result":"11111111111111111111111111111111111111111","title_slug":"leaf-similar-trees","has_notes":false,"flag_type":1}