{"id":847208103,"question_id":2038,"lang":"java","lang_name":"Java","time":"1 year, 6 months","timestamp":1668999279,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/847208103/","is_pending":"Not Pending","title":"Nearest Exit from Entrance in Maze","memory":"N/A","code":"class Solution {\n    public int nearestExit(char[][] maze, int[] entrance) {\n        \n        int h = maze.length;\n        int w = maze.length;\n        \n        \n        if(entrance[0]<0 || entrance[0]>=h || entrance[1]<0 || entrance[1]>=w)\n            return -1;\n        \n        boolean[][] visited = new boolean[h][w];\n        \n        Stack<int[]> st = new Stack<>();\n        \n        st.push(entrance);\n        visited[entrance[0]][entrance[1]]=true;\n        \n        int[][] dirs = new int[][]{{1,0}, {0,1}, {-1, 0}, {0, -1}};\n        \n        int cnt=0;\n        \n        while(!st.isEmpty()){\n            \n            int siz = st.size();\n            for(int i=0; i<siz; i++){\n                int[] p = st.pop();\n\n                if(p!=entrance && (p[0]==0 || p[1]==0 || p[0]==h-1 || p[1]==w-1))\n                   return cnt;\n\n                for(int[] d : dirs){\n                    int r = p[0] + d[0];\n                    int c = p[1] + d[1];\n\n                    if(r>=0 && c>=0 && r<h && c<w && visited[r][c]==false && maze[r][c]=='.'){\n                        visited[r][c] = true;\n                        st.push(new int[]{r,c});\n\n                    }\n                }\n            }\n            \n            \n            cnt++;\n            \n        }\n        \n        \n        return -1;\n    }\n}","compare_result":"11111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"nearest-exit-from-entrance-in-maze","has_notes":false,"flag_type":1}