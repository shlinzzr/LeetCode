{"id":925300631,"question_id":174,"lang":"java","lang_name":"Java","time":"1 year, 2 months","timestamp":1680256065,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/925300631/","is_pending":"Not Pending","title":"Dungeon Game","memory":"42.1 MB","code":"class Solution {\n    public int calculateMinimumHP(int[][] dungeon) {\n        \n        if (dungeon == null || dungeon.length == 0 || dungeon[0].length == 0) return 0;\n\n        int m = dungeon.length;\n        int n = dungeon[0].length;\n\n        int[][] health = new int[m][n];\n\n        health[m - 1][n - 1] = Math.max(1 - dungeon[m - 1][n - 1], 1);\n\n        for (int i = m - 2; i >= 0; i--) {            \n            health[i][n - 1] = Math.max(health[i + 1][n - 1] - dungeon[i][n - 1], 1);\n        }\n\n        for (int j = n - 2; j >= 0; j--) {\n            health[m - 1][j] = Math.max(health[m - 1][j + 1] - dungeon[m - 1][j], 1);\n        }\n\n        for (int i = m - 2; i >= 0; i--) {\n            for (int j = n - 2; j >= 0; j--) {\n                int down = Math.max(health[i + 1][j] - dungeon[i][j], 1);\n                int right = Math.max(health[i][j + 1] - dungeon[i][j], 1);\n                health[i][j] = Math.min(right, down);\n            }\n        }\n\n        return health[0][0];\n    }\n}","compare_result":"111111111111111111111111111111111111111111111","title_slug":"dungeon-game","has_notes":false,"flag_type":1}