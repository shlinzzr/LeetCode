{"id":822221328,"question_id":893,"lang":"java","lang_name":"Java","time":"1 year, 8 months","timestamp":1665738172,"status":10,"status_display":"Accepted","runtime":"20 ms","url":"/submissions/detail/822221328/","is_pending":"Not Pending","title":"All Nodes Distance K in Binary Tree","memory":"42.7 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    \n//   HuaHua without HashMap version \n//   recursive version    \n\n    \n    List<Integer> res;\n    \n    public List<Integer> distanceK(TreeNode root, TreeNode target, int k) {\n        res = new ArrayList<>();\n        helper(root, target, k);\n        return res;\n    }\n    \n    private int helper(TreeNode root, TreeNode target, int k ){\n        if(root==null)\n            return -1;\n        \n        if(root==target){\n            collect(target, k);\n            return 0;\n        }\n        \n        int l = helper(root.left, target, k);\n        int r = helper(root.right, target, k);\n        \n        if(l>=0){\n            if(l==k-1)\n                res.add(root.val);\n            collect(root.right, k-l-2);\n            return l+1;\n        }\n        \n        if(r>=0){\n            if(r==k-1)\n                res.add(root.val);\n            collect(root.left, k-r-2);\n            return r+1;\n        }\n        \n        return -1;\n        \n    }\n    \n    private void collect(TreeNode root, int d){\n        if(root==null || d<0)\n            return;\n        \n        if(d==0) \n            res.add(root.val);\n        \n        collect(root.left, d-1);\n        collect(root.right, d-1);\n    }\n}\n","compare_result":"111111111111111111111111111111111111111111111111111111111","title_slug":"all-nodes-distance-k-in-binary-tree","has_notes":false,"flag_type":1}