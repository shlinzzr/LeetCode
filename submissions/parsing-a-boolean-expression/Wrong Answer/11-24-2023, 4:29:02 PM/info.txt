{"id":1105346946,"question_id":1197,"lang":"java","lang_name":"Java","time":"6 months, 3 weeks","timestamp":1700814542,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1105346946/","is_pending":"Not Pending","title":"Parsing A Boolean Expression","memory":"N/A","code":"class Solution {\n    public boolean parseBoolExpr(String ex) {\n        Stack<Character> op = new Stack<>();\n        Stack<List<Boolean>> st = new Stack<>();\n        List<Boolean> curr = new ArrayList<>();\n\n        boolean res = false;\n\n        for (int i=0; i<ex.length(); i++){\n            char ch = ex.charAt(i);\n\n            System.out.println(\"ch=\"+ch + \" curr=\" + curr);\n            if( ch=='!' || ch=='&' || ch=='|'){\n                op.push(ch);\n                st.push(curr);\n                curr.clear();\n                i++;\n\n            } else if (ch==')') {\n\n                //  ret = eval(stackOp.top(), curVals);\n                // stackOp.pop();\n                // curVals = stackVal.top();\n                // curVals.push_back(ret);\n                // stackVal.pop();\n\n\n                res = eval(op.peek(), curr);\n                op.pop();\n                curr.clear();\n                curr = st.peek();\n                curr.add(res);\n                st.pop();\n                \n            }\n            else if (ch=='t' || ch=='f' ) {\n                curr.add(ch=='t');\n            }\n        }\n\n        return res;\n    }\n\n    private boolean eval(char op, List<Boolean> list){\n        boolean result=false;\n        if (op=='!')\n            result = !list.get(0);\n\n        else if (op=='&'){\n            result = true;\n            for (int i=0; i<list.size(); i++)\n                result = result && list.get(i);\n\n        } else if (op=='|')  {\n            result = false;\n             for (int i=0; i<list.size(); i++)\n                result = result || list.get(i);\n        }\n        System.out.println(\"eval=\"+result);\n        return result;\n    }\n}","compare_result":"111111111111111111111111111110101000000111000011111010110111000100101110011","title_slug":"parsing-a-boolean-expression","has_notes":false,"flag_type":1}