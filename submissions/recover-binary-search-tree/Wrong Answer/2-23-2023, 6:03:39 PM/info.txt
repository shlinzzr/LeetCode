{"id":903445886,"question_id":99,"lang":"java","lang_name":"Java","time":"1 year, 3 months","timestamp":1677146619,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/903445886/","is_pending":"Not Pending","title":"Recover Binary Search Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    \n    TreeNode firstElement = null;\n    TreeNode secondElement = null;\n    // The reason for this initialization is to avoid null pointer exception in the first comparison when prevElement has not been initialized\n    TreeNode prevElement = new TreeNode(Integer.MIN_VALUE);\n    \n    public void recoverTree(TreeNode root) {\n        \n        // In order traversal to find the two elements\n        traverse(root);\n        \n        // Swap the values of the two nodes\n        int temp = firstElement.val;\n        firstElement.val = secondElement.val;\n        secondElement.val = temp;\n    }\n    \n    private void traverse(TreeNode root) {\n        \n        if (root == null)\n            return;\n            \n        traverse(root.left);\n        \n        // Start of \"do some business\", \n        // If first element has not been found, assign it to prevElement (refer to 6 in the example above)\n        if (firstElement == null && prevElement.val >= root.val) {\n            firstElement = prevElement;\n        }\n    \n        // If first element is found, assign the second element to the root (refer to 2 in the example above)\n        if (firstElement != null && prevElement.val >= root.val) {\n            secondElement = root;\n        }        \n        prevElement = root;\n\n        // End of \"do some business\"\n\n        traverse(root.right);\n    }\n}","compare_resulttitle_slug":"recover-binary-search-tree","has_notes":false,"flag_type":1}