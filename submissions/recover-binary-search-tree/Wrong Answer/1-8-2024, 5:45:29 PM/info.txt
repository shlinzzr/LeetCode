{"id":1140327178,"question_id":99,"lang":"java","lang_name":"Java","time":"5 months","timestamp":1704707129,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1140327178/","is_pending":"Not Pending","title":"Recover Binary Search Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n\n    // 因為要找出 \"亂序的\" node -> 想到的是 inorder print node 會是sorted\n\n    //  [1,3,null,null,2] => \"3 2\" 1,     3 \"2 1\" \n    //              first==prev curr.          second\n\n    TreeNode prev = new TreeNode(Integer.MIN_VALUE);\n    TreeNode first = null;\n    TreeNode second = null;\n\n\n    \n    // List<TreeNode> candidate = new ArrayList<>();\n    public void recoverTree(TreeNode root) {\n        inorder(root);\n\n        int temp = first.val;\n        first.val = second.val;\n        second.val = temp;\n    }\n\n    private void inorder(TreeNode root){\n\n        if(root==null) return ;\n\n        inorder(root.left);\n\n        if(first==null && prev.val>=root.val){\n            first = prev;\n        }\n\n        if(first!=null && prev.val >= root.val){\n            second = root;\n        }\n\n        prev = root;\n\n        inorder(root.right);\n\n    }\n}","compare_resulttitle_slug":"recover-binary-search-tree","has_notes":false,"flag_type":1}