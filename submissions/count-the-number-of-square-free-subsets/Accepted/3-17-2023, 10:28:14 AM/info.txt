{"id":916613206,"question_id":2709,"lang":"java","lang_name":"Java","time":"1 year, 2 months","timestamp":1679020094,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/916613206/","is_pending":"Not Pending","title":"Count the Number of Square-Free Subsets","memory":"42.5 MB","code":"import java.math.BigInteger;\n\nclass Solution {\n\n    /*\n    Runtime 3 ms Beats 100%\n    Memory 41.5 MB Beats 100%\n     */\n    private final int MOD = (int) (1e9 + 7);\n    private final List<Integer> PRIMES = List.of(2, 3, 5, 7, 11, 13);\n\n    public int squareFreeSubsets(int[] nums) {\n        int[] primeFactors = new int[31];\n\n        for (int i = 2; i <= 30; i++) {\n            if (i % 4 == 0 || i % 9 == 0 || i % 25 == 0) {\n                continue;\n            }\n\n            for (int j = 0; j < PRIMES.size(); j++) {\n                if (i % PRIMES.get(j) == 0) {\n                    primeFactors[i] += 1 << j;\n                }\n            }\n        }\n\n        int[] freqs = new int[31];\n        for (int num : nums) {\n            if (num % 4 == 0 || num % 9 == 0 || num % 25 == 0) {\n                continue;\n            }\n            freqs[num]++;\n        }\n\n        int mask = 0;\n        int[][] cache = new int[31][1<<6];\n        for (int[] row : cache) {\n            Arrays.fill(row, -1);\n        }\n\n        long oneSubsets = BigInteger.TWO.modPow(BigInteger.valueOf(freqs[1]), BigInteger.valueOf(MOD)).longValue();\n        int otherSubsets = (int) (squareFreeSubsets(freqs, primeFactors, 2, mask, cache) % MOD);\n\n        return (int) (otherSubsets * oneSubsets % MOD + oneSubsets - 1) % MOD;\n    }\n\n    private long squareFreeSubsets(int[] freqs, int[] primeFactors, int num, int mask, int[][] cache) {\n        if (num == 30) {\n            if ((primeFactors[num] & mask) != 0) {\n                return 0;\n            }\n            return freqs[num];\n        }\n\n        if (cache[num][mask] != -1) {\n            return cache[num][mask];\n        }\n\n        long countWithout = squareFreeSubsets(freqs, primeFactors, num + 1, mask, cache) % MOD;\n\n        if (freqs[num] == 0 || (primeFactors[num] & mask) != 0) {\n            cache[num][mask] = (int) countWithout;\n            return countWithout;\n        }\n\n        long countWith = freqs[num] + freqs[num] * squareFreeSubsets(freqs, primeFactors, num + 1, primeFactors[num] | mask, cache) % MOD;\n        countWith %= MOD;\n\n        cache[num][mask] = (int) ((countWithout + countWith) % MOD);\n        return (countWithout + countWith) % MOD;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111","title_slug":"count-the-number-of-square-free-subsets","has_notes":false,"flag_type":1}