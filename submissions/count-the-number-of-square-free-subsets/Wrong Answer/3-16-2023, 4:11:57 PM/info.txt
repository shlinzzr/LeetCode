{"id":916140865,"question_id":2709,"lang":"java","lang_name":"Java","time":"1 year, 2 months","timestamp":1678954317,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/916140865/","is_pending":"Not Pending","title":"Count the Number of Square-Free Subsets","memory":"N/A","code":"class Solution {\n   long[][] memo = new long[1001][1 << 11];\n   int[] primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29};\n   private static final int MOD = 1000000007;\n   public int squareFreeSubsets(int[] nums) {\n       for (long[] array : memo) {\n           Arrays.fill(array, -1);\n       }        \n       return (int) (dfs(0, 1, nums) - 1);\n   }\n   private long dfs(int index, int productMask, int[] nums) {\n       // termination condition\n       if (index >= nums.length) {\n           return 1;\n       }\n       if (memo[index][productMask] != -1) {\n           return memo[index][productMask];\n       }\n       // normal condition\n       int mask = getMask(nums[index]);\n       long result = dfs(index + 1, productMask, nums);\n       if ((productMask & mask) == 0) {\n           result = (result + dfs(index + 1, productMask | mask, nums)) % MOD;\n       }\n       memo[index][productMask] = result;\n       return result;\n   }\n   private int getMask(long num) {\n       int mask = 0;\n       for (int i = 0; i < 10; i++) {\n           int duplicates = 0;\n           while (num % primes[i] == 0) {\n               duplicates += 1;\n               num /= primes[i];\n           }\n           if (duplicates > 1) {\n               return -1;\n           }\n           if (duplicates == 1) {\n               mask |= (1 << (i + 1));\n           }\n       }\n       return mask;\n   }\n}","compare_result":"11111111111111111111111111111111111111111110","title_slug":"count-the-number-of-square-free-subsets","has_notes":false,"flag_type":1}