{"id":1111977170,"question_id":1902,"lang":"java","lang_name":"Java","time":"6 months, 1 week","timestamp":1701672014,"status":10,"status_display":"Accepted","runtime":"38 ms","url":"/submissions/detail/1111977170/","is_pending":"Not Pending","title":"Car Fleet II","memory":"99.7 MB","code":"class Solution {\n    public double[] getCollisionTimes(int[][] cars) {\n        int len = cars.length; //pos, speed\n\n\n        double[] res = new double[len];\n        Arrays.fill(res, -1);\n\n        Stack<Integer> st = new Stack<>();\n        // Deque<int[]> dq = new ArrayDeque<>();\n        for(int i=len-1; i>=0; i--){\n\n            int[] cur = cars[i];\n            int pos = cur[0];\n            int spd = cur[1];\n\n            while (!st.isEmpty() && spd <= cars[st.peek()][1]) {\n                st.pop();\n            }\n\n            while (!st.isEmpty()) {\n                int rightCar = st.peek();\n                double collideTime = 1.0 * (cars[rightCar][0] - pos) / (spd - cars[rightCar][1]);\n                if (collideTime <= res[rightCar] || res[rightCar] < 0) {\n                    res[i] = collideTime;\n                    break;\n                }\n                // This car will collide with cars after candidate.\n                st.pop();\n            }\n             st.push(i);\n\n        }\n        \n        return res;\n\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"car-fleet-ii","has_notes":false,"flag_type":1}