{"id":860082363,"question_id":1014,"lang":"java","lang_name":"Java","time":"1 year, 6 months","timestamp":1671092208,"status":10,"status_display":"Accepted","runtime":"143 ms","url":"/submissions/detail/860082363/","is_pending":"Not Pending","title":"K Closest Points to Origin","memory":"50.8 MB","code":"class Solution {\n    public int[][] kClosest(int[][] points, int k) {\n        int len = points.length;\n        \n        PriorityQueue<int[]> pq = new PriorityQueue<>(\n           (a,b) -> (b[0]*b[0]+b[1]*b[1])-(a[0]*a[0]+a[1]*a[1]) \n        );\n        \n        for(int[] p : points){\n            pq.offer(p);\n             // System.out.println(p[0]+\",\" + p[1]);\n            if(pq.size()>k){\n                System.out.println();\n                \n                int[] tmp = pq.poll();\n                \n//                 System.out.println(tmp[0]+\",\" + tmp[1]);\n            }\n                \n        }\n        \n        int[][] res = new int[k][2];\n        int siz = pq.size();\n        for(int i=0; i<siz; i++){\n            int[] p = pq.poll();\n            \n            // System.out.println(p[0]+\",\" + p[1]);\n            \n            res[i][0] = p[0];\n            res[i][1] = p[1];\n        }\n        \n        return res;\n        \n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"k-closest-points-to-origin","has_notes":false,"flag_type":1}