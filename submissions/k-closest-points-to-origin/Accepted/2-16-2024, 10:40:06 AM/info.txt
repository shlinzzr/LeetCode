{"id":1176549915,"question_id":1014,"lang":"java","lang_name":"Java","time":"3 months, 4 weeks","timestamp":1708051206,"status":10,"status_display":"Accepted","runtime":"28 ms","url":"/submissions/detail/1176549915/","is_pending":"Not Pending","title":"K Closest Points to Origin","memory":"53 MB","code":"class Solution {\n    \n    class Point{\n        int[] p;\n        int dis;\n        \n        public Point(int[] p){\n            this.p = p;\n            dis = getDis(new int[]{0,0}, p);\n        }\n    }\n    \n    public int[][] kClosest(int[][] points, int k) {\n        int len = points.length;\n        \n        PriorityQueue<Point> pq = new PriorityQueue<>(\n            (a,b)->b.dis-a.dis\n        );\n        \n        for(int[] p : points){\n            Point point = new Point(p);\n            // System.out.println(point.dis);\n            pq.offer(point);\n            \n            if(pq.size()>k){\n                pq.poll();            \n            }\n        }\n        \n        int idx=0;\n        int[][] res = new int[pq.size()][];\n        while(!pq.isEmpty()){\n            res[idx++] = pq.poll().p;\n        }\n        \n        return res;\n        \n        \n    }\n    \n    private int getDis(int[] a, int[] b){\n        return (a[0]-b[0])*(a[0]-b[0]) + (a[1]-b[1])*(a[1]-b[1]);\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"k-closest-points-to-origin","has_notes":false,"flag_type":1}