{"id":769109924,"question_id":1014,"lang":"java","lang_name":"Java","time":"1 year, 10 months","timestamp":1660028855,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/769109924/","is_pending":"Not Pending","title":"K Closest Points to Origin","memory":"N/A","code":"class Solution {\n    public int[][] kClosest(int[][] points, int k) {\n        \n          int[][] res = new int[k][2];\n        if(points.length==1){\n                res[0][0] = points[0][0];\n                res[0][1] = points[0][1];\n            return res;            \n        }\n            \n        \n        \n      \n        \n        int[] val = new int[points.length];\n        for(int i=0; i<points.length; i++){\n            \n            val[i] = points[i][0]*points[i][0] + points[i][1]*points[i][1];\n        }\n        \n        \n        for(int j=0;j<k; j++ ){\n         \n            int minidx = -1;\n            int minVal = Integer.MAX_VALUE;\n            for(int i=0; i<val.length-j; i++){\n            \n                if(i==0){\n                    minidx=0;\n                    minVal=val[i];\n                    continue;\n                }\n                \n                \n                \n                if(val[i]< minVal){\n                    \n                    int temp = val[i];\n                    val[i] = minVal;\n                    minVal = temp;\n                    \n                    \n                    res[j][0] = points[i][0];\n                    res[j][1] = points[i][1];\n                    \n                }\n            \n            }\n            \n            \n            \n        }\n        \n        return res;        \n        \n        \n        \n    }\n}","compare_result":"100010000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"k-closest-points-to-origin","has_notes":false,"flag_type":1}