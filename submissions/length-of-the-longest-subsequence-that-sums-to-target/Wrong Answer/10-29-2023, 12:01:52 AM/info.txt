{"id":1086169106,"question_id":3106,"lang":"java","lang_name":"Java","time":"7 months, 2 weeks","timestamp":1698508912,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1086169106/","is_pending":"Not Pending","title":"Length of the Longest Subsequence That Sums to Target","memory":"N/A","code":"class Solution {\n    int max = -1;\n    public int lengthOfLongestSubsequence(List<Integer> nums, int target) {\n        Collections.sort(nums);\n        \n//         helper(nums, new ArrayList<>(), target, 0);\n    \n        \n//         return max;\n        \n        \n        int size = nums.size();\n        \n        int st=1, ed=size;\n        \n        while(st<ed){\n            int mid = (st+ed)/2;\n            if(isOk(nums, mid, target, 0)){\n                st = mid+1;\n            }else{\n                ed = mid;\n            }\n        }\n        System.out.println(st);\n        return isOk(nums, st, target, 0)? st : -1;\n        \n        \n    }\n    \n    \n    \n    \n    private boolean isOk(List<Integer> nums, int mid, int target, int st){\n        \n        if(mid<0)\n            return false;\n        \n        if(target<0)\n            return false;\n        \n        if(target==0)\n            return true;\n        \n        for(int i=st; i<nums.size(); i++){\n            if(nums.get(i)<target){\n                isOk(nums, mid-1, target-nums.get(i), i+1);\n            }\n        }\n        return false;\n        \n    }\n    \n    // TLE\n    private void helper(List<Integer> nums, List<Integer> curr, int target, int st){\n        \n        if(max!=-1)\n            return;\n        \n        if(target<0)\n            return;\n        \n        if(target==0){\n            max = Math.max(max, curr.size());\n            System.out.println(curr);\n            return;\n        }\n        \n        for(int i=st; i<nums.size(); i++){\n            if(nums.get(i)>target)\n                return;\n            \n            curr.add(nums.get(i));\n            helper(nums, curr, target-nums.get(i), i+1);\n            curr.remove(curr.size()-1);\n            \n        }\n    }\n}","compare_resulttitle_slug":"length-of-the-longest-subsequence-that-sums-to-target","has_notes":false,"flag_type":1}