{"id":1077401337,"question_id":230,"lang":"java","lang_name":"Java","time":"7 months, 4 weeks","timestamp":1697534763,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1077401337/","is_pending":"Not Pending","title":"Kth Smallest Element in a BST","memory":"44.4 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n\n    // 1:pq, 2:recur, 3:stack\n\n    // // 1.pq\n    // public int kthSmallest(TreeNode root, int k) {\n    //     PriorityQueue<TreeNode> pq =new PriorityQueue<>( (a, b) -> b.val-a.val );\n    //     helper(root, pq, k);\n    //     return pq.poll().val;\n    // }\n    \n    // private void helper(TreeNode root,  PriorityQueue<TreeNode> pq, int k){\n    //     if(root==null)\n    //         return;\n        \n    //     pq.offer(root);\n    //     while(pq.size()>k)\n    //         pq.poll();\n        \n    //     helper(root.left, pq, k);\n    //     helper(root.right, pq, k);\n    // }\n\n\n    // 2.recur\n    int cnt = 0;\n    int res =0 ;\n    public int kthSmallest(TreeNode root, int k) {\n        cnt=k;\n        recur(root);\n        return res;\n    }\n    private void recur(TreeNode node){\n\n        if(node.left!=null) recur(node.left);\n        cnt--;\n        if(cnt==0){\n            res=node.val;\n            return;\n        }\n        if(node.right!=null) recur(node.right);\n    }\n\n\n    // // stack\n    // public int kthSmallest(TreeNode root, int k) {\n    //     Stack<TreeNode> stack = new Stack<TreeNode>();\n    //     stack.push(root);\n    //     TreeNode node = root;\n    //     int count = 0;\n    //     // node == null, might get to the leaf but stack is not empty\n    //     while(node!=null || !stack.isEmpty()){\n    //         while(node!=null){\n    //             stack.push(node);\n    //             node = node.left;\n    //         } \n    //         node = stack.pop();\n    //         count++;\n    //         if(count==k) return node.val;\n    //         node = node.right;\n    //     }\n    //     return -1;\n    // }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"kth-smallest-element-in-a-bst","has_notes":false,"flag_type":1}