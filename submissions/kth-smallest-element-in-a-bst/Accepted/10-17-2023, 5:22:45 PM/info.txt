{"id":1077399479,"question_id":230,"lang":"java","lang_name":"Java","time":"7 months, 4 weeks","timestamp":1697534565,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1077399479/","is_pending":"Not Pending","title":"Kth Smallest Element in a BST","memory":"43.8 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public int kthSmallest(TreeNode root, int k) {\n        Stack<TreeNode> stack = new Stack<TreeNode>();\n        stack.push(root);\n        TreeNode node = root;\n        int count = 0;\n        // node == null, might get to the leaf but stack is not empty\n        while(node!=null || !stack.isEmpty()){\n            while(node!=null){\n                stack.push(node);\n                node = node.left;\n            } \n            node = stack.pop();\n            count++;\n            if(count==k) return node.val;\n            node = node.right;\n        }\n        return -1;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"kth-smallest-element-in-a-bst","has_notes":false,"flag_type":1}