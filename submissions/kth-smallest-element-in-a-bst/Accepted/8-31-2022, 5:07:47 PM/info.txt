{"id":787861430,"question_id":230,"lang":"java","lang_name":"Java","time":"1 year, 9 months","timestamp":1661936867,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/787861430/","is_pending":"Not Pending","title":"Kth Smallest Element in a BST","memory":"42.3 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public int kthSmallest(TreeNode root, int k) {\n        \n        \n        PriorityQueue<TreeNode> pq = new PriorityQueue<>(\n            (a,b) -> a.val-b.val\n        );\n        \n        // PriorityQueue<Map.Entry<String,Integer>> pq = new PriorityQueue<>(\n        //     (a,b) -> a.getValue()==b.getValue() ? b.getKey().compareTo(a.getKey()) : a.getValue()-b.getValue()\n        // );\n        \n        \n        helper(pq, root);\n        \n        int res =0;\n        while(k>0){\n            res = pq.poll().val;\n            k--;\n        }\n        return res;\n    }\n    \n    private void helper(PriorityQueue<TreeNode> pq, TreeNode root){\n        \n        if(root==null)\n            return;\n        \n        pq.offer(root);\n        \n        helper(pq, root.left);\n        helper(pq, root.right);\n        \n    }\n}\n","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"kth-smallest-element-in-a-bst","has_notes":false,"flag_type":1}