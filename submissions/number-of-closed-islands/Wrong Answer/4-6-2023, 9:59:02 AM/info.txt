{"id":928791075,"question_id":1380,"lang":"java","lang_name":"Java","time":"1 year, 2 months","timestamp":1680746342,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/928791075/","is_pending":"Not Pending","title":"Number of Closed Islands","memory":"N/A","code":"class Solution {\n    public int closedIsland(int[][] grid) {\n        int h = grid.length;\n        int w = grid[0].length;\n        \n        boolean[][] seen = new boolean[h][w];\n        \n        int cnt=0;\n        Queue<int[]> q= new LinkedList<>();\n        for(int i=0; i<h; i++){\n            for(int j=0; j<w; j++){\n                \n                if(grid[i][j]==0 && seen[i][j]==false){\n                    seen[i][j] = true;\n                    boolean connectEdge = bfs(grid, i, j, seen);\n                    \n                    if(connectEdge==false)\n                        cnt++;\n                }\n            }\n        }\n        \n        return cnt;\n    }\n    \n    int[][] dirs = new int[][]{{0,1}, {1,0}, {-1,0}, {0, -1}};\n    \n    private boolean bfs(int[][] grid, int x, int y, boolean[][] seen){\n        \n        int h = grid.length;\n        int w = grid[0].length;\n        \n        if(x==0 || x==w-1 || y==0 || y==h-1)\n            return false;\n        \n        boolean res = true;\n        \n        for(int[] d: dirs){\n            \n            int r = x+d[0];\n            int c = y+d[1];\n            \n            if(c<0 || c>=w || r<0 || r>=h || seen[r][c])\n                continue;\n            \n            \n            if(grid[r][c]==0){\n                seen[r][c] = true;\n                res = res && bfs(grid, c, r, seen);\n            }\n        }\n        \n        return res;\n        \n    }\n}","compare_result":"10010001000000000000000000000000000000000000000","title_slug":"number-of-closed-islands","has_notes":false,"flag_type":1}