{"id":928801194,"question_id":1380,"lang":"java","lang_name":"Java","time":"1 year, 2 months","timestamp":1680748381,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/928801194/","is_pending":"Not Pending","title":"Number of Closed Islands","memory":"43.1 MB","code":"class Solution {\n\n    int[][] dir = new int[][]{{1, 0}, {-1, 0}, {0, 1}, {0, -1}};\n    \n    public int closedIsland(int[][] grid) {\n        int res = 0;\n        for(int i = 0; i < grid.length; i++){\n            for(int j = 0; j < grid[0].length; j++){\n                if(grid[i][j] == 0){\n                    if(dfs(grid, i, j)) res++;\n                }\n            }\n        }\n        \n        return res;\n    }\n    \n    public boolean dfs(int[][] grid, int x, int y){\n        \n        if(x < 0 || x >= grid.length || y < 0 || y >= grid[0].length) return false;\n        \n        if(grid[x][y] == 1) return true;\n        \n        grid[x][y] = 1;\n        \n        boolean res = true;\n        \n        for(int[] d : dir){\n            res = res & dfs(grid, x + d[0], y + d[1]);\n        }\n        \n        return res;\n    }\n}\n    \n    \n   /* public int closedIsland(int[][] grid) {\n        int h = grid.length;\n        int w = grid[0].length;\n        \n        boolean[][] seen = new boolean[h][w];\n        \n        int cnt=0;\n        Queue<int[]> q= new LinkedList<>();\n        for(int i=0; i<h; i++){\n            for(int j=0; j<w; j++){\n                \n                if(grid[i][j]==0 && seen[i][j]==false){\n                    seen[i][j] = true;\n                    boolean valid = bfs(grid, j, i, seen);\n                    if(valid)\n                        cnt++;\n                }\n            }\n        }\n        \n        return cnt;\n    }\n    \n    int[][] dirs = new int[][]{{0,1}, {1,0}, {-1,0}, {0, -1}};\n    \n    private boolean bfs(int[][] grid, int x, int y, boolean[][] seen){\n        \n        int h = grid.length;\n        int w = grid[0].length;\n        \n        if(x==0 || x==w-1 || y==0 || y==h-1)\n            return false;\n        \n        if(grid[y][x] == 1) return true;\n        \n        boolean res = true;\n        \n        for(int[] d: dirs){\n            \n            int r = y+d[0];\n            int c = x+d[1];\n            \n            if(c<0 || c>=w || r<0 || r>=h || seen[r][c] || grid[r][c]==1)\n                continue;\n            \n            if(grid[r][c]==0){\n                seen[r][c] = true;\n                \n                boolean valid = bfs(grid, c, r, seen);\n                if(valid==false)\n                    return false;\n            }\n        }\n        \n        \n        return res;\n        \n    }\n    \n  /*[[1,0,1,1,1,1,0,0,1,0]\n    ,[1,0,1,1,0,0,0,1,1,1]\n    ,[0,1,1,0,0,0,1,0,0,0]\n    ,[1,0,1,1,0,1,0,0,1,0]\n    ,[0,1,1,1,0,1,0,1,0,0]\n    ,[1,0,0,1,0,0,1,0,0,0]\n    ,[1,0,1,1,1,0,0,1,1,0]\n    ,[1,1,0,1,1,0,1,0,1,1]\n    ,[0,0,1,1,1,0,1,0,1,1]\n    ,[1,0,0,1,1,1,1,0,1,1]]\n    \nOutput\n\n*/\n","compare_result":"11111111111111111111111111111111111111111111111","title_slug":"number-of-closed-islands","has_notes":false,"flag_type":1}