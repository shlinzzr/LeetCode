{"id":874617365,"question_id":1142,"lang":"java","lang_name":"Java","time":"1 year, 5 months","timestamp":1673254120,"status":10,"status_display":"Accepted","runtime":"20 ms","url":"/submissions/detail/874617365/","is_pending":"Not Pending","title":"Minimum Knight Moves","memory":"42.7 MB","code":"// sample 20 ms submission\n// [[4,1,2,1,4],\n//  [1,2,3,2,1],\n//  [2,3,0,3,2],\n//  [1,2,3,2,1],\n//  [4,1,2,1,4]]\n\n\n// [[0,3,2,3,],\n//  [3,2,1, ,],\n//  [2,1,4, ,],\n//  [3, , , ,],\n//  [,,,,]]\n\n// by official Solution\n// DFS (Depth-First Search) with Memoization\nclass Solution {\n    private Map<String, Integer> memo = new HashMap<>();\n\n    private int dfs(int x, int y) {\n        String key = x + \",\" + y;\n        if (memo.containsKey(key)) {\n            return memo.get(key);\n        }\n\n        if (x + y == 0) {\n            return 0;\n        } else if (x + y == 2) {\n            return 2;\n        } else {\n            Integer ret = Math.min(dfs(Math.abs(x - 1), Math.abs(y - 2)),\n                                   dfs(Math.abs(x - 2), Math.abs(y - 1))) + 1;\n            memo.put(key, ret);\n            return ret;\n        }\n    }\n\n    public int minKnightMoves(int x, int y) {\n        return dfs(Math.abs(x), Math.abs(y));\n    }\n}\n\n    \n\n\n","compare_result":"111111111111111111111111111111111111111111111","title_slug":"minimum-knight-moves","has_notes":false,"flag_type":1}