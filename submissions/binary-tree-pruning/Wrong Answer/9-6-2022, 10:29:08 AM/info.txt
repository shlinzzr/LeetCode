{"id":792631437,"question_id":832,"lang":"java","lang_name":"Java","time":"1 year, 9 months","timestamp":1662431348,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/792631437/","is_pending":"Not Pending","title":"Binary Tree Pruning","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public TreeNode pruneTree(TreeNode root) {\n        helper(root);\n        return root;\n    }\n    \n    private void helper(TreeNode root){\n        \n        if(root==null)\n            return;\n        \n        if(root.left!=null){\n            if( containOne(root.left)==false) \n                root.left=null;\n            else \n                helper(root.left);\n        }\n            \n        if(root.right!=null){\n            \n            if( containOne(root.right)==false) \n                root.right=null;\n            else \n                helper(root.right);\n        }\n        \n    }\n    \n    private boolean containOne(TreeNode root){\n        \n        if(root==null)\n            return false;\n        \n        if(root.val==1)\n            return true;\n        \n        boolean res = false;\n        res = res || containOne(root.left);\n        res = res || containOne(root.right);\n        return res;\n        \n    }\n}","compare_result":"111111011111111111111111111111","title_slug":"binary-tree-pruning","has_notes":false,"flag_type":1}