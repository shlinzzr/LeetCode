{"id":1018051560,"question_id":632,"lang":"java","lang_name":"Java","time":"10 months, 1 week","timestamp":1691720900,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1018051560/","is_pending":"Not Pending","title":"Smallest Range Covering Elements from K Lists","memory":"N/A","code":"class Solution {\n    public int[] smallestRange(List<List<Integer>> nums) {\n        \n        PriorityQueue<int[]> pq = new PriorityQueue<>( (a,b) -> a[0]-b[0]);\n        \n      \n        int h = nums.size();\n        \n        int max = 0;\n        \n        for(int i=0; i<h; i++){\n            \n            int val = nums.get(i).get(0);\n            pq.offer(new int[]{ val, i, 0}); // val, r, c\n            \n            max = Math.max(max, val);\n        }\n        \n        int left=-2000000, right=max;\n        int range = max-left;\n        \n        while(pq.size()==h){\n            \n            int[] p = pq.poll();\n            int v = p[0];\n            int r = p[1];\n            int c = p[2];\n\n            if(max-v < range){\n                range = right-v;\n                left = v;\n                right = max;\n            }\n            \n            if(c+1<nums.get(r).size()){\n                int val = nums.get(r).get(c+1);\n                pq.offer(new int[]{val, r, c+1});\n                max = Math.max(max, val);\n            }\n        }\n        \n        return new int[]{left, right};\n        \n        \n    }\n}","compare_result":"1111111111111111111011111011110111111111111101101111111111111101111111110011111110101111","title_slug":"smallest-range-covering-elements-from-k-lists","has_notes":false,"flag_type":1}