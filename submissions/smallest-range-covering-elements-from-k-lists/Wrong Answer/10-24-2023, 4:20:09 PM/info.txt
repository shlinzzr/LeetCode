{"id":1082836332,"question_id":632,"lang":"java","lang_name":"Java","time":"7 months, 3 weeks","timestamp":1698135609,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1082836332/","is_pending":"Not Pending","title":"Smallest Range Covering Elements from K Lists","memory":"N/A","code":"class Solution {\n    public int[] smallestRange(List<List<Integer>> nums) {\n        \n        PriorityQueue<int[]> pq = new PriorityQueue<>( (a,b) -> Integer.compare(a[0],b[0]));\n        \n        int h = nums.size();\n        \n        int max = 0;\n        for(int i=0; i<h; i++){\n            int val = nums.get(i).get(0);\n            pq.offer(new int[]{ val, i, 0}); // val, r, c\n            max = Math.max(max, val);\n        }\n        \n        int left=-2000000, right=max;\n        int range = max-left;\n        \n        while(pq.size()==h){\n            int[] p = pq.poll();\n            int val = p[0];\n            int row = p[1];\n            int col = p[2];\n\n            if(max-val < range){\n                left = val;\n                right = max;\n                range = right-val;\n            }\n            \n            if(col+1<nums.get(row).size()){\n                int next = nums.get(row).get(col+1);\n                pq.offer(new int[]{next, row, col+1});\n                max = Math.max(max, val);\n            }\n        }\n        \n        return new int[]{left, right};\n        \n        \n    }\n}","compare_result":"001111110000001011100111100011010001111110100110111001100110100111111110000000000000000000","title_slug":"smallest-range-covering-elements-from-k-lists","has_notes":false,"flag_type":1}