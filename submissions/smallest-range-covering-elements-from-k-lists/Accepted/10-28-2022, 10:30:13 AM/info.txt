{"id":831776265,"question_id":632,"lang":"java","lang_name":"Java","time":"1 year, 7 months","timestamp":1666924213,"status":10,"status_display":"Accepted","runtime":"84 ms","url":"/submissions/detail/831776265/","is_pending":"Not Pending","title":"Smallest Range Covering Elements from K Lists","memory":"56.7 MB","code":"class Solution {\n    public int[] smallestRange(List<List<Integer>> nums) {\n        int h = nums.size();\n        \n        PriorityQueue<Element> pq = new PriorityQueue<Element>(\n            (e1, e2) -> Integer.compare(e1.val, e2.val)\n        );\n\n        int max=-100000;\n        for(int i=0; i<h; i++){\n            Element e = new Element(i, 0, nums.get(i).get(0));\n            pq.offer(e);\n            max = Math.max(max, e.val);\n        }\n        \n        \n        int st=-100000, ed=max, range = 200000;\n        while(pq.size()==h){\n            Element e = pq.poll();\n            \n            if(max-e.val<range){\n                st=e.val;\n                ed=max;\n                range=ed-st;\n            }\n            \n            \n            if(e.idx+1<nums.get(e.row).size()){\n                int newVal = nums.get(e.row).get(e.idx+1);\n                max = Math.max(max, newVal);\n                Element ele = new Element(e.row, e.idx+1, newVal);\n                pq.offer(ele);\n            }\n        }\n        \n        \n        return new int[]{st, ed};\n    }\n    \n    \n    \n    class Element{\n        int val;\n        int row;\n        int idx;\n        public Element(int row, int idx, int val){\n            this.row=row;\n            this.idx=idx;\n            this.val=val;\n        }\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"smallest-range-covering-elements-from-k-lists","has_notes":false,"flag_type":1}