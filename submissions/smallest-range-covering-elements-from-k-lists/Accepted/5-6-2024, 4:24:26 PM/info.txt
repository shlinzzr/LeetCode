{"id":1250686934,"question_id":632,"lang":"java","lang_name":"Java","time":"1 month, 1 week","timestamp":1714983866,"status":10,"status_display":"Accepted","runtime":"31 ms","url":"/submissions/detail/1250686934/","is_pending":"Not Pending","title":"Smallest Range Covering Elements from K Lists","memory":"48.7 MB","code":"class Solution {\n    public int[] smallestRange(List<List<Integer>> nums) {\n\n        int size = nums.size();\n\n        PriorityQueue<int[]> pq = new PriorityQueue<>( // val, row, col\n            (a,b)-> a[0]-b[0]\n        );\n        \n        int min = Integer.MAX_VALUE;\n        int max = Integer.MIN_VALUE;\n        for(int i=0; i<size; i++){\n            int val = nums.get(i).get(0);\n            pq.offer(new int[]{val, i, 0});\n\n            max = Math.max(max, val);\n            min = Math.min(min, val);\n        }\n\n\n        int range = max-min;\n        int st = min, ed = max;\n        \n\n        while(pq.size()==size){\n\n            int[] p = pq.poll();\n            int val = p[0];\n            int row = p[1];\n            int col = p[2];\n\n            min = val;\n\n\n            if(max-min<range){\n                range = max-min;\n                st = min;\n                ed = max;\n            }\n\n            if(col+1<nums.get(row).size()){\n\n                int v = nums.get(row).get(col+1);\n                max = Math.max(max, v);\n                pq.offer(new int[]{v, row, col+1});\n\n               \n            }\n        }\n        return new int[]{st, ed};\n\n        \n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"smallest-range-covering-elements-from-k-lists","has_notes":false,"flag_type":1}