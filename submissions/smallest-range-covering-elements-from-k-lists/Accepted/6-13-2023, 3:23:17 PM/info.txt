{"id":970119679,"question_id":632,"lang":"java","lang_name":"Java","time":"1Â year","timestamp":1686640997,"status":10,"status_display":"Accepted","runtime":"35 ms","url":"/submissions/detail/970119679/","is_pending":"Not Pending","title":"Smallest Range Covering Elements from K Lists","memory":"49.8 MB","code":"class Solution {\n    public int[] smallestRange(List<List<Integer>> nums) {\n        int len = nums.size();\n        \n        PriorityQueue<int[]> pq = new PriorityQueue<>(\n            (a,b) -> Integer.compare(a[2], b[2])\n        );\n        \n        int max = 0;\n        for(int r=0; r<len; r++){\n            int val = nums.get(r).get(0);\n            int[] en = new int[]{r, 0, val};\n            pq.offer(en);\n            max = Math.max(max, val);\n        }\n        \n        int st = -200000, ed=max, range = 200000+max;\n        \n        while(pq.size()==len){\n            \n            int[] p = pq.poll();\n            int row = p[0];\n            int col = p[1];\n            int val = p[2];\n            \n            if(max-val<range){\n                st=val;\n                ed=max;\n                range = max-val;\n            }\n            \n            if(col +1 <nums.get(row).size()){\n                \n                int next = nums.get(row).get(col+1);\n                int[] en = new int[]{row, col+1, next};\n                max = Math.max(max, next);\n                \n                pq.offer(en);\n            }\n        }\n        \n        return new int[]{st,ed};\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"smallest-range-covering-elements-from-k-lists","has_notes":false,"flag_type":1}