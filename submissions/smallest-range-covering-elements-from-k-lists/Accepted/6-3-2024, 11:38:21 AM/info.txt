{"id":1275888506,"question_id":632,"lang":"java","lang_name":"Java","time":"1 week, 2 days","timestamp":1717385901,"status":10,"status_display":"Accepted","runtime":"32 ms","url":"/submissions/detail/1275888506/","is_pending":"Not Pending","title":"Smallest Range Covering Elements from K Lists","memory":"48.2 MB","code":"class Solution {\n    public int[] smallestRange(List<List<Integer>> nums) {\n        \n        int min = Integer.MAX_VALUE;\n        int max = Integer.MIN_VALUE;\n\n        PriorityQueue<int[]> pq = new PriorityQueue<>(\n            (a,b) -> a[2]-b[2]\n        );\n\n        for(int i=0; i<nums.size(); i++){\n            if(nums.get(i).size()==0) return new int[2];\n            min = Math.min(min, nums.get(i).get(0));\n            max = Math.max(max, nums.get(i).get(0));\n\n            pq.offer(new int[]{i, 0, nums.get(i).get(0)});\n        }\n\n\n        int[] res = new int[]{min, max};\n\n        int range = max-min;\n        int size = nums.size();\n        while(pq.size()==size){\n\n            int[] p = pq.poll();\n            if(max-p[2]<range){\n                res[0] = p[2];\n                res[1] = max;\n                range = max-p[2];\n            }\n\n            int r=p[0];\n            int c=p[1];\n\n\n            if(c+1<nums.get(r).size()){\n                int val = nums.get(r).get(c+1);\n                max = Math.max(max, val);\n                pq.offer(new int[]{r, c+1, val}); //當時這裡給錯了\n                \n            }\n        }\n\n        return res;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"smallest-range-covering-elements-from-k-lists","has_notes":false,"flag_type":1}