{"id":1082839621,"question_id":632,"lang":"java","lang_name":"Java","time":"7 months, 3 weeks","timestamp":1698135964,"status":10,"status_display":"Accepted","runtime":"29 ms","url":"/submissions/detail/1082839621/","is_pending":"Not Pending","title":"Smallest Range Covering Elements from K Lists","memory":"49.3 MB","code":"class Solution {\n    public int[] smallestRange(List<List<Integer>> nums) {\n        \n        PriorityQueue<int[]> pq = new PriorityQueue<>( // int[rowIdx, colIdx, value]\n            (a,b)->Integer.compare(a[2], b[2])\n        );\n        \n        int size = nums.size();\n        \n        int max = Integer.MIN_VALUE;\n    \n        for(int i=0; i<size; i++){\n            int val = nums.get(i).get(0);            \n            int[] en = new int[]{i, 0, val};\n            pq.offer(en);\n            \n            max = Math.max(max, val);\n        }\n        \n        \n        int left=-100000, right=max, range = 200000;\n        while(pq.size()==size){\n            \n            int[] p = pq.poll();\n            int row = p[0];\n            int col = p[1];\n            int val = p[2];\n            \n            if(max-val<range){\n                left = val;\n                right = max;\n                range = right-left;\n            }\n            \n            \n            if(col+1<nums.get(row).size()){\n                \n                int newVal = nums.get(row).get(col+1);\n                max = Math.max(max, newVal);\n                \n                int[] en = new int[]{row, col+1, newVal};\n                pq.offer(en);\n            }\n            \n            \n            \n        }\n        \n        return new int[]{left, right};\n        \n        \n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"smallest-range-covering-elements-from-k-lists","has_notes":false,"flag_type":1}