{"id":1235398077,"question_id":632,"lang":"java","lang_name":"Java","time":"1 month, 3 weeks","timestamp":1713411722,"status":10,"status_display":"Accepted","runtime":"31 ms","url":"/submissions/detail/1235398077/","is_pending":"Not Pending","title":"Smallest Range Covering Elements from K Lists","memory":"49 MB","code":"class Solution {\n    public int[] smallestRange(List<List<Integer>> nums) {\n\n        int size = nums.size();\n        int min = Integer.MAX_VALUE;\n        int max = Integer.MIN_VALUE;\n\n        PriorityQueue<int[]> pq = new PriorityQueue<>(\n            (a,b)-> a[0]-b[0]\n        );\n\n        for(int i=0; i<size; i++){\n            int val = nums.get(i).get(0);\n            min = Math.min(min, val);\n            max = Math.max(max, val);\n            pq.offer(new int[]{val, i, 0}); // val, row, col\n        }\n\n\n        int range = max-min;\n        int st=min, ed=max;\n\n        while(pq.size()==size){\n\n            int[] p = pq.poll();\n            min = p[0];\n            int row = p[1];\n            int col = p[2];\n\n            if(max-min<range){\n                range = max-min;\n                st = min;\n                ed = max;\n            }\n\n            if(col+1 < nums.get(row).size()){\n                int val = nums.get(row).get(col+1);\n                max = Math.max(max, val);\n                pq.offer(new int[]{val, row, col+1});\n            }\n        }\n\n        return new int[]{st, ed};\n\n\n\n\n\n    }\n}\n\n\n// [4,10,15,24,26],\n// [0,9,12,20],\n// [5,18,22,30]\n\n// 4\n// 0 <- 9\n// 5","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"smallest-range-covering-elements-from-k-lists","has_notes":false,"flag_type":1}