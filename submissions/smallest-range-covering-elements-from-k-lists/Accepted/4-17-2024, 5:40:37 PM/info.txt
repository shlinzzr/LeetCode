{"id":1234749700,"question_id":632,"lang":"java","lang_name":"Java","time":"1 month, 3 weeks","timestamp":1713346837,"status":10,"status_display":"Accepted","runtime":"30 ms","url":"/submissions/detail/1234749700/","is_pending":"Not Pending","title":"Smallest Range Covering Elements from K Lists","memory":"48.5 MB","code":"class Solution {\n    public int[] smallestRange(List<List<Integer>> nums) {\n\n        int size = nums.size();\n        \n        PriorityQueue<int[]> pq = new PriorityQueue<>( // val, row, col\n            (a,b) -> a[0]-b[0]\n        );\n        int min = Integer.MAX_VALUE;\n        int max = Integer.MIN_VALUE;\n        for(int i=0; i<size; i++){\n            int val = nums.get(i).get(0);\n            min = Math.min(min, val);\n            max = Math.max(max, val);\n\n            pq.offer(new int[]{val, i, 0});\n        }\n\n        int range = max-min;\n        int[] res = new int[]{min, max};\n        int st = min, ed=max;\n        while(pq.size()==size){\n            int[] p = pq.poll();\n            int v = p[0];\n            int r = p[1];\n            int c = p[2];\n            \n            if(max-v < range){\n                st = v;\n                ed = max;\n                range= ed-st;\n            }\n\n            if(c+1 < nums.get(r).size()){\n                int next = nums.get(r).get(c+1);\n                max = Math.max(max, next);\n                pq.offer(new int[]{next, r, c+1});\n            }\n\n        }\n\n        return new int[]{st, ed};\n\n        \n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"smallest-range-covering-elements-from-k-lists","has_notes":false,"flag_type":1}