{"id":1085188666,"question_id":632,"lang":"java","lang_name":"Java","time":"7 months, 2 weeks","timestamp":1698390581,"status":10,"status_display":"Accepted","runtime":"28 ms","url":"/submissions/detail/1085188666/","is_pending":"Not Pending","title":"Smallest Range Covering Elements from K Lists","memory":"49.1 MB","code":"class Solution {\n    public int[] smallestRange(List<List<Integer>> nums) {\n        int size = nums.size();\n        \n\n        PriorityQueue<int[]> pq = new PriorityQueue<>(\n            (a,b) -> a[2]-b[2]\n        );\n\n        int max = Integer.MIN_VALUE;\n\n        for(int i=0; i<size; i++){\n            int val = nums.get(i).get(0);\n            max = Math.max(max, val);\n            pq.offer(new int[]{i, 0, val});\n        }\n\n        int st=-200000, ed=max, range=200000;\n        while(pq.size()==size){\n\n            int[] p = pq.poll();\n            int row = p[0];\n            int col = p[1];\n            int min = p[2];\n\n            if(max-min<range){\n                st = min;\n                ed = max;\n                range = ed-st;\n            }\n\n            if(col+1 < nums.get(row).size()){\n                int next = nums.get(row).get(col+1);\n                max = Math.max(max, next);\n                pq.offer(new int[]{row, col+1, next});\n            }\n        }\n\n        return new int[]{st,ed};\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"smallest-range-covering-elements-from-k-lists","has_notes":false,"flag_type":1}