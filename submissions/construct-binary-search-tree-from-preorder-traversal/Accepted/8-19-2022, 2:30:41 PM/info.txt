{"id":777535482,"question_id":1050,"lang":"java","lang_name":"Java","time":"1 year, 9 months","timestamp":1660890641,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/777535482/","is_pending":"Not Pending","title":"Construct Binary Search Tree from Preorder Traversal","memory":"43.1 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public TreeNode bstFromPreorder(int[] preorder) {\n        \n        if(preorder.length==0)\n            return null;\n        \n        TreeNode root = new TreeNode(preorder[0]);\n        \n        int idx=0;\n        for(int i=1; i<preorder.length; i++){\n            \n            if(preorder[0]>preorder[i])\n                idx=i;   \n            else \n                break;\n        }\n        \n        \n        \n        \n        \n        if(idx>0){\n            int[] leftArr = new int[idx];\n            System.arraycopy(preorder, 1, leftArr, 0, idx);\n            root.left = bstFromPreorder(leftArr);    \n        }\n        \n        if(preorder.length-idx-1>0){\n            int[] rightArr = new int[preorder.length-idx-1];\n            System.arraycopy(preorder, idx+1, rightArr, 0, preorder.length-idx-1);\n            root.right =  bstFromPreorder(rightArr);  \n        }\n            \n        return root;        \n        \n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"construct-binary-search-tree-from-preorder-traversal","has_notes":false,"flag_type":1}