{"id":1103339015,"question_id":1159,"lang":"java","lang_name":"Java","time":"6 months, 3 weeks","timestamp":1700558410,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1103339015/","is_pending":"Not Pending","title":"Smallest Subsequence of Distinct Characters","memory":"40.7 MB","code":"class Solution {\n    public String smallestSubsequence(String s) {\n        int len = s.length();\n        int[] lastOccur = new int[26];\n        for(int i=0; i<len; i++){\n            lastOccur[s.charAt(i)-'a']=i;\n        }\n\n        boolean[] seen = new boolean[26];\n        Stack<Integer> st = new Stack<>();\n        for(int i=0; i<len; i++){\n\n            char ch = s.charAt(i);\n            if(seen[ch-'a']) continue;\n\n            while(!st.isEmpty() && s.charAt(st.peek())>ch && lastOccur[s.charAt(st.peek())-'a']>i){\n                seen[s.charAt(st.pop())-'a']=false;\n            }\n            st.push(i);\n            seen[ch-'a']=true;\n        }\n\n        StringBuilder sb = new StringBuilder();\n        for(int i : st){\n            sb.append(s.charAt(i));\n        }\n        return sb.toString();\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111","title_slug":"smallest-subsequence-of-distinct-characters","has_notes":false,"flag_type":1}