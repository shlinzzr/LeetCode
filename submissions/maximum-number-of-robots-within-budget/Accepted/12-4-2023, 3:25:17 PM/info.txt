{"id":1112001262,"question_id":2449,"lang":"java","lang_name":"Java","time":"6 months, 1 week","timestamp":1701674717,"status":10,"status_display":"Accepted","runtime":"111 ms","url":"/submissions/detail/1112001262/","is_pending":"Not Pending","title":"Maximum Number of Robots Within Budget","memory":"54.4 MB","code":"class Solution {\n    public int maximumRobots(int[] chargeTimes, int[] runningCosts, long budget) {\n        int len = chargeTimes.length;\n        int st = 0, ed=len;\n\n        while(st<ed){\n            int win = ed-(ed-st)/2;\n            if(slidingWindowMaximum(chargeTimes, runningCosts, win, budget)){\n                st = win;\n                \n            }else{\n                ed = win-1;\n            }\n        }\n\n        return st;\n\n    }\n\n    private boolean slidingWindowMaximum(int[] chargeTimes, int[] runningCosts, int win, long budget){\n\n        int len = chargeTimes.length;\n\n        long sum = 0L;\n        Deque<Integer> dq = new ArrayDeque<>(); // chargeTimes\n\n        for(int i=0; i<len; i++){\n            sum += runningCosts[i];\n\n            while(!dq.isEmpty() && chargeTimes[dq.peekLast()]<= chargeTimes[i]){\n                dq.pollLast();\n            }\n\n            dq.offer(i);\n            \n            while(!dq.isEmpty() && i-win+1 > dq.peek()){\n                dq.poll();\n            }\n\n            if(i-win+1>=0){\n                long ret = chargeTimes[dq.peek()] + (long)win*sum;\n                if(ret<=budget) return true;\n                sum -= runningCosts[i-win+1];\n            }\n        }\n\n        return false;\n\n\n\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-number-of-robots-within-budget","has_notes":false,"flag_type":1}