{"id":1034831063,"question_id":1152,"lang":"java","lang_name":"Java","time":"9 months, 2 weeks","timestamp":1693295242,"status":10,"status_display":"Accepted","runtime":"9 ms","url":"/submissions/detail/1034831063/","is_pending":"Not Pending","title":"Maximum Number of Ones","memory":"40.8 MB","code":"class Solution {\n    public int maximumNumberOfOnes(int width, int height, int sideLength, int maxOnes) {\n      \n        \n        int[][] count = new int[sideLength][sideLength];\n        \n        for(int i=0; i<height; i++){\n            for(int j=0; j<width; j++){\n                count[i%sideLength][j%sideLength]++;\n            }\n        }\n        \n        PriorityQueue<Integer> pq = new PriorityQueue<>(\n            (a,b)->(b-a)\n        );\n        \n        for(int i=0; i<sideLength; i++){\n            for(int j=0;j<sideLength;j++){\n                pq.offer(count[i][j]);\n            }\n        }\n        \n        int res = 0;\n        while(maxOnes-->0){\n            res += pq.poll();\n        }            \n        \n        return res;\n        \n        /*\n        List<Integer> count = new ArrayList<>();\n        \n        for (int r = 0; r < sideLength; ++r) {\n            for (int c = 0; c < sideLength; ++c) {\n                count.add((1 + (width - 1 - c) / sideLength) * (1 + (height - 1 - r) / sideLength));   \n            }\n        }\n        \n        count.sort(Comparator.reverseOrder());\n        int answer = 0;\n        for (int i = 0; i < maxOnes; ++i) {\n            answer += count.get(i);\n        }\n        \n        return answer;*/\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-number-of-ones","has_notes":false,"flag_type":1}