{"id":1191716197,"question_id":3326,"lang":"java","lang_name":"Java","time":"3 months, 1 week","timestamp":1709393926,"status":10,"status_display":"Accepted","runtime":"995 ms","url":"/submissions/detail/1191716197/","is_pending":"Not Pending","title":"Count Pairs of Connectable Servers in a Weighted Tree Network","memory":"49 MB","code":"class Solution {\n    public int[] countPairsOfConnectableServers(int[][] edges, int signalSpeed) {\n        \n        int len = edges.length+1;\n        \n        int[] count= new int[len];\n        \n        \n        Map<Integer, Map<Integer, Integer>> map = new HashMap<>();\n        \n        for(int[] e : edges){\n            \n            int a = e[0];\n            int b = e[1];\n            int w = e[2];\n            \n            map.putIfAbsent(a, new HashMap<>());\n            map.get(a).put(b, w);\n            \n            map.putIfAbsent(b, new HashMap<>());\n            map.get(b).put(a, w);\n        }\n        \n        \n        \n        for(int c=0; c<=len; c++){\n            \n            \n            int curr = 0;\n            List<Integer> list = new ArrayList<>();\n            int sum =0;\n            \n            \n            if(map.get(c)==null || map.get(c).size()<=1) continue;\n            for(int neb : map.get(c).keySet()){\n               \n                int cnt=0;\n                \n                if(map.get(c).get(neb)%signalSpeed==0)\n                    cnt++;\n                \n                \n                Set<Integer> seen = new HashSet<>();\n                seen.add(c);\n\n                seen.add(neb);\n                Queue<int[]> q = new LinkedList<>();\n                q.offer(new int[]{neb, map.get(c).get(neb)}); // dest , weight\n                \n                while(q.size()>0){\n                    \n                    int[] pp = q.poll();\n                    \n                    int p = pp[0];\n                    int weight = pp[1];\n                    \n                    for(int next : map.get(p).keySet()){\n                        \n                        \n                        int w = map.get(p).get(next);\n                        \n                        if(seen.contains(next))\n                            continue;\n                        seen.add(next);\n                        q.offer(new int[]{next, weight+w});\n                        \n                        if( (weight+w)%signalSpeed==0)\n                            cnt++;\n                    }\n                }\n                \n                // System.out.println(\"c=\"+ c + \" neb=\"+neb + \" cnt=\"+cnt);\n                if(cnt>0)\n                    list.add(cnt);\n                sum+= cnt;\n                // if(curr==0){\n                //     curr = cnt;\n                // }else{\n                //     curr*=cnt;\n                // }\n                \n                \n            }\n            \n            int total = 0;\n            \n            // System.out.println(list);\n            if(list.size()<2) continue;\n            \n            for(int r : list){\n                \n                total+= r* (sum-r);\n                \n            }\n            \n            \n            \n            count[c] = total/2;\n        }\n        \n        return count;\n        \n        \n        /*\n        \n        Input:\n[[1,0,2],[2,1,4],[3,2,4],[4,0,3],[5,1,4],[6,2,2],[7,6,4],[8,1,2],[9,8,3]]\n1\nOutput:\n[8,16,12,0,0,0,8,0,8,0]\nExpected:\n[8,28,20,0,0,0,8,0,8,0]\n\n\n\nInput:\n[[1,0,1],[2,1,1],[3,2,4],[4,0,3],[5,4,1],[6,5,3]]\n2\nOutput:\n[2,0,2,0,0,0,0]\nExpected:\n[2,0,2,0,1,0,0]\n*/\n        \n    \n    }\n}","compare_resulttitle_slug":"count-pairs-of-connectable-servers-in-a-weighted-tree-network","has_notes":false,"flag_type":1}