{"id":706004332,"question_id":144,"lang":"java","lang_name":"Java","time":"2Â years","timestamp":1653373211,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/706004332/","is_pending":"Not Pending","title":"Binary Tree Preorder Traversal","memory":"41.8 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public List<Integer> preorderTraversal(TreeNode root) {\n        List<Integer> list = new ArrayList<>();\n        \n        Stack<TreeNode> stack = new Stack<>();\n        \n        TreeNode curr = root;\n        while(curr!=null || !stack.isEmpty()){\n            \n            while(curr!=null){\n                list.add(curr.val);\n                stack.push(curr);\n                curr = curr.left;\n            }\n            \n            curr = stack.pop();\n            // list.add(curr.val);\n            curr = curr.right;\n        }\n        \n        return list;\n        \n    } \n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-tree-preorder-traversal","has_notes":false,"flag_type":1}