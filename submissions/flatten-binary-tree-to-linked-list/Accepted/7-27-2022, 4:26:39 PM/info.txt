{"id":757956073,"question_id":114,"lang":"java","lang_name":"Java","time":"1 year, 10 months","timestamp":1658910399,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/757956073/","is_pending":"Not Pending","title":"Flatten Binary Tree to Linked List","memory":"42.2 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public void flatten(TreeNode root) {\n        dfs(root);\n    }\n    \n    // https://www.youtube.com/watch?v=rKnD7rLT0lI\n    \n    private TreeNode dfs(TreeNode curr){\n        \n        if(curr==null)\n            return null;\n        \n        TreeNode leftTail = dfs(curr.left);\n        TreeNode rightTail = dfs(curr.right);\n        \n        \n        if(leftTail!=null){\n            leftTail.right = curr.right;\n            curr.right = curr.left;\n            curr.left = null;    \n        }\n        \n        \n        if(rightTail!=null)\n            return rightTail;\n        else if(leftTail!=null)\n            return leftTail;\n        else \n            return curr;\n        \n        \n        \n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"flatten-binary-tree-to-linked-list","has_notes":false,"flag_type":1}