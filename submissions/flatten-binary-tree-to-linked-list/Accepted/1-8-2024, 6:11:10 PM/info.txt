{"id":1140343713,"question_id":114,"lang":"java","lang_name":"Java","time":"5Â months","timestamp":1704708670,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1140343713/","is_pending":"Not Pending","title":"Flatten Binary Tree to Linked List","memory":"42.2 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution { \n\n    List<TreeNode > list = new ArrayList<>();\n    public void flatten(TreeNode root) {\n\n        preorder(root);\n\n        for(int i=0; i<list.size()-1; i++){\n            list.get(i).left=null;\n            list.get(i).right = list.get(i+1);\n        }\n\n        \n    }\n\n    private void preorder(TreeNode node){\n        if(node==null) return;\n        list.add(node);\n        preorder(node.left);\n        preorder(node.right);\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"flatten-binary-tree-to-linked-list","has_notes":false,"flag_type":1}