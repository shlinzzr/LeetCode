{"id":1117078938,"question_id":282,"lang":"java","lang_name":"Java","time":"6Â months","timestamp":1702284751,"status":10,"status_display":"Accepted","runtime":"105 ms","url":"/submissions/detail/1117078938/","is_pending":"Not Pending","title":"Expression Add Operators","memory":"44.5 MB","code":"class Solution {\n    public List<String> addOperators(String num, int target) {\n        List<String> res= new ArrayList<>();\n\n        int len = num.length();\n        helper(res, 0, target, \"\", num, 0, 0);  \n        // for(int i=1; i<=len; i++){\n        //     long cur = Long.valueOf(num.substring(0, i));\n        //     helper(res, cur, target, num.substring(0, i), num, i, cur);\n        // }\n\n        return res;\n    }\n\n    private void helper(List<String> res, long val, int target, String path, String num, int st, long prev){\n        if(st==num.length()){\n            if(val==target){\n                res.add(path);\n            }\n            return;\n        }\n\n        \n            \n        for(int ed=st+1; ed<=num.length(); ed++){\n\n            String sub = num.substring(st, ed);\n\n            if(sub.length()>1 && sub.charAt(0)=='0')\n                continue;\n\n            long cur = Long.valueOf(sub);\n\n            if(st==0){\n                helper(res, cur, target, sub, num, ed, cur);\n\n            }else{\n                helper(res, val+cur, target, path+\"+\"+cur, num, ed, cur);\n                helper(res, val-cur, target, path+\"-\"+cur, num, ed, -cur);\n                helper(res, val-prev+prev*cur, target, path+\"*\"+cur, num, ed, cur*prev);\n            }\n        }\n        \n    }\n\n\n}","compare_result":"11111111111111111111111","title_slug":"expression-add-operators","has_notes":false,"flag_type":1}