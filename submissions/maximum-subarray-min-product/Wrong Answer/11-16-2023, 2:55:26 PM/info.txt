{"id":1099907388,"question_id":1985,"lang":"java","lang_name":"Java","time":"6 months, 4 weeks","timestamp":1700117726,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1099907388/","is_pending":"Not Pending","title":"Maximum Subarray Min-Product","memory":"N/A","code":"class Solution {\n    public int maxSumMinProduct(int[] nums) {\n        int len = nums.length;\n\n        int[] presum =  new int[len];\n        for(int i=0; i<len; i++){\n            presum[i] = i==0 ? nums[0] : presum[i-1] + nums[i];\n        }\n\n        int M = (int)1e9+7;\n\n        Stack<Integer> st = new Stack<>();\n\n        int[] nextSmaller = new int[len];\n        Arrays.fill(nextSmaller, len);\n        for(int i=0; i<len; i++){\n            while(!st.isEmpty() && nums[st.peek()]>nums[i]){\n                nextSmaller[st.pop()] = i;\n            }\n            st.push(i);\n        }\n\n        int[] prevSmaller = new int[len];\n        Arrays.fill(prevSmaller, -1);\n        for(int i=len-1; i>=0; i--){\n            while(!st.isEmpty() && nums[st.peek()]>nums[i]){\n                prevSmaller[st.pop()] = i;\n            }\n            st.push(i);\n        }\n\n        long max = Integer.MIN_VALUE;\n\n        for(int i=0; i<len; i++){\n            long prev = prevSmaller[i]==-1 ? 0 : presum[prevSmaller[i]];\n            long val = nums[i] * (presum[nextSmaller[i]-1] - prev)%M;\n            max = Math.max(max, val);\n        }\n\n        return (int)max;\n\n\n\n    }\n}","compare_result":"111111111111111111111100011000001111000100","title_slug":"maximum-subarray-min-product","has_notes":false,"flag_type":1}