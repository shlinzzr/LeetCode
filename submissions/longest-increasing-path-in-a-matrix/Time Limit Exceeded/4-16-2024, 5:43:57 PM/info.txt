{"id":1233834685,"question_id":329,"lang":"java","lang_name":"Java","time":"1 month, 3 weeks","timestamp":1713260637,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1233834685/","is_pending":"Not Pending","title":"Longest Increasing Path in a Matrix","memory":"N/A","code":"class Solution {\n\n    int max = 0;\n    public int longestIncreasingPath(int[][] matrix) {\n        int h = matrix.length;\n        int w = matrix[0].length;\n\n      \n\n        for(int i=0; i<h; i++){\n            for(int j=0; j<w; j++){\n                Set<String> seen = new HashSet<>();\n                seen.add(i+\"_\"+j);\n                dfs(matrix, i, j, seen, 1);   \n                seen.remove(i+\"_\"+j);\n            }\n        }\n\n        return max;\n\n     /*\n[7,8,9],\n[9,7,6],\n[7,2,3]]\n     */   \n    }\n\n\n    private void dfs(int[][] matrix, int i, int j,  Set<String> seen, int step){\n\n        int h = matrix.length;\n        int w = matrix[0].length;\n        max = Math.max(max, step);\n\n        for(int[] d: dirs){\n            int r = d[0]+i;\n            int c = d[1]+j;\n\n            if(r<0 || c<0 || r>=h || c>=w || matrix[r][c]<= matrix[i][j]) continue;\n            if(seen.contains(r+\"_\"+c)) continue;\n           \n            seen.add(r+\"_\"+c);\n            dfs(matrix, r, c, seen, step+1);\n            seen.remove(r+\"_\"+c);\n        }\n        \n\n\n    }\n\n  int[][] dirs = new int[][]{{1,0},{0,1},{-1,0},{0,-1}};\n\n\n    // private int bfs(int[][] matrix, int i, int j){\n    //     int h = matrix.length;\n    //     int w = matrix[0].length;\n\n    //     S<int[]> q = new LinkedList<>();\n    //     q.offer(new int[]{i, j} );\n\n    //     Set<String> seen = new HashSet<>();\n    //     seen.add(i + \"_\"+ j);\n      \n    //     int step = 0;\n    //     while(!q.isEmpty()){\n    //         int size = q.size();\n    //         while(size-->0){\n\n    //             int[] p = q.poll();\n\n    //             for(int[] d: dirs){\n    //                 int r = d[0]+p[0];\n    //                 int c = d[1]+p[1];\n\n    //                 if(r<0 || c<0 || r>=h || c>=w || matrix[r][c]<= matrix[p[0]][p[1]]) continue;\n    //                 if(seen.add(r+\"_\"+c)==false) continue;\n    //                 q.offer(new int[]{r,c});\n    //             }\n\n    //         }\n    //         step++;\n    //     }\n\n    //     return step;\n    // }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000","title_slug":"longest-increasing-path-in-a-matrix","has_notes":false,"flag_type":1}