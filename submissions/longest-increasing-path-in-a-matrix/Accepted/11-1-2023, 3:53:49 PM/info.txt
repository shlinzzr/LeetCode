{"id":1088956514,"question_id":329,"lang":"java","lang_name":"Java","time":"7 months, 2 weeks","timestamp":1698825229,"status":10,"status_display":"Accepted","runtime":"11 ms","url":"/submissions/detail/1088956514/","is_pending":"Not Pending","title":"Longest Increasing Path in a Matrix","memory":"43.3 MB","code":"class Solution {\n    public int longestIncreasingPath(int[][] matrix) {\n        int h = matrix.length;\n        int w = matrix[0].length;\n\n        int[][] memo = new int[h][w];\n        for(int[] m: memo){\n            Arrays.fill(m, 1);\n        }\n\n        int max = 0;\n        for(int i=0; i<h; i++){\n            for(int j=0; j<w; j++){\n\n                if(memo[i][j]==1){\n                    int rt = dfs(matrix, i, j, memo);\n                    max = Math.max(max, rt);\n                }\n            }\n        }\n        return max;\n    }\n    int[][] dirs = new int[][]{{1,0}, {0,1}, {-1,0}, {0,-1}};\n\n    private int dfs(int[][] matrix, int i, int j, int[][] memo){\n\n        int h = matrix.length;\n        int w = matrix[0].length;\n\n        if(memo[i][j]>1)\n            return memo[i][j];\n\n        int max = 1;\n        for(int[] d : dirs){\n            int r = i+d[0];\n            int c = j+d[1];\n\n            if(r>=0 && c>=0 && r<h && c<w && matrix[r][c]>matrix[i][j]){\n                int rt = 1 + dfs(matrix, r, c, memo);\n                max = Math.max(max, rt);\n            }\n        }\n        memo[i][j] = max;\n\n        return max;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-increasing-path-in-a-matrix","has_notes":false,"flag_type":1}