{"id":1154222907,"question_id":329,"lang":"java","lang_name":"Java","time":"4 months, 3 weeks","timestamp":1705983436,"status":10,"status_display":"Accepted","runtime":"11 ms","url":"/submissions/detail/1154222907/","is_pending":"Not Pending","title":"Longest Increasing Path in a Matrix","memory":"45.1 MB","code":"class Solution {\n    int[][] dirs = new int[][]{{1,0}, {0,1}, {-1,0}, {0,-1}};\n    public int longestIncreasingPath(int[][] matrix) {\n        int h = matrix.length;\n        int w = matrix[0].length;\n\n        int[][] memo = new int[h][w];\n        for(int[] m : memo){\n            Arrays.fill(m, 1);\n        }\n        int max = 1;\n        for(int i=0;i<h;i++){\n            for(int j=0; j<w; j++){\n                if(memo[i][j]==1){\n                    int rt = dfs(matrix, i, j,  memo);\n                    max = Math.max(max, rt);\n                }\n            }\n        }\n\n        return max;\n        \n    }\n\n    private int dfs(int[][] matrix, int i, int j, int[][]memo){\n         int h = matrix.length;\n        int w = matrix[0].length;\n\n        if(memo[i][j]>1){\n            return memo[i][j];\n        }\n\n        int max = 1 ;\n        for(int[] d : dirs){\n            int r = d[0]+i;\n            int c = d[1]+j;\n\n            if(r>=0 && c>=0 && r<h && c<w && matrix[i][j]<matrix[r][c]){\n                int rt = 1 + dfs(matrix, r, c, memo);\n                max = Math.max(max, rt);\n            }\n        }\n\n        memo[i][j] = max;\n        return max;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-increasing-path-in-a-matrix","has_notes":false,"flag_type":1}