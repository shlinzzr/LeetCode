{"id":859102070,"question_id":329,"lang":"java","lang_name":"Java","time":"1 year, 6 months","timestamp":1670926677,"status":10,"status_display":"Accepted","runtime":"18 ms","url":"/submissions/detail/859102070/","is_pending":"Not Pending","title":"Longest Increasing Path in a Matrix","memory":"53.8 MB","code":"class Solution {\n   public static final int[][] dirs = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};\n\n    public int longestIncreasingPath(int[][] matrix) {\n        if(matrix.length == 0) return 0;\n        int m = matrix.length, n = matrix[0].length;\n        int[][] cache = new int[m][n];\n        int max = 1;\n        for(int i = 0; i < m; i++) {\n            for(int j = 0; j < n; j++) {\n                int len = dfs(matrix, i, j, m, n, cache);\n                max = Math.max(max, len);\n            }\n        }   \n        return max;\n    }\n\n    public int dfs(int[][] matrix, int i, int j, int m, int n, int[][] cache) {\n        if(cache[i][j] != 0) return cache[i][j];\n        int max = 1;\n        for(int[] dir: dirs) {\n            int x = i + dir[0], y = j + dir[1];\n            if(x < 0 || x >= m || y < 0 || y >= n || matrix[x][y] <= matrix[i][j]) continue;\n            int len = 1 + dfs(matrix, x, y, m, n, cache);\n            max = Math.max(max, len);\n        }\n        cache[i][j] = max;\n        return max;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-increasing-path-in-a-matrix","has_notes":false,"flag_type":1}