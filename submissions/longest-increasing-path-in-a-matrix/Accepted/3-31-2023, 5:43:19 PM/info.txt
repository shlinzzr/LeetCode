{"id":925298940,"question_id":329,"lang":"java","lang_name":"Java","time":"1 year, 2 months","timestamp":1680255799,"status":10,"status_display":"Accepted","runtime":"13 ms","url":"/submissions/detail/925298940/","is_pending":"Not Pending","title":"Longest Increasing Path in a Matrix","memory":"42.9 MB","code":"class Solution {\n    \n    int[][] dirs = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};\n    \n    public int longestIncreasingPath(int[][] matrix) {\n        \n        int h = matrix.length;\n        int w = matrix[0].length;\n        \n        int[][] cache = new int[h][w];\n        \n        int max = 0;\n        \n        for(int i=0; i<h; i++){\n            for(int j=0; j<w; j++){\n                int len = dfs(matrix, new int[]{i, j}, cache);\n                \n                max = Math.max(max, len);\n            }\n        }\n        \n        return max;\n        \n    }\n    \n    \n    private int dfs(int[][] matrix, int[] p, int[][] cache){\n        int h = matrix.length;\n        int w = matrix[0].length;\n\n         if(cache[p[0]][p[1]] != 0) \n            return cache[p[0]][p[1]];\n        \n        \n        int max=1;\n        for(int[] d : dirs){\n            int r = d[0]+p[0];\n            int c = d[1]+p[1];\n            \n            if(r>=0 && r<h && c>=0 && c<w){\n                \n                if(matrix[r][c]>matrix[p[0]][p[1]]){\n                    int l = 1 + dfs(matrix, new int[]{r,c}, cache);\n                    max=Math.max(max, l);    \n                }\n            }\n        }\n        \n        cache[p[0]][p[1]]=max;\n        \n        \n        return max;\n        \n        \n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-increasing-path-in-a-matrix","has_notes":false,"flag_type":1}