{"id":1274908629,"question_id":329,"lang":"java","lang_name":"Java","time":"1 week, 3 days","timestamp":1717304522,"status":10,"status_display":"Accepted","runtime":"11 ms","url":"/submissions/detail/1274908629/","is_pending":"Not Pending","title":"Longest Increasing Path in a Matrix","memory":"44.9 MB","code":"class Solution {\n\n    int max = 0;\n    public int longestIncreasingPath(int[][] matrix) {\n        int h = matrix.length;\n        int w = matrix[0].length;\n\n        int[][] memo = new int[h][w];\n        for(int[] m : memo){\n            Arrays.fill(m, 1);\n        }\n\n        for(int i=0; i<h; i++){\n            for(int j=0; j<w; j++){\n                int res = dfs(matrix, i, j, memo);   \n                max = Math.max(res, max);\n            }\n        }\n\n        return max;\n\n     /*\n[7,8,9],\n[9,7,6],\n[7,2,3]]\n     */   \n    }\n\n\n    private int dfs(int[][] matrix, int i, int j, int[][] memo){\n\n        int h = matrix.length;\n        int w = matrix[0].length;\n\n        if(memo[i][j]>1){\n            return memo[i][j];\n        }\n\n        int max = 1;\n\n        for(int[] d: dirs){\n            int r = d[0]+i;\n            int c = d[1]+j;\n\n            if(r<0 || c<0 || r>=h || c>=w || matrix[r][c]<= matrix[i][j]) continue;\n           \n            int rt = 1 + dfs(matrix, r, c, memo);\n            max = Math.max(rt, max);\n        }\n        memo[i][j] = max;\n        return max;\n\n\n    }\n\n  int[][] dirs = new int[][]{{1,0},{0,1},{-1,0},{0,-1}};\n\n\n    // private int bfs(int[][] matrix, int i, int j){\n    //     int h = matrix.length;\n    //     int w = matrix[0].length;\n\n    //     S<int[]> q = new LinkedList<>();\n    //     q.offer(new int[]{i, j} );\n\n    //     Set<String> seen = new HashSet<>();\n    //     seen.add(i + \"_\"+ j);\n      \n    //     int step = 0;\n    //     while(!q.isEmpty()){\n    //         int size = q.size();\n    //         while(size-->0){\n\n    //             int[] p = q.poll();\n\n    //             for(int[] d: dirs){\n    //                 int r = d[0]+p[0];\n    //                 int c = d[1]+p[1];\n\n    //                 if(r<0 || c<0 || r>=h || c>=w || matrix[r][c]<= matrix[p[0]][p[1]]) continue;\n    //                 if(seen.add(r+\"_\"+c)==false) continue;\n    //                 q.offer(new int[]{r,c});\n    //             }\n\n    //         }\n    //         step++;\n    //     }\n\n    //     return step;\n    // }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-increasing-path-in-a-matrix","has_notes":false,"flag_type":1}