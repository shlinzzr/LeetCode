{"id":1233830017,"question_id":329,"lang":"java","lang_name":"Java","time":"1 month, 3 weeks","timestamp":1713260209,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1233830017/","is_pending":"Not Pending","title":"Longest Increasing Path in a Matrix","memory":"N/A","code":"class Solution {\n    public int longestIncreasingPath(int[][] matrix) {\n        int h = matrix.length;\n        int w = matrix[0].length;\n\n        int max = 0;\n\n        for(int i=0; i<h; i++){\n            for(int j=0; j<w; j++){\n                int res = bfs(matrix, i, j);   \n                max = Math.max(max, res);\n            }\n        }\n\n        return max;\n\n        \n    }\n\n    private int bfs(int[][] matrix, int i, int j){\n        int h = matrix.length;\n        int w = matrix[0].length;\n\n        Queue<int[]> q = new LinkedList<>();\n        q.offer(new int[]{i, j} );\n\n        Set<String> seen = new HashSet<>();\n        seen.add(i + \"_\"+ j);\n        int[][] dirs = new int[][]{{1,0},{0,1},{-1,0},{0,-1}};\n        int step = 0;\n        while(!q.isEmpty()){\n            int size = q.size();\n            while(size-->0){\n\n                int[] p = q.poll();\n\n                for(int[] d: dirs){\n                    int r = d[0]+p[0];\n                    int c = d[1]+p[1];\n\n                    if(r<0 || c<0 || r>=h || c>=w || matrix[r][c]<= matrix[p[0]][p[1]]) continue;\n                    if(seen.add(r+\"_\"+c)==false) continue;\n                    q.offer(new int[]{r,c});\n                }\n\n            }\n            step++;\n        }\n\n        return step;\n    }\n}","compare_result":"1111111011111110100101011111111000010001011010101011101111010100110111111011101110101111000101111011011011110100111010000100010011000100000","title_slug":"longest-increasing-path-in-a-matrix","has_notes":false,"flag_type":1}