{"id":831796747,"question_id":329,"lang":"java","lang_name":"Java","time":"1 year, 7 months","timestamp":1666926999,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/831796747/","is_pending":"Not Pending","title":"Longest Increasing Path in a Matrix","memory":"N/A","code":"class Solution {\n    public int longestIncreasingPath(int[][] matrix) {\n        PriorityQueue<Element> pq = new PriorityQueue<Element>(\n            (e1,e2) -> e1.val-e2.val\n        );\n            \n        int res = 0;\n        \n        int h = matrix.length;\n        int w = matrix[0].length;\n        \n       \n        \n        for(int i=0; i<h; i++){\n            for(int j=0; j<w; j++){\n                Element e = new Element(i, j, matrix[i][j]);\n                pq.offer(e);\n            }\n        }\n        \n        int[][] dirs = new int[][]{{1,0},{0,1}, {-1,0}, {0,-1}};\n        \n        \n        while(pq.size()>0){\n            \n            boolean[][] seen  = new boolean[h][w];\n            \n            Element head = pq.poll();\n            while(seen[head.i][head.j]==true && pq.size()>0)\n                head = pq.poll();\n            if(pq.size()==0 && seen[head.i][head.j]==true)\n                break;\n            \n            \n            Queue<Element> q = new LinkedList<>();\n            q.offer(head);\n            seen[head.i][head.j]=true;\n            \n            int cnt=0;\n            while(!q.isEmpty()){\n                \n                cnt++;\n                int siz= q.size();\n                for(int s=0;s<siz; s++){\n                    Element e = q.poll();\n                    \n                    for(int[] d : dirs){\n                        int r = e.i+d[0];\n                        int c = e.j+d[1];\n\n                        if(r>=0 && r<h && c>=0 && c<w && matrix[r][c]>e.val && seen[r][c]==false){\n                            q.offer(new Element(r,c,matrix[r][c]));\n                            seen[r][c]=true;\n                        }\n                    } \n                }\n            }\n            \n            res = Math.max(res, cnt);\n        }\n        \n        return res;\n        \n            \n            \n    }\n    \n    \n    class Element{\n        int i;\n        int j;\n        int val;\n        \n        public Element(int i, int j, int val){\n            this.i=i;\n            this.j=j;\n            this.val=val;\n        }\n    }\n}","compare_result":"111111101111111010010101111111100001000101101010101110111101010011011111101110111010111100010111101101101111010011101000010001001100010000","title_slug":"longest-increasing-path-in-a-matrix","has_notes":false,"flag_type":1}