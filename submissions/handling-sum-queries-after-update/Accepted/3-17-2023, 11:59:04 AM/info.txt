{"id":916643809,"question_id":2703,"lang":"java","lang_name":"Java","time":"1 year, 2 months","timestamp":1679025544,"status":10,"status_display":"Accepted","runtime":"397 ms","url":"/submissions/detail/916643809/","is_pending":"Not Pending","title":"Handling Sum Queries After Update","memory":"70.8 MB","code":"class Solution {\n    public long[] handleQuery(int[] nums1, int[] nums2, int[][] queries) {\n        List<Long> ls = new ArrayList<>();\n        int n = nums1.length;\n        BitSet bs = new BitSet(n);\n        long sum = 0;\n        for(int i = 0;i < n;i++){\n            sum += 1L * nums2[i];\n            if(nums1[i] == 1) bs.set(i);\n        }\n        for(var q:queries){\n            if(q[0] == 1){\n                bs.flip(q[1],q[2] + 1);\n            }\n            else if(q[0] == 2){\n                sum += 1L * q[1] * bs.cardinality();\n            }\n            else ls.add(sum);\n        }\n        long ans[] = new long[ls.size()];\n        for(int i = 0;i < ans.length;i++){\n            ans[i] = ls.get(i);\n        }\n        return ans;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"handling-sum-queries-after-update","has_notes":false,"flag_type":1}