{"id":1015393798,"question_id":885,"lang":"java","lang_name":"Java","time":"10 months, 1 week","timestamp":1691477304,"status":10,"status_display":"Accepted","runtime":"9 ms","url":"/submissions/detail/1015393798/","is_pending":"Not Pending","title":"Exam Room","memory":"45.7 MB","code":"class ExamRoom {\n    \n    private PriorityQueue<int[]> pq;\n    private int N;\n\n    public ExamRoom(int N) {\n        this.N = N;\n        pq = new PriorityQueue<>((a, b) -> {\n            if ((b[1] - b[0]) / 2 == (a[1] - a[0]) / 2) {\n                return a[0] - b[0];\n            }\n            return (b[1] - b[0]) / 2 - (a[1] - a[0]) / 2;\n        });\n    }\n    \n    public int seat() {\n        if (pq.size() == 0) {\n            pq.offer(new int[]{0, 2 * (N - 1)}); // left, right \n            return 0;\n        } else {\n            int[] longest = pq.poll();\n            int mid = longest[0] + (longest[1] - longest[0]) / 2;  // mid = left+(right-left)/2\n            \n            // 一次加兩個候選 (left, mid) 跟 (mid, right)\n            if (mid != 0) { // mid = 0, we don't need to add the left side\n                pq.offer(new int[]{longest[0], mid}); // left, mid\n            }\n            if (mid != N - 1) { // mid = N - 1, we don't need to add the right side\n                pq.offer(new int[]{mid, longest[1]}); // mid, right \n            }\n            return mid;\n        }\n    }\n    \n    public void leave(int p) {\n        if (pq.size() == 1 && (pq.peek()[1] >= N || pq.peek()[0] < 0)) { // Edge cases: Only [0, 2N] or [-N , N] in pq\n            pq.clear();\n            return;\n        }\n        \n        // find p1 & p2\n        int[] p1 = null, p2 = null; // p1: left side, p2: right side\n        for (int[] pair : pq) {\n            if (pair[1] == p) {   // find p1(left, p)\n                p1 = pair;\n            }\n            if (pair[0] == p) {   // find p2(p, right);\n                p2 = pair;\n            }\n        }\n        \n        if (p1 != null) {\n            pq.remove(p1);\n        }\n        \n        if (p2 != null) {\n            pq.remove(p2);\n        }\n        \n        \n        // normal case :\n        // 0 1 2 3 4 5 6 7 8\n        // x x x x x x x x x \n        // a   d   c       b\n        // leave(c) =>  p1(2, 4), p2(4, 8)\n        // 幹掉c 也要幹掉 d 跟 b\n        \n        // =>\n        \n        // pq.offer(2, 8)\n        // 0 1 2 3 4 5 6 7 8\n        // x x x x x x x x x \n        // a         b\n        \n        \n        \n        if (p1 == null || p1[0] < 0) { // No left side found or p is the left most position in current seats.\n            p1 = new int[]{-p2[1], p}; // p1=(-right, p)\n        }\n        \n        // no left side case:\n        \n        // -4 -3 -2 -1 0 1 2 3 4 5 6 7 8\n        //             x x x x x x x x x \n        //                 d   c       b\n        // ^^^^^^^^^^^^^^^^^\n        // leave(d) =>  p1==null , p2(2, 4)\n        // 幹掉d 也要幹掉c, p1=(-4, 2)\n        \n        \n        \n        \n        \n        \n        \n        if (p2 == null || p2[1] >= N) { // No right side found or p is the right most position in current seats.\n            p2 = new int[]{p, p1[0] + 2 * (N - p1[0] - 1)};    // p2=(p, left+2*(len-left-1))\n        }\n        \n        pq.offer(new int[]{p1[0], p2[1]});\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"exam-room","has_notes":false,"flag_type":1}