{"id":1036643716,"question_id":642,"lang":"java","lang_name":"Java","time":"9 months, 2 weeks","timestamp":1693469707,"status":10,"status_display":"Accepted","runtime":"170 ms","url":"/submissions/detail/1036643716/","is_pending":"Not Pending","title":"Design Search Autocomplete System","memory":"54.7 MB","code":"class AutocompleteSystem {\n    \n    class TrieNode{\n        TrieNode[] arr;\n        boolean isWord;\n        String str;\n        int time;\n        // Set<String> set;\n        \n        public TrieNode(){\n            // set = new TreeSet<>();\n            arr = new TrieNode[28];\n            time =0;\n        }\n    }\n    TrieNode root;    \n    String search = \"\";\n    \n    public AutocompleteSystem(String[] sentences, int[] times) {\n        int n = times.length;\n        root = new TrieNode();\n        \n        for(int i=0; i<n; i++){\n            TrieNode curr = root;\n            String s = sentences[i];\n            int t = times[i];\n            \n            addString(s, t);\n        }\n    }\n    \n    private void addString(String s, int t){\n        TrieNode node = root;\n        for(char ch : s.toCharArray()){\n            int idx = ch==' ' ? 26 : (ch=='#'? 27 : ch-'a');\n            if(node.arr[idx]==null){\n                node.arr[idx]=new TrieNode();\n            }\n\n            node=node.arr[idx];\n        }\n        node.time +=t;\n        node.isWord=true;\n        node.str=s;\n    }\n    \n    \n    public List<String> input(char c) {\n        if(c=='#'){\n            addString(search, 1);\n            search=\"\";\n            return new ArrayList<>();\n        }\n            \n        search += c;\n        \n        TrieNode node = root;\n        for(int i=0; i<search.length(); i++){\n            char ch = search.charAt(i);\n            int idx = ch==' ' ? 26 : (ch=='#'? 27 : ch-'a');\n            if(node.arr[idx]==null){\n                return new ArrayList<>();\n            }\n            node = node.arr[idx];\n        }\n        \n        \n        PriorityQueue<TrieNode> pq = new PriorityQueue<>(\n            (a,b) -> a.time==b.time ? b.str.compareTo(a.str) : a.time-b.time\n        );\n            \n        getSub(node, pq);\n        \n        List<String> res = new ArrayList<>();\n        while(!pq.isEmpty()){\n            res.add(0, pq.poll().str);\n        }\n        \n        return res;\n    }\n    \n    \n    private void getSub(TrieNode node, PriorityQueue<TrieNode> pq){\n        \n        if(node.isWord){\n            pq.offer(node);\n        }\n        \n        if(pq.size()>3){\n            pq.poll();\n        }\n        \n        for(int idx=0; idx<28; idx++){\n            if(node.arr[idx]!=null){\n                getSub(node.arr[idx], pq);\n            }\n        }        \n        \n    }\n    \n    \n}\n\n/**\n * Your AutocompleteSystem object will be instantiated and called as such:\n * AutocompleteSystem obj = new AutocompleteSystem(sentences, times);\n * List<String> param_1 = obj.input(c);\n */","compare_result":"1111111111111111111111111111111111111111111","title_slug":"design-search-autocomplete-system","has_notes":false,"flag_type":1}