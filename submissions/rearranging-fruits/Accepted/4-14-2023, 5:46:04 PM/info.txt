{"id":933555075,"question_id":2689,"lang":"java","lang_name":"Java","time":"1 year, 2 months","timestamp":1681465564,"status":10,"status_display":"Accepted","runtime":"103 ms","url":"/submissions/detail/933555075/","is_pending":"Not Pending","title":"Rearranging Fruits","memory":"61.4 MB","code":"class Solution {\n    public long minCost(int[] A, int[] B) {\n        TreeMap<Integer, Integer> count = new TreeMap<>();\n        for (int a : A)\n            count.merge(a, 1, Integer::sum);\n        for (int a : B)\n            count.merge(a, -1, Integer::sum);\n        List<Integer> swaps = new ArrayList<>();\n        long res = 0, small = count.firstKey();\n        for (int a : count.keySet()) {\n            if (count.get(a) % 2 > 0) return -1;\n            int v = Math.abs(count.get(a)) / 2;\n            for (int i = 0; i < v; ++i)\n                swaps.add(a);\n        }\n        for (int i = 0; i < swaps.size() / 2; ++i)\n            res += Math.min(swaps.get(i), small * 2);\n        return res;\n    }\n}","compare_result":"1111111111111111111111111111111111111111","title_slug":"rearranging-fruits","has_notes":false,"flag_type":1}