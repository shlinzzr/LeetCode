{"id":1150308527,"question_id":33,"lang":"java","lang_name":"Java","time":"4 months, 3 weeks","timestamp":1705632831,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1150308527/","is_pending":"Not Pending","title":"Search in Rotated Sorted Array","memory":"41.9 MB","code":"class Solution {\n    public int search(int[] nums, int target) {\n        int len = nums.length;\n        \n        // find the smallest one\n        \n        int st=0, ed=len-1;\n        while(st<ed){\n            int mid = st+(ed-st)/2;\n            \n            if(nums[mid]>nums[ed]){\n                st = mid+1;\n            }else{\n                ed = mid;\n            }\n        }\n        \n        int offset = st;\n        System.out.println(offset);\n        st=0; ed=len-1;\n        \n        while(st<ed){\n            int mid = st+(ed-st)/2;\n            int idx = (mid+offset+len)%len;\n            if(nums[idx]==target){\n                return idx;\n            }else if(nums[idx]>target){\n                ed = mid-1;\n            }else \n                st = mid+1;\n        }\n        int idx = (st+offset+len)%len;\n        if(nums[idx]==target) return idx;\n        \n        return -1;\n        \n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"search-in-rotated-sorted-array","has_notes":false,"flag_type":1}