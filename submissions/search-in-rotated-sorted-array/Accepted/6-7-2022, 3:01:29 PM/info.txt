{"id":716339882,"question_id":33,"lang":"java","lang_name":"Java","time":"2Â years","timestamp":1654585289,"status":10,"status_display":"Accepted","runtime":"17 ms","url":"/submissions/detail/716339882/","is_pending":"Not Pending","title":"Search in Rotated Sorted Array","memory":"43.7 MB","code":"class Solution {\n    public int search(int[] nums, int target) {\n        if(nums==null || nums.length==0) return -1;\n        int l=0, r=nums.length-1, m=0;\n       // find out the index of the smallest element.\n        while(l<r){\n            m = (l+r)/2;\n            if(nums[m] > nums[r]){\n                l = m+1;\n            }else{\n                r = m;\n            }\n        }\n        \n        System.out.println(\"l=\"+l + \" r=\"+r + \" m=\"+ m);\n        \n        \n       // since we now know the start, find out if the target is to left or right of start in the array.\n        int s = l;\n        l = 0; r = nums.length-1;\n        if(target >= nums[s] && target <= nums[r]){\n            l = s;\n        }else{\n            r = s;\n        }\n        // the regular search.\n        while(l<=r){\n            m = (l+r)/2;\n            if(nums[m]==target) return m;\n            else if(nums[m] > target) r = m-1;\n            else l=m+1;\n        }\n        \n        return -1;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"search-in-rotated-sorted-array","has_notes":false,"flag_type":1}