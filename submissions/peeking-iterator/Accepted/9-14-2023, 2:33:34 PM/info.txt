{"id":1049047758,"question_id":284,"lang":"java","lang_name":"Java","time":"9Â months","timestamp":1694673214,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/1049047758/","is_pending":"Not Pending","title":"Peeking Iterator","memory":"41.4 MB","code":"// Java Iterator interface reference:\n// https://docs.oracle.com/javase/8/docs/api/java/util/Iterator.html\n\nclass PeekingIterator implements Iterator<Integer> {\n\n\tList<Integer> list ;\n\tint idx =0;\n\n\tpublic PeekingIterator(Iterator<Integer> iter) {\n\t    // initialize any member here.\n\t\tlist = new ArrayList<>();\n\t    while(iter.hasNext()){\n\t\t\tlist.add(iter.next());\n\t\t}\n\t}\n\t\n    // Returns the next element in the iteration without advancing the iterator.\n\tpublic Integer peek() {\n        if(list.isEmpty() || idx>=list.size())\n\t\t\treturn null;\n\n\t\telse return list.get(idx);\n\n\t}\n\t\n\t// hasNext() and next() should behave the same as in the Iterator interface.\n\t// Override them if needed.\n\t@Override\n\tpublic Integer next() {\n\t\treturn list.get(idx++);\n\t    \n\t}\n\t\n\t@Override\n\tpublic boolean hasNext() {\n\t\treturn idx<list.size();\n\t}\n}","compare_result":"11111111111111","title_slug":"peeking-iterator","has_notes":false,"flag_type":1}