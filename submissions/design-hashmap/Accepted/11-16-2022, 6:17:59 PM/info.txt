{"id":844487984,"question_id":817,"lang":"java","lang_name":"Java","time":"1 year, 6 months","timestamp":1668593879,"status":10,"status_display":"Accepted","runtime":"24 ms","url":"/submissions/detail/844487984/","is_pending":"Not Pending","title":"Design HashMap","memory":"60.8 MB","code":"class MyHashMap\n{\n\tListNode[] nodes = new ListNode[10000];\n    // create 10000 buckets, and the first listNode in bucket is null;\n\n    private static class ListNode  //listNode int bucket =>  has key, value and \"next\"\n\t{\n\t\tint key, val;\n\t\tListNode next;\n\n\t\tListNode(int key, int val)\n\t\t{\n\t\t\tthis.key = key;\n\t\t\tthis.val = val;\n\t\t}\n\t}\n    \n    \n\tpublic int get(int key)\n\t{\n\t\tint index = getIndex(key);  // use hash\n\t\tListNode prev = findElement(index, key); // the tricky part is to find the \"prev\" node\n\t\treturn prev.next == null ? -1 : prev.next.val;\n\t}\n\t\n    private int getIndex(int key)\n\t{\t\n\t\treturn Integer.hashCode(key) % nodes.length;\n\t}\n    \n    \n\tpublic void put(int key, int value)\n\t{\n\t\tint index = getIndex(key);\n\t\tListNode prev = findElement(index, key);\n\t\t\n\t\tif (prev.next == null)\n\t\t\tprev.next = new ListNode(key, value);\n\t\telse \n\t\t\tprev.next.val = value;\n\t}\n\n\t\n\t\n\n\tprivate ListNode findElement(int index, int key)\n\t{\n\t\tif(nodes[index] == null)\n\t\t\treturn nodes[index] = new ListNode(-1, -1); // initialize the first null ListNode when findElement checking idx;\n        \n        ListNode prev = nodes[index];\n\t\t\n\t\twhile(prev.next != null && prev.next.key != key)\n\t\t{\n\t\t\tprev = prev.next;\n\t\t}\n\t\treturn prev;\n\t}\n    \n    public void remove(int key)\n\t{\n\t\tint index = getIndex(key);\n        ListNode prev = findElement(index, key);\n\t\t\t\n        if(prev.next != null)\n\t\t    prev.next = prev.next.next;\n\t}\n\n\t\n}","compare_result":"111111111111111111111111111111111111","title_slug":"design-hashmap","has_notes":false,"flag_type":1}