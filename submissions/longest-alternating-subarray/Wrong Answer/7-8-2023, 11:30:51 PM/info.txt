{"id":989395085,"question_id":2870,"lang":"java","lang_name":"Java","time":"11 months, 1 week","timestamp":1688830251,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/989395085/","is_pending":"Not Pending","title":"Longest Alternating Subarray","memory":"N/A","code":"class Solution {\n    public int alternatingSubarray(int[] nums) {\n        int len = nums.length;\n      \n        int max= -1;\n     \n        Integer p = null;\n         // 2 3 4 3 4\n        int cnt= 1;\n        \n        int st = -1;\n        for(int i=0; i<len-1; i++){\n            // 2\n            int cur = nums[i]; //4\n            int nxt = nums[i+1]; // 3\n            \n            \n            if( (p!=null && cur+p==nxt) ||  p==null && (cur+1==nxt || cur-1==nxt) ){\n                cnt++; //2\n                max = Math.max(max, cnt); //\n                \n                if(p==null){\n                    p = cur-nxt; //-1\n                }else{\n                    p=-p;\n                }\n                \n                \n                \n            }else{\n                \n                if(p!=null){\n                     i--;\n                    cnt = 1;\n                    p=null;\n                }\n               \n                \n            }\n            \n            // System.out.println(i + \" \" + cur + \" \" +nxt);\n            \n        }\n               \n               return max;\n     \n        \n        \n//         TreeMap<Integer, Integer> map = new TreeMap<>();\n        \n//         for(int i=0; i<len; i++){\n            \n//             int n = nums[i];\n            \n//             map.put(n, map.getOrDefault(n, 0)+1);\n//         }\n        \n        \n        \n//         int i1 = -1, i2=-1;\n        \n//         int max= -1;\n//         List<Integer> list = new ArrayList<>(map.keySet());\n//         for(int i=0; i<list.size()-1; i++){\n            \n//             int cur = list.get(i);\n//             int nxt = list.get(i+1);\n            \n//             if(cur!=nxt+1 && cur!=nxt-1)\n//                 continue;\n            \n//             int min = Math.min(map.get(cur), map.get(nxt));\n           \n//             if(min>max){\n                \n//                 i1=cur;\n//                 i2=nxt;\n//                 max = Math.max(max, min);\n//             }\n            \n          \n            \n//         }\n        \n//         return max==-1 ? -1 : 2*max ;\n        \n        \n        \n    }\n}","compare_resulttitle_slug":"longest-alternating-subarray","has_notes":false,"flag_type":1}