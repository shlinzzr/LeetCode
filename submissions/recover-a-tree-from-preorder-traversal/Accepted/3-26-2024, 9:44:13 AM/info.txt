{"id":1213962428,"question_id":1093,"lang":"java","lang_name":"Java","time":"2 months, 2 weeks","timestamp":1711417453,"status":10,"status_display":"Accepted","runtime":"7 ms","url":"/submissions/detail/1213962428/","is_pending":"Not Pending","title":"Recover a Tree From Preorder Traversal","memory":"44.4 MB","code":"class Solution {\n    public TreeNode recoverFromPreorder(String S) {\n        int len = S.length();\n\n        Map<Integer, TreeNode> levels = new HashMap<>(); // num, lv\n        int i = 0;\n        while(i < S.length()) {\n            int curLevel = 0, curNum = 0;\n            while(i < S.length() && S.charAt(i) == '-') {\n                ++curLevel;\n                ++i;\n            }\n            while(i < S.length() && Character.isDigit(S.charAt(i))) {\n                curNum = curNum*10 + (S.charAt(i) - '0');\n                i++;\n            }\n            TreeNode curNode = new TreeNode(curNum);\n            levels.put(curLevel, curNode);\n            if(curLevel > 0) {\n                TreeNode parent = levels.get(curLevel - 1);\n                if(parent.left == null) parent.left = curNode;\n                else parent.right = curNode;\n            }\n        }\n        return levels.get(0);\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"recover-a-tree-from-preorder-traversal","has_notes":false,"flag_type":1}