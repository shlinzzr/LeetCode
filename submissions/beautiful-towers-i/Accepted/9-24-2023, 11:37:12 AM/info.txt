{"id":1057584233,"question_id":3114,"lang":"java","lang_name":"Java","time":"8 months, 3 weeks","timestamp":1695526632,"status":10,"status_display":"Accepted","runtime":"47 ms","url":"/submissions/detail/1057584233/","is_pending":"Not Pending","title":"Beautiful Towers I","memory":"43.3 MB","code":"class Solution {\n    public long maximumSumOfHeights(List<Integer> maxHeights) {\n        \n        int len = maxHeights.size();\n        \n        long res =0;\n        for(int i=0; i<len; i++){\n            long sum = maxHeights.get(i);\n            \n            int max= maxHeights.get(i);\n            for(int st=i-1; st>=0; st--){\n                int val = Math.min(max, maxHeights.get(st));\n                sum += val;\n                max = Math.min(max, val);\n            }\n            \n            max= maxHeights.get(i);\n            for(int ed=i+1; ed<len; ed++){\n                int val = Math.min(max, maxHeights.get(ed));\n                sum += val;\n                max = Math.min(max, val);\n            }\n            \n            res = Math.max(sum , res);\n       \n        }\n        \n        return res;\n        \n//         int[] down = new int[len];\n//         down[0]=maxHeights.get(0);\n//         for(int i=1; i<len; i++){\n//             down[i]=Math.min(down[i-1], maxHeights.get(i));\n//         }\n        \n//         //[3,2,5,5,2,3]\n//         // 3 2 2 2 2 2\n        \n//         //  5 3 3 1 1 \n        \n        \n//         int[] up = new int[len];\n//         up[len-1]=maxHeights.get(len-1);\n//         for(int i=len-2; i>=0; i--){\n//             up[i]=Math.min(up[i+1], maxHeights.get(i));\n//         }\n//         // 1 1 1 1 1\n//         // 2 2 2 2 2 3 \n        \n        \n     \n        \n        \n//         int[] nextSmaller = new int[len];\n//         Arrays.fill(nextSmaller, -1);\n        \n//         Stack<Integer> st = new Stack<>();\n//         for(int i=0; i<len; i++){\n            \n//             int cur = maxHeights.get(i);\n//             while(!st.isEmpty() && maxHeights.get(st.peek())>= cur){\n//                 nextSmaller[st.pop()]=cur;\n//             }\n//             st.push(i);\n//         }\n        \n//         for(int n : nextSmaller)\n//         {   System.out.print(n + \",\");\n//             }\n        \n        \n//         int[] prevSmaller = new int[len];\n//          Arrays.fill(prevSmaller, -1);\n//         st = new Stack<>();\n//         for(int i=len-1; i>=0; i--){\n            \n//             int cur = maxHeights.get(i);\n//             while(!st.isEmpty() && maxHeights.get(st.peek())>= cur){\n//                 prevSmaller[st.pop()]=cur;\n//             }\n//             st.push(i);\n//         }\n        \n//         long res = 0;\n        \n//         for(int i=0; i<len; i++){\n            \n//              res += Math.max(nextSmaller[i], prevSmaller[i]);\n            \n//         }\n        \n//         return res;\n        \n    }\n    \n    // \n}","compare_resulttitle_slug":"beautiful-towers-i","has_notes":false,"flag_type":1}