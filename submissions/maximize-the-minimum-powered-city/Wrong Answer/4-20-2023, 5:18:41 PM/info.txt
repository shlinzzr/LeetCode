{"id":936821593,"question_id":2618,"lang":"java","lang_name":"Java","time":"1 year, 1 month","timestamp":1681982321,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/936821593/","is_pending":"Not Pending","title":"Maximize the Minimum Powered City","memory":"N/A","code":"class Solution {\n    public long maxPower(int[] stations, int r, int k) {\n        \n        int len = stations.length;\n        long st =0, ed=Integer.MAX_VALUE;\n        \n        while(st<ed){\n            \n            long mid = ed- (ed-st)/2;\n            // System.out.println(mid  + \" \" +isOK(stations, r, k , mid) );\n            if(isOK(stations, r, k , mid)){\n                st = mid;\n                \n            }else{\n                ed = mid-1;\n            }\n        }\n        \n        return st;\n        \n    }\n     boolean isOK(int[] stations,  int r, int k, long mid){\n        long sum=0;\n        int n=stations.length;\n        long[] ans = new long[n];\n            for(int i=0;i<n;i++)\n            ans[i]=stations[i];\n        \n        for(int i=0;i<r;i++)\n            sum+=ans[i];\n        for(int i=0;i<n;i++){\n            sum+=((i+r<=n-1)?ans[i+r]:0)-((i-r-1>=0)?ans[i-r-1]:0); //sliding window\n            if(sum<mid){\n                    if((mid-sum)>k)\n                        return false;\n                if(i+r<=n-1) ans[i+r]+=(mid-sum); //greedy\n                k-=(mid-sum);\n                sum=mid;\n            }\n        }\n        return true;\n    }\n    \n//     private boolean isOK(int[] stations, int r, int k, long mid){\n//         int len = stations.length;\n        \n//         int win = 2*r;\n        \n//         long curr = 0;\n        \n//         int st=0;\n//         for(int ed=0; ed<len ; ed++){\n            \n//             curr += stations[ed];\n            \n//             if(ed!=len-1 && ed-st<r)\n//                 continue;\n            \n//             if(ed-st>win){\n//                 curr-= stations[st];\n//                 st++;\n//             }\n                \n//             if(curr>=mid)\n//                 continue;\n            \n//             if(k>0 && curr+k >= mid){\n                \n//                 // System.out.println(curr + \" \" + k);\n                \n//                 k -= mid-curr;\n//                 continue;\n//             }\n            \n//             if(curr<mid)\n//                 return false;\n//         }\n        \n//         return true;\n        \n        \n        \n//     }\n    \n}","compare_result":"111111111111111111111110101111","title_slug":"maximize-the-minimum-powered-city","has_notes":false,"flag_type":1}