{"id":936820986,"question_id":2618,"lang":"java","lang_name":"Java","time":"1 year, 1 month","timestamp":1681982226,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/936820986/","is_pending":"Not Pending","title":"Maximize the Minimum Powered City","memory":"N/A","code":"class Solution {\n    public long maxPower(int[] stations, int r, int k) {\n        \n        int len = stations.length;\n        long st =0, ed=Integer.MAX_VALUE;\n        \n        while(st<ed){\n            \n            long mid = ed- (ed-st)/2;\n            // System.out.println(mid  + \" \" +isOK(stations, r, k , mid) );\n            if(isOK(stations, r, k , mid)){\n                st = mid;\n                \n            }else{\n                ed = mid-1;\n            }\n        }\n        \n        return st;\n        \n    }\n    \n    \n    private boolean isOK(int[] stations, int r, int k, long mid){\n        int len = stations.length;\n        \n        int win = 2*r;\n        \n        long curr = 0;\n        \n        int st=0;\n        for(int ed=0; ed<len ; ed++){\n            \n            curr += stations[ed];\n            \n            if(ed!=len-1 && ed-st<r)\n                continue;\n            \n            if(ed-st>win){\n                curr-= stations[st];\n                st++;\n            }\n                \n            if(curr>=mid)\n                continue;\n            \n            if(k>0 && curr+k >= mid){\n                \n                // System.out.println(curr + \" \" + k);\n                \n                k -= mid-curr;\n                continue;\n            }\n            \n            if(curr<mid)\n                return false;\n        }\n        \n        return true;\n        \n        \n        \n    }\n    \n}","compare_result":"111111010010000000000000001110","title_slug":"maximize-the-minimum-powered-city","has_notes":false,"flag_type":1}