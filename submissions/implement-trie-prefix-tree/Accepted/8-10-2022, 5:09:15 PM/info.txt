{"id":770080851,"question_id":208,"lang":"java","lang_name":"Java","time":"1 year, 10 months","timestamp":1660122555,"status":10,"status_display":"Accepted","runtime":"52 ms","url":"/submissions/detail/770080851/","is_pending":"Not Pending","title":"Implement Trie (Prefix Tree)","memory":"67.5 MB","code":"class Trie {\n\n    TrieNode root;\n    \n    \n    public Trie() {\n        root = new TrieNode();\n    }\n    \n    public void insert(String word) {\n        TrieNode node = root;\n        \n        for(char c : word.toCharArray()){\n            if(!node.containsKey(c))\n                node.put(c, new TrieNode());\n            \n            node = node.get(c);\n        }\n        node.setEnd();\n        \n    }\n    \n    public boolean search(String word) {\n        TrieNode node = root;\n        \n        for(char c : word.toCharArray()){\n            if(node.containsKey(c)){\n                node = node.get(c);\n            }else{\n                return false;\n            }\n        }\n        \n        if(node.isEnd())\n            return true;\n        \n        return false;        \n    }\n    \n    public boolean startsWith(String prefix) {\n        TrieNode node = root;\n        \n        for(char c : prefix.toCharArray()){\n            if(node.containsKey(c)){\n                node = node.get(c);\n            }else{\n                return false;\n            }\n        }\n        \n        return true;\n        \n    }\n}\n\nclass TrieNode {\n    \n    private TrieNode[] links;\n    private final int R = 26;\n    private boolean isEnd;\n    \n    public TrieNode(){\n        links = new TrieNode[R];\n    }\n    \n    public boolean containsKey(char c){\n        return links[c-'a']!=null;        \n    }\n    \n    public TrieNode get(char c){\n        return links[c-'a'];\n    }\n    \n    public void put(char c, TrieNode node){\n        links[c-'a'] = node;\n        \n    }\n    \n    \n    public void setEnd(){\n        isEnd = true;\n    }\n    \n    public boolean isEnd(){\n        return isEnd;\n    }\n    \n}\n\n\n/**\n * Your Trie object will be instantiated and called as such:\n * Trie obj = new Trie();\n * obj.insert(word);\n * boolean param_2 = obj.search(word);\n * boolean param_3 = obj.startsWith(prefix);\n */","compare_result":"1111111111111111","title_slug":"implement-trie-prefix-tree","has_notes":false,"flag_type":1}