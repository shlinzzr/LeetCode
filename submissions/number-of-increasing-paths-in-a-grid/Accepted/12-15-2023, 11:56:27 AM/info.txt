{"id":1120031365,"question_id":2409,"lang":"java","lang_name":"Java","time":"6Â months","timestamp":1702612587,"status":10,"status_display":"Accepted","runtime":"44 ms","url":"/submissions/detail/1120031365/","is_pending":"Not Pending","title":"Number of Increasing Paths in a Grid","memory":"59.1 MB","code":"class Solution {\n    int M = (int) 1e9+7;\n    int res = 0;\n    public int countPaths(int[][] grid) {\n        int h = grid.length;\n        int w = grid[0].length;\n        \n        int[][] memo = new int[h][w];\n        for(int[] m : memo){\n            Arrays.fill(m, 1);\n        }\n        int cnt =0;\n        for(int i=0; i<h; i++){\n            for(int j=0; j<w; j++){\n                // if(memo[i][j]==1){\n                    cnt = (cnt + dfs(grid, i, j, memo))%M;\n                // }\n            }\n        }\n\n        \n\n        return cnt;\n    }\n\n    int[][] dirs = new int[][]{{0,1},{1,0},{0,-1},{-1,0}};\n    private int dfs(int[][] grid, int i, int j, int[][] memo){\n\n        int h = grid.length;\n        int w = grid[0].length;\n\n        if(memo[i][j]!=1){\n            return memo[i][j];\n        }   \n\n\n        int cnt = 1;\n        for(int[] d: dirs){\n            int r = d[0]+i;\n            int c = d[1]+j;\n\n            if(r>=0 && c>=0 && r<h && c<w && grid[i][j]<grid[r][c]){\n                // int rt = (int) ((1L + dfs(grid, r, c, memo))%M);\n                // max = Math.max(max, rt);\n                cnt = (cnt +dfs(grid, r, c, memo))%M;\n            }\n        }\n        memo[i][j] = cnt;\n        return cnt;\n    }\n}","compare_result":"111111111111111111111111111111111111","title_slug":"number-of-increasing-paths-in-a-grid","has_notes":false,"flag_type":1}