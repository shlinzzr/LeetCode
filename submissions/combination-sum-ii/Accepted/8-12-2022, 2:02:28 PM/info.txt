{"id":771659249,"question_id":40,"lang":"java","lang_name":"Java","time":"1 year, 10 months","timestamp":1660284148,"status":10,"status_display":"Accepted","runtime":"7 ms","url":"/submissions/detail/771659249/","is_pending":"Not Pending","title":"Combination Sum II","memory":"44.3 MB","code":"class Solution {\n    public List<List<Integer>> combinationSum2(int[] candidates, int target) {\n        List<List<Integer>> res = new ArrayList<>();\n        \n        Arrays.sort(candidates); // 1, 1, 2, 5, 6, 7, 10\n        \n        boolean[] used = new boolean[candidates.length];\n        helper(res, candidates, target, new ArrayList<>(), 0, used);\n        \n        return res;\n        \n    }\n    \n    \n    private void helper(List<List<Integer>> res, int[] nums, int target, List<Integer> list, int start, boolean[] used){\n        \n        if(target==0){\n            res.add(new ArrayList<>(list));\n            return;\n        }\n        \n        for(int i=start; i<nums.length; i++){\n            \n            if(used[i]==true || target-nums[i]<0)\n                continue;\n            \n            if(i>0 && nums[i-1]==nums[i] && used[i-1]==false)\n                continue;\n                \n            list.add(nums[i]);\n            used[i]=true;\n            helper(res, nums, target-nums[i], list, i+1, used);\n            list.remove(list.size()-1);\n            used[i]=false;\n            \n        }\n        \n        \n        \n        \n    }\n        \n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"combination-sum-ii","has_notes":false,"flag_type":1}