{"id":1247070703,"question_id":40,"lang":"java","lang_name":"Java","time":"1 month, 1 week","timestamp":1714623345,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/1247070703/","is_pending":"Not Pending","title":"Combination Sum II","memory":"43.1 MB","code":"class Solution {\n    public List<List<Integer>> combinationSum2(int[] candidates, int target) {\n        Arrays.sort(candidates);\n        Set<List<Integer>> res = new HashSet<>();\n\n        boolean[] used = new boolean[candidates.length];\n        helper(candidates, target, new ArrayList<>(), res, 0);\n        return new ArrayList<>(res);\n    }\n\n    private void helper(int[] candidates, int target, List<Integer> curr, Set<List<Integer>> res, int st){\n\n        if(target==0){\n            res.add(new ArrayList<>(curr));\n            return;\n        }\n\n        for(int i=st; i<candidates.length; i++){\n\n            // if(!curr.isEmpty() && candidates[i]==curr.get(curr.size()-1) && used[i-1]==false && i<candidates.length){\n            //     continue;\n            // }\n\n            int c = candidates[i];\n            if(target>=c){\n                // used[i] = true;\n                curr.add(c);\n                helper(candidates, target-c, curr, res, i+1);\n                curr.remove(curr.size()-1);\n                // used[i] = false;\n            }\n\n            while(i+1 < candidates.length && candidates[i]==candidates[i+1]){\n                i++;\n            }\n        }\n        \n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"combination-sum-ii","has_notes":false,"flag_type":1}