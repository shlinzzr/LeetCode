{"id":897113029,"question_id":859,"lang":"java","lang_name":"Java","time":"1 year, 4 months","timestamp":1676285026,"status":10,"status_display":"Accepted","runtime":"2185 ms","url":"/submissions/detail/897113029/","is_pending":"Not Pending","title":"Design Circular Deque","memory":"43.2 MB","code":"class MyCircularDeque {\n\n    class Node {\n        \n        Node next;\n        Node prev;\n        int val;\n        public Node(){};\n        public Node(int val){\n            this.val = val;\n        }\n        \n    }\n    \n    Node head;\n    Node tail;\n    int capacity;\n    int size;\n    \n    \n    public MyCircularDeque(int k) {\n        head = new Node(-1);\n        tail = new Node(-1);\n        \n        head.next = tail;\n        head.prev = tail;\n        tail.next = head;\n        tail.prev = head;\n        capacity=k;\n        size=0;\n    }\n    \n    public boolean insertFront(int value) {\n        if(size==capacity)\n            return false;\n        \n        Node next = head.next;\n        Node prev = head.prev;\n        \n        Node node = new Node(value);\n        node.next = next;\n        node.prev = head;\n        \n        head.next = node;\n        next.prev = node;\n        size++;\n        return true;\n    }\n    \n    public boolean insertLast(int value) {\n        if(size==capacity)\n            return false;\n        \n        Node prev = tail.prev;\n        \n        Node node = new Node(value);\n        node.next = tail;\n        prev.next = node;\n        tail.prev = node;\n        node.prev = prev;\n        \n        size++;\n        \n        println();\n        \n        return true;\n    }\n    \n    public boolean deleteFront() {\n        if(size==0)\n            return false;\n        \n        Node node = head.next;\n        \n        head.next = node.next;\n        node.next.prev = head;\n        \n        size--;\n        \n        return true;\n        \n        \n    }\n    \n    public boolean deleteLast() {\n        if(size==0)\n            return false;\n       \n        Node node = tail.prev;\n        \n        tail.prev= node.prev;\n        node.prev.next = tail;\n        size--;\n         return true;\n        \n    }\n    \n    public int getFront() {\n          println();\n        return head.next.val;\n    }\n    \n    public int getRear() {\n          println();\n         return tail.prev.val;\n    }\n    \n    private void println(){\n        System.out.println(\"println\");\n        Node curr = head.next;\n        while(curr.val!=-1){\n            System.out.println(curr.val);\n            curr=curr.next;\n        }\n       \n        \n    }\n    public boolean isEmpty() {\n        return size==0;\n    }\n    \n    public boolean isFull() {\n        return size==capacity;\n    }\n}\n\n\n/*[\"MyCircularDeque\",\n\"insertFront\", 7\n\"insertLast\", 0\n\"getFront\", \n\"insertLast\"  3,\n\"getFront\",\n\"insertFront\",  9\n\"getRear\",\n\"getFront\",\n\"getFront\",\n\"deleteLast\",\n\"getRear\"]\n[[5],[7],[0],[],[3],[],[9],[],[],[],[],[]]\n\n/**\n * Your MyCircularDeque object will be instantiated and called as such:\n * MyCircularDeque obj = new MyCircularDeque(k);\n * boolean param_1 = obj.insertFront(value);\n * boolean param_2 = obj.insertLast(value);\n * boolean param_3 = obj.deleteFront();\n * boolean param_4 = obj.deleteLast();\n * int param_5 = obj.getFront();\n * int param_6 = obj.getRear();\n * boolean param_7 = obj.isEmpty();\n * boolean param_8 = obj.isFull();\n */","compare_result":"111111111111111111111111111111111111111111111111111","title_slug":"design-circular-deque","has_notes":false,"flag_type":1}