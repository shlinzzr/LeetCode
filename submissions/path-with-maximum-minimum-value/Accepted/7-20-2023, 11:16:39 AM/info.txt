{"id":998963563,"question_id":1099,"lang":"java","lang_name":"Java","time":"10 months, 4 weeks","timestamp":1689822999,"status":10,"status_display":"Accepted","runtime":"169 ms","url":"/submissions/detail/998963563/","is_pending":"Not Pending","title":"Path With Maximum Minimum Value","memory":"44.9 MB","code":"class Solution {\n    public int maximumMinimumPath(int[][] grid) {\n        int h = grid.length;\n        int w = grid[0].length;\n        \n        \n        int st=0, ed=grid[0][0];\n        \n        while(st<ed){\n            \n            int mid = st + (ed-st+1)/2;\n            \n            if(isOk(grid, mid)){\n                st = mid;\n            }else{\n                ed= mid-1;\n            }\n        }\n        \n        return st;\n        \n        \n    }\n    \n    \n    private boolean isOk(int[][] grid, int m){\n        \n         // System.out.println(\"isOk \" + m);\n        // System.out.println(  Integer.MAX_VALUE);\n        \n        int h = grid.length;\n        int w = grid[0].length;\n        \n        boolean[][] bool = new boolean[h][w];\n        \n        Queue<int[]> q = new LinkedList<>();\n        \n        int[][] dirs = new int[][]{{0,1}, {1,0}, {0,-1}, {-1,0}};\n        \n        q.offer(new int[]{0,0});\n        bool[0][0]=true;\n        \n        while(!q.isEmpty()){\n            \n            int[] p = q.poll();\n            \n            \n            // System.out.println(p[0] + \" \" + p[1] );\n            \n            for(int[] d: dirs){\n                \n                int r = d[0]+p[0];\n                int c = d[1]+p[1];\n        \n                if(r<0 || c<0 || r>=h || c>=w || bool[r][c] || grid[r][c]<m)\n                    continue;\n                \n                \n                if(r==h-1 && c==w-1)\n                    return true;\n                \n                bool[r][c] = true;\n                q.offer(new int[]{r,c});\n            }            \n        }\n          \n         // System.out.println(\"isOk \" + m + \" false\");\n            \n        return false;        \n        \n        /*\n        [[0,1,0,0,0,1],\n         [0,1,1,0,0,0],\n         [0,0,1,1,0,1],\n         [0,1,1,1,1,0],\n         [1,1,1,1,1,1]]*/\n        \n        \n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"path-with-maximum-minimum-value","has_notes":false,"flag_type":1}