{"id":920653550,"question_id":2019,"lang":"java","lang_name":"Java","time":"1 year, 2 months","timestamp":1679567566,"status":10,"status_display":"Accepted","runtime":"30 ms","url":"/submissions/detail/920653550/","is_pending":"Not Pending","title":"Product of Two Run-Length Encoded Arrays","memory":"87 MB","code":"class Solution {\n    public List<List<Integer>> findRLEArray(int[][] encoded1, int[][] encoded2) {\n        LinkedList<List<Integer>> product = new LinkedList<>();\n\n        int lengthEncoding1 = encoded1.length, lengthEncoding2 = encoded2.length;\n        int indexEncoding1 = 0, indexEncoding2 = 0;\n\n        while (indexEncoding1 < lengthEncoding1 && indexEncoding2 < lengthEncoding2) {\n            int[] pair1 = encoded1[indexEncoding1];\n            int[] pair2 = encoded2[indexEncoding2];\n\n            int productVal = pair1[0] * pair2[0];\n            int freq = Math.min(pair1[1], pair2[1]);\n\n            pair1[1] -= freq;\n            pair2[1] -= freq;\n\n            if (pair1[1] == 0) indexEncoding1++;\n            if (pair2[1] == 0) indexEncoding2++;\n\n            List<Integer> lastProductEncoding;\n            if (product.isEmpty() || (lastProductEncoding = product.getLast()).get(0) != productVal) {\n                product.add(Arrays.asList(productVal, freq));\n            } else {\n                lastProductEncoding.set(1, lastProductEncoding.get(1) + freq);\n            }\n        }\n        return product;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111","title_slug":"product-of-two-run-length-encoded-arrays","has_notes":false,"flag_type":1}