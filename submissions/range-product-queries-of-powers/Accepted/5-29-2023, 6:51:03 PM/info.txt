{"id":959532368,"question_id":2529,"lang":"java","lang_name":"Java","time":"1Â year","timestamp":1685357463,"status":10,"status_display":"Accepted","runtime":"60 ms","url":"/submissions/detail/959532368/","is_pending":"Not Pending","title":"Range Product Queries of Powers","memory":"85.1 MB","code":"class Solution {\n    public int[] productQueries(int n, int[][] qu) {\n        \n        String str = Integer.toBinaryString(n); // convert n into binary string to get  minimum number of powers of  2\n        \n        ArrayList<Long> list = new ArrayList<>();\n        long pow = 1;\n        for (int i = str.length() - 1; i >= 0; i--) { // now loop on binary string\n            if (str.charAt(i) == '1') list.add(pow); //if i'th bit is set add its power to our list\n            pow = pow * 2;\n        }\n        long mod = (long) 1e9 + 7;\n\n        int ans[] = new int[qu.length];\n\n        for (int i = 0; i < qu.length; i++) {\n            long mul = 1;\n            for (int j = qu[i][0]; j <= qu[i][1]; j++) { //compute answer for each query\n                mul = (mul * list.get(j)) % mod;\n            }\n\n            ans[i] = (int) mul;\n        }\n\n        return ans;\n        \n        \n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"range-product-queries-of-powers","has_notes":false,"flag_type":1}