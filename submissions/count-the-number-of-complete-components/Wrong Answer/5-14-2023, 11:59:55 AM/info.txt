{"id":949990780,"question_id":2793,"lang":"java","lang_name":"Java","time":"1 year, 1 month","timestamp":1684036795,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/949990780/","is_pending":"Not Pending","title":"Count the Number of Complete Components","memory":"N/A","code":"class Solution {\n    public int countCompleteComponents(int n, int[][] edges) {\n        UnionFind uf = new UnionFind(n); \n        HashSet<String> set = new HashSet();\n        HashMap<Integer, List<Integer>> map = new HashMap<>();\n        for(int[]e : edges){\n            map.putIfAbsent(e[0], new ArrayList<>());\n            map.putIfAbsent(e[1], new ArrayList<>());\n            map.get(e[0]).add(e[1]);\n            map.get(e[1]).add(e[0]);\n            set.add(e[0]+\"-\"+e[1]);\n            \n            uf.union(e[0], e[1]);\n        }\n        \n        int cnt=0;\n        \n        for(int i=0; i<n; i++){\n            \n            if(uf.parent[i]==i){\n                if(isCon(i, n, set, uf))\n                   cnt++;\n            }\n            \n        }\n        \n                   \n        return cnt;\n        \n        \n        \n        \n    }\n    \n    \n    private boolean isCon(int root, int n, HashSet<String> set, UnionFind uf){\n        \n        List<Integer> list = new ArrayList<>();\n        for(int i=0; i<n; i++){\n            if(uf.parent[i]==root)\n                list.add(i);\n        }\n        \n        System.out.println(list);\n         System.out.println(set.contains(4+\"-\"+5));\n        \n        for(int i=0; i<list.size(); i++){\n            for(int j=0; j<list.size(); j++){\n                if(i==j)\n                    continue;\n                \n                if(!set.contains( list.get(i)+\"-\"+list.get(j)))\n                    return false;\n            }\n        }\n        return true;\n        \n        \n        \n    }\n    \n   class UnionFind{\n        \n        int[] parent;\n        int[] weight;\n        \n        public UnionFind(int n){\n            parent = new int[n];\n            weight = new int[n];\n            for(int i=0; i<n; i++){\n                parent[i]= i;\n            }\n        \n        }\n        public int find(int x){\n            \n            if(parent[x]!=x)\n                parent[x] = find(parent[x]);\n            \n            return parent[x];\n        }\n        \n        public void union(int a, int b){\n\n            a=find(a);\n            b=find(b);\n            \n            if(a==b)\n                return;\n            \n            if(weight[a]<=weight[b]){\n                weight[a]+=weight[b];\n                parent[b] = a;\n            }else{\n                weight[b]+=weight[a];\n                parent[a] = b;\n            }\n        }\n        \n    }\n}","compare_resulttitle_slug":"count-the-number-of-complete-components","has_notes":false,"flag_type":1}