{"id":940469553,"question_id":39,"lang":"java","lang_name":"Java","time":"1 year, 1 month","timestamp":1682579481,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/940469553/","is_pending":"Not Pending","title":"Combination Sum","memory":"42.9 MB","code":"class Solution {\n    public List<List<Integer>> combinationSum(int[] can, int target) {\n        \n        Arrays.sort(can);\n        Set<List<Integer>> res = new HashSet<>();\n        int len = can.length;\n        helper(can, new ArrayList<>(), 0, target, res, 0);\n        \n        return new ArrayList(res);\n        \n    }\n    \n    private void helper(int[] can, List<Integer> list, int curr, int target, Set<List<Integer>> res, int st){\n        \n        // System.out.println(list.toString() + \" curr=\" + curr + \" t=\" + target);\n        \n        if(target==0){\n            res.add(new ArrayList<>(list));\n            return ;\n        }\n        \n        for(int i=st; i<can.length; i++){\n            // System.out.println(\"i=\"+ i + \" can[i]=\" + can[i] + \" if=\" +(curr+can[i]<=target) );\n            if(can[i]<=target){\n                list.add(can[i]);\n                helper(can, list, curr+can[i], target-can[i], res, i);\n                list.remove(list.size()-1);\n            }\n            \n        }\n        \n        \n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"combination-sum","has_notes":false,"flag_type":1}