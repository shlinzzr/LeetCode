{"id":858536263,"question_id":39,"lang":"java","lang_name":"Java","time":"1 year, 6 months","timestamp":1670834789,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/858536263/","is_pending":"Not Pending","title":"Combination Sum","memory":"42.3 MB","code":"class Solution {\n    public List<List<Integer>> combinationSum(int[] candidates, int target) {\n        Set<List<Integer>> res = new HashSet<>();\n        helper(res, new ArrayList<>(), candidates, target, 0);\n        return new ArrayList<>(res);\n    }\n    \n    \n    \n    private void helper(Set<List<Integer>> res, List<Integer> curr, int[] candidates, int target, int st){\n        \n        if(target<0)\n            return;\n        \n        if(target==0){\n            res.add(new ArrayList<>(curr));\n            return;\n        }\n        \n        \n        \n        \n        for(int i=st; i<candidates.length; i++){\n            int can = candidates[i];\n            \n            if(target-can>=0){\n                curr.add(can);\n                helper(res, curr, candidates, target-can, i);\n                curr.remove(curr.size()-1);\n            }\n        }\n        \n        \n        \n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"combination-sum","has_notes":false,"flag_type":1}