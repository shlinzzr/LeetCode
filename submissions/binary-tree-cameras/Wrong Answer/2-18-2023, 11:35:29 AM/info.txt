{"id":900090247,"question_id":1008,"lang":"java","lang_name":"Java","time":"1 year, 3 months","timestamp":1676691329,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/900090247/","is_pending":"Not Pending","title":"Binary Tree Cameras","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    \n    HashSet<TreeNode> cams = new HashSet<>();\n    HashSet<TreeNode> seen = new HashSet<>();\n    Queue<TreeNode> q = new LinkedList<>();\n    HashMap<TreeNode, Set<TreeNode>> map = new HashMap<>();\n    \n    \n    public int minCameraCover(TreeNode root) {\n        \n        if(root==null)\n            return 0;\n        \n        if(root.left==null && root.right==null)\n            return 1;\n        \n        buildMap(null, root);\n        \n        if((root.left!=null && root.right==null) || (root.left==null && root.right!=null)){\n            q.offer(root);\n            seen.add(root);\n        }\n        \n        \n        \n        // if(root.left!=null&&(root.left.left!=null || root.left.right!=null)\n        //  || root.right!=null&&(root.right.left!=null || root.right.right!=null)  ){\n        //     q.offer(root);\n        //     seen.add(root);\n        // }\n        \n        \n        \n        dfs();\n        \n        return cams.size();\n        \n        \n    }\n    \n    private void dfs(){\n        \n        int step =0;\n        \n        while(!q.isEmpty()){\n            \n            int size=q.size();\n            for(int i=0; i<size; i++){\n                TreeNode p = q.poll();\n                Set<TreeNode> adjs = map.get(p);\n                for(TreeNode t : adjs){\n                    if(!seen.contains(t)){\n                        q.offer(t);\n                        seen.add(t);\n                        if(step%3==0){\n                            cams.add(t);\n                        }\n                    }\n                }\n            }\n           step++;\n        }\n    }\n    \n    \n    \n    private void buildMap(TreeNode parent, TreeNode root){\n        \n        map.putIfAbsent(root, new HashSet<>());\n        \n        if(parent!=null)\n            map.get(root).add(parent);\n        \n        if(root.left==null && root.right==null){\n            q.offer(root);\n            seen.add(root);\n        }\n        \n        if(root.left!=null){\n            map.get(root).add(root.left);\n            buildMap(root, root.left);\n        }\n            \n        if(root.right!=null){\n            map.get(root).add(root.right);\n            buildMap(root, root.right);\n        }\n        \n      \n            \n        \n            \n    }\n}","compare_result":"111001111111111111111111111111111111111111111111111111111111111111111111111111110101101101101011110111111111100111001011010111101100101100010100100101111000000100000000000","title_slug":"binary-tree-cameras","has_notes":false,"flag_type":1}