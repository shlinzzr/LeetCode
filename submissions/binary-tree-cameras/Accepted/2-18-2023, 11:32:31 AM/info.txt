{"id":900089335,"question_id":1008,"lang":"java","lang_name":"Java","time":"1 year, 3 months","timestamp":1676691151,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/900089335/","is_pending":"Not Pending","title":"Binary Tree Cameras","memory":"41.5 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    int res = 0;\n    public int minCameraCover(TreeNode root) {\n        return (dfs(root) < 1 ? 1 : 0) + res;\n    }\n\n    public int dfs(TreeNode root) {\n        if (root == null) return 2;\n        int left = dfs(root.left), right = dfs(root.right);\n        if (left == 0 || right == 0) {\n            res++;\n            return 1;\n        }\n        return left == 1 || right == 1 ? 2 : 0;\n    }\n\n}\n","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-tree-cameras","has_notes":false,"flag_type":1}