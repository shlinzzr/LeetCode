{"id":1189457191,"question_id":425,"lang":"java","lang_name":"Java","time":"3 months, 2 weeks","timestamp":1709191364,"status":10,"status_display":"Accepted","runtime":"38 ms","url":"/submissions/detail/1189457191/","is_pending":"Not Pending","title":"Word Squares","memory":"65.1 MB","code":"class Solution {\n\n    TrieNode root;\n\n    class TrieNode {\n        TrieNode[] arr;\n        List<String> list;\n\n        public TrieNode() {\n            arr = new TrieNode[26];\n            list = new ArrayList<>();    \n        }\n\n        public void insert(String word) {\n            list.add(word);\n            TrieNode curr = root;\n            for(char ch : word.toCharArray()){\n                if(curr.arr[ch-'a']==null){\n                    curr.arr[ch-'a'] = new TrieNode();\n                }\n                curr = curr.arr[ch-'a'];\n                curr.list.add(word);\n            }\n        }\n\n        public List<String> startsWith(String prefix){\n            TrieNode curr = root;\n            for(char ch : prefix.toCharArray()){\n                if(curr.arr[ch-'a']==null)\n                    return new ArrayList<>();\n                else{\n                    curr = curr.arr[ch-'a'];\n                }\n            }\n            return curr.list;\n        }\n\n    }\n\n    public List<List<String>> wordSquares(String[] words) {\n\n        if(words == null || words.length == 0) {\n            return new ArrayList<>();\n        }\n\n        root = new TrieNode();\n        List<List<String>> res = new ArrayList<>();\n\n        for(String word : words) {\n            root.insert(word);    \n        }\n    \n        List<String> curr = new ArrayList<>();\n        for(String w : words){\n            curr.add(w);\n            backtrack(res, curr, w);\n            curr.remove(curr.size()-1);\n        }\n        return res;\n    }\n\n    private void backtrack( List<List<String>> res, List<String> curr, String w){\n\n        if(curr.size()==w.length()){\n            res.add(new ArrayList<>(curr));\n            return;\n        }\n\n        StringBuilder prefix = new StringBuilder();\n\n        int siz = curr.size();\n        for(String s: curr){\n            prefix.append(s.charAt(siz));\n        }\n\n        List<String> candidates = root.startsWith(prefix.toString());\n        for(String s : candidates){\n            curr.add(s);\n            backtrack(res, curr, w);\n            curr.remove(curr.size()-1);\n        }\n    }\n\n}\n\n\n\n\n/* \n\nb a l l \na r e a\nl e a d\nl a d y\n\n*/","compare_result":"11111111111111111","title_slug":"word-squares","has_notes":false,"flag_type":1}