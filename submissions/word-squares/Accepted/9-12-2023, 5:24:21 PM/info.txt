{"id":1047321198,"question_id":425,"lang":"java","lang_name":"Java","time":"9Â months","timestamp":1694510661,"status":10,"status_display":"Accepted","runtime":"31 ms","url":"/submissions/detail/1047321198/","is_pending":"Not Pending","title":"Word Squares","memory":"64.8 MB","code":"class Solution {\n    class TrieNode {\n        TrieNode[] children;\n        List<String> list;\n        public TrieNode() {\n            children = new TrieNode[26];\n            list = new ArrayList<>();    \n        }\n\n        public void insert(String word) {\n            TrieNode curr = root;\n            for(int i = 0; i < word.length(); i++) {\n                char c = word.charAt(i);\n                if(curr.children[c - 'a'] == null) {\n                    curr.children[c - 'a'] = new TrieNode();\n                }\n                curr = curr.children[c - 'a'];\n                curr.list.add(word);\n            }        \n        }\n        \n        public List<String> startsWith(String word) {\n            TrieNode curr = root;\n            for(int i = 0; i < word.length(); i++) {\n                char c = word.charAt(i);\n                if(curr.children[c - 'a'] == null) {\n                    return new ArrayList<>();\n                }\n                curr = curr.children[c - 'a'];\n            }\n            return curr.list;\n        }\n    }\n    \n    TrieNode root;\n    \n    List<List<String>> result;\n    public List<List<String>> wordSquares(String[] words) {\n        if(words == null || words.length == 0) {\n            return new ArrayList<>();\n        }\n        \n        root = new TrieNode();   \n        result = new ArrayList<>();\n        \n        for(String word : words) {\n            root.insert(word);    \n        }\n        \n        List<String> temp = new ArrayList<>();\n        \n        for(String word : words) {\n            //action\n            temp.add(word);\n            //recurse\n            backtrack(temp, word);\n            //backtrack\n            temp.remove(temp.size() - 1);\n        }\n        \n        return result;\n    }\n    \n    private void backtrack(List<String> temp, String word) {\n        //base\n        if(temp.size() == word.length()) {\n            result.add(new ArrayList<>(temp));\n            return;\n        }\n        \n        //logic\n        StringBuilder sb = new StringBuilder();\n        int i = temp.size();\n        for(String s : temp) {\n            sb.append(s.charAt(i));\n        }\n        \n        List<String> allStrings = root.startsWith(sb.toString());\n        \n        for(String s : allStrings) {\n            //action \n            temp.add(s);\n            //recurse\n            backtrack(temp, word);\n            //backtrack\n            temp.remove(temp.size() - 1);\n        }\n    }\n}","compare_result":"11111111111111111","title_slug":"word-squares","has_notes":false,"flag_type":1}