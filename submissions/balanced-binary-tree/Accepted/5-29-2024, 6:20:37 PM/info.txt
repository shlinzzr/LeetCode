{"id":1271297966,"question_id":110,"lang":"java","lang_name":"Java","time":"2Â weeks","timestamp":1716978037,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1271297966/","is_pending":"Not Pending","title":"Balanced Binary Tree","memory":"44.1 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public boolean isBalanced(TreeNode root) {\n        return getDepth(root)>-1;\n    }\n\n    private int getDepth(TreeNode node){\n        if(node==null) return 0;\n\n        int left= getDepth(node.left);\n        int right = getDepth(node.right);\n\n        if(Math.abs(left-right)>1) return -1;\n        if(left==-1 || right==-1) return -1;\n\n        return Math.max(left, right) +1;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"balanced-binary-tree","has_notes":false,"flag_type":1}