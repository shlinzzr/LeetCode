{"id":844361663,"question_id":110,"lang":"java","lang_name":"Java","time":"1 year, 6 months","timestamp":1668577508,"status":10,"status_display":"Accepted","runtime":"55 ms","url":"/submissions/detail/844361663/","is_pending":"Not Pending","title":"Balanced Binary Tree","memory":"45 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public boolean isBalanced(TreeNode root) {\n\n        if(root==null)\n            return true;\n        \n        boolean l = isBalanced(root.left);\n        boolean r = isBalanced(root.right);\n        \n        int left = getH(root.left);\n        int right = getH(root.right);\n        \n        // System.out.println(left + \" \" +right);\n        // System.out.println(l + \" \" +r);\n        \n        \n        return Math.abs(left-right)<=1 && l && r;\n        \n        \n        \n    }\n    \n    \n    private int getH(TreeNode root){\n        \n        if(root==null)\n            return 0;\n        \n        int left = getH(root.left);\n        int right = getH(root.right);\n        \n        return Math.max(left, right)+1;        \n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"balanced-binary-tree","has_notes":false,"flag_type":1}