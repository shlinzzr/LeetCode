{"id":78991225,"question_id":110,"lang":"c","lang_name":"C","time":"7 years, 7 months","timestamp":1476783381,"status":10,"status_display":"Accepted","runtime":"6 ms","url":"/submissions/detail/78991225/","is_pending":"Not Pending","title":"Balanced Binary Tree","memory":"N/A","code":"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     struct TreeNode *left;\r\n *     struct TreeNode *right;\r\n * };\r\n */\r\nbool isBalanced(struct TreeNode* root) {\r\n    \r\n    if(root == NULL)\r\n       return true;\r\n    else{\r\n      int left = maxDepth(root->left);\r\n      int right= maxDepth(root->right);\r\n      //printf(\"%d %d\", leftval, rightval);\r\n      if(abs(left - right)>1)\r\n          return false;\r\n      else \r\n          return isBalanced(root->left)  && isBalanced(root->right);\r\n   \r\n    }\r\n}\r\n\r\nint maxDepth(struct TreeNode* root) {\r\n     if(root == NULL)\r\n        return 0;\r\n     else{\r\n         int left = maxDepth(root->left);\r\n         int right = maxDepth(root->right);\r\n         \r\n         return 1 + ((left > right) ? left : right);\r\n     }\r\n \r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","compare_result":null,"title_slug":"balanced-binary-tree","has_notes":false,"flag_type":1}