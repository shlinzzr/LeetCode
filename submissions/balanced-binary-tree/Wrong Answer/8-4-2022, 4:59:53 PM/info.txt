{"id":764897914,"question_id":110,"lang":"java","lang_name":"Java","time":"1 year, 10 months","timestamp":1659603593,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/764897914/","is_pending":"Not Pending","title":"Balanced Binary Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public boolean isBalanced(TreeNode root) {\n        \n        if(root==null)\n            return true;\n        \n        int h = treeHeight(root);\n        if(h==-1)\n            return false;\n        \n        \n        return true;\n    }\n    \n    private int treeHeight(TreeNode root){\n        if(root==null)\n            return 0;\n        \n        int leftHeight = treeHeight(root.left);\n        if(leftHeight==-1)\n            return -1;\n        \n        int rightHeight = treeHeight(root.right);\n        if(rightHeight==-1)\n            return -1;\n        \n        if(Math.abs(leftHeight-rightHeight)>1)\n            return -1;\n        \n        return Math.max(leftHeight, rightHeight);\n        \n    }\n    \n}","compare_result":"101111010100011011000000000111100000000000000000000010011110010000000000000000000000000000000000000000000000000000000000000000000000000010000100000011000000000000000000000000000000000000000000000000000000000000111111111000000000","title_slug":"balanced-binary-tree","has_notes":false,"flag_type":1}