{"id":765679766,"question_id":57,"lang":"java","lang_name":"Java","time":"1 year, 10 months","timestamp":1659682260,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/765679766/","is_pending":"Not Pending","title":"Insert Interval","memory":"47.4 MB","code":"class Solution {\n    public int[][] insert(int[][] intervals, int[] newInterval) {\n\t\tList<int[]> result = new LinkedList<>();\n\t    int i = 0;\n\t    // add all the intervals ending before newInterval starts\n\t    while (i < intervals.length && intervals[i][1] < newInterval[0]){\n\t        result.add(intervals[i]);\n\t        i++;\n\t    }\n\t    \n\t    // merge all overlapping intervals to one considering newInterval\n\t    while (i < intervals.length && intervals[i][0] <= newInterval[1]) {\n\t    \t// we could mutate newInterval here also\n\t        newInterval[0] = Math.min(newInterval[0], intervals[i][0]);\n\t        newInterval[1] = Math.max(newInterval[1], intervals[i][1]);\n\t        i++;\n\t    }\n\t    \n\t    // add the union of intervals we got\n\t    result.add(newInterval); \n\t    \n\t    // add all the rest\n\t    while (i < intervals.length){\n\t    \tresult.add(intervals[i]); \n\t    \ti++;\n\t    }\n\t    \n\t    return result.toArray(new int[result.size()][]);\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"insert-interval","has_notes":false,"flag_type":1}