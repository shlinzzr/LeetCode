{"id":998116180,"question_id":1296,"lang":"java","lang_name":"Java","time":"10 months, 4 weeks","timestamp":1689739501,"status":10,"status_display":"Accepted","runtime":"79 ms","url":"/submissions/detail/998116180/","is_pending":"Not Pending","title":"Kth Ancestor of a Tree Node","memory":"79.4 MB","code":"class TreeAncestor {\n\n    int[][] jump;\n    int maxPow;\n\n    public TreeAncestor(int n, int[] parent) {\n        // log_base_2(n)\n        maxPow = (int) (Math.log(n) / Math.log(2)) + 1;\n        \n        jump = new int[maxPow][n];\n        jump[0] = parent;\n        for (int p = 1; p < maxPow; p++) {\n            \n            for (int j = 0; j < n; j++) {\n                int pre = jump[p - 1][j];\n                jump[p][j] = (pre==-1) ? -1 : jump[p - 1][pre];\n            }\n        }\n    }\n\n    public int getKthAncestor(int node, int k) {\n        int maxPow = this.maxPow;\n        while (k > 0 && node > -1) {\n            if (k >= (1<<maxPow) ) {\n                node = jump[maxPow][node];\n                k -= (1<<maxPow);\n            } else\n                maxPow -= 1;\n        }\n        \n        return node;\n    }\n}\n\n/**\n * Your TreeAncestor object will be instantiated and called as such:\n * TreeAncestor obj = new TreeAncestor(n, parent);\n * int param_1 = obj.getKthAncestor(node,k);\n */","compare_result":"11111111111111111","title_slug":"kth-ancestor-of-a-tree-node","has_notes":false,"flag_type":1}