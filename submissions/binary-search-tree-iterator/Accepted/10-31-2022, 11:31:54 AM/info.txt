{"id":833741813,"question_id":173,"lang":"java","lang_name":"Java","time":"1 year, 7 months","timestamp":1667187114,"status":10,"status_display":"Accepted","runtime":"46 ms","url":"/submissions/detail/833741813/","is_pending":"Not Pending","title":"Binary Search Tree Iterator","memory":"52.3 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass BSTIterator {\n\n    List<Integer> list;\n    int cur = 0;\n    \n    public BSTIterator(TreeNode root) {\n        list = new ArrayList<>();\n            \n        helper(root);\n        \n    }\n    \n    private void helper(TreeNode root){\n        \n        if(root!=null){\n            helper(root.left);\n            list.add(root.val);\n            helper(root.right);\n        }\n    }\n    \n    public int next() {\n        \n        return list.get(cur++);\n    }\n    \n    public boolean hasNext() {\n      \n        return cur<list.size();\n    }\n}\n\n/**\n * Your BSTIterator object will be instantiated and called as such:\n * BSTIterator obj = new BSTIterator(root);\n * int param_1 = obj.next();\n * boolean param_2 = obj.hasNext();\n */","compare_result":"1111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-search-tree-iterator","has_notes":false,"flag_type":1}