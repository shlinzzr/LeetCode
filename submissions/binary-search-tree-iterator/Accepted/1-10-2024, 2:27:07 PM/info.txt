{"id":1142142496,"question_id":173,"lang":"java","lang_name":"Java","time":"5Â months","timestamp":1704868027,"status":10,"status_display":"Accepted","runtime":"17 ms","url":"/submissions/detail/1142142496/","is_pending":"Not Pending","title":"Binary Search Tree Iterator","memory":"48.4 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass BSTIterator {\n    Map<Integer, TreeNode> map;\n    int idx= 0;\n    public BSTIterator(TreeNode root) {\n        map = new HashMap<>();\n        idx = 0;\n        helper(root);\n\n        \n    }\n\n    private void helper(TreeNode node ){\n        if(node ==null) return;\n        helper(node.left);\n        map.put(map.size(), node);\n        helper(node.right);\n    }\n    \n    public int next() {\n        return map.get(idx++).val;\n        \n    }\n    \n    public boolean hasNext() {\n\n        return idx < map.size();\n        \n    }\n}\n\n/**\n * Your BSTIterator object will be instantiated and called as such:\n * BSTIterator obj = new BSTIterator(root);\n * int param_1 = obj.next();\n * boolean param_2 = obj.hasNext();\n */","compare_result":"1111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-search-tree-iterator","has_notes":false,"flag_type":1}