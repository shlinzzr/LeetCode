{"id":997214138,"question_id":1831,"lang":"java","lang_name":"Java","time":"11Â months","timestamp":1689652269,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/997214138/","is_pending":"Not Pending","title":"Ways to Split Array Into Three Subarrays","memory":"N/A","code":"class Solution {\n    public int waysToSplit(int[] nums) {\n        int len = nums.length, res = 0;\n        \n        // create presum\n        for (int i = 1; i < len; ++i)\n            nums[i] += nums[i - 1]; \n        \n        for (int i = 0, j = 0, k = 0; i < len-2; ++i) {\n            \n            // find base j ==> presum[j]-presum[i] >= presum[i] ==> presum[j] >= 2*presum[i]\n            while (j <= i || (j < len-1 && nums[j] < nums[i] * 2))\n                ++j;\n            \n            //find base k\n            while (k < j || ( k < len && nums[k] - nums[i] <= nums[len - 1] - nums[k]))\n                ++k;\n            \n            res = (res + k - j) % 1000000007;\n        }    \n        return res;\n    }\n    \n    \n//     public int waysToSplit(int[] nums) {\n//          int len = nums.length;\n//         int res = 0;\n        \n//         int[] prefix = new int[len];\n        \n//         for(int i=0; i<len;i++){\n//             prefix[i] = (i>0)? prefix[i-1] : 0  + nums[i];\n//         }\n        \n//         for(int i=0; i<len; i++){\n//             //find max j\n//             int st = i+1; //1\n//             int ed = len-2; // 1\n            \n//             while(st<ed){\n                \n//                 int mid = st+(ed-st)/2; //1\n                \n//                 if(isOk(prefix, i, mid, len-1)){\n//                     st = mid;\n                    \n//                 }else{\n//                     ed= mid-1;\n//                 }\n//             }\n            \n//             if(isOk(prefix, i, st, ed))\n//                 res += st-i;\n//         }\n        \n//         return res;\n        \n        \n//     }\n    \n//     // 0 2 2\n//     private boolean isOk(int[] prefix, int i, int j, int k){\n//         return prefix[k]-prefix[j] >= prefix[j]-prefix[i];\n//     }\n    \n    \n    \n    \n//     XXX | X  X X X X X\n//       i   st   ^   ed\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111001111001101","title_slug":"ways-to-split-array-into-three-subarrays","has_notes":false,"flag_type":1}