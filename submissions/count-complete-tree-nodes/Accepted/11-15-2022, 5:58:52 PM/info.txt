{"id":843825599,"question_id":222,"lang":"java","lang_name":"Java","time":"1 year, 7 months","timestamp":1668506332,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/843825599/","is_pending":"Not Pending","title":"Count Complete Tree Nodes","memory":"45.5 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public int countNodes(TreeNode root) {\n        if(root == null) return 0;\n        \n        int left = getHeightLeft(root);\n        int right = getHeightRight(root);\n        \n        //If left and right are equal it means that the tree is complete and hence go for 2^h -1.\n        if(left == right) return ((2<<(left)) -1);\n            \n        //else recursively calculate the number of nodes in left and right and add 1 for root.\n        else return countNodes(root.left)+ countNodes(root.right)+1;\n    }\n    \n    \n    public int getHeightLeft(TreeNode root){\n        int count=0;\n        while(root.left!=null){\n            count++;\n            root = root.left;\n        }\n        return count;\n    }\n    \n    \n    public int getHeightRight(TreeNode root){\n        int count=0;\n        while(root.right!=null){\n            count++;\n            root = root.right;\n        }\n        return count;\n    }\n}","compare_result":"111111111111111111","title_slug":"count-complete-tree-nodes","has_notes":false,"flag_type":1}