{"id":843636354,"question_id":222,"lang":"java","lang_name":"Java","time":"1 year, 7 months","timestamp":1668481703,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/843636354/","is_pending":"Not Pending","title":"Count Complete Tree Nodes","memory":"50.3 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public int countNodes(TreeNode root) {\n        int h = 0;\n        TreeNode node = root;\n        while(node!=null){\n            node=node.left;\n            h++;\n        }\n        int lo = (int)Math.pow(Double.valueOf(2), Double.valueOf(h-1));\n        int hi = (int)Math.pow(Double.valueOf(2), Double.valueOf(h))-1;\n        \n        \n        while(lo<hi){\n            \n            int mid = lo + (hi-lo+1)/2;\n            if(hasK(root, mid)){\n                \n                lo = mid;\n            }else{\n                \n                hi = mid-1;\n            }\n        }\n        \n        return lo;\n    }\n    \n    \n    private boolean hasK(TreeNode root, int k){\n        \n        List<Integer> list = new ArrayList<>();\n        while(k>0){\n            list.add(k);\n            k/=2;\n        }\n        \n        for(int i=list.size()-1; i>=0; i--){\n            \n            if(root==null)\n                return false;\n            if(i==0)\n                return true;\n            \n            if(list.get(i)*2==list.get(i-1)){\n                root=root.left;\n            }else{\n                root=root.right;\n            }\n        }\n          return false;\n    }\n}","compare_result":"111111111111111111","title_slug":"count-complete-tree-nodes","has_notes":false,"flag_type":1}