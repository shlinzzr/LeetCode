{"id":993378676,"question_id":222,"lang":"java","lang_name":"Java","time":"11Â months","timestamp":1689242775,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/993378676/","is_pending":"Not Pending","title":"Count Complete Tree Nodes","memory":"45.8 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public int countNodes(TreeNode root) {\n       \n        if(root==null)\n            return 0;\n        \n        int st=0;\n        int ed=50000;\n        \n        while(st<ed){\n            \n            int mid = st+(ed-st+1)/2;\n            \n            if(hasK(root, mid)){\n                st = mid;\n            }else{\n                ed = mid-1;\n            }\n        }\n        \n        return st;\n        \n    }\n    \n    private boolean hasK(TreeNode root, int mid){\n    \n        List<Integer> list = new ArrayList<>();\n        while(mid>0){\n            list.add(0, mid);  // 1, 3, 6\n            // list.add(mid);  // 6, 3, 1\n            mid/=2;\n        }\n        \n//         TreeNode node = root; \n//         for(int i=0; i<list.size(); i++){\n            \n//             if(node==null) return false;\n//             if(i==list.size()-1) return true;\n                \n            \n//             if(2*list.get(i)==list.get(i+1)){\n//                 node = node.left;\n//             }else{\n//                 node = node.right;   // 2*list.get(i)==list.get(i+1)+1\n//             }\n//         }\n        // return false;\n        \n        \n        \n        TreeNode node = root;\n        for(int i=0; i<list.size(); i++){\n\n            int curr = list.get(i);\n            \n            \n            \n            if(node==null)   return false;\n            if(i==list.size()-1) return true;\n            \n            // if(node.val!=curr)\n            //     return false;\n            \n            int next = list.get(i+1);\n            \n            if(next == 2*curr){\n                node = node.left;\n            }else if(next == 2*curr+1){\n                node= node.right;\n            }else{\n                return false;\n            }\n        }\n        \n        return false;\n    }\n    \n    \n    \n    \n    \n}\n\n","compare_result":"111111111111111111","title_slug":"count-complete-tree-nodes","has_notes":false,"flag_type":1}