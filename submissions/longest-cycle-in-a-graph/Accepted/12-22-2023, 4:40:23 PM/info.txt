{"id":1125729195,"question_id":2439,"lang":"java","lang_name":"Java","time":"5 months, 3 weeks","timestamp":1703234423,"status":10,"status_display":"Accepted","runtime":"75 ms","url":"/submissions/detail/1125729195/","is_pending":"Not Pending","title":"Longest Cycle in a Graph","memory":"62.5 MB","code":"class Solution {\n    public int longestCycle(int[] edges) {\n        int len = edges.length;\n\n        int[] indeg = new int[len];\n\n        for(int i=0; i<len ;i++){\n            if(edges[i]!=-1)\n                indeg[edges[i]]++;\n        }\n        Set<Integer> seen = new HashSet<>();\n        Queue<Integer> q = new LinkedList<>();\n        for(int i=0; i<len; i++){\n            if(indeg[i]==0) {\n                q.offer(i);\n                seen.add(i);\n            }\n        }\n\n\n        while(!q.isEmpty()){\n\n            int p = q.poll();\n            if(edges[p]==-1) continue;\n            indeg[edges[p]]--;\n\n            if(indeg[edges[p]]==0){\n                q.offer(edges[p]);\n                seen.add(edges[p]);\n            }\n        }\n\n        int max= -1;\n        for(int i=0; i<len; i++){\n            if(seen.contains(i)) continue;\n            int cur = i ;\n            int cnt = 0 ;\n            while(!seen.contains(cur)){\n                seen.add(cur);\n                cnt++;\n                cur=edges[cur];\n            }\n\n             System.out.println(i+ \" \" + cnt);\n\n            max = Math.max(max, cnt);\n\n        }\n        return max;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-cycle-in-a-graph","has_notes":false,"flag_type":1}