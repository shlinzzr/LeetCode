{"id":1078950333,"question_id":210,"lang":"java","lang_name":"Java","time":"7 months, 3 weeks","timestamp":1697695668,"status":10,"status_display":"Accepted","runtime":"7 ms","url":"/submissions/detail/1078950333/","is_pending":"Not Pending","title":"Course Schedule II","memory":"44.7 MB","code":"class Solution {\n    public int[] findOrder(int numCourses, int[][] prerequisites) {\n        HashMap<Integer, List<Integer>> map = new HashMap<>();\n        int[] indeg = new int[numCourses];\n        for(int[] pre : prerequisites){\n            map.putIfAbsent(pre[1], new ArrayList<>());\n            map.get(pre[1]).add(pre[0]);\n            indeg[pre[0]]++;\n        }\n\n        List<Integer> list = new ArrayList<>();\n\n        Queue<Integer> q = new LinkedList<>();\n        for(int i=0; i<numCourses; i++){\n            if(indeg[i]==0){\n                q.offer(i);\n                indeg[i]=-1;\n            }\n                \n        }\n        \n        while(!q.isEmpty()){\n\n            int p = q.poll();\n            list.add(p);\n            List<Integer> next = map.getOrDefault(p, new ArrayList<>());\n            for(int n : next){\n                indeg[n]--;\n\n                if(indeg[n]==0)\n                    q.offer(n);\n            }\n        }\n        \n\n        if(list.size()< numCourses)\n            return new int[0];\n\n        int[] res = new int[numCourses];\n        for(int i=0;i<numCourses; i++){\n            res[i] = list.get(i);\n        }\n\n\n        return res;\n\n    }\n}","compare_result":"111111111111111111111111111111111111111111111","title_slug":"course-schedule-ii","has_notes":false,"flag_type":1}