{"id":809696596,"question_id":210,"lang":"java","lang_name":"Java","time":"1 year, 8 months","timestamp":1664271610,"status":10,"status_display":"Accepted","runtime":"21 ms","url":"/submissions/detail/809696596/","is_pending":"Not Pending","title":"Course Schedule II","memory":"49.9 MB","code":"class Solution {\n    public int[] findOrder(int numCourses, int[][] prerequisites) {\n        int[] indegree = new int[numCourses];\n        HashMap<Integer, List<Integer>> map = new HashMap<>();\n        \n        for(int[] pre :prerequisites){\n            \n            List<Integer> list = map.getOrDefault(pre[1], new ArrayList<>());\n            list.add(pre[0]);\n            map.put(pre[1], list);\n            \n            indegree[pre[0]]++;\n        }\n        \n        int[] res = new int[numCourses];\n        \n        \n        Queue<Integer> queue = new LinkedList<>();\n        for(int i=0; i<indegree.length; i++){\n            if(indegree[i]==0)\n                queue.add(i);\n        }\n    \n        int idx=0;\n        while(!queue.isEmpty()){\n            int p = queue.poll();\n            List<Integer> list = map.get(p);\n            \n            if(list!=null){\n                for(int i : list){\n                    indegree[i]--;\n\n                    if(indegree[i]==0)\n                        queue.add(i);\n                }\n            }\n            \n            \n            res[idx]=p;\n            idx++;\n        }\n        \n        \n        for(int i=0; i<indegree.length; i++){\n              if(indegree[i]>0)\n                  return new int[0];\n        }\n        \n            \n        return res;\n        \n        \n        \n        \n    }\n}","compare_result":"111111111111111111111111111111111111111111111","title_slug":"course-schedule-ii","has_notes":false,"flag_type":1}