{"id":997369084,"question_id":2018,"lang":"java","lang_name":"Java","time":"11 months","timestamp":1689666394,"status":10,"status_display":"Accepted","runtime":"85 ms","url":"/submissions/detail/997369084/","is_pending":"Not Pending","title":"Minimum Space Wasted From Packaging","memory":"62.2 MB","code":"class Solution {\n    public int minWastedSpace(int[] packages, int[][] boxes) {\n        \n        // T(logN * K * M) == O(lgN) * KM < 10^10\n        // tricky part is sum(boxes[j].length) === O(KM) \n        long inf = (long)1e11;\n        long total=0, mod = (long)1e9 + 7;\n        Arrays.sort(packages);\n        for(int p : packages){\n            total+=p;\n        }\n        \n        \n        \n        long min = inf;\n        \n        for(int[] arr : boxes){\n            Arrays.sort(arr);\n            \n            if(arr[arr.length-1] < packages[packages.length-1]) //如果最大的箱子都裝不下最大的包裹 那這組供應商就不看了\n                continue;\n            \n            long cur = 0, st=0, ed=0;\n            for(int b : arr){\n                \n                if(st>=packages.length || b<packages[(int)st]) //包裹已經選完 或 此箱子根本裝不下目前的下一件包裹\n                    continue;\n                \n                ed = binarySearch(packages, b);\n                cur += b * (ed-st+1);\n                st = ed+1;\n            }\n           \n            min = Math.min(min , cur);\n        }\n        \n        return min < inf ? (int)((min - total) % mod) : -1; \n        \n    }\n    \n    private int binarySearch(int[] packages, int b){\n        \n        int st=0, ed=packages.length-1;\n        \n        while(st<ed){\n            \n            int m = (st+ed+1)/2;\n            if(packages[m]<=b){\n                st=m;\n            }else{\n                ed=m-1;\n            }\n        }\n        \n        return st;\n        \n        \n        \n    }\n    \n}","compare_result":"111111111111111111111111111111111111111111","title_slug":"minimum-space-wasted-from-packaging","has_notes":false,"flag_type":1}