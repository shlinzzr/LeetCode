// https://leetcode.com/problems/minimize-malware-spread

class Solution {

    int[] parent;
    int[] weight;

    public int minMalwareSpread(int[][] graph, int[] initial) {
        int n = graph.length;
        weight = new int[n];
        Arrays.fill(weight, 1);
        parent = new int[n];
        for(int i=0; i<n; i++){
            parent[i] = i;
        }

        for(int i=0; i<n; i++){
            for(int j=0; j<n; j++){
                if(graph[i][j]==1){
                    union(i, j);
                }
            }
        }

        int[] cnt = new int[n];
        Arrays.sort(initial);
        for(int i : initial){
            cnt[find(i)]++;
        }


        int max = 0;
        int res= initial[0] ;
        for(int i : initial){
            int root = find(i);

            if(cnt[root]==1 && weight[root]>max){
                max = weight[root];
                res = i;
            }
        }


        //     if(weight[root]>max){
        //         max = weight[root];
        //         res = i;
        //     }else if(weight[root]==max){
        //         if(i<res){
        //             res = i;
        //         }
        //     }
        // }

        return res;

    }

    private int find(int x){
        if(parent[x]!=x) parent[x] = find(parent[x]);
        return parent[x];
    }

    private void union(int a, int b){
        a= find(a);
        b= find(b);
        if(a==b) return ;



        // if(weight[a]==weight[b]){
            if(a<b){
                parent[b] = a;
                weight[a] += weight[b];
            }else{
                parent[a] = b;
                weight[b] += weight[a];
            }
        // }else if(weight[a]>weight[b]){
        //     parent[b] = a;
        //     weight[a] += weight[b];

        // }else{
        //     parent[a] = b;
        //     weight[b] += weight[a];
        // }
    }
}