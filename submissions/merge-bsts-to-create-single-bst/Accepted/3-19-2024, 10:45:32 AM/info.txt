{"id":1207781520,"question_id":2060,"lang":"java","lang_name":"Java","time":"2 months, 3 weeks","timestamp":1710816332,"status":10,"status_display":"Accepted","runtime":"38 ms","url":"/submissions/detail/1207781520/","is_pending":"Not Pending","title":"Merge BSTs to Create Single BST","memory":"71.9 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public TreeNode canMerge(List<TreeNode> trees) {\n        int n = trees.size();\n\n        //Collect the leaves\n        Set<Integer> leaves = new HashSet();\n         Map<Integer, TreeNode> map = new HashMap<>(); \n        for(TreeNode tree : trees) {\n             map.put(tree.val, tree);\n            if(tree.left != null) {\n                leaves.add(tree.left.val);\n            }\n            if(tree.right != null) {\n                leaves.add(tree.right.val);\n            }\n        }\n        \n        //Decide the root of the resulting tree\n        TreeNode result = null;\n        for(TreeNode tree : trees) {\n            if(!leaves.contains(tree.val) ) {\n                result = tree;\n                break;\n            }\n        }\n        if(result == null) {\n            return null;\n        }\n        \n        return traverse(result, map, Integer.MIN_VALUE, Integer.MAX_VALUE) && map.size() == 1 ? result : null;\n    }\n    \n    private boolean traverse(TreeNode root, Map<Integer, TreeNode> map, int min, int max) {\n        if(root == null) return true;\n        if(root.val <= min || root.val >= max) return false;\n        \n        if(root.left == null && root.right == null) {\n            if(map.containsKey(root.val) && root != map.get(root.val)) {\n                TreeNode next = map.get(root.val);\n                root.left = next.left;\n                root.right = next.right;\n                map.remove(root.val);\n            }\n        }\n        return traverse(root.left, map, min, root.val) && traverse(root.right, map, root.val, max);\n    }\n        \n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"merge-bsts-to-create-single-bst","has_notes":false,"flag_type":1}