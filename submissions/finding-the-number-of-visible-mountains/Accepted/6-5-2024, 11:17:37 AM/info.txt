{"id":1278021007,"question_id":2485,"lang":"java","lang_name":"Java","time":"1Â week","timestamp":1717557457,"status":10,"status_display":"Accepted","runtime":"27 ms","url":"/submissions/detail/1278021007/","is_pending":"Not Pending","title":"Finding the Number of Visible Mountains","memory":"93.4 MB","code":"class Solution {\n    public int visibleMountains(int[][] peaks) {\n\n        if(peaks.length==1) return 1;\n\n        for(int[] p : peaks){\n             int x1 = p[0]-p[1];\n             int x2 = p[0]+p[1];\n             p[0]=x1;\n             p[1]=x2;\n        }\n\n        Arrays.sort(peaks, (a,b)->a[0]!=b[0] ? a[0]-b[0] : b[1]-a[1]);\n\n        int len = peaks.length;\n        \n\n        int[] prev =peaks[0];\n        int[] curr =peaks[1];\n\n        int cnt = prev[0]==curr[0] && prev[1]==curr[1] ? 0 : 1;\n        int maxRight = prev[1];\n        \n        for(int i=1; i<len; i++){\n            curr = peaks[i];\n            if(curr[1] <= maxRight) continue;\n            maxRight = curr[1];\n            if(i==len-1 || curr[0]!=peaks[i+1][0] || maxRight!=peaks[i+1][1]) cnt++;\n           \n        }\n        return cnt;\n\n\n\n\n        \n        // sweep line\n        // TreeMap<Integer, Integer> map = new TreeMap<>(); // x, agg\n        // for(int[] p : peaks){\n\n        //      int x1 = p[0]-p[1];\n        //      int x2 = p[0]+p[1];\n        //      map.put(x1, map.getOrDefault(x1, 0)+1);\n        //      map.put(x2+1, map.getOrDefault(x2+1, 0)-1);\n             \n        // }\n\n        // int curr = map.firstKey();\n        // int sum = 0 ;\n        // int res =0 ;\n        // for(int x : map.keySet()){\n        //     int v = map.get(x);\n        //     if(v>0)\n        //         res++;\n        // }\n        \n\n\n\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111","title_slug":"finding-the-number-of-visible-mountains","has_notes":false,"flag_type":1}