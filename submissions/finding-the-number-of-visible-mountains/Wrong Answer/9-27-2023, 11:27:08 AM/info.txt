{"id":1060189316,"question_id":2485,"lang":"java","lang_name":"Java","time":"8 months, 2 weeks","timestamp":1695785228,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1060189316/","is_pending":"Not Pending","title":"Finding the Number of Visible Mountains","memory":"N/A","code":"class Solution {\n    public int visibleMountains(int [][] peaks){\n\n\n        // making peaks into left, right => peaks[0] =left, peaks[1]=right\n        for(int i = 0; i < peaks.length; i ++){\n            int temp = peaks[i][0];\n            peaks[i][0] -= peaks[i][1];\n            peaks[i][1] += temp;\n        }\n        \n        Arrays.sort(peaks, (a,b)-> a[0]!=b[0] ? a[0]-b[0] : b[1]-a[1]);\n\n        int res = 0;\n        int i = 0;\n        while(i < peaks.length){\n            res ++;\n            if(i + 1 == peaks.length){\n                return res;\n            } \n            int currEnd = peaks[i][1]; // right\n            if(peaks[i][0] == peaks[i + 1][0]){ //  if(left== next.left) no matter how h is, res will decrease\n                res --;\n            }\n            while(i + 1 != peaks.length && currEnd >= peaks[i + 1][1]){  // while (curr.right >= next.right)\n                i++;\n            }\n            i++;\n        }\n        return res;\n    }\n    \n}","compare_result":"111101100000011001101011011000010000000011111111","title_slug":"finding-the-number-of-visible-mountains","has_notes":false,"flag_type":1}