{"id":1277999280,"question_id":2485,"lang":"java","lang_name":"Java","time":"1 week, 1 day","timestamp":1717555182,"status":20,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/1277999280/","is_pending":"Not Pending","title":"Finding the Number of Visible Mountains","memory":"N/A","code":"class Solution {\n    public int visibleMountains(int[][] peaks) {\n\n        for(int[] p : peaks){\n             int x1 = p[0]-p[1];\n             int x2 = p[0]+p[1];\n             p[0]=x1;\n             p[1]=x2;\n        }\n\n        Arrays.sort(peaks, (a,b)->a[0]!=b[0] ? a[0]-b[0] : a[1]-b[1]);\n\n        int[] prev =peaks[0];\n        int len = peaks.length;\n        for(int i=1; i<len; i++){\n            int[] curr = peaks[i];\n\n            if(prev[1]<=curr[0]){\n                prev= curr;\n                cnt++;\n                continue;\n            }\n\n\n            if(prev[0]==curr[0]&&  prev[1]<curr[1]){\n                prev = curr;\n\n            }else if(prev[0] < curr[0] && prev[1]<curr[1]){\n                cnt++;\n                prev[0] = Math.min(prev[0], curr[0]);\n                prev[1] = Math.max(prev[1], curr[1]);\n            }\n        }\n\n        return cnt-1;\n\n\n\n        \n        // sweep line\n        // TreeMap<Integer, Integer> map = new TreeMap<>(); // x, agg\n        // for(int[] p : peaks){\n\n        //      int x1 = p[0]-p[1];\n        //      int x2 = p[0]+p[1];\n        //      map.put(x1, map.getOrDefault(x1, 0)+1);\n        //      map.put(x2+1, map.getOrDefault(x2+1, 0)-1);\n             \n        // }\n\n        // int curr = map.firstKey();\n        // int sum = 0 ;\n        // int res =0 ;\n        // for(int x : map.keySet()){\n        //     int v = map.get(x);\n        //     if(v>0)\n        //         res++;\n        // }\n        \n\n\n\n    }\n}","compare_result":null,"title_slug":"finding-the-number-of-visible-mountains","has_notes":false,"flag_type":1}