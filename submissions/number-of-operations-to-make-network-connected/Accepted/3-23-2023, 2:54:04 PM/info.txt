{"id":920565253,"question_id":1442,"lang":"java","lang_name":"Java","time":"1 year, 2 months","timestamp":1679554444,"status":10,"status_display":"Accepted","runtime":"6 ms","url":"/submissions/detail/920565253/","is_pending":"Not Pending","title":"Number of Operations to Make Network Connected","memory":"55.7 MB","code":"class Solution {\n    \n    class UnionFind{\n        \n        int[] parent;\n        \n        public UnionFind(int n ){\n            parent = new int[n];\n            \n            for(int i=0; i<n; i++){\n                parent[i] = i;\n            }\n        }\n        \n        public int find(int x){\n            if(parent[x]!=x)\n                parent[x] = find(parent[x]);\n            return parent[x];\n        }\n        \n        public void union(int a, int b){\n            \n            a= find(a);\n            b= find(b);\n            \n            if(a==b)\n                return;\n            else{\n                if(a<b){\n                    parent[b] = a;\n                }else{\n                    parent[a]=b;\n                }\n            }\n        }\n        \n    }\n    \n    \n    public int makeConnected(int n, int[][] connections) {\n        \n        UnionFind uf = new UnionFind(n);\n        \n        int len = connections.length;\n        \n        if(len<n-1)\n            return -1;\n        \n        int cnt=n;\n        for(int i=0; i<len; i++){\n            int[] con = connections[i];\n            \n            int a = con[0];\n            int b = con[1];\n            \n            if(uf.find(a)!=uf.find(b)){\n                uf.union(a, b);\n                cnt--;\n            }\n        }\n        \n        // for(int i=0; i<n; i++){\n        //     if(uf.find(i)!=uf.find(0))\n        //         cnt++;\n        // }\n        \n        return cnt-1;\n    }\n}","compare_result":"111111111111111111111111111111111111","title_slug":"number-of-operations-to-make-network-connected","has_notes":false,"flag_type":1}