{"id":1093288828,"question_id":2229,"lang":"java","lang_name":"Java","time":"7 months, 1 week","timestamp":1699327994,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/1093288828/","is_pending":"Not Pending","title":"Maximum Fruits Harvested After at Most K Steps","memory":"96.8 MB","code":"class Solution {\n    public int maxTotalFruits(int[][] fruits, int startPos, int k) {\n        int len = fruits.length;\n\n        int st=0, sum=0, max=0;\n\n        while(st<len && fruits[st][0]<startPos-k){\n            st++;\n        }\n\n\n       // 2*(pos-st) + (ed-pos) >k\n       // => pos - 2*st + ed\n        //              st       startPos        ed\n        // |------------|----------^-------------|-------|\n        //               <---------\n        //.              ----------------------->          \n\n\n        // 2*(ed-pos) + pos -st\n        // =>  2*ed -st - pos\n        //              st       startPos        ed\n        // |------------|----------^-------------|-------|\n        //                          ------------>\n        //.              <-----------------------          \n\n\n        for(int ed=st; ed<len && fruits[ed][0]<=startPos+k; ed++){\n            sum += fruits[ed][1];\n            while(Math.min(startPos - 2*fruits[st][0] + fruits[ed][0], 2*fruits[ed][0]-fruits[st][0] - startPos) > k){\n                sum -= fruits[st++][1];\n            }\n            max = Math.max(max, sum);\n        }\n\n        return max;\n        \n        \n        \n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-fruits-harvested-after-at-most-k-steps","has_notes":false,"flag_type":1}