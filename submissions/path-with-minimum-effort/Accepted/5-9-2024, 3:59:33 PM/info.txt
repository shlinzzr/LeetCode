{"id":1253362461,"question_id":1753,"lang":"java","lang_name":"Java","time":"1 month","timestamp":1715241573,"status":10,"status_display":"Accepted","runtime":"2439 ms","url":"/submissions/detail/1253362461/","is_pending":"Not Pending","title":"Path With Minimum Effort","memory":"87.8 MB","code":"class Solution {\r\n    public int minimumEffortPath(int[][] heights) {\r\n        int h= heights.length;\r\n        int w = heights[0].length;\r\n\r\n        int[][] cost = new int[h][w];\r\n        for(int i=0; i<h; i++){\r\n            Arrays.fill(cost[i], Integer.MAX_VALUE);\r\n        }\r\n        // bfs :所有路線 都出來了\r\n\r\n        // Queue<int[]> q = new LinkedList<>(); // i, j, cost, res\r\n        PriorityQueue<int[]> q = new PriorityQueue<>(\r\n            (a,b)->a[3]-b[3]\r\n        ); // i, j, cost, res\r\n        q.offer(new int[]{0, 0, 0, 0});\r\n\r\n        int[][] dirs = new int[][]{{0,1}, {1,0},{0,-1},{-1,0}};\r\n        int res = Integer.MAX_VALUE;\r\n        while(!q.isEmpty()){\r\n\r\n            int[] p = q.poll();\r\n            cost[p[0]][p[1]] = p[2];\r\n\r\n            if(p[0]==h-1 && p[1]==w-1){\r\n                res = Math.min(res, p[3]);\r\n                return res;\r\n            }\r\n\r\n            for(int[] d : dirs){\r\n                int r = p[0] + d[0];\r\n                int c = p[1] + d[1];\r\n                if(r<0 || c<0 || r>=h || c>=w) continue;\r\n\r\n                int diff = Math.abs(heights[r][c]-heights[p[0]][p[1]]);\r\n                if(cost[r][c]<=p[2]+diff) continue;\r\n\r\n                q.offer(new int[]{r,c, p[2]+diff, Math.max(diff, p[3])});\r\n\r\n            }\r\n        }\r\n\r\n        return res;\r\n\r\n        \r\n    }\r\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"path-with-minimum-effort","has_notes":false,"flag_type":1}