{"id":1024479956,"question_id":3001,"lang":"java","lang_name":"Java","time":"10Â months","timestamp":1692327382,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1024479956/","is_pending":"Not Pending","title":"Apply Operations to Maximize Score","memory":"N/A","code":"class Solution {\n    \n    int M = (int) 1e9+7;\n    \n    public int maximumScore(List<Integer> nums, int k) {\n        int len = nums.size();\n        \n        int max = 0;\n        for(int n: nums){\n            max = Math.max(max, n);\n        }\n        int[] distinctPrimeFactors = sieveOfEratosthenes(max);\n        \n        long[] scores = new long[len];\n        for(int i=0; i<len; i++){\n            scores[i] = distinctPrimeFactors[nums.get(i)];\n        }\n        \n        int[] prevLarger = new int[len];\n        Arrays.fill(prevLarger, -1);\n        \n        Stack<Integer> st = new Stack<>();\n        for(int i=0; i<len; i++){\n            \n            while(!st.isEmpty() && scores[st.peek()] < scores[i]){\n                st.pop();\n            }\n            if(!st.isEmpty())\n                prevLarger[i] = st.peek();\n            st.push(i);\n        }\n        \n        int[] nextLarger = new int[len];\n        Arrays.fill(nextLarger, len);\n        \n        \n        st.clear();\n        for(int i=len-1; i>=0; i--){\n            \n            while(!st.isEmpty() && scores[st.peek()]<=scores[i]){\n                st.pop();\n            }\n            if(!st.isEmpty())\n                nextLarger[i] = st.peek();\n            st.push(i);\n        }\n        \n        \n        \n        Tuple[] temp = new Tuple[len];\n        for(int i=0;i<len; i++){\n            long t = (long)(i-prevLarger[i]+1)*(nextLarger[i]-i+1);\n            temp[i] = new Tuple(nums.get(i), t);\n        }\n        \n        \n        Arrays.sort(temp, (a,b)-> Long.compare(b.n, a.n));\n        \n        \n        long res = 1;\n        for(Tuple tmp : temp){\n            \n            long n = tmp.n;\n            long t = tmp.t;\n            \n            if((long)k >= t){\n                res = res * quickMul(n, t)%M;\n                k-=t;\n            }else{\n                res = res * quickMul(n, k)%M;\n                k=0;\n            }\n            \n            if(k==0)\n                break;\n        }\n        \n        return (int)res;\n        \n    }\n    \n    class Tuple{\n        long n;\n        long t;\n        public Tuple(long n, long t){\n            this.n=n;\n            this.t=t;\n        }\n    }\n    \n    private long quickMul(long x, long n){   \n        if (n == 0) {\n            return 1;\n        }\n        \n        long y = quickMul(x, n / 2) % M;\n        \n        return n % 2 == 0 ? (y * y % M) : (y * y % M * x % M);\n    }\n    \n    \n    \n    public int[] sieveOfEratosthenes(int n) {\n    \n        int[] factors = new int[n+1];\n        for (int i=2; i<=n; i++){\n            if (factors[i]>0) \n                continue;\n            \n            factors[i] = 1;\n            for(int j=i*2; j<=n; j+=i){\n                factors[i]++;\n            }\n        }        \n        return factors;\n    }\n}","compare_resulttitle_slug":"apply-operations-to-maximize-score","has_notes":false,"flag_type":1}