{"id":1019838170,"question_id":3001,"lang":"java","lang_name":"Java","time":"10Â months","timestamp":1691899212,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1019838170/","is_pending":"Not Pending","title":"Apply Operations to Maximize Score","memory":"N/A","code":"class Solution {\n    public int maximumScore(List<Integer> nums, int k) {\n        int siz = nums.size();\n        \n        int M = (int) 1e9+7;\n        \n        List<Integer> prime_score = new ArrayList<>();\n\n        PriorityQueue<int[]> pq = new PriorityQueue<>(\n            (a,b) -> (Integer.compare(b[0],a[0])==0?  Integer.compare(a[2],b[2]) : Integer.compare(b[0],a[0]))\n        );\n        \n        \n        for(int i=0; i<siz; i++){\n            int n = nums.get(i);\n            List<Integer> list = sieveOfEratosthenes(n);\n            \n            int cnt = 0;\n            for(int j=0; j<list.size(); j++){\n                \n                if(n%list.get(j)==0)\n                    cnt++;\n            }\n            prime_score.add(cnt);\n            \n            // System.out.println(i + \" \"  + list.toString());\n            \n            pq.offer(new int[]{n%M, cnt, i}); // val, primescore, idx\n        }\n        \n        HashSet<String> set = new HashSet<>();\n        \n        \n        long score = 1;\n        \n        while(k>0 && !pq.isEmpty()){\n            \n            int[] p = pq.poll();\n            int n=p[0];\n            int ps=p[1];\n            int idx = p[2];\n            \n             // System.out.println(\"ps=\"+ps);\n            \n            for(int i=idx; i<siz && prime_score.get(i)<=ps && !set.contains(idx+\"_\"+i) && k>0; i++){\n                \n                set.add(idx+\"_\"+i);\n                // System.out.println(idx+\"_\"+i + \"   \" + \"prime_score.get(i)=\"+prime_score.get(i));\n                \n                \n                // n = nums.get(i);\n                \n                score =  (score%M *n%M)%M;\n                \n                k--;\n            }\n            \n            \n        }\n        \n        return (int)score;\n        \n\n        \n        \n            \n        \n        \n    }\n    \n    \n       public List<Integer> sieveOfEratosthenes(int n) {\n        List<Integer> result = new ArrayList<>();\n        boolean[] primes = new boolean[n + 1];\n        Arrays.fill(primes, true);\n        primes[0]=false;\n        primes[1]=false;\n          \n        for (int i = 2; i*i <= n; i++) {\n            if (primes[i]) {\n                for (int j = 2*i; j <= n; j += i) {\n                    primes[j] = false;\n                }\n            }\n        }\n        for (int i = 2; i <= n; i++) {\n            if (primes[i]) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}","compare_resulttitle_slug":"apply-operations-to-maximize-score","has_notes":false,"flag_type":1}