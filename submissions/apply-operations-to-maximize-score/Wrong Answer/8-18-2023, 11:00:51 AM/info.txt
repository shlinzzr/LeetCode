{"id":1024482160,"question_id":3001,"lang":"java","lang_name":"Java","time":"10Â months","timestamp":1692327651,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1024482160/","is_pending":"Not Pending","title":"Apply Operations to Maximize Score","memory":"N/A","code":"class Solution {\n    \n    int M = (int) 1e9+7;\n    \n    public int maximumScore(List<Integer> nums, int k) {\n        int len = nums.size();\n        \n        int max = 0;\n        for(int n: nums){\n            max = Math.max(max, n);\n        }\n        int[] distinctPrimeFactors = sieveOfEratosthenes(max);\n        \n        long[] scores = new long[len];\n        for(int i=0; i<len; i++){\n            scores[i] = distinctPrimeFactors[nums.get(i)];\n        }\n        \n        int[] prevLarger = new int[len];\n        Arrays.fill(prevLarger, -1);\n        \n        Stack<Integer> st = new Stack<>();\n        for(int i=0; i<len; i++){\n            \n            while(!st.isEmpty() && scores[st.peek()] < scores[i]){\n                st.pop();\n            }\n            if(!st.isEmpty())\n                prevLarger[i] = st.peek();\n            st.push(i);\n        }\n        \n        int[] nextLarger = new int[len];\n        Arrays.fill(nextLarger, len);\n        \n        \n        st.clear();\n        for(int i=len-1; i>=0; i--){\n            \n            while(!st.isEmpty() && scores[st.peek()]<=scores[i]){\n                st.pop();\n            }\n            if(!st.isEmpty())\n                nextLarger[i] = st.peek();\n            st.push(i);\n        }\n        \n        \n        \n        Tuple[] temp = new Tuple[len];\n        for(int i=0;i<len; i++){\n            long t = (long)(i-prevLarger[i])*(nextLarger[i]-i);\n            temp[i] = new Tuple(nums.get(i), t);\n        }\n        \n        \n        Arrays.sort(temp, (a,b)-> Long.compare(quickMul(b.n, b.t), quickMul(a.n, a.t)));\n        \n        \n        long res = 1;\n        for(Tuple tmp : temp){\n            \n            long n = tmp.n;\n            long t = tmp.t;\n            \n            if((long)k >= t){\n                res = res * quickMul(n, t)%M;\n                k-=t;\n            }else{\n                res = res * quickMul(n, k)%M;\n                k=0;\n            }\n            \n            if(k==0)\n                break;\n        }\n        \n        return (int)res;\n        \n    }\n    \n    class Tuple{\n        long n;\n        long t;\n        public Tuple(long n, long t){\n            this.n=n;\n            this.t=t;\n        }\n    }\n    \n    private long quickMul(long x, long n){   \n        if (n == 0) {\n            return 1;\n        }\n        \n        long y = quickMul(x, n / 2) % M;\n        \n        return n % 2 == 0 ? (y * y % M) : (y * y % M * x % M);\n    }\n    \n    \n    \n    public int[] sieveOfEratosthenes(int n) {\n    \n        int[] factors = new int[n+1];\n        for (int i=2; i<=n; i++){\n            if (factors[i]>0) \n                continue;\n            \n            factors[i] = 1;\n            for(int j=i*2; j<=n; j+=i){\n                factors[i]++;\n            }\n        }        \n        return factors;\n    }\n}","compare_result":"00000110100100101010000100100001100000101000011000100011010101110111010010000011001001000100000110100000001100010000000010000011000000000000000000100010101110010000100011101001110000000001000001100000000000001100000101000001100110001001001001011000000000011010011000111000010011101000110000000110011100001100010100001000000010001001010100101000100010000001010000000001001000001011000110010011100001100010011101000100000010111000110110101100001000000000001001000100000110011001010001110000001000100001000100001100001100110001000110100010010010010001100010110000100100100101010110110001000110001010001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010","title_slug":"apply-operations-to-maximize-score","has_notes":false,"flag_type":1}