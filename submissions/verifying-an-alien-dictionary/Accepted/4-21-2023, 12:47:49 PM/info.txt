{"id":937241972,"question_id":990,"lang":"java","lang_name":"Java","time":"1 year, 1 month","timestamp":1682052469,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/937241972/","is_pending":"Not Pending","title":"Verifying an Alien Dictionary","memory":"41.3 MB","code":"class Solution {\n    public boolean isAlienSorted(String[] words, String order) {\n        int len = words.length;\n        \n        for(int i=0; i<len-1; i++){\n            for(int j=i+1; j<len; j++){\n                \n                int wli = words[i].length();\n                int wlj = words[j].length();\n                \n                \n                if(wli>wlj && words[i].indexOf(words[j])!=-1)\n                    return false;\n                \n                int wl = Math.min(wli, wlj);\n                \n                for(int w=0; w<wl; w++){\n                    \n                    char ci = words[i].charAt(w);\n                    char cj = words[j].charAt(w);\n                    \n                    if(order.indexOf(ci)<order.indexOf(cj)){\n                        break;\n                    }\n                    \n                    \n                    if(order.indexOf(ci)>order.indexOf(cj))\n                        return false;\n                }\n            }\n        }\n        \n        return true;\n    \n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"verifying-an-alien-dictionary","has_notes":false,"flag_type":1}