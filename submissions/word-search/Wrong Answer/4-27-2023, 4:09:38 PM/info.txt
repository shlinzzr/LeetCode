{"id":940490402,"question_id":79,"lang":"java","lang_name":"Java","time":"1 year, 1 month","timestamp":1682582978,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/940490402/","is_pending":"Not Pending","title":"Word Search","memory":"N/A","code":"class Solution {\n    public boolean exist(char[][] board, String word) {\n        int h = board.length;\n        int w = board[0].length;\n        \n        Queue<int[]> q= new LinkedList<>();\n        for(int i=0; i<h;i++){\n            for(int j=0; j<w; j++){\n                \n                if(board[i][j]==word.charAt(0)){\n                    \n                    boolean res = dfs(board, word, 0, i, j, new boolean[h][w]);\n                    if(res)\n                        return true;\n                }\n            }\n        }\n        \n        return false;\n         \n    }\n    \n    int[][]dirs = new int[][]{{0,1},{0,-1}, {1,0},{-1,0}};\n    private boolean dfs(char[][]board, String word, int idx, int i, int j, boolean[][] seen){\n          int h = board.length;\n        int w = board[0].length;\n        \n        if(idx==word.length()-1){\n            return true;\n        }\n        seen[i][j]=true;\n        \n        for(int[] d: dirs){\n            int r = i+d[0];\n            int c = j+d[1];\n            \n            if(r<0 || c<0 || r>=h || c>=w || seen[r][c] || board[r][c]!=word.charAt(idx+1))\n                continue;\n            \n            seen[r][c] = true;\n            \n            boolean res = dfs(board, word, idx+1, r, c, seen);\n            if(res)\n                return true;\n        }\n        \n        return false;\n    }\n}","compare_result":"1111111111111111111111111111001111111111111111111011111110111111011101111111101011111","title_slug":"word-search","has_notes":false,"flag_type":1}