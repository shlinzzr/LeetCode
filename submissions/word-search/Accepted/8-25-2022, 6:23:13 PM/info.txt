{"id":782973342,"question_id":79,"lang":"java","lang_name":"Java","time":"1 year, 9 months","timestamp":1661422993,"status":10,"status_display":"Accepted","runtime":"533 ms","url":"/submissions/detail/782973342/","is_pending":"Not Pending","title":"Word Search","memory":"199.2 MB","code":"class Solution {\n    public boolean exist(char[][] board, String word) {\n        \n        int h = board.length;\n        int w = board[0].length;\n        \n        for(int i=0; i<h; i++){\n            for(int j=0; j<w; j++){\n                \n                if(board[i][j]==word.charAt(0)){\n                    boolean[][] bool = new boolean[h][w];\n                    bool[i][j]=true;\n                    \n                    boolean res = dfs( board,word.substring(1, word.length()), new int[]{i, j}, bool);\n                    if(res)\n                        return true;\n                }\n            }\n        }\n        \n        \n        return false;\n        \n    }\n    \n    \n    private boolean dfs(char[][] board, String word, int[] cur, boolean[][] bool){\n        \n        // for(boolean[] b : bool){\n        //     System.out.print(\"[\");\n        //     for(boolean bb : b){\n        //         System.out.print(bb + \", \");\n        //     }\n        //     System.out.print(\"],\");\n        // }\n        //   System.out.println();\n        \n    \n        \n        \n        if(word.length()==0)\n            return true;\n        \n        \n        int h = bool.length;\n        int w = bool[0].length;\n        \n        int[][] dirs = new int[][]{{1,0}, {-1,0}, {0,1}, {0,-1}};\n        \n        boolean res = false;\n        for(int[] d : dirs){\n            \n            int r = cur[0]+d[0];\n            int c = cur[1]+d[1];\n            \n            if(r<0 || r>=h || c<0 || c>=w || bool[r][c]==true || board[r][c]!=word.charAt(0))\n                continue;\n            \n            bool[r][c]=true;\n            boolean recurRes = dfs(board, word.substring(1,word.length()), new int[]{r,c} , bool);\n            bool[r][c]=false;\n           \n            res = res || recurRes;\n        }\n        \n        // if(res==false)\n        //     bool[cur[0]][cur[1]]=false;\n        \n        return res;\n        \n        \n        \n        \n        \n        // Stack<int[]> st = new Stack<>();\n        // st.push(new int[]{i,j});\n        \n        // while(!st.isEmpty()){\n        //     int[] cur = st.pop();\n        // }\n        \n        \n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"word-search","has_notes":false,"flag_type":1}