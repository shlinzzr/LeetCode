{"id":1149397972,"question_id":79,"lang":"java","lang_name":"Java","time":"4 months, 3 weeks","timestamp":1705551409,"status":10,"status_display":"Accepted","runtime":"160 ms","url":"/submissions/detail/1149397972/","is_pending":"Not Pending","title":"Word Search","memory":"41.4 MB","code":"class Solution {\n    public boolean exist(char[][] board, String word) {\n        \n        int h = board.length;\n        int w = board[0].length;\n        \n        for(int i=0; i<h; i++){\n            for(int j=0; j<w; j++){\n                if(board[i][j]==word.charAt(0)){\n                    \n                    if (dfs(board, word, 0, i , j, new boolean[h][w]) )\n                        return true;\n                }\n            }\n        }\n        \n        return false;\n        \n        \n    }\n\n     int[][]dirs = new int[][]{{0,1},{0,-1}, {1,0},{-1,0}};\n    private boolean dfs(char[][]board, String word, int idx, int i, int j, boolean[][] seen){\n        \n        // System.out.println(word.charAt(idx) + \" i=\" + i + \" j=\" + j);\n        \n          int h = board.length;\n        int w = board[0].length;\n        \n        if(idx==word.length()-1){\n            return true;\n        }\n        seen[i][j]=true;\n        \n        for(int[] d: dirs){\n            int r = i+d[0];\n            int c = j+d[1];\n            \n            if(r<0 || c<0 || r>=h || c>=w || seen[r][c] || board[r][c]!=word.charAt(idx+1))\n                continue;\n            \n            seen[r][c] = true;\n            \n            boolean res = dfs(board, word, idx+1, r, c, seen);\n            if(res)\n                return true;\n            \n            seen[r][c]=false;\n        }\n        \n        return false;\n    }\n    \n        \n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"word-search","has_notes":false,"flag_type":1}