{"id":1027210567,"question_id":2979,"lang":"java","lang_name":"Java","time":"9 months, 3 weeks","timestamp":1692584329,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1027210567/","is_pending":"Not Pending","title":"Maximize the Profit as the Salesman","memory":"N/A","code":"class Solution {\n    \n    int[] dp = new int[100005];\n    \n    public int maximizeTheProfit(int n, List<List<Integer>> offers) {\n        Map<Integer, int[]> map = new HashMap<>();\n        for(List<Integer> of: offers){\n            map.put(of.get(1)+1, new int[]{of.get(0)+1, of.get(2)}); // <ed, int[]{st, gold}>\n        }\n        \n        for(int i=1; i<=n; i++){\n            \n            dp[i] = dp[i-1];\n            for(Map.Entry<Integer, int[]>en : map.entrySet()){\n                \n                int ed = en.getKey();\n                int st = en.getValue()[0];\n                int val = en.getValue()[1];\n                \n                dp[i] = Math.max(dp[i], dp[st-1]+val);\n            }\n            \n            \n        }\n        \n        return dp[n];\n        \n        \n        \n        \n    }\n    \n    /* x x x x [j x x i]\n    \n    dp[i] = dp[j1-1] + val\n            dp[j2-1] + val\n            ...\n            dp[i-1] (no sale = prev)\n            find max*/\n}","compare_resulttitle_slug":"maximize-the-profit-as-the-salesman","has_notes":false,"flag_type":1}