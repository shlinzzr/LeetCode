{"id":1112790080,"question_id":3223,"lang":"java","lang_name":"Java","time":"6 months, 1 week","timestamp":1701768227,"status":10,"status_display":"Accepted","runtime":"2069 ms","url":"/submissions/detail/1112790080/","is_pending":"Not Pending","title":"Count Complete Substrings","memory":"54.8 MB","code":"\npublic class Solution {\n\n    ///https://leetcode.com/problems/count-complete-substrings/solutions/4355938/c-java-python-javascript-maps-explained/\n    public int countCompleteSubstrings(String word, int k) {\n        int count = 0;\n        int uniqueChars = new HashSet<>(Arrays.asList(word.split(\"\"))).size();\n\n        for (int subLen = 1; subLen <= uniqueChars; ++subLen) {\n            int windowSize = subLen * k;\n\n            Map<Character, Integer> charFreq = new HashMap<>();\n            int start = 0;\n            int end = start + windowSize - 1;\n            // [start, end]\n            for (int i = start; i <= Math.min(end, word.length() - 1); ++i) {\n                charFreq.put(word.charAt(i), charFreq.getOrDefault(word.charAt(i), 0) + 1);\n            }\n\n            while (end < word.length()) {\n                if (hasEqualFrequency(charFreq, k) && hasAdjacentDifferenceAtMostTwo(word, start, end)) {\n                    count++;\n                }\n\n                charFreq.put(word.charAt(start), charFreq.get(word.charAt(start)) - 1);\n                start++;\n                end++;\n\n                if (end < word.length()) {\n                    charFreq.put(word.charAt(end), charFreq.getOrDefault(word.charAt(end), 0) + 1);\n                }\n            }\n        }\n\n        return count;\n    }\n\n    private boolean hasEqualFrequency(Map<Character, Integer> charFreq, int k) {\n        for (int value : charFreq.values()) {\n            if (value != k && value != 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private boolean hasAdjacentDifferenceAtMostTwo(String word, int start, int end) {\n        for (int i = start + 1; i <= end; ++i) {\n            if (Math.abs(word.charAt(i) - word.charAt(i - 1)) > 2) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n\n","compare_resulttitle_slug":"count-complete-substrings","has_notes":false,"flag_type":1}