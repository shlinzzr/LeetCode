{"id":1132717071,"question_id":3203,"lang":"java","lang_name":"Java","time":"5 months, 2 weeks","timestamp":1703994879,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1132717071/","is_pending":"Not Pending","title":"Palindrome Rearrangement Queries","memory":"N/A","code":"class Solution {\n    public boolean[] canMakePalindromeQueries(String s, int[][] queries) {\n        int len = queries.length;\n        \n        boolean[] res = new boolean[len];\n        \n        int n = s.length();\n        \n        \n        String left = s.substring(0, n/2);\n        String right = new StringBuilder(s.substring(n/2, n)).reverse().toString();\n        \n        System.out.println(left + \" \" + right);\n        \n        int[] arr = new int[26];\n        for(int i=0; i<n/2; i++){\n            arr[left.charAt(i)-'a']++;\n            arr[right.charAt(i)-'a']--;\n        }\n        \n        \n        for(int i=0; i<26; i++){\n            if(arr[i]!=0) return res;\n        }\n        \n        \n        \n        for(int i=0; i<len; i++){\n            \n            if(left.equals(right)){\n                res[i]=true;\n                continue;\n            }\n            \n            int[] tmp = new int[26];\n            // System.arraycopy(arr, 0, tmp, 0, 26);\n            \n            int[] q = queries[i];\n            \n            int a = q[0];\n            int b = q[1];\n            int c = n-q[2]-1;\n            int d = n-q[3]-1;\n            \n            System.out.println(a + \" \"+b + \" \" + c + \" \" + d);\n            \n            boolean ans = true;\n            \n//             for(int j=a; j<=b; j++){\n//                 tmp[left.charAt(j)-'a']++;\n//                 tmp[right.charAt(j)-'a']--;\n                \n//             }\n            \n//             for(int j=0; j<26; j++){\n//                 // System.out.print(tmp[j]+\",\");\n//                 if(tmp[j]!=0){\n//                     ans=false;\n//                     System.out.print(\"AA\");\n//                     break;\n//                 }\n//             }\n            \n             // tmp = new int[26];\n          \n            \n            \n             for(int j=0; j<n/2; j++){\n                \n                if( !(j>=a && j<=b)  && !(j>=d && j<=c)){\n                    if(left.charAt(j)!=right.charAt(j)){\n                        ans= false;\n                          System.out.print(\"CC\");\n                        break;\n                    }\n                }else{\n                      \n                    tmp[left.charAt(j)-'a']++;\n                    tmp[right.charAt(j)-'a']--;\n\n\n                   \n                }\n            }\n            \n             for(int j=0; j<26; j++){\n                        if(tmp[j]!=0){\n                            ans=false;\n                              System.out.print(\"BB=\"+ j);\n                            break;\n                        }\n                    }\n            \n            \n            \n            res[i]=ans;\n            \n            \n            \n            \n        }\n        \n        return res;\n        \n    }\n    /* \n    \n    abc 0-2\n    cba 0 0\n    \n    \n    \n    \"bcdbdc\"\n    \n    bcd\n    cdb\n    \n    \n    */\n    \n     \n}","compare_result":"111111111111111111111111111111011111111111111111101101110111111101111111111111101110111110101111011111111111111101001111010101000111111111111111011010101000000011111111111111111110111111110101101110000111110011101101111111111111001011111001100100110111010111011111111111111010000011011110011111111001001110000011101111101111101000010010000100100010000100111111101011111111111010100001111110101111111110010111000001001111111100011111001011110111011111011111110000000010111100001000001110010010000000000111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000","title_slug":"palindrome-rearrangement-queries","has_notes":false,"flag_type":1}