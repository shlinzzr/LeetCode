{"id":856531893,"question_id":1893,"lang":"java","lang_name":"Java","time":"1 year, 6 months","timestamp":1670487117,"status":10,"status_display":"Accepted","runtime":"42 ms","url":"/submissions/detail/856531893/","is_pending":"Not Pending","title":"Maximum Subarray Sum After One Operation","memory":"79.1 MB","code":"class Solution {\n    public int maxSumAfterOperation(int[] nums) {\n        int len = nums.length;\n        int sum = 0;\n        int max = 0;\n       \n        if(len==0)\n            return 0;\n        \n        if(len==1)\n            return nums[0]*nums[0];\n        \n        \n        int[][] dp = new int[len][2];\n        \n        dp[0][0] = nums[0];\n        dp[0][1] = nums[0]*nums[0];\n        \n        for(int i=1; i<len; i++){\n            dp[i][0] = Math.max(dp[i-1][0]+nums[i], nums[i]);\n            dp[i][1] = Math.max(nums[i]*nums[i], Math.max(dp[i-1][0]+nums[i]*nums[i], dp[i-1][1]+nums[i]));\n            max = Math.max(max, Math.max(dp[i][0], dp[i][1]));\n        }\n        \n        return max;    \n        \n        \n        // 定義dp[i] = 結尾第i個 element時的最大長度  XXXX, dp[i-1], dp[i] \n        // dp[i] = Math.max(dp[i-1]+nums[i], nums[i]);\n        \n        \n        // 下一步驟：with operation:\n        // 定義dp[i][0] = 結尾第i個 element時的最大長度 without operation\n        // 定義dp[i][1] = 結尾第i個 element時的最大長度 with operation\n        // dp[i][1] = Math.max(dp[i-1][0] + nums[i]*nums[i] , dp[i-1][1]);\n       \n        \n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-subarray-sum-after-one-operation","has_notes":false,"flag_type":1}