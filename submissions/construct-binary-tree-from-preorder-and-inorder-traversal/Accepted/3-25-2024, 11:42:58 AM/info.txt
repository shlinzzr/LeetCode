{"id":1213117244,"question_id":105,"lang":"java","lang_name":"Java","time":"2 months, 2 weeks","timestamp":1711338178,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/1213117244/","is_pending":"Not Pending","title":"Construct Binary Tree from Preorder and Inorder Traversal","memory":"44.1 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    Map<Integer, Integer> map;\n    public TreeNode buildTree(int[] preorder, int[] inorder) {\n\n        int len = preorder.length;\n\n        map = new HashMap<>(); // val, idx\n        for(int i=0; i<len; i++){\n            map.put(inorder[i], i);\n        }\n\n\n        return helper(preorder, inorder, 0, len-1, 0, len-1);\n\n        \n        \n    }\n\n    private TreeNode helper(int[] pre, int[] in, int pst, int ped, int ist, int ied){\n\n        int len = pre.length;\n\n        if(len==0 || pst>ped || ist>ied ) return null;\n        int val = pre[pst];\n        TreeNode node = new TreeNode(val);\n\n        int idx = map.get(val);\n        \n        int nodeCnt = idx-ist;\n\n        node.left = helper(pre, in, pst+1, ped, ist, idx-1);\n        node.right = helper(pre, in, pst+1+nodeCnt, ped, idx+1, ied);\n\n        return node;\n\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"construct-binary-tree-from-preorder-and-inorder-traversal","has_notes":false,"flag_type":1}