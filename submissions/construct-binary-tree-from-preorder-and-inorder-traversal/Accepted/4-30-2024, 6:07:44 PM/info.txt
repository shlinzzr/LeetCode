{"id":1245624010,"question_id":105,"lang":"java","lang_name":"Java","time":"1 month, 1 week","timestamp":1714471664,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/1245624010/","is_pending":"Not Pending","title":"Construct Binary Tree from Preorder and Inorder Traversal","memory":"44.1 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public TreeNode buildTree(int[] preorder, int[] inorder) {\n\n        Map<Integer, Integer> map = new HashMap<>();\n        int len = preorder.length;\n        for(int i=0; i<len; i++){\n            map.put(inorder[i], i);\n        }\n        \n\n        return helper(preorder, 0, inorder, 0, len-1, map);\n        \n    }\n\n    private TreeNode helper(int[] preorder, int pi, int[] inorder, int st, int ed,  Map<Integer, Integer> map){\n\n        int len = preorder.length;\n        if(pi==len || st>ed) return null;\n\n        int val = preorder[pi]; //3\n        TreeNode root = new TreeNode(val);\n\n        int mid = map.get(val); //1\n\n        int leftCnt = mid-st; //  1\n        int rightCnt = ed-mid; // 4-1==3\n\n\n        root.left = helper(preorder, pi+1, inorder, st, mid-1, map); // \n        root.right = helper(preorder, pi+leftCnt+1, inorder, mid+1, ed, map);\n\n        return root;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"construct-binary-tree-from-preorder-and-inorder-traversal","has_notes":false,"flag_type":1}