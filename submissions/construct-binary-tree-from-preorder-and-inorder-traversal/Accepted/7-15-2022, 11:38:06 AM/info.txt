{"id":747441540,"question_id":105,"lang":"java","lang_name":"Java","time":"1 year, 11 months","timestamp":1657856286,"status":10,"status_display":"Accepted","runtime":"30 ms","url":"/submissions/detail/747441540/","is_pending":"Not Pending","title":"Construct Binary Tree from Preorder and Inorder Traversal","memory":"69.2 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public TreeNode buildTree(int[] preorder, int[] inorder) {\n        \n         Map<Integer, Integer> inMap = new HashMap<Integer, Integer>();\n\n        for(int i = 0; i < inorder.length; i++) {\n            inMap.put(inorder[i], i);\n        }\n        \n        \n        \n        return buildTree(preorder, inorder, inMap);\n    }\n        \n    private TreeNode buildTree(int[] preorder, int[] inorder, Map<Integer, Integer>inMap){\n        \n        \n        int rootVal = preorder[0];\n        \n\n        if(preorder.length==1){\n            TreeNode head = new TreeNode(rootVal);\n            return head;\n                \n        }\n        \n        \n        int left =0;\n        for(int i=0; i<inorder.length; i++){\n            if(inorder[i]==rootVal)\n                left = i;\n        }\n        int right = inorder.length-left -1;\n        // System.out.println(right + \" , \" + left);\n        \n        int[] leftPre =  Arrays.copyOfRange(preorder, 1, left+1);\n        int[] leftIn = Arrays.copyOfRange(inorder, 0, left);\n        \n        int[] rightPre = Arrays.copyOfRange(preorder, left+1, inorder.length);\n        int[] rightIn = Arrays.copyOfRange(inorder, left+1, inorder.length);\n        \n        \n        TreeNode head = new TreeNode(rootVal, \n                                     left <=0 ? null: buildTree(leftPre, leftIn, inMap),\n                                     right <=0? null : buildTree(rightPre, rightIn, inMap));\n                                     \n        \n        \n        return head;\n    }\n    \n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"construct-binary-tree-from-preorder-and-inorder-traversal","has_notes":false,"flag_type":1}