{"id":916725928,"question_id":105,"lang":"java","lang_name":"Java","time":"1 year, 2 months","timestamp":1679037587,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/916725928/","is_pending":"Not Pending","title":"Construct Binary Tree from Preorder and Inorder Traversal","memory":"42.5 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public TreeNode buildTree(int[] preorder, int[] inorder) {\n        HashMap<Integer, Integer> map = new HashMap<>();\n        for(int i=0; i<inorder.length; i++){\n            map.put(inorder[i], i);\n        }\n         int len = preorder.length;\n        return helper(preorder, 0, len-1, inorder, 0, len-1, map);\n        \n    }\n    \n    \n    private TreeNode helper(int[] preorder, int pst, int ped, int[] inorder, int ist, int ied, HashMap<Integer, Integer> map){\n        \n        int len = preorder.length;\n        if(len==0)\n            return null;\n        \n        if(pst>ped || ist>ied)\n            return null;\n        \n        \n        \n        int rootVal = preorder[pst];\n        int rootIdx = map.get(rootVal);\n        int numLeft = rootIdx-ist;\n        \n        \n        TreeNode root = new TreeNode(rootVal);\n        root.left = helper(preorder, pst+1, pst+numLeft, inorder, ist, rootIdx-1, map);\n        root.right = helper(preorder, pst+numLeft+1, ped, inorder, rootIdx+1, ied, map);\n        \n        return root;\n        \n        \n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"construct-binary-tree-from-preorder-and-inorder-traversal","has_notes":false,"flag_type":1}