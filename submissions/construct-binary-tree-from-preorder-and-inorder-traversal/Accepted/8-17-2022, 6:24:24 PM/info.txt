{"id":775952167,"question_id":105,"lang":"java","lang_name":"Java","time":"1 year, 10 months","timestamp":1660731864,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/775952167/","is_pending":"Not Pending","title":"Construct Binary Tree from Preorder and Inorder Traversal","memory":"44.1 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n   public TreeNode buildTree(int[] preorder, int[] inorder) {\n    Map<Integer, Integer> inMap = new HashMap<Integer, Integer>();\n\n    for(int i = 0; i < inorder.length; i++) {\n        inMap.put(inorder[i], i);\n    }\n\n    TreeNode root = buildTree(preorder, 0, preorder.length - 1, inorder, 0, inorder.length - 1, inMap);\n    return root;\n}\n\n    public TreeNode buildTree(int[] preorder, int preStart, int preEnd, int[] inorder, int inStart, int inEnd, Map<Integer, Integer> inMap) {\n    if(preStart > preEnd || inStart > inEnd) return null;\n\n    TreeNode root = new TreeNode(preorder[preStart]);\n    int inRoot = inMap.get(root.val);\n    int numsLeft = inRoot - inStart;\n\n    root.left = buildTree(preorder, preStart + 1, preStart + numsLeft, inorder, inStart, inRoot - 1, inMap);\n    root.right = buildTree(preorder, preStart + numsLeft + 1, preEnd, inorder, inRoot + 1, inEnd, inMap);\n\n    return root;\n}\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"construct-binary-tree-from-preorder-and-inorder-traversal","has_notes":false,"flag_type":1}