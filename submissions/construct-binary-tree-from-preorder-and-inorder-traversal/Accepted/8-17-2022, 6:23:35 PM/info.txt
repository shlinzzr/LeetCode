{"id":775951743,"question_id":105,"lang":"java","lang_name":"Java","time":"1 year, 10 months","timestamp":1660731815,"status":10,"status_display":"Accepted","runtime":"5 ms","url":"/submissions/detail/775951743/","is_pending":"Not Pending","title":"Construct Binary Tree from Preorder and Inorder Traversal","memory":"44.1 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n   public TreeNode buildTree(int[] preorder, int[] inorder) {\n    return helper(0, 0, inorder.length - 1, preorder, inorder);\n}\n\npublic TreeNode helper(int preStart, int inStart, int inEnd, int[] preorder, int[] inorder) {\n    if (preStart > preorder.length - 1 || inStart > inEnd) {\n        return null;\n    }\n    TreeNode root = new TreeNode(preorder[preStart]);\n    int inIndex = 0; // Index of current root in inorder\n    for (int i = inStart; i <= inEnd; i++) {\n        if (inorder[i] == root.val) {\n            inIndex = i;\n        }\n    }\n    root.left = helper(preStart + 1, inStart, inIndex - 1, preorder, inorder);\n    root.right = helper(preStart + inIndex - inStart + 1, inIndex + 1, inEnd, preorder, inorder);\n    return root;\n}\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"construct-binary-tree-from-preorder-and-inorder-traversal","has_notes":false,"flag_type":1}