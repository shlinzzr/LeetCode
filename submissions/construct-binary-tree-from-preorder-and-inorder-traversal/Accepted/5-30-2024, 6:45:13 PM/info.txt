{"id":1272275408,"question_id":105,"lang":"java","lang_name":"Java","time":"1 week, 6 days","timestamp":1717065913,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1272275408/","is_pending":"Not Pending","title":"Construct Binary Tree from Preorder and Inorder Traversal","memory":"44.4 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n\n    Map<Integer, Integer> map = new HashMap<>();\n    public TreeNode buildTree(int[] preorder, int[] inorder) {\n\n        int len = preorder.length;\n\n        for(int i=0; i<len; i++){\n            map.put(inorder[i], i);\n        }\n\n        return helper(preorder, 0, len-1, inorder, 0, len-1);\n        \n    }\n\n    private TreeNode helper(int[] preorder, int pst, int ped, int[] inorder, int ist, int ied){\n\n        if(pst>ped || ist>ied) return null;\n\n        int rootVal = preorder[pst];\n\n        TreeNode root = new TreeNode(rootVal);\n        if(pst==ped) return root;\n\n        int rootIdx = map.get(rootVal);\n\n        int leftCnt = rootIdx-ist;\n        int rightCnt = ied-rootIdx;\n\n        TreeNode left = helper(preorder, pst+1, pst+leftCnt, inorder, ist, rootIdx-1);\n        TreeNode right = helper(preorder, pst+leftCnt+1, ped, inorder, rootIdx+1, ied);\n\n        root.left = left;\n        root.right = right;\n\n        return root;\n\n\n\n\n\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"construct-binary-tree-from-preorder-and-inorder-traversal","has_notes":false,"flag_type":1}