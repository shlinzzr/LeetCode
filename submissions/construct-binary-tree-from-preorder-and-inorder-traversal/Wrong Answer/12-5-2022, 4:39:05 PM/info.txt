{"id":854921141,"question_id":105,"lang":"java","lang_name":"Java","time":"1 year, 6 months","timestamp":1670229545,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/854921141/","is_pending":"Not Pending","title":"Construct Binary Tree from Preorder and Inorder Traversal","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    \n    \n    boolean init=false;\n    Map<Integer, Integer> map = new HashMap<>();\n    \n    \n    public TreeNode buildTree(int[] preorder, int[] inorder) {\n    \n        if(init==false){\n            for(int i=0; i<inorder.length; i++){\n                map.put(inorder[i], i);\n            }\n            init=true;\n        }\n        \n        \n        int len = Math.min(preorder.length, inorder.length);\n        if(len==0)\n            return null;\n        \n        int rootVal = preorder[0];\n        int i=map.get(rootVal);\n        // for(; i<inorder.length; i++){\n        //     if(inorder[i]==rootVal)\n        //         break;\n        // }\n        \n        \n        TreeNode root = new TreeNode(rootVal);\n        \n        if(len==1) return root;\n        \n        \n        \n        if(i>0)    \n        root.left = buildTree(Arrays.copyOfRange(preorder, 1, preorder.length),\n                              Arrays.copyOfRange(inorder,  0, i));\n        \n        if(len-i>0)\n        root.right = buildTree(Arrays.copyOfRange(preorder, i+1, preorder.length),\n                               Arrays.copyOfRange(inorder,  i+1, inorder.length));\n        \n        return root;\n        \n    }\n}","compare_result":"01111110100001011101111000000000000001000010101001110000101110111100000000000000000000000000000000000000000100000000000001000010000100000101010000000110011100000000000001000010101001110000101110111100000","title_slug":"construct-binary-tree-from-preorder-and-inorder-traversal","has_notes":false,"flag_type":1}