{"id":876658854,"question_id":105,"lang":"java","lang_name":"Java","time":"1 year, 5 months","timestamp":1673511294,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/876658854/","is_pending":"Not Pending","title":"Construct Binary Tree from Preorder and Inorder Traversal","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public TreeNode buildTree(int[] preorder, int[] inorder) {\n        \n        if(preorder.length==0 || inorder.length==0)\n            return null;\n        \n        TreeNode root = new TreeNode(preorder[0]);\n        \n        int i=0;\n        for(; i<inorder.length; i++){\n            if(inorder[i]==preorder[0])\n                break;\n        }\n        \n        TreeNode left = preorder.length<2? null :  buildTree(Arrays.copyOfRange(preorder, 1, preorder.length), \n                                  Arrays.copyOfRange(inorder, 0, i));\n        \n        TreeNode right = i==inorder.length-1? null : buildTree(Arrays.copyOfRange(preorder, 1, preorder.length), \n                                   Arrays.copyOfRange(inorder, i+1, inorder.length));\n        \n        root.left = left;\n        root.right = right;\n        return root;\n        \n            \n        \n    }\n}","compare_result":"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"construct-binary-tree-from-preorder-and-inorder-traversal","has_notes":false,"flag_type":1}