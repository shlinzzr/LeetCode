{"id":775948660,"question_id":105,"lang":"java","lang_name":"Java","time":"1 year, 10 months","timestamp":1660731468,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/775948660/","is_pending":"Not Pending","title":"Construct Binary Tree from Preorder and Inorder Traversal","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public TreeNode buildTree(int[] preorder, int[] inorder) {\n        \n        return helper(preorder, inorder); \n        \n    }\n    \n    private TreeNode helper(int[]preorder, int[] inorder){\n        \n        int len = preorder.length;\n        \n        if(len==1)\n            return new TreeNode(preorder[0]);\n        \n        int idx=0;\n        for(int i=0; i<len; i++){\n            if(inorder[i]==preorder[0])\n                idx=i;\n        }\n        \n       \n        \n        TreeNode left=null, right=null;        \n        \n        \n        if(len-idx-1>0){\n            int[] inRight = new int[len-idx-1];    \n            System.arraycopy(inorder, idx+1, inRight, 0, len-idx-1);    \n            \n            int[] preRight = new int[len-idx-1]; \n            System.arraycopy(preorder, 1+idx, preRight, 0, len-idx-1);\n            \n            right =  helper(preRight, inRight);\n        }\n        \n        int[] inLeft = new int[idx];\n        System.arraycopy(inorder, 0, inLeft, 0, idx );\n        \n        int[] preLeft = new int[idx];\n        System.arraycopy(preorder, 1, preLeft, 0, idx);\n        \n        \n        int rootVal = preorder[0];\n        TreeNode root = new TreeNode(rootVal,\n                                     helper(preLeft, inLeft),\n                                     right);\n        \n        return root;  \n    }\n    \n}","compare_result":"11100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"construct-binary-tree-from-preorder-and-inorder-traversal","has_notes":false,"flag_type":1}