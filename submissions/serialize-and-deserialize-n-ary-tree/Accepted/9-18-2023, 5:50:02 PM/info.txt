{"id":1052503974,"question_id":765,"lang":"java","lang_name":"Java","time":"8 months, 4 weeks","timestamp":1695030602,"status":10,"status_display":"Accepted","runtime":"13 ms","url":"/submissions/detail/1052503974/","is_pending":"Not Pending","title":"Serialize and Deserialize N-ary Tree","memory":"45.1 MB","code":"// /*\n// // Definition for a Node.\n// class Node {\n//     public int val;\n//     public List<Node> children;\n\n//     public Node() {}\n\n//     public Node(int _val) {\n//         val = _val;\n//     }\n\n//     public Node(int _val, List<Node> _children) {\n//         val = _val;\n//         children = _children;\n//     }\n// };\n// */\n\n// class Codec {\n//     // Encodes a tree to a single string.\n//     public String serialize(Node root) {\n//         StringBuilder sb = new StringBuilder();\n        \n//         shelper(root, sb);\n        \n//         return sb.toString();\n//     }\n    \n//     private void shelper(Node node, StringBuilder sb){\n        \n//         sb.append(\"[\");\n\n//         for(Node child : node.children){\n//             sb.append(helper(child, sb));\n//             sb.append(\", \");\n//         }\n//         sb.append(\"]\");        \n//     }\n    \n\t\n//     // Decodes your encoded data to tree.\n//     public Node deserialize(String data) {\n//         StringBuilder sb = new StringBuilder(data);\n\n//         Node res = dhelper(sb);\n\n//     }\n\n//     private Node dhelper(StringBuilder sb){\n//         sb.substring(1, sb.length()-1);\n\n//         List<String> list = new ArrayList<>();\n\n//         int left=0;\n\n//         int st = 0;\n//         for(int ed=0; ed<sb.length();ed++){\n            \n//             char ch = sb.charAt(ed);\n\n//             if(ch=='[')\n//                 left++;\n//             else if(ch==']')\n//                 left--;\n\n//             if(left==0 && ch==','){\n//                 list.add(sb.toString().substring(st, ed));\n//                 st = ed+1;\n//             }\n//         }\n\n\n//         for(String s : list){\n            \n//         }\n\n//     }\n\n\n\n// }\n\n// // Your Codec object will be instantiated and called as such:\n// // Codec codec = new Codec();\n// // codec.deserialize(codec.serialize(root));\n\n\n\nclass Codec {\n\n    // Encodes a tree to a single string.\n    public String serialize(Node root) {\n        List<String> list=new LinkedList<>();\n        serializeHelper(root,list);\n        return String.join(\",\",list);\n    }\n    \n    private void serializeHelper(Node root, List<String> list){\n        if(root==null){\n            return;\n        }else{\n            list.add(String.valueOf(root.val));\n            list.add(String.valueOf(root.children.size()));\n            for(Node child:root.children){\n                serializeHelper(child,list);\n            }\n        }\n    }\n\n    // Decodes your encoded data to tree.\n    public Node deserialize(String data) {\n        if(data.isEmpty())\n            return null;\n        \n        String[] ss=data.split(\",\");\n        Queue<String> q=new LinkedList<>(Arrays.asList(ss));\n        return deserializeHelper(q);\n    }\n    \n    private Node deserializeHelper(Queue<String> q){\n        Node root=new Node();\n        root.val=Integer.parseInt(q.poll());\n        int size=Integer.parseInt(q.poll());\n        root.children=new ArrayList<Node>(size);\n        for(int i=0;i<size;i++){\n            root.children.add(deserializeHelper(q));\n        }\n        return root;\n    }\n}","compare_result":"11111111111111111111111111111111111111","title_slug":"serialize-and-deserialize-n-ary-tree","has_notes":false,"flag_type":1}