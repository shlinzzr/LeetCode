{"id":1053108865,"question_id":765,"lang":"java","lang_name":"Java","time":"8 months, 4 weeks","timestamp":1695087212,"status":10,"status_display":"Accepted","runtime":"5 ms","url":"/submissions/detail/1053108865/","is_pending":"Not Pending","title":"Serialize and Deserialize N-ary Tree","memory":"45.7 MB","code":"class Codec {\n    // Encodes a tree to a single string.\n    public String serialize(Node root) {\n        StringBuilder sb = new StringBuilder();\n        \n        buildStrings(root, sb);\n        \n        return sb.toString();\n    }\n\t\n    private void buildStrings(Node root, StringBuilder sb) {\n        if (root == null) return;\n        \n        sb.append(\"[\");\n        sb.append(root.val);\n        \n        for (Node child : root.children) {\n            buildStrings(child, sb);\n        }  \n        \n        sb.append(\"]\");\n    }\n    \n    // Decodes your encoded data to tree.\n    public Node deserialize(String data) {\n        if (data.isEmpty()) return null;\n        \n        int len = data.length();\n        int val = 0;\n        Deque<Node> stack = new ArrayDeque<>();\n        Node dummy = new Node(0, new ArrayList<>());\n        Node curr = dummy;\n        \n        for (int i = 0; i < len; ++i) {\n            char c = data.charAt(i);\n            \n            if (c == '[') {\n                curr.val = val;\n                stack.push(curr);\n                \n                curr = new Node(0, new ArrayList<>());\n                val = 0;\n            } else if (c == ']') {\n                Node top = stack.pop();\n                curr.val = val;\n                top.children.add(curr);\n                \n                curr = top;\n                val = top.val;\n            } else {\n                val = val * 10 + c - '0';\n            }\n        }\n        \n        return dummy.children.get(0);\n    }\n}","compare_result":"11111111111111111111111111111111111111","title_slug":"serialize-and-deserialize-n-ary-tree","has_notes":false,"flag_type":1}