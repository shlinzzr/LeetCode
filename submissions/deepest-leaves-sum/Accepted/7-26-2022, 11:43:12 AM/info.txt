{"id":756871571,"question_id":1254,"lang":"java","lang_name":"Java","time":"1 year, 10 months","timestamp":1658806992,"status":10,"status_display":"Accepted","runtime":"12 ms","url":"/submissions/detail/756871571/","is_pending":"Not Pending","title":"Deepest Leaves Sum","memory":"58.5 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    \n    \n    \n    public int deepestLeavesSum(TreeNode root) {\n        \n        Map<Integer, Integer> lvSum = new LinkedHashMap<>();    \n        helper(root, 0, lvSum);\n        \n        \n        int max= 0;\n        for(int k : lvSum.keySet()){\n            // System.out.println(\"map(\" + k + \")=\" + lvSum.get(k) );\n            \n            max = Math.max(k, max);\n        }\n        \n        return lvSum.get(max);\n        \n        \n        \n        \n    }\n    \n    private void helper(TreeNode node, int level, Map<Integer, Integer> lvSum ){\n    \n        if(node==null)\n            return;\n    \n        // System.out.println(\"nade.val=\" + node.val + \")=\" + lvSum.get(k) );\n        lvSum.put(level, lvSum.getOrDefault(level, 0) + node.val);\n        \n        helper(node.left, level+1, lvSum);\n        helper(node.right, level+1, lvSum);\n        \n        \n    }\n    \n}","compare_result":"111111111111111111111111111111111111111","title_slug":"deepest-leaves-sum","has_notes":false,"flag_type":1}