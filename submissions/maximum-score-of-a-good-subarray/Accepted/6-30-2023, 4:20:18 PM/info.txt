{"id":982917656,"question_id":1918,"lang":"java","lang_name":"Java","time":"11 months, 2 weeks","timestamp":1688113218,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/982917656/","is_pending":"Not Pending","title":"Maximum Score of a Good Subarray","memory":"59.5 MB","code":"class Solution {\n    public int maximumScore(int[] nums, int k) {\n       \n        \n        // int n = nums.length;\n        // int l = k, r = k;\n        // int minVal = nums[k];\n        // int ret = 0;\n        // while (l>=0 || r < n)\n        // {\n        //     while (l>=0 && nums[l]>=minVal) l--;\n        //     while (r<n && nums[r]>=minVal) r++;\n        //     ret = Math.max(ret, (r-l-1)*minVal);            \n        //     minVal = Math.max(l>=0?nums[l]:Integer.MIN_VALUE, r<n?nums[r]:Integer.MIN_VALUE);            \n        // }\n        // return ret;\n        \n        int len = nums.length;        \n        int st=k, ed=k;\n        int min = nums[k];\n        int max = 0;\n        \n        while(st>=0 || ed<len){\n            \n            while(st>=0 && nums[st]>=min) st--;\n            while(ed<len && nums[ed]>=min) ed++;\n            max = Math.max(max, min*(ed-st-1));\n            min = Math.max(st>=0?nums[st]:Integer.MIN_VALUE, ed<len? nums[ed]:Integer.MIN_VALUE );\n        }\n        \n        return max;\n    }\n}\n        \n            \n         \n          \n            \n//             if(st>0 && nums[st]>=nums[ed] || ed==len-1){\n//                 st--;\n//                 min = Math.min(min, nums[st]);\n                \n//             }else{\n//                 ed++;\n//                 min = Math.min(min, nums[ed]);\n//             }\n            \n//             max = Math.max(max, min*(ed-st+1));\n            \n        // }\n                           \n        \n        \n","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-score-of-a-good-subarray","has_notes":false,"flag_type":1}