{"id":982923724,"question_id":1918,"lang":"java","lang_name":"Java","time":"11 months, 2 weeks","timestamp":1688113912,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/982923724/","is_pending":"Not Pending","title":"Maximum Score of a Good Subarray","memory":"59.6 MB","code":"class Solution {\n    public int maximumScore(int[] nums, int k) {\n        \n        int len = nums.length;        \n        int st=k, ed=k;\n        int min = nums[k];\n        int max = nums[k];\n        \n        while(st>0 || ed<len-1){\n            \n            while(st>=0 && nums[st]>=min) st--;\n            while(ed<len && nums[ed]>=min) ed++;\n            max = Math.max(max, min*(ed-st-1));\n            min = Math.max(st>=0?nums[st]:Integer.MIN_VALUE, ed<len? nums[ed]:Integer.MIN_VALUE );\n        }\n        \n        return max;\n    }\n}\n        \n            \n         \n          \n//         while(st>=0 || ed<len){\n            \n//             min = Math.max(st>=0?nums[st]:Integer.MIN_VALUE, ed<len? nums[ed]:Integer.MIN_VALUE );\n            \n//             if( (st>0 && nums[st-1]>=nums[ed]) || ed>=len-1){\n                \n//                 System.out.println(st + \" \" +ed);\n//                 min = Math.min(min, nums[st-1]);\n//                 st--;\n//             }else{\n\n//                 min = Math.min(min, nums[ed+1]);\n//                 ed++;\n//             }\n            \n//             max = Math.max(max, min*(ed-st));\n            \n//         }\n        \n//         return max;\n                      \n//     }\n// }\n        \n        \n","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-score-of-a-good-subarray","has_notes":false,"flag_type":1}