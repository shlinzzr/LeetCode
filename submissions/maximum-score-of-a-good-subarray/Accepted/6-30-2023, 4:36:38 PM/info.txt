{"id":982926126,"question_id":1918,"lang":"java","lang_name":"Java","time":"11 months, 2 weeks","timestamp":1688114198,"status":10,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/982926126/","is_pending":"Not Pending","title":"Maximum Score of a Good Subarray","memory":"59.6 MB","code":"class Solution {\n    public int maximumScore(int[] nums, int k) {\n        \n        int len = nums.length;        \n        int st=k, ed=k;\n        int min = nums[k];\n        int max = nums[k];\n        \n//         while(st>0 || ed<len-1){\n            \n//             while(st>=0 && nums[st]>=min) st--;\n//             while(ed<len && nums[ed]>=min) ed++;\n//             max = Math.max(max, min*(ed-st-1));\n//             min = Math.max(st>=0?nums[st]:Integer.MIN_VALUE, ed<len? nums[ed]:Integer.MIN_VALUE );\n//         }\n        \n//         return max;\n//     }\n// }\n        \n            \n        while (st > 0 || ed < len-1) {\n            if (st == 0)\n                ed++;\n            else if (ed==len-1)\n                st--;\n            else if (nums[st - 1] < nums[ed + 1])\n                ed++;\n            else\n                st--;\n            \n            min = Math.min(min, Math.min(nums[st], nums[ed]));\n            max = Math.max(max, min * (ed - st + 1));\n        }\n        return max;\n    }\n}\n        \n        \n","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-score-of-a-good-subarray","has_notes":false,"flag_type":1}