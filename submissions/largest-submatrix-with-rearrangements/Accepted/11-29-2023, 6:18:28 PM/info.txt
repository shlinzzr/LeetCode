{"id":1108805080,"question_id":1845,"lang":"java","lang_name":"Java","time":"6 months, 2 weeks","timestamp":1701253108,"status":10,"status_display":"Accepted","runtime":"9 ms","url":"/submissions/detail/1108805080/","is_pending":"Not Pending","title":"Largest Submatrix With Rearrangements","memory":"67.8 MB","code":"class Solution {\n    public int largestSubmatrix(int[][] matrix) {\n        for(int i=1; i<matrix.length; i++){\n            for(int j=0; j<matrix[0].length; j++){\n                if(matrix[i][j] == 1) matrix[i][j] = matrix[i-1][j] + 1;\n            }\n        }\n\n        int maxi=0;\n        for(int i=0; i<matrix.length; i++){\n            Arrays.sort(matrix[i]);\n            for(int j=1; j<=matrix[0].length; j++){\n                maxi = Math.max(maxi, j*matrix[i][matrix[0].length-j]);\n            }\n        }\n        return maxi;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111","title_slug":"largest-submatrix-with-rearrangements","has_notes":false,"flag_type":1}