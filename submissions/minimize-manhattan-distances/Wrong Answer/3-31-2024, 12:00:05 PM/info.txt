{"id":1218853815,"question_id":3344,"lang":"java","lang_name":"Java","time":"2 months, 1 week","timestamp":1711857605,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1218853815/","is_pending":"Not Pending","title":"Minimize Manhattan Distances","memory":"N/A","code":"class Solution {\n    public int minimumDistance(int[][] points) {\n        \n          int len = points.length;\n        int[][] t = new int[len][3];\n        \n        for(int i=0; i<len; i++){\n            int[] p = points[i];\n            int x = p[0];\n            int y = p[1];\n            \n            int a = x+y;\n            int b = x-y;\n            \n            t[i] = new int[]{a, b, a+b};\n            \n        }\n            \n        // Arrays.sort(points, (a,b) -> a[2]-b[2]);\n          Arrays.sort(t, (a,b) -> Math.abs(a[0]-b[0]) + Math.abs(a[1]-b[1]));\n      \n      \n        \n        // for(int[] p :points)\n        //     System.out.println(p[0]+\" \" + p[1]);\n        \n        // return Math.min( getDis(t[1], t[len-1]), \n        //                  getDis(t[0], t[len-2]));\n        \n        return getDis(t[0], t[len-2]);\n        \n        \n        \n    }\n    \n    private int getDis(int[] a, int[] b){\n        \n        return Math.abs(a[0]-b[0])+  Math.abs(a[1]-b[1]);\n    }\n}\n\n/*Input:\n[[3,2],[3,9],[7,10],[4,4],[8,10],[2,7]]\nOutput:\n13\nExpected:\n10*/","compare_resulttitle_slug":"minimize-manhattan-distances","has_notes":false,"flag_type":1}