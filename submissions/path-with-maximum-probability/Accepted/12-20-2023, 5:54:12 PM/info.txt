{"id":1124134008,"question_id":1325,"lang":"java","lang_name":"Java","time":"5 months, 3 weeks","timestamp":1703066052,"status":10,"status_display":"Accepted","runtime":"48 ms","url":"/submissions/detail/1124134008/","is_pending":"Not Pending","title":"Path with Maximum Probability","memory":"58.5 MB","code":"class Solution {\n    public double maxProbability(int n, int[][] edges, double[] succProb, int start, int end) {\n        Map<Integer, List<Pair<Integer, Double>>> graph = new HashMap<>();\n        int [] edge;\n        for(int  i = 0;i< edges.length;i++){\n            edge = edges[i];\n            graph.computeIfAbsent(edge[0],k->new ArrayList<>()).add(new Pair<>(edge[1],succProb[i]));\n            graph.computeIfAbsent(edge[1],k->new ArrayList<>()).add(new Pair<>(edge[0],succProb[i]));\n        }\n        //System.out.println(graph);\n        double [] maxProb = new double[n];\n        maxProb[start] = 1.0;\n        \n        PriorityQueue<Pair<Integer,Double>> pq = new PriorityQueue<>((a,b)->-Double.compare(a.getValue(),b.getValue()));\n        pq.add(new Pair<>(start,1.0));\n        while (!pq.isEmpty()){\n            \n            Pair<Integer,Double> curr = pq.remove();\n            if(curr.getKey()==end)return curr.getValue();\n            for(Pair<Integer,Double> path: graph.getOrDefault(curr.getKey(),new ArrayList<>())){\n                if(curr.getValue()* path.getValue()>maxProb[path.getKey()]){\n                    maxProb[path.getKey()] = (double)curr.getValue()* path.getValue();\n                    pq.add(new Pair<>(path.getKey(), maxProb[path.getKey()]));\n                }\n            }\n        }\n        return 0.0;\n    }\n}","compare_result":"1111111111111111111","title_slug":"path-with-maximum-probability","has_notes":false,"flag_type":1}