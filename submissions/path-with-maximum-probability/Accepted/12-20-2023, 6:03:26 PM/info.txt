{"id":1124139773,"question_id":1325,"lang":"java","lang_name":"Java","time":"5 months, 3 weeks","timestamp":1703066606,"status":10,"status_display":"Accepted","runtime":"52 ms","url":"/submissions/detail/1124139773/","is_pending":"Not Pending","title":"Path with Maximum Probability","memory":"58 MB","code":"class Solution {\n    public double maxProbability(int n, int[][] edges, double[] succProb, int start, int end) {\n        Map<Integer, List<Pair<Integer, Double>>> g = new HashMap<>();\n        for(int i=0; i<edges.length; i++){\n            int[] e = edges[i];\n            g.putIfAbsent(e[0], new ArrayList<>());\n            g.putIfAbsent(e[1], new ArrayList<>());\n            g.get(e[0]).add(new Pair<>(e[1], succProb[i]));\n            g.get(e[1]).add(new Pair<>(e[0], succProb[i]));\n        }\n\n        double[] maxProb = new double[n];\n        maxProb[start] = 1.0;\n        \n        PriorityQueue<Pair<Integer,Double>> pq = new PriorityQueue<>((a,b)-> -Double.compare(a.getValue(),b.getValue()));\n        pq.add(new Pair<>(start,1.0));\n\n        while (!pq.isEmpty()){\n            Pair<Integer,Double> curr = pq.poll();\n\n            if(curr.getKey()==end)\n                return curr.getValue();\n\n            for(Pair<Integer,Double> next: g.getOrDefault(curr.getKey(),new ArrayList<>())){\n                if(curr.getValue()* next.getValue() > maxProb[next.getKey()]){\n                    maxProb[next.getKey()] = (double)curr.getValue()* next.getValue();\n                    pq.add(new Pair<>(next.getKey(), maxProb[next.getKey()]));\n                }\n            }\n        }\n        return 0.0;\n    }\n}","compare_result":"1111111111111111111","title_slug":"path-with-maximum-probability","has_notes":false,"flag_type":1}