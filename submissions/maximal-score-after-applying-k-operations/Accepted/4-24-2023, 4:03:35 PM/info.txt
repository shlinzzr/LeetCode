{"id":938836604,"question_id":2616,"lang":"java","lang_name":"Java","time":"1 year, 1 month","timestamp":1682323415,"status":10,"status_display":"Accepted","runtime":"189 ms","url":"/submissions/detail/938836604/","is_pending":"Not Pending","title":"Maximal Score After Applying K Operations","memory":"57.9 MB","code":"class Solution {\n    public long maxKelements(int[] nums, int k) {\n        Arrays.sort(nums);\n        \n        int len = nums.length;\n        \n        long score=0;\n        int idx=len-1;\n        \n        \n        PriorityQueue<Long> pq = new PriorityQueue<>(\n            (a,b)-> Long.compare(b,a)\n        );\n        for(int n: nums){\n            pq.offer((long)n);\n        }\n        \n        \n        while(k>0){\n            \n            long val = pq.poll();\n            score+=val;\n            val = val%3==0? val/3 :  val/3+1;\n            \n            pq.offer(val);\n            k--;\n        \n        }\n        \n        \n        \n        // 10 + 4 + 3 \n        \n        return score;\n        \n    }\n}","compare_result":"111111111111111111111111111111111111111","title_slug":"maximal-score-after-applying-k-operations","has_notes":false,"flag_type":1}