{"id":1103163470,"question_id":2425,"lang":"java","lang_name":"Java","time":"6 months, 3 weeks","timestamp":1700539351,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1103163470/","is_pending":"Not Pending","title":"Number of People That Can Be Seen in a Grid","memory":"N/A","code":"class Solution {\n    public int[][] seePeople(int[][] heights) {\n        int m = heights.length;\n        int n = heights[0].length;\n\n\n        Stack<Integer> st = new Stack<>();\n        int[][] prevGreater_ver = new int[m][n];\n        for(int[] p : prevGreater_ver){\n            Arrays.fill(p, -1);\n        }\n        for(int j=0; j<n; j++){\n            for(int i=m-1; i>=0; i--){\n                while(!st.isEmpty() && heights[i][j]>heights[st.peek()][j]){\n                    prevGreater_ver[st.pop()][j] = i;\n                }\n                st.push(i);\n            }\n             st.clear();\n        }\n\n        st.clear();\n        int[][] prevGreater_hor = new int[m][n];\n        for(int[] p : prevGreater_hor){\n            Arrays.fill(p, -1);\n        }\n        for(int i=0; i<m; i++){\n            for(int j=n-1; j>=0; j--){\n                while(!st.isEmpty() && heights[i][j]>heights[i][st.peek()]){\n                    prevGreater_hor[i][st.pop()] = j;\n                }\n                st.push(j);\n            }\n            st.clear();\n        }\n\n        \n        int[][] nextGreater_ver = new int[m][n];\n        for(int[] p : nextGreater_ver){\n            Arrays.fill(p, m);\n        }\n        for(int j=0; j<n; j++){\n            for(int i=0; i<m; i++){\n                while(!st.isEmpty() && heights[st.peek()][j]<=heights[i][j]){\n                    nextGreater_ver[st.pop()][j] = i;\n                }\n                st.push(i);\n            }\n             st.clear();\n        }\n\n        st.clear();\n        int[][] nextGreater_hor = new int[m][n];\n        for(int[] p : nextGreater_hor){\n            Arrays.fill(p, n);\n        }\n        for(int i=0; i<m; i++){\n            for(int j=0; j<n; j++){\n                while(!st.isEmpty() && heights[i][st.peek()]<=heights[i][j]){\n                    nextGreater_hor[i][st.pop()] = j;\n                }\n                st.push(j);\n            }\n             st.clear();\n        }\n\n\n//         for(int i=0; i<m; i++){\n//             for(int j=0; j<n; j++){\n//                 System.out.print(prevGreater_ver[i][j]+ \" \" );\n//             }\n//             System.out.println();\n//         }\n// //  System.out.println();\n//   System.out.println();\n//    System.out.println();\n//     System.out.println();\n\n\n        // for(int i=0; i<m; i++){\n        //     for(int j=0; j<n; j++){\n        //         System.out.print(prevGreater_hor[i][j]+ \" \" );\n        //     }\n        //     System.out.println();\n        // }\n\n\n\n\n        int[][] res = new int[m][n];\n        for(int j=0; j<n; j++){\n            for(int i=0; i<m; i++){\n\n                if(prevGreater_ver[i][j]!=-1){\n                    res[ prevGreater_ver[i][j] ][j] ++;\n                }\n\n                if(prevGreater_hor[i][j]!=-1){\n                    res[i][ prevGreater_hor[i][j] ]++;\n                }\n\n                if(nextGreater_ver[i][j]!=m){\n                    res[i][j]++;\n                }\n\n                if(nextGreater_hor[i][j]!=n){\n                    res[i][j]++;\n                }\n            }\n        }\n\n        return res;\n\n\n\n\n\n\n\n\n    }\n\n\n    \n}","compare_result":"111111001101001011010110100100001100001000000000000000000001000000000000000110","title_slug":"number-of-people-that-can-be-seen-in-a-grid","has_notes":false,"flag_type":1}