{"id":925300299,"question_id":1555,"lang":"java","lang_name":"Java","time":"1 year, 2 months","timestamp":1680256010,"status":10,"status_display":"Accepted","runtime":"7 ms","url":"/submissions/detail/925300299/","is_pending":"Not Pending","title":"Number of Ways of Cutting a Pizza","memory":"40.5 MB","code":"class Solution {\n    public int ways(String[] pizza, int k) {\n        int m = pizza.length, n = pizza[0].length();\n        Integer[][][] dp = new Integer[k][m][n];\n        int[][] preSum = new int[m+1][n+1]; // preSum[r][c] is the total number of apples in pizza[r:][c:]\n        for (int r = m - 1; r >= 0; r--)\n            for (int c = n - 1; c >= 0; c--)\n                preSum[r][c] = preSum[r][c+1] + preSum[r+1][c] - preSum[r+1][c+1] + (pizza[r].charAt(c) == 'A' ? 1 : 0);\n        return dfs(m, n, k-1, 0, 0, dp, preSum);\n    }\n    int dfs(int m, int n, int k, int r, int c, Integer[][][] dp, int[][] preSum) {\n        if (preSum[r][c] == 0) return 0; // if the remain piece has no apple -> invalid\n        if (k == 0) return 1; // found valid way after using k-1 cuts\n        if (dp[k][r][c] != null) return dp[k][r][c];\n        int ans = 0;\n        // cut in horizontal\n        for (int nr = r + 1; nr < m; nr++) \n            if (preSum[r][c] - preSum[nr][c] > 0) // cut if the upper piece contains at least one apple\n                ans = (ans + dfs(m, n, k - 1, nr, c, dp, preSum)) % 1_000_000_007;\n        // cut in vertical\n        for (int nc = c + 1; nc < n; nc++) \n            if (preSum[r][c] - preSum[r][nc] > 0) // cut if the left piece contains at least one apple\n                ans = (ans + dfs(m, n, k - 1, r, nc, dp, preSum)) % 1_000_000_007;\n        return dp[k][r][c] = ans;\n    }\n}\n","compare_result":"11111111111111111111111111111111111111111111111111111","title_slug":"number-of-ways-of-cutting-a-pizza","has_notes":false,"flag_type":1}