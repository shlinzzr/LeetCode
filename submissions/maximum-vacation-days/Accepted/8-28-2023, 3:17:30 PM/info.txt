{"id":1033851931,"question_id":568,"lang":"java","lang_name":"Java","time":"9 months, 2 weeks","timestamp":1693207050,"status":10,"status_display":"Accepted","runtime":"37 ms","url":"/submissions/detail/1033851931/","is_pending":"Not Pending","title":"Maximum Vacation Days","memory":"45 MB","code":"class Solution {\n    \n    //https://leetcode.com/problems/maximum-vacation-days/discuss/102655/Java-DFS(TLE)-and-DP-Solutions\n    \n    \n//     int max = 0, N = 0, K = 0;\n    \n//     // DFS => TLE\n    \n//     public int maxVacationDays(int[][] flights, int[][] days) {\n//         int len = flights.length; //2. n*n, non-sym\n    \n//         //3. k weeks, depart@monday  morning\n        \n//         // days:n*k,  days[i][j] : max vacation day in city i in week j\n        \n//         // A-> B : day count on B city\n        \n//         //1.  0~n-1 cities, init at 0 / monday\n  \n//         N = flights.length;\n//         K = days[0].length;\n//         dfs(flights, days, 0, 0, 0);\n        \n//         return max;\n//     }\n    \n//     private void dfs(int[][] f, int[][] d, int curr, int week, int sum) {\n//         if (week == K) {\n//             max = Math.max(max, sum);\n//             return;\n//         }\n        \n//         for (int dest = 0; dest < N; dest++) {\n//             if (curr == dest || f[curr][dest] == 1) { // curr==dest means stay at same city\n//                 dfs(f, d, dest, week + 1, sum + d[dest][week]);\n//             }\n//         }\n            \n//     }\n    \n    // dp\n    \n    public int maxVacationDays(int[][] flights, int[][] days) {\n        int N = flights.length;\n        int K = days[0].length;\n        int[] dp = new int[N]; //每個city的max vacation day\n        Arrays.fill(dp, Integer.MIN_VALUE);\n        dp[0] = 0;\n        \n        // days[j][i] : max day in city j in week i\n        \n        // most k weeks, from 0~k-1 week\n        for (int k = 0; k < K; k++) {\n            int[] temp = new int[N];\n            Arrays.fill(temp, Integer.MIN_VALUE);\n            \n            for (int i = 0; i < N; i++) {\n                for(int j = 0; j < N; j++) {\n                    if ( i==j || flights[i][j] == 1) { //j==k means stay same city, flights[k][j]: fly from k to j city\n                        \n                        // 當可以從 i city飛去 j city的時候\n                        // city j 的max = 前一天的max:dp[i] + 待在j city第k週增加的day: days[j][k]\n                        temp[j] = Math.max(temp[j], dp[i] + days[j][k]);  \n                    }\n                }\n            }\n            \n            dp = temp;\n        }\n        \n        int max = 0;\n        for (int v : dp) {\n            max = Math.max(max, v);\n        }\n        \n        return max;\n    }\n}\n","compare_result":"111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-vacation-days","has_notes":false,"flag_type":1}