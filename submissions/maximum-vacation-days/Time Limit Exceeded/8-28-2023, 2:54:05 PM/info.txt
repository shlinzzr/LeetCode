{"id":1033836905,"question_id":568,"lang":"java","lang_name":"Java","time":"9 months, 2 weeks","timestamp":1693205645,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1033836905/","is_pending":"Not Pending","title":"Maximum Vacation Days","memory":"N/A","code":"class Solution {\n    \n    int max = 0, N = 0, K = 0;\n    \n    public int maxVacationDays(int[][] flights, int[][] days) {\n        int len = flights.length; //2. n*n, non-sym\n    \n        //3. k weeks, depart@monday  morning\n        \n        // days:n*k,  days[i][j] : max vacation day in city i in week j\n        \n        // A-> B : day count on B city\n        \n        //1.  0~n-1 cities, init at 0 / monday\n  \n        N = flights.length;\n        K = days[0].length;\n        dfs(flights, days, 0, 0, 0);\n        \n        return max;\n    }\n    \n    private void dfs(int[][] f, int[][] d, int curr, int week, int sum) {\n        if (week == K) {\n            max = Math.max(max, sum);\n            return;\n        }\n        \n        for (int dest = 0; dest < N; dest++) {\n            if (curr == dest || f[curr][dest] == 1) { // curr==dest means stay at same city\n                dfs(f, d, dest, week + 1, sum + d[dest][week]);\n            }\n        }\n            \n    }\n}","compare_result":"111111111111111111111111111111111111100000000000000000000","title_slug":"maximum-vacation-days","has_notes":false,"flag_type":1}