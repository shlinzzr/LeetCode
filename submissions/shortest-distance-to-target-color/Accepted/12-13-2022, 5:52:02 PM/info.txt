{"id":859093114,"question_id":1134,"lang":"java","lang_name":"Java","time":"1 year, 6 months","timestamp":1670925122,"status":10,"status_display":"Accepted","runtime":"163 ms","url":"/submissions/detail/859093114/","is_pending":"Not Pending","title":"Shortest Distance to Target Color","memory":"128.9 MB","code":"class Solution {\n    public List<Integer> shortestDistanceColor(int[] colors, int[][] queries) {\n        HashMap<Integer, List<Integer>> map = new HashMap<>();\n        for (int i = 0; i < colors.length; i++) {\n            int c = colors[i];\n            map.putIfAbsent(c, new ArrayList<>());\n            map.get(c).add(i);\n        }\n        List<Integer> ans = new ArrayList<>();\n        for (int[] query : queries) {\n            int index = query[0];\n            int c = query[1];\n            if (!map.containsKey(c)) {\n                ans.add(-1);\n            } else {\n                ans.add(binarySearch(index, map.get(c)));\n            }\n        }\n        return ans;\n    }\n    \n    public int binarySearch(int index, List<Integer> list) {\n        int left = 0;\n        int right = list.size() - 1;\n        while (left < right) {\n            int mid = left + (right - left) / 2;\n            if (list.get(mid) < index) {\n                left = mid + 1;\n            } else {\n                right = mid;\n            }\n        }\n        int res = left;\n        if (left - 1 >= 0 && index - list.get(left - 1) < list.get(left) - index) {\n            res = left - 1;\n        }\n        return Math.abs(list.get(res) - index);\n    }\n}","compare_result":"1111111111111111111","title_slug":"shortest-distance-to-target-color","has_notes":false,"flag_type":1}