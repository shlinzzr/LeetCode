{"id":1243719338,"question_id":863,"lang":"java","lang_name":"Java","time":"1 month, 2 weeks","timestamp":1714271020,"status":10,"status_display":"Accepted","runtime":"14 ms","url":"/submissions/detail/1243719338/","is_pending":"Not Pending","title":"Sum of Distances in Tree","memory":"64.4 MB","code":"class Solution {\n    int[][] graph;\n    int[] count;\n    int[] res;\n    int N;\n    \n    public int[] sumOfDistancesInTree(int N, int[][] edges) {\n        this.N = N;\n        this.res = new int[N];\n        this.graph = new int[N][];\n        this.count = new int[N];\n        \n        for (int[] e : edges) {\n            ++count[e[0]];\n            ++count[e[1]];\n        }\n        for (int i = 0; i < N; i++) {\n            graph[i] = new int[count[i]];\n        }\n        for (int[] e : edges) {\n            graph[e[0]][--count[e[0]]] = e[1];\n            graph[e[1]][--count[e[1]]] = e[0];\n        }\n        dfs1(0, -1);\n        dfs2(0, -1);\n        return res;\n    }\n    public void dfs1(int cur, int parent) {\n        count[cur] = 1;\n        for (int child : graph[cur]) {\n            if (child != parent) {\n                dfs1(child, cur);\n                count[cur] += count[child];\n                res[cur] += res[child] + count[child];\n            }\n        }\n    }\n    public void dfs2(int cur, int parent) {\n        for (int child : graph[cur]) {\n            if (child != parent) {\n                res[child] = res[cur] + N - 2 * count[child];\n                dfs2(child, cur);\n            }\n        }\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"sum-of-distances-in-tree","has_notes":false,"flag_type":1}