{"id":1269213737,"question_id":880,"lang":"java","lang_name":"Java","time":"2 weeks, 2 days","timestamp":1716798167,"status":10,"status_display":"Accepted","runtime":"19 ms","url":"/submissions/detail/1269213737/","is_pending":"Not Pending","title":"Rectangle Area II","memory":"44.2 MB","code":"class Solution {\n     public int rectangleArea(int[][] rectangles) {\n        int mod = (int)(1e9 + 7);\n\n        Set<Integer> x = new TreeSet<>();\n        List<int[]> L = new ArrayList<>();\n        for (int[] r : rectangles) {\n            x.add(r[0]); // row1\n            x.add(r[2]); // row2\n            L.add(new int[]{r[1], r[0], r[2], 1}); // col1,   row1, row2, 1\n            L.add(new int[]{r[3], r[0], r[2], -1});// col2,   row1, row2, -1\n        }\n        List<Integer> unique = new ArrayList<>(x);\n        Map<Integer, Integer> xMap = IntStream.range(0, unique.size()).boxed().collect(Collectors.toMap(unique::get, i -> i));\n        int[] cnt = new int[unique.size()];\n        Collections.sort(L, (a, b) -> a[0] == b[0] ? a[1] == b[1] ? a[2] == b[2] ? Integer.compare(a[3], b[3]) : Integer.compare(a[2], b[2]) : Integer.compare(a[1], b[1]) : Integer.compare(a[0], b[0]));\n        long curY = 0;\n        long curXSum = 0;\n        long area = 0;\n        for (int[] l : L) {\n            long y = (long)l[0], x1 = (long)l[1], x2 = (long)l[2], sig = (long)l[3];\n            area = (area + (y - curY) * curXSum) % mod;\n            curY = y;\n            for (int i = xMap.get((int)x1); i < xMap.get((int)x2); i++) {\n                cnt[i] += (int)sig;\n            }\n            curXSum = 0;\n            for (int i = 0; i < unique.size(); i++) {\n                if (cnt[i] > 0) {\n                    curXSum += unique.get(i + 1) - unique.get(i);\n                }\n            }\n        }\n        return (int)area;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"rectangle-area-ii","has_notes":false,"flag_type":1}