{"id":1117952394,"question_id":1819,"lang":"java","lang_name":"Java","time":"6Â months","timestamp":1702375760,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1117952394/","is_pending":"Not Pending","title":"Construct the Lexicographically Largest Valid Sequence","memory":"40.2 MB","code":"class Solution {\n\n    public int[] constructDistancedSequence(int n) {\n        int[] res = new int[ 2*(n-1)+1 ];\n        boolean[] seen = new boolean[n + 1];\n        helper(res, seen, n, 0);\n        return res;\n    }\n\n    // x x x x res[idx] x x x x x x res[idx+i]\n    // add from n to 1 inorder to get the lexicographically largest sequence.\n    \n    private boolean helper(int[] res, boolean[] seen, int n, int idx) {\n        if (idx == res.length) {\n            return true;\n        }\n        if (res[idx] != 0) {\n            return helper(res, seen, n, idx+1); // if value already assigned in this position. So go ahead with the next index.\n\n        }else {\n            // we start from n to 1 since we need to find out the lexicographically largest sequence.\n            for (int i = n; i >= 1; i--) {\n                if (seen[i]) \n                    continue;\n                    \n                seen[i] = true;\n                res[idx] = i;\n                if (i == 1) { // no need add by rule when add \"1\".\n                    if (helper(res, seen, n, idx+1)) return true;\n                    \n                } else if (idx + i < res.length && res[idx + i] == 0) {\n                    res[i + idx] = i; // assigning the second occurence of i in the desired position i.e, (current index + i )\n                    if (helper(res, seen, n, idx+1)) return true; // largest possible sequence satisfying the given conditions found.\n                    res[idx + i] = 0; //backtrack\n                }\n                res[idx] = 0; //backtrack\n                seen[i] = false; //backtrack\n            }\n\n        }\n        return false;\n    }\n}\n\t\n","compare_result":"11111111111111111111","title_slug":"construct-the-lexicographically-largest-valid-sequence","has_notes":false,"flag_type":1}