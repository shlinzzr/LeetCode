{"id":1084427272,"question_id":295,"lang":"java","lang_name":"Java","time":"7 months, 2 weeks","timestamp":1698304774,"status":10,"status_display":"Accepted","runtime":"102 ms","url":"/submissions/detail/1084427272/","is_pending":"Not Pending","title":"Find Median from Data Stream","memory":"60.2 MB","code":"class MedianFinder {\n\n    PriorityQueue<Integer> maxHeap;\n    PriorityQueue<Integer> minHeap;\n\n    public MedianFinder() {\n        maxHeap= new PriorityQueue<>( Collections.reverseOrder());\n        minHeap= new PriorityQueue<>();\n    }\n    \n    public void addNum(int num) {\n\n        if(maxHeap.size()>=minHeap.size()){\n            maxHeap.offer(num);\n            minHeap.offer(maxHeap.poll());\n        }else{\n            minHeap.offer(num);\n            maxHeap.offer(minHeap.poll());\n        }\n    }\n    \n    public double findMedian() {\n\n        if(minHeap.isEmpty())\n            return (double)0;\n\n        if((maxHeap.size()+minHeap.size())%2==0){\n            return (Double.valueOf(maxHeap.peek())+Double.valueOf(minHeap.peek()))/2;\n        }else{\n            return Double.valueOf(minHeap.peek());\n        }\n    }\n}\n\n/**\n * Your MedianFinder object will be instantiated and called as such:\n * MedianFinder obj = new MedianFinder();\n * obj.addNum(num);\n * double param_2 = obj.findMedian();\n */","compare_result":"111111111111111111111","title_slug":"find-median-from-data-stream","has_notes":false,"flag_type":1}