{"id":1014478664,"question_id":295,"lang":"java","lang_name":"Java","time":"10 months, 1 week","timestamp":1691393875,"status":10,"status_display":"Accepted","runtime":"96 ms","url":"/submissions/detail/1014478664/","is_pending":"Not Pending","title":"Find Median from Data Stream","memory":"68 MB","code":"class MedianFinder {\n\n    \n    PriorityQueue<Integer> maxHeap;\n    PriorityQueue<Integer> minHeap;\n    boolean odd;\n    \n    public MedianFinder() {\n        maxHeap = new PriorityQueue<>( (a,b)-> b-a);\n        minHeap = new PriorityQueue<>();\n        odd= false;\n    }\n    \n    public void addNum(int num) {\n        \n        if(odd==false){\n        // if(minHeap.size()<=maxHeap.size()){\n            maxHeap.offer(num); // 0 \n            minHeap.offer(maxHeap.poll()); // 1 \n            \n        }else{\n            \n            minHeap.offer(num);  // 1\n            maxHeap.offer(minHeap.poll()); // 1\n        }\n        \n        odd = !odd;\n        \n        \n        \n    }\n    \n    public double findMedian() {\n        \n        // if(minHeap.isEmpty() && maxHeap.isEmpty())\n        //     return null;\n        \n        // System.out.println (odd + \"  \" + maxHeap.peek() + \" \" + minHeap.peek());\n        \n        \n        // if(minHeap.size()!=maxHeap.size())\n        if(odd==false)\n             return (double) (maxHeap.peek()+ minHeap.peek())/2;\n        else\n             return minHeap.peek();\n        \n    }\n}\n\n/**\n * Your MedianFinder object will be instantiated and called as such:\n * MedianFinder obj = new MedianFinder();\n * obj.addNum(num);\n * double param_2 = obj.findMedian();\n */","compare_result":"111111111111111111111","title_slug":"find-median-from-data-stream","has_notes":false,"flag_type":1}