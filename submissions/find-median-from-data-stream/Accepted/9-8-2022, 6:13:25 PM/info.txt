{"id":794637562,"question_id":295,"lang":"java","lang_name":"Java","time":"1 year, 9 months","timestamp":1662632005,"status":10,"status_display":"Accepted","runtime":"332 ms","url":"/submissions/detail/794637562/","is_pending":"Not Pending","title":"Find Median from Data Stream","memory":"126.2 MB","code":"class MedianFinder {\n\n    PriorityQueue<Integer> small ;\n    PriorityQueue<Integer> large ;\n    boolean isEven = true;\n    \n    public MedianFinder() {\n        small = new  PriorityQueue<>( Collections.reverseOrder());\n        large = new  PriorityQueue<>();\n        isEven=true;\n    }\n    \n    public void addNum(int num) {\n        if(isEven){\n            small.offer(num);\n            large.offer(small.poll());\n        }else{\n            large.offer(num);\n            small.offer(large.poll());\n        }\n        \n         isEven = !isEven;\n    }\n    \n    public double findMedian() {\n         \n        if(isEven){\n            return (small.peek()+large.peek())/2.0;\n        }else{\n            return large.peek();\n        }\n        \n    }\n    \n     // pq is not support get by index ...\n    \n//     PriorityQueue<Integer> pq;\n    \n    \n//     public MedianFinder() {\n//         pq = new PriorityQueue<>();\n//     }\n    \n//     public void addNum(int num) {\n//         pq.offer(num);\n//     }\n    \n//     public double findMedian() {\n//         int size =pq.size();\n//        // if(size==0)\n//        //     return -1;\n        \n//         if(size%2==0){\n//             return (pq.get(size/2) + pq.get(size/2-1)) /2;\n//         }else{\n//             return pq.get(size/2);\n//         }\n//     }\n}\n\n/**\n * Your MedianFinder object will be instantiated and called as such:\n * MedianFinder obj = new MedianFinder();\n * obj.addNum(num);\n * double param_2 = obj.findMedian();\n */","compare_result":"111111111111111111111","title_slug":"find-median-from-data-stream","has_notes":false,"flag_type":1}