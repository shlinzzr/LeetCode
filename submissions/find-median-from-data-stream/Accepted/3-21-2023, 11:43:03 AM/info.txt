{"id":919215772,"question_id":295,"lang":"java","lang_name":"Java","time":"1 year, 2 months","timestamp":1679370183,"status":10,"status_display":"Accepted","runtime":"141 ms","url":"/submissions/detail/919215772/","is_pending":"Not Pending","title":"Find Median from Data Stream","memory":"61.7 MB","code":"class MedianFinder {\n\n    PriorityQueue<Integer> maxHeap;\n    PriorityQueue<Integer> minHeap;\n    \n    public MedianFinder() {\n        minHeap = new PriorityQueue<>();\n        maxHeap = new PriorityQueue<>(\n            Collections.reverseOrder()\n        );\n    }\n    \n    public void addNum(int num) {\n        \n        if(minHeap.size()<= maxHeap.size()){\n            maxHeap.offer(num);\n            minHeap.offer(maxHeap.poll());    \n        }else{\n            minHeap.offer(num);\n            maxHeap.offer(minHeap.poll());\n        }\n        \n    }\n    \n    public double findMedian() {\n               \n        if(minHeap.size() == maxHeap.size()) {\n            return (double)(minHeap.peek()+maxHeap.peek())/2;\n        } else if(minHeap.size() > maxHeap.size()) {\n            return minHeap.peek();\n        } else {\n            return maxHeap.peek();\n        }\n        \n    }\n}\n\n/**\n * Your MedianFinder object will be instantiated and called as such:\n * MedianFinder obj = new MedianFinder();\n * obj.addNum(num);\n * double param_2 = obj.findMedian();\n */","compare_result":"111111111111111111111","title_slug":"find-median-from-data-stream","has_notes":false,"flag_type":1}