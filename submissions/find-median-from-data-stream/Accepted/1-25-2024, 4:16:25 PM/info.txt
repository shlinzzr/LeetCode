{"id":1156310925,"question_id":295,"lang":"java","lang_name":"Java","time":"4 months, 2 weeks","timestamp":1706170585,"status":10,"status_display":"Accepted","runtime":"119 ms","url":"/submissions/detail/1156310925/","is_pending":"Not Pending","title":"Find Median from Data Stream","memory":"72.7 MB","code":"class MedianFinder {\n    \n    PriorityQueue<Integer> minHeap;\n    PriorityQueue<Integer> maxHeap;\n    boolean flag;\n\n    public MedianFinder() {\n        minHeap = new PriorityQueue<>();\n        maxHeap = new PriorityQueue<>(Collections.reverseOrder());\n    }\n    \n    public void addNum(int num) {\n        \n        if(minHeap.size()>=maxHeap.size()){\n            minHeap.offer(num);\n            maxHeap.offer(minHeap.poll());    \n        }else{\n            maxHeap.offer(num);\n            minHeap.offer(maxHeap.poll());\n        }\n        \n    }\n    \n    public double findMedian() {\n        \n        if(minHeap.size()==maxHeap.size()){\n            return (Double.valueOf(minHeap.peek())+ Double.valueOf(maxHeap.peek()))/2;\n        }else{\n            return maxHeap.peek();\n        }\n        \n        \n    }\n}\n\n/**\n * Your MedianFinder object will be instantiated and called as such:\n * MedianFinder obj = new MedianFinder();\n * obj.addNum(num);\n * double param_2 = obj.findMedian();\n */","compare_result":"111111111111111111111","title_slug":"find-median-from-data-stream","has_notes":false,"flag_type":1}