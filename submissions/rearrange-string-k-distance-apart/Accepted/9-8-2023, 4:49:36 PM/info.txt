{"id":1043756865,"question_id":358,"lang":"java","lang_name":"Java","time":"9 months, 1 week","timestamp":1694162976,"status":10,"status_display":"Accepted","runtime":"19 ms","url":"/submissions/detail/1043756865/","is_pending":"Not Pending","title":"Rearrange String k Distance Apart","memory":"44.7 MB","code":"public class Solution {\n    public String rearrangeString(String str, int k) {\n        \n       \n        PriorityQueue<int[]> pq = new PriorityQueue<>(\n            (a,b)->b[1]-a[1]\n        );\n\n        HashMap<Integer, Integer> map = new HashMap<>();\n        for(char ch : str.toCharArray()){\n            map.put((int)(ch-'a'), map.getOrDefault( (int)(ch-'a'), 0)+1);\n        }\n\n        for(Map.Entry<Integer, Integer> en : map.entrySet()){\n            pq.offer(new int[]{en.getKey(), en.getValue()});\n        }\n\n        StringBuilder sb = new StringBuilder();\n\n        Queue<int[]> q= new LinkedList<>();\n\n\n        while(!pq.isEmpty()){\n\n            int[] w = pq.poll();\n            sb.append((char)(w[0]+'a'));\n            q.offer(new int[]{w[0], w[1]-1});\n\n            if(q.size()<k){\n                continue;\n            }\n                \n\n            int[] p = q.poll();\n            int cnt = p[1];\n            if(cnt>0)\n                pq.offer(new int[]{p[0], cnt});\n        }\n\n\n        return sb.length()==str.length() ? sb.toString() : \"\";\n\n\n\n    }\n    \n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111","title_slug":"rearrange-string-k-distance-apart","has_notes":false,"flag_type":1}