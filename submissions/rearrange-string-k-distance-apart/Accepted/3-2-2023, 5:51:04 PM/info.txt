{"id":907647671,"question_id":358,"lang":"java","lang_name":"Java","time":"1 year, 3 months","timestamp":1677750664,"status":10,"status_display":"Accepted","runtime":"28 ms","url":"/submissions/detail/907647671/","is_pending":"Not Pending","title":"Rearrange String k Distance Apart","memory":"43.5 MB","code":"public class Solution {\n    public String rearrangeString(String str, int k) {\n        \n        StringBuilder rearranged = new StringBuilder();\n        //count frequency of each char\n        Map<Character, Integer> map = new HashMap<>();\n        for (char c : str.toCharArray()) {\n            if (!map.containsKey(c)) {\n                map.put(c, 0);\n            }\n            map.put(c, map.get(c) + 1);\n        }\n        \n        //construct a max heap using self-defined comparator, which holds all Map entries, Java is quite verbose\n        Queue<Map.Entry<Character, Integer>> maxHeap = new PriorityQueue<>(new Comparator<Map.Entry<Character, Integer>>() {\n            public int compare(Map.Entry<Character, Integer> entry1, Map.Entry<Character, Integer> entry2) {\n                return entry2.getValue() - entry1.getValue();\n            }\n        });\n        \n        Queue<Map.Entry<Character, Integer>> waitQueue = new LinkedList<>();\n        maxHeap.addAll(map.entrySet());\n        \n        while (!maxHeap.isEmpty()) {\n            \n            Map.Entry<Character, Integer> current = maxHeap.poll();\n            rearranged.append(current.getKey());\n            current.setValue(current.getValue() - 1);\n            waitQueue.offer(current);\n            \n            if (waitQueue.size() < k) { // intial k-1 chars, waitQueue not full yet\n                continue;\n            }\n            // release from waitQueue if char is already k apart\n            Map.Entry<Character, Integer> front = waitQueue.poll();\n            //note that char with 0 count still needs to be placed in waitQueue as a place holder\n            if (front.getValue() > 0) {\n                maxHeap.offer(front);\n            }\n        }\n        \n        return rearranged.length() == str.length() ? rearranged.toString() : \"\";\n    }\n    \n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111","title_slug":"rearrange-string-k-distance-apart","has_notes":false,"flag_type":1}