{"id":1053324125,"question_id":406,"lang":"java","lang_name":"Java","time":"8 months, 3 weeks","timestamp":1695107199,"status":10,"status_display":"Accepted","runtime":"9 ms","url":"/submissions/detail/1053324125/","is_pending":"Not Pending","title":"Queue Reconstruction by Height","memory":"45 MB","code":"class Solution {\n    public int[][] reconstructQueue(int[][] people) {\n        Arrays.sort(people, (a, b) -> a[0] != b[0] ? b[0] - a[0] : a[1] - b[1]);\n        List<int[]> ans = new LinkedList<>();\n        for (int[] p : people) {\n            ans.add(p[1], p);\n        }\n        return ans.toArray(new int[0][0]);\n\n    }\n\n\n    private void helper(int[][] people, List<int[]> res, boolean[]seen){\n\n        if(res.size()==people.length){\n            return;\n        }\n\n        for(int i=0; i<people.length; i++){\n\n            int[] p = people[i];\n\n            if(seen[i]==false){\n                int cnt =0;\n                for(int[] r : res){\n                    if(p[0]<=r[0])\n                        cnt++;\n                    if(cnt>p[1])\n                        break;\n                }\n                if(cnt!=p[1])\n                    continue;\n\n                seen[i]=true;\n                res.add(p);\n                // System.out.println(\"add \"+ i);\n\n                helper(people, res, seen);\n                if(res.size()==people.length)\n                    return;\n\n                // System.out.println(\"rm  \"+ i);\n\n                seen[i]=false;\n                res.remove(res.size()-1);\n            }\n        }\n\n\n    }\n}","compare_result":"111111111111111111111111111111111111","title_slug":"queue-reconstruction-by-height","has_notes":false,"flag_type":1}