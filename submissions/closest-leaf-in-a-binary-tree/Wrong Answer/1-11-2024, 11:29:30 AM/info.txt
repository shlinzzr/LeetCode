{"id":1142952775,"question_id":743,"lang":"java","lang_name":"Java","time":"5Â months","timestamp":1704943770,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1142952775/","is_pending":"Not Pending","title":"Closest Leaf in a Binary Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n\n    int abs = Integer.MAX_VALUE;\n    int res = -1;\n\n    public int findClosestLeaf(TreeNode root, int k) {\n\n        helper(root, k);\n\n        return res;\n        \n    }\n\n    private void helper(TreeNode node , int k){\n        if(node==null) return ;\n\n        // abs = Math.min(abs, Math.abs(node.val-k));\n\n        if(node.left==null && node.right==null && abs> Math.abs(node.val-k)){\n            abs = Math.abs(node.val-k);\n            res = node.val;\n        }\n        helper(node.left, k);\n        helper(node.right, k);\n    }\n}","compare_result":"111101011101111011111011110111101110111110111101111011110111101111011110111111111111101111101111011111111101111011111111101111111111111101111011111011111111111111111111111111111111011111011110111111111111110111101111111111111101111111111111111111111110111101111101111011111111111111111111111111111111111111111111111111111110101100101001","title_slug":"closest-leaf-in-a-binary-tree","has_notes":false,"flag_type":1}