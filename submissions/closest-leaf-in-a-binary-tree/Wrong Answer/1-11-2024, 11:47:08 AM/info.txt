{"id":1142963101,"question_id":743,"lang":"java","lang_name":"Java","time":"5Â months","timestamp":1704944828,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1142963101/","is_pending":"Not Pending","title":"Closest Leaf in a Binary Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n\n    Integer prev;\n    int prevStep = Integer.MAX_VALUE;\n\n    Integer next;\n    int nextStep = Integer.MAX_VALUE;\n    int step = 0;\n\n    int kStep = 0;\n    boolean found = false;\n    Integer res;\n\n    public int findClosestLeaf(TreeNode root, int k) {\n\n        helper(root, k);\n\n        return res;\n        \n    }\n\n    private void helper(TreeNode node , int k){\n        if(node==null) return ;\n\n        if(res!=null) return;\n        step++;\n        // abs = Math.min(abs, Math.abs(node.val-k));\n\n        if(node.val==k){\n            found=true;\n            kStep = step;\n\n            if(node.left==null && node.right==null){\n                res = node.val;\n                return;\n            }\n\n            if(prev==null){\n                prev = Integer.MAX_VALUE;\n                prevStep = Integer.MAX_VALUE;\n            }\n        } \n\n        if(node.left==null && node.right==null){\n\n            if(found==false){\n                prev = node.val;\n                prevStep = step;\n\n            }else{\n                \n                \n                next = node.val;\n                nextStep = step;\n\n                // System.out.println(prev + \" \" + prevStep + \" , \"+ next + \" \" + nextStep);\n\n                if(kStep-prevStep > nextStep-kStep ){\n                    res = next;\n                }else{\n                    res = prev;\n                }\n\n            }\n                \n        }\n        helper(node.left, k);\n        helper(node.right, k);\n    }\n}","compare_result":"111111010101111011100011000110001110111000110001100011000111101100011000110101101011101110001100011111010001100011111011101111111111110001100011001010101100001000010101100001000011011100011000111110111101000110001111101111011101111111111111111111111000110001100101001010101100001000010000100001010110000100001000010000100000101100101011","title_slug":"closest-leaf-in-a-binary-tree","has_notes":false,"flag_type":1}