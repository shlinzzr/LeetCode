{"id":1158741856,"question_id":1145,"lang":"java","lang_name":"Java","time":"4 months, 2 weeks","timestamp":1706408830,"status":10,"status_display":"Accepted","runtime":"141 ms","url":"/submissions/detail/1158741856/","is_pending":"Not Pending","title":"Number of Submatrices That Sum to Target","memory":"45.2 MB","code":"class Solution {\n    public int numSubmatrixSumTarget(int[][] matrix, int target) {\n        int h = matrix.length;\n        int w = matrix[0].length;\n        \n        int res = 0 ;\n        \n        for (int i=0; i<h; i++)\n        {\n            int[] row = new int[w];\n            \n            for (int r=i; r<h; r++)\n            {\n                for (int j=0; j<w; j++)\n                    row[j] += matrix[r][j];\n                \n                HashMap<Integer, Integer> map = new HashMap<>();\n                map.put(0,1);\n                \n                int presum = 0;\n                for (int j=0; j<w; j++)\n                {\n                    presum += row[j];\n                    res += map.getOrDefault(presum-target, 0);\n                    map.put(presum, map.getOrDefault(presum, 0)+1);\n                }\n            }            \n        }\n        return res;\n        \n    }\n        \n        \n        \n       \n        \n//         long res =0 ;\n        \n        \n//         int[][] presum = new int[h][w];\n//         presum[0][0] = matrix[0][0];\n//         map.put(presum[0][0], 1);\n        \n        \n//         HashMap<Integer, Integer> rowMap = new HashMap<>();\n//         rowMap.put(0,1);\n//         for(int i=1; i<h; i++){\n//             presum[i][0] = presum[i-1][0] + matrix[i][0];\n//             res += rowMap.getOrDefault(presum[i][0]-target, 0);\n//             rowMap.put(presum[i][0], rowMap.getOrDefault(presum[i][0], 0)+1);\n//         }\n        \n        \n//         HashMap<Integer, Integer> colMap = new HashMap<>();\n//         colMap.put(0,1);\n//         for(int j=1; j<w; j++){\n//             presum[0][j] = presum[0][j-1] + matrix[0][j];\n//             res += colMap.getOrDefault(presum[0][j]-target, 0);\n//             colMap.put(presum[0][j], colMap.getOrDefault(presum[0][j], 0)+1);\n//         }\n        \n//         for(Map.Entry<Integer,Integer> en : rowMap.entrySet()){\n//             map.put(en.getKey(), en.getValue());\n//         }\n        \n//         for(Map.Entry<Integer,Integer> en : colMap.entrySet()){\n//             map.put(en.getKey(), en.getValue());\n//         }\n//          map.put(0,1);\n        \n        \n//         for(int i=1; i<h; i++){\n//             for(int j=1; j<w; j++){\n                \n//                 presum[i][j] = matrix[i][j] + presum[i-1][j] + presum[i][j-1] - presum[i-1][j-1];\n//                 int key = presum[i][j]-presum[i-1][j]-presum[i][j-1]+presum[i-1][j-1]-target;\n                    \n//                     System.out.println(\"jey=\"+key + \" \"  + map.get(key));\n                    \n//                 res += map.getOrDefault(key, 0);\n                \n//                 map.put(presum[i][j], map.getOrDefault(presum[i][j], 0)+1);\n//             }\n//         }\n        \n//          for(int i=0; i<h; i++){\n//             for(int j=0; j<w; j++){\n//                 System.out.print(presum[i][j] + \",\");\n//             }\n//               System.out.println();\n//          }\n        // return (int)res;\n}","compare_result":"1111111111111111111111111111111111111111","title_slug":"number-of-submatrices-that-sum-to-target","has_notes":false,"flag_type":1}