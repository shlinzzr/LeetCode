{"id":1103990068,"question_id":1539,"lang":"java","lang_name":"Java","time":"6 months, 3 weeks","timestamp":1700635139,"status":10,"status_display":"Accepted","runtime":"33 ms","url":"/submissions/detail/1103990068/","is_pending":"Not Pending","title":"Diagonal Traverse II","memory":"76 MB","code":"class Solution {\n    public int[] findDiagonalOrder(List<List<Integer>> nums) {\n        Map<Integer, List<Integer>> groups = new HashMap();\n        int n = 0;\n        for (int row = nums.size() - 1; row >= 0; row--) {\n            for (int col = 0; col < nums.get(row).size(); col++) {\n                int sum = row + col;\n                if (!groups.containsKey(sum)) {\n                    groups.put(sum, new ArrayList<Integer>());\n                }\n                \n                groups.get(sum).add(nums.get(row).get(col));\n                n++;\n            }\n        }\n        \n        int[] ans = new int[n];\n        int idx = 0;\n        int cnt = 0;\n        \n        while (groups.containsKey(cnt)) {\n            for (int num : groups.get(cnt)) {\n                ans[idx] = num;\n                idx++;\n            }\n            \n            cnt++;\n        }\n        \n        return ans;\n    }\n}\n","compare_result":"11111111111111111111111111111111111111111111111111111111","title_slug":"diagonal-traverse-ii","has_notes":false,"flag_type":1}