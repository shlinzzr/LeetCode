{"id":1103983870,"question_id":1539,"lang":"java","lang_name":"Java","time":"6 months, 3 weeks","timestamp":1700634478,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1103983870/","is_pending":"Not Pending","title":"Diagonal Traverse II","memory":"N/A","code":"class Solution {\n    public int[] findDiagonalOrder(List<List<Integer>> nums) {\n        int h = nums.size();\n        int w= 0 ;\n        for(List<Integer> list : nums){\n            w =Math.max(w, list.size());\n        }\n        int n = Math.max(w, h);\n\n        List<Integer> list= new ArrayList<>();\n        HashMap<Integer, List<Integer>> map = new HashMap<>();\n\n        // 00, 10,01, 20,11,02, 21,12, 22\n\n        // sum = 0 ~ 2n-2\n        int idx = 0;\n        for(int sum=0; sum<2*n-1; sum++){\n\n             System.out.println(\"sum=\"+sum);\n            for(int i=n-1; i>=0; i--){\n                int j = sum-i;\n                \n                if(i>=nums.size() || j>=nums.get(i).size() || i<0 || j<0)\n                    continue;\n                    // System.out.print(i + \",\" + j+ \"  \");\n                \n                list.add( nums.get(i).get(j) );\n            }\n        }\n\n        int[] res = new int[list.size()];\n        for(int i=0; i<list.size(); i++){\n            res[i] = list.get(i);\n        }\n\n    \n        return res;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111000","title_slug":"diagonal-traverse-ii","has_notes":false,"flag_type":1}