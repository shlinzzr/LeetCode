{"id":1098365344,"question_id":1729,"lang":"java","lang_name":"Java","time":"7Â months","timestamp":1699934449,"status":10,"status_display":"Accepted","runtime":"81 ms","url":"/submissions/detail/1098365344/","is_pending":"Not Pending","title":"Binary Search Tree Iterator II","memory":"65.1 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass BSTIterator {\n\n    Stack<TreeNode> nextStack;\n    Stack<TreeNode> prevStack;\n    HashSet<TreeNode> seen;\n\n\n\n // method stack\n    public BSTIterator(TreeNode root) {\n\n        nextStack = new Stack<>();\n        prevStack = new Stack<>(); \n        seen = new HashSet<>();\n\n        buildNextStack(root);\n    }\n\n\n    private void buildNextStack(TreeNode node){\n       \n        if(node==null) return;\n        while(node!=null){\n            nextStack.push(node);\n            node = node.left;\n        }\n    }\n\n    \n    public boolean hasNext() {\n        return !nextStack.isEmpty();\n    }\n    \n    public int next() {\n        TreeNode node = nextStack.pop();\n        if(!seen.contains(node) && node.right!=null){\n            buildNextStack(node.right);\n        }\n\n        seen.add(node);\n        prevStack.add(node);\n        return node.val;\n        \n    }\n    \n    public boolean hasPrev() {\n        return prevStack.size()>1;\n        \n    }\n    \n    public int prev() {\n        nextStack.push(prevStack.pop());\n        return prevStack.peek().val;\n    }\n\n\n\n\n/*  // method : ArrayList\n\n    List<Integer> list;\n    int idx;\n    public BSTIterator(TreeNode root) {\n        list = new ArrayList<>();\n        idx =-1;\n        helper(root);\n    }\n\n\n    private void helper(TreeNode root){\n        if(root==null)  return;\n        helper(root.left);\n        list.add(root.val);\n        helper(root.right);\n    }\n\n    \n    public boolean hasNext() {\n        return idx<list.size()-1;        \n    }\n    \n    public int next() {\n        return list.get(++idx);\n        \n    }\n    \n    public boolean hasPrev() {\n        return idx>0;\n        \n    }\n    \n    public int prev() {\n        return list.get(--idx);\n        \n    }\n    */\n}\n\n/**\n * Your BSTIterator object will be instantiated and called as such:\n * BSTIterator obj = new BSTIterator(root);\n * boolean param_1 = obj.hasNext();\n * int param_2 = obj.next();\n * boolean param_3 = obj.hasPrev();\n * int param_4 = obj.prev();\n */","compare_result":"11111111111111111111111111111111111111111111111","title_slug":"binary-search-tree-iterator-ii","has_notes":false,"flag_type":1}