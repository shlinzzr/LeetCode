{"id":1282383741,"question_id":3443,"lang":"java","lang_name":"Java","time":"3 days, 23 hours","timestamp":1717905218,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1282383741/","is_pending":"Not Pending","title":"Maximum Total Reward Using Operations II","memory":"N/A","code":"class Solution {\n    public int maxTotalReward(int[] rv) {\n        \n        int len = rv.length;\n        \n        Arrays.sort(rv);\n        \n        // lis\n        \n        \n        List<Integer> list = new ArrayList<>();\n        list.add(0);\n            \n        // [1,2,3,4,6]\n        // [0, 1 2]\n        \n        int max= 0 ;\n        for(int i=0; i<len; i++){\n            int c= rv[i];\n            \n            if(list.get(list.size()-1)<c){\n                list.add(list.get(list.size()-1)+c);\n            }else{\n                \n                int idx = findFirstSmaller(list, c);\n                if(idx!=-1){\n                    int val = list.get(idx)+c;\n                    list.add(findInsertPos(list, val), val);\n                    \n                }\n            }\n            \n        }\n        \n        return list.get(list.size()-1);\n        \n        \n        \n        \n        \n        \n    }\n    \n    private int findInsertPos(List<Integer> list, int val){\n        int st = 0, ed=list.size()-1;\n        \n        while(st<ed){\n            int mid = st+(ed-st)/2;\n            if(list.get(mid)>=val){\n                ed = mid;\n            }else{\n                st = mid+1;\n            }\n        }\n        \n        return st;\n           \n    }\n    \n    private int findFirstSmaller(List<Integer> list, int c){\n        \n        int st = 0, ed=list.size()-1;\n        \n        while(st<ed){\n            int mid = ed-(ed-st)/2;\n            if(list.get(mid)>=c){\n                ed= mid-1;\n            }else{\n                st=mid;\n            }\n        }\n        if(list.get(st)<c) return st;\n        return -1;\n        \n    }\n}","compare_resulttitle_slug":"maximum-total-reward-using-operations-ii","has_notes":false,"flag_type":1}