{"id":1042000062,"question_id":296,"lang":"java","lang_name":"Java","time":"9 months, 1 week","timestamp":1693992921,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1042000062/","is_pending":"Not Pending","title":"Best Meeting Point","memory":"N/A","code":"class Solution {\n    public int minTotalDistance(int[][] grid) {\n        return getMeetingPoint(grid);\n    }\n    \n     \n    public int getMeetingPoint(int[][] grid ) {\n        if (grid == null || grid[0].length == 0) return 0;\n          \n        int[][] dirs = new int[][]{{0,1}, {1,0}, {0,-1}, {-1,0}};\n        \n        int h = grid.length;\n        int w = grid[0].length;\n        \n        int[][] distance = new int[h][w];\n        int[][] reach = new int[h][w];\n        int buildingNum = 0;\n        \n        \n        for(int i=0; i<h;i++){\n            for(int j=0; j<w; j++){\n                if (grid[i][j] == 1) {\n                    buildingNum++;\n                     reach[i][j]++;\n                }\n            }\n        }\n        \n        int min = Integer.MAX_VALUE;\n        for(int i=0; i<h;i++){\n            for(int j=0; j<w; j++){\n                if (grid[i][j] == 1) {\n                    Queue<int[]> q = new LinkedList<int[]>();\n                    q.offer(new int[] {i,j});\n\n                    boolean[][] seen = new boolean[h][w]; \n                    int step = 1;\n                    \n                    while (!q.isEmpty()) {\n                        int siz = q.size();\n                        while(siz-->0){\n                            int[] p = q.poll();\n                            \n                            for(int[] d : dirs){\n                                int r = p[0] + d[0];\n                                int c = p[1] + d[1];\n                                \n                                if(r<0 || c<0 || r>=h || c>=w || seen[r][c] )\n                                    continue;\n                                \n                                distance[r][c] += step;\n                                reach[r][c]++;\n                                \n                                if(reach[r][c]==buildingNum){\n                                    // System.out.println(r+\" \" +c);\n                                    // for(int a=0; a<h;a++){\n                                    //     for(int b=0; b<w; b++){\n                                    //         System.out.print(distance[a][b] + \", \");\n                                    //     }\n                                    //     System.out.println();\n                                    // }\n                                    \n                                    min = Math.min(min, distance[r][c]);\n                                    \n                                }\n                                \n\n                                seen[r][c] =true;\n                                q.offer(new int[]{r,c});\n                            }\n                        }\n                        step++;\n                    }\n                }\n            }\n        }\n        \n        return min;\n        \n        \n        \n    }\n}","compare_result":"1111110001000000000000000000000000000000000000000000000000","title_slug":"best-meeting-point","has_notes":false,"flag_type":1}