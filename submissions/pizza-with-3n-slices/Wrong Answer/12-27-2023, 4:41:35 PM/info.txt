{"id":1129539351,"question_id":1489,"lang":"java","lang_name":"Java","time":"5 months, 2 weeks","timestamp":1703666495,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1129539351/","is_pending":"Not Pending","title":"Pizza With 3n Slices","memory":"N/A","code":"class Solution {\n    public int maxSizeSlices(int[] slices) {\n        // like the house robber ii\n\n        int len = slices.length;\n        if(len==1) return slices[0];\n        if(len==2) return Math.max(slices[0], slices[1]);\n        if(len==3) return Math.max(slices[0], Math.max(slices[1], slices[2]));\n\n\n\n        int[] dp = new int[len+1];\n\n        int max= 0 ;\n        // choose [0, len-3]\n        for(int i=1; i<=len-2; i++){\n            dp[i] = Math.max(Math.max(dp[i-1], i<2 ? 0 : dp[i-2]), i<3? 0 : dp[i-3] + slices[i-1]);\n        }\n        max = dp[len-2];\n\n        dp[1] = 0;\n        for(int i=2; i<=len-1; i++){\n            dp[i] = Math.max(Math.max(dp[i-1], dp[i-2]), i<3? 0 : dp[i-3] + slices[i-1]);\n        }\n        max = Math.max(max, dp[len-1]);\n\n\n        dp[1]=0;\n        dp[2]=0;\n        for(int i=3; i<=len; i++){\n            dp[i] = Math.max(Math.max(dp[i-1], dp[i-2]), dp[i-3] + slices[i-1]);\n        }\n\n        max = Math.max(max, dp[len]);\n\n        return max;\n\n    }\n}","compare_result":"000101101000000000000000000000000000000000000000000000000000000000000","title_slug":"pizza-with-3n-slices","has_notes":false,"flag_type":1}