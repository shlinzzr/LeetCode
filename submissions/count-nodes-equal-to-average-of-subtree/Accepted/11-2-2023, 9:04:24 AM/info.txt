{"id":1089529019,"question_id":2347,"lang":"java","lang_name":"Java","time":"7 months, 2 weeks","timestamp":1698887064,"status":10,"status_display":"Accepted","runtime":"22 ms","url":"/submissions/detail/1089529019/","is_pending":"Not Pending","title":"Count Nodes Equal to Average of Subtree","memory":"42.9 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n\n    int res = 0;\n\n    public int averageOfSubtree(TreeNode root) {\n        \n        if(root==null)\n            return 0;\n        \n        if(root.val==getSum(root)/getCnt(root))\n            res++;\n        \n        averageOfSubtree(root.left);\n        averageOfSubtree(root.right);\n\n        return res;\n\n\n    }\n\n    private int getSum(TreeNode node){\n        if(node==null)\n            return 0;\n\n        return node.val + getSum(node.left) + getSum(node.right);\n    }\n\n\n    private int getCnt(TreeNode node){\n        if(node==null)\n            return 0;\n        \n        if(node.left==null && node.right==null){\n            return 1;\n        }\n\n        return 1 + getCnt(node.left) + getCnt(node.right);\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"count-nodes-equal-to-average-of-subtree","has_notes":false,"flag_type":1}