{"id":1271949221,"question_id":416,"lang":"java","lang_name":"Java","time":"2 weeks","timestamp":1717037262,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1271949221/","is_pending":"Not Pending","title":"Partition Equal Subset Sum","memory":"N/A","code":"class Solution {\n    public boolean canPartition(int[] nums) {\n\n        \n        int sum = 0;\n        for(int n : nums){\n            sum += n;\n        }\n\n        if(sum%2!=0) return false;\n        int target = sum/2;\n\n        int len = nums.length;\n        boolean[][] dp = new boolean[target+1][len+1];\n        Arrays.fill(dp[0], true);\n\n        for(int i=1; i<=len; i++){\n            int c = nums[i-1];\n\n            for(int j=1; j<=target; j++){\n                dp[j][i] = dp[j][i-1];\n\n                if(j-c>=0 && dp[j-c][i]){\n                    dp[j][i] = true;\n                }\n            }\n        }\n\n        return dp[target][len];\n        \n    }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    //     // ref 322. Coin Change\n    //     // ref 518. Coin Change II\n    //     // ref 416. Partition Equal Subset Sum\n    //     // ref 377. Combination Sum IV, \n\n    //     int len = nums.length;\n    //     int sum = 0 ;\n\n    //     for(int n : nums){\n    //         sum+=n;\n    //     }\n\n    //     if(sum%2==1) return false;\n\n    //     sum = sum/2;\n\n    //     boolean[][] dp = new boolean[len+1][sum+1]; //use some of first i number which add up to sum\n    //     dp[0][0] = true;\n\n    //     // dp : 1 index, \n    //     // I.  dp[i][s] = dp[i-1][s] // 不選nums[i], 前i-1個已經可以組成s\n    //     // II. dp[i][s] = dp[i-1][s-nums[i]] //選nums[i], 狀態就可以由 dp[i-1][s-nums[i]] 轉移過來\n    //     // => dp[i][s] = dp[i-1][s] || (s-nums[i]>=0 && dp[i-1][s-nums[i]])\n\n    //     for(int i=1; i<=len; i++){\n    //         for(int s=0; s<=sum; s++){\n    //             dp[i][s] = dp[i-1][s] || (s-nums[i-1]>=0 && dp[i-1][s-nums[i-1]]);\n    //         }\n    //     }\n    //     return dp[len][sum];\n\n    // } \n\n\n\n\n/*  // backtrack 我們就不看了\n\n    private boolean helper(int[] nums, boolean[]seen, int left, int right, int target){\n        if(left==target && right==target) return true;\n\n        if(left>target|| right>target) return false;\n\n\n        int len = nums.length;\n        for(int i=0; i<len; i++){\n            if(seen[i]) continue;\n            for(int j=0; j<len; j++){\n\n                if(seen[j] || i==j) continue;\n\n                seen[i] = true;\n                seen[j] = true;\n                helper(nums, seen, left+nums[i], right)\n\n            }\n            \n\n        }\n    }   */\n\n}","compare_result":"11111100000111111111101111110011111000111111111111111111111111111111111111111111111111111111111111111011111111111111111111111111110011011011011","title_slug":"partition-equal-subset-sum","has_notes":false,"flag_type":1}