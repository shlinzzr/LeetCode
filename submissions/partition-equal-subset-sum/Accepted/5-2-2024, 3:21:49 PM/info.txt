{"id":1247200821,"question_id":416,"lang":"java","lang_name":"Java","time":"1Â month, 1Â week","timestamp":1714634509,"status":10,"status_display":"Accepted","runtime":"36 ms","url":"/submissions/detail/1247200821/","is_pending":"Not Pending","title":"Partition Equal Subset Sum","memory":"46.5 MB","code":"class Solution {\n    public boolean canPartition(int[] nums) {\n\n        int len = nums.length;\n        int sum = 0 ;\n\n        for(int n : nums){\n            sum+=n;\n        }\n\n        if(sum%2==1) return false;\n\n        sum = sum/2;\n\n        boolean[][] dp = new boolean[len+1][sum+1]; //use some of first i number which add up to sum\n        dp[0][0] = true;\n\n        // I.  dp[i][s] = dp[i-1][s]\n        // II. dp[i][s] = dp[i-1][s-nums[i]]\n        // => dp[i][s] = dp[i-1][s] || (s-nums[i]>=0 && dp[i-1][s-nums[i]])\n\n        for(int i=1; i<=len; i++){\n            for(int s=0; s<=sum; s++){\n                dp[i][s] = dp[i-1][s] || (s-nums[i-1]>=0 && dp[i-1][s-nums[i-1]]);\n            }\n        }\n\n\n       \n        return dp[len][sum];\n\n\n\n\n\n    } \n\n/*\n    private boolean helper(int[] nums, boolean[]seen, int left, int right, int target){\n        if(left==target && right==target) return true;\n\n        if(left>target|| right>target) return false;\n\n\n        int len = nums.length;\n        for(int i=0; i<len; i++){\n            if(seen[i]) continue;\n            for(int j=0; j<len; j++){\n\n                if(seen[j] || i==j) continue;\n\n                seen[i] = true;\n                seen[j] = true;\n                helper(nums, seen, left+nums[i], right)\n\n            }\n            \n\n        }\n    }   */\n\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"partition-equal-subset-sum","has_notes":false,"flag_type":1}