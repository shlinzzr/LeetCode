{"id":834427915,"question_id":416,"lang":"java","lang_name":"Java","time":"1 year, 7 months","timestamp":1667273655,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/834427915/","is_pending":"Not Pending","title":"Partition Equal Subset Sum","memory":"N/A","code":"class Solution {\n    public boolean canPartition(int[] nums) {\n       \n        boolean res = false;\n        int sum = 0;\n        for(int n : nums){\n            sum+=n;\n        }\n        \n        if(sum%2==1)\n            return false;\n        \n        sum/=2;\n        \n        System.out.println(sum);\n        \n        HashMap<Integer, Boolean> map = new HashMap<>();\n        \n        return dfs(nums, 0, sum, map, 0);        \n        \n    }\n    \n    private boolean dfs(int[] nums, int curr, int target, HashMap<Integer, Boolean> map , int st){\n        \n        if(map.containsKey(curr))\n            return map.get(curr);\n        \n        if(curr==target)\n            return true;\n        \n        boolean ans = false;\n        for(int i=st; i<nums.length; i++){\n            int n = nums[i];\n            if(curr+n<=target){\n                boolean rt = dfs(nums, curr+n, target, map, i+1);\n                \n                ans = ans || rt;\n            }\n        }\n        \n        if(ans==true)\n            map.put(curr, ans);\n        \n        return ans;\n    }\n}","compare_result":"11111111111111111111111111111111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"partition-equal-subset-sum","has_notes":false,"flag_type":1}