{"id":834429909,"question_id":416,"lang":"java","lang_name":"Java","time":"1 year, 7 months","timestamp":1667273895,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/834429909/","is_pending":"Not Pending","title":"Partition Equal Subset Sum","memory":"N/A","code":"public class Solution {\n    public boolean canPartition(int[] nums) {\n        Map<Integer, Integer> map = new HashMap<Integer, Integer>();\n        int sum = 0;\n        for(int i : nums){\n            if(map.containsKey(i)){\n                map.put(i, map.get(i) + 1);\n            }else{\n                map.put(i, 1);\n            }\n            sum += i;\n        }\n        if(sum % 2 == 1) return false;\n        return helper(map, sum / 2);\n    }\n    \n    private boolean helper(Map<Integer, Integer> map, int target){\n        /*target is achieveable*/\n        if(map.containsKey(target) && map.get(target) > 0) return true;\n        /*dfs*/\n        for(int key : map.keySet()){\n            if(key < target && map.get(key) > 0){\n                map.put(key, map.get(key) - 1);\n                if(helper(map, target - key)) return true;\n                map.put(key, map.get(key) + 1);\n            }\n        }\n        return false;\n    }\n}","compare_result":"11111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"partition-equal-subset-sum","has_notes":false,"flag_type":1}