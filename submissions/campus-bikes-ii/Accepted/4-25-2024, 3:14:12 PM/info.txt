{"id":1241464154,"question_id":1067,"lang":"java","lang_name":"Java","time":"1 month, 2 weeks","timestamp":1714029252,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1241464154/","is_pending":"Not Pending","title":"Campus Bikes II","memory":"41 MB","code":"    \n// State reducing dynamic programming\nclass Solution {\n    \n    // happygirlzt backtraking -> bit state compress\n    // https://www.youtube.com/watch?v=nyOE2x5vTUk\n    \n    \n    public int assignBikes(int[][] workers, int[][] bikes) {\n        int n = bikes.length;\n        int[] dp = new int[1 << n]; // 2^n choices\n        return dfs(workers, bikes, 0, 0, dp);\n    }\n\n    private int dfs(int[][] workers, int[][] bikes, int widx, int state, int[] dp) {\n        if (widx == workers.length) \n            return 0;\n        \n        if (dp[state] != 0)  return dp[state];\n        \n        int min = Integer.MAX_VALUE;\n\n        for (int i = 0; i < bikes.length; i++) {\n            if ((state & (1 << i)) == 0) { // bike is not used\n                \n                int[] w = workers[widx];\n                int[] b = bikes[i];\n                \n                int nextBikesState = state | (1<<i);\n                \n                min = Math.min(min, getDistance(w, b) + dfs(workers, bikes, widx + 1, nextBikesState, dp));\n            }\n        }\n\n        dp[state] = min;\n        return min;\n    }\n    \n    private int getDistance(int[] a, int[] b){\n        \n        return Math.abs(a[0]-b[0]) + Math.abs(a[1]-b[1]);\n            \n    }\n    \n}","compare_result":"11111111111111111111111111111111111111111111","title_slug":"campus-bikes-ii","has_notes":false,"flag_type":1}