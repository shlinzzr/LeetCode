{"id":1134225184,"question_id":1067,"lang":"java","lang_name":"Java","time":"5 months, 1 week","timestamp":1704164055,"status":10,"status_display":"Accepted","runtime":"727 ms","url":"/submissions/detail/1134225184/","is_pending":"Not Pending","title":"Campus Bikes II","memory":"40.5 MB","code":"class Solution {\n    \n    int[] memo;\n    int min = Integer.MAX_VALUE;\n    public int assignBikes(int[][] workers, int[][] bikes) {\n        memo = new int[workers.length];\n        dfs(new boolean[bikes.length], workers, 0, bikes, 0);\n        return min;\n    }\n    public int dfs(boolean[] visit, int[][] workers, int i, int[][] bikes, int distance) {\n        if (i >= workers.length) {\n            min = Math.min(distance, min);\n            return 0;\n        }\n        if (distance > min) {\n            return 0;\n        }\n\n        if(memo[i]!=0) return memo[i];\n        int rt = Integer.MAX_VALUE;\n\n        for (int j = 0; j < bikes.length; j++) {\n            if (visit[j]) {\n                continue;\n            }\n            visit[j] = true;\n            rt = Math.min(rt, dfs(visit, workers, i + 1, bikes, distance + dis(bikes[j], workers[i])));\n            visit[j] = false;\n        }\n\n        memo[i] = rt;\n        return rt;\n    }\n    public int dis(int[] p1, int[] p2) {\n        return Math.abs(p1[0] - p2[0]) + Math.abs(p1[1] - p2[1]);\n    }\n        \n        \n    \n    \n}","compare_result":"11111111111111111111111111111111111111111111","title_slug":"campus-bikes-ii","has_notes":false,"flag_type":1}