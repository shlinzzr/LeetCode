{"id":852711849,"question_id":946,"lang":"java","lang_name":"Java","time":"1 year, 6 months","timestamp":1669876757,"status":10,"status_display":"Accepted","runtime":"41 ms","url":"/submissions/detail/852711849/","is_pending":"Not Pending","title":"Smallest Range II","memory":"49.9 MB","code":"class Solution {\n    public int smallestRangeII(int[] nums, int k) {\n        \n        \n        Arrays.sort(nums);\n        \n        if(nums.length==1)\n            return 0;\n        \n        int len = nums.length;\n        \n        int min = nums[len-1] - nums[0];\n        \n        // Set<Integer> set = new TreeSet<>();\n        \n        \n        for(int i=0; i<nums.length-1; i++){\n            int a = nums[i];\n            int b = nums[i+1];\n            \n            int high = Math.max(nums[len-1]-k, a+k);\n            int low = Math.min(nums[0]+k, b-k);\n            min = Math.min(min, high-low);\n            \n            \n        }\n        \n        // List<Integer> list = new ArrayList<>(set);\n        // for(int i=0; i<list.size()-1; i++){\n        //     System.out.println(list.get(i));\n        //     min = list.get(i+1) - list.get(i);\n        // }\n        \n        \n        return min;\n        \n        \n\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"smallest-range-ii","has_notes":false,"flag_type":1}