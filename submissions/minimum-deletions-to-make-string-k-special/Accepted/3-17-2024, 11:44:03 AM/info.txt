{"id":1205936150,"question_id":3360,"lang":"java","lang_name":"Java","time":"2 months, 3 weeks","timestamp":1710647043,"status":10,"status_display":"Accepted","runtime":"147 ms","url":"/submissions/detail/1205936150/","is_pending":"Not Pending","title":"Minimum Deletions to Make String K-Special","memory":"45.7 MB","code":"class Solution {\n    public int minimumDeletions(String word, int abs) {\n        \n        HashMap<Character, Integer> map= new HashMap<>();\n        \n        \n        for(int i=0; i<word.length(); i++){\n            char ch = word.charAt(i);\n            map.put(ch, map.getOrDefault(ch,0)+1);\n        }\n        \n        TreeMap<Integer, Integer> f = new TreeMap<>(); // freq , 有幾個數字\n        for(int v : map.values()){\n            f.put(v, f.getOrDefault(v,0)+1);\n        }\n        \n//          for(int key : f.keySet())\n//             System.out.println(key + \" \"+ f.get(key));\n        \n        int res = word.length();\n        \n        for(int i = f.firstKey(); i<=f.lastKey(); i++){\n            \n            int cur = 0;\n            for(int k : f.keySet()){\n                \n                if(k<i){\n                    // cur += Math.min(k*f.get(k), (i-k) * f.get(k));\n                      cur += (k*f.get(k));\n                }\n                 \n                \n                if(k-i>abs){\n                    cur += Math.min(f.get(k)*k , (k-i-abs)*f.get(k));\n                }\n                \n                // System.out.println(i + \" k=\"+k + \" cur=\"+cur);\n                \n            }\n            \n            // System.out.println (i + \" cur=\"+cur);\n              res = Math.min(res, cur);\n            \n            \n        }\n        \n        //\"uzzezzuzenzu\"\n        //0\n        \n        // 1 n\n        // 2 e\n        // 3 u\n        // 6 z\n        \n        \n        \n        return res;\n        \n//        \n//         List<Integer> flist = new ArrayList<>(f.keySet());\n        \n//         for(int i=0; i<flist.size(); i++){\n            \n            \n//             HashMap<Integer, Integer> m = new HashMap<>(f);\n            \n//             int cur = 0;\n//             // to achieve freq \n//             int freq = flist.get(i);\n            \n//             //delete below\n//             for(int j=0; j<i; j++){\n//                 int df = flist.get(j);\n//                 cur +=  f.get(df);\n                \n//                 m\n//             }\n            \n//             //delete upper\n//             for(int j=i+1; j<flist.size(); j++){\n//                 int df = flist.get(j);\n                \n//                 if(df-freq>k){\n//                     cur += df\n                        \n//                 }\n//             }\n            \n//             res = Math.min(res, cur);\n            \n//         }\n        \n//         return res;\n        // dabdcbdcdcdd\n        // ddddda\n        \n// a 1 1 \n// b 2 1\n// c 3 1\n// d 5 1\n    \n    \n//     1 => 5\n//     2 =>\n        \n        \n        \n//         while(f.lastKey() - f.firstKey()>k){\n//             int first = f.firstKey();\n//             int last = f.lastKey();\n            \n//             int fcnt = f.get(first);\n//             int lcnt = f.get(last);\n                \n            \n//             if(first*fcnt<=last * lcnt){\n                \n//                 res+= first*fcnt;\n//                 f.put(first+1, f.getOrDefault(first+1, 0)+fcnt);\n//                 f.remove(first);\n//             }else{\n//                 res += last * lcnt;\n//                 f.put(last-1, f.getOrDefault(last-1, 0)+lcnt);\n//                 f.remove(last);\n//             }\n            \n//         }\n        \n        \n//         1:1              10:10 k=8\n//             2:11\n        \n        \n    }\n}","compare_resulttitle_slug":"minimum-deletions-to-make-string-k-special","has_notes":false,"flag_type":1}