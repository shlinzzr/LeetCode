{"id":916743167,"question_id":127,"lang":"java","lang_name":"Java","time":"1 year, 2 months","timestamp":1679040377,"status":10,"status_display":"Accepted","runtime":"102 ms","url":"/submissions/detail/916743167/","is_pending":"Not Pending","title":"Word Ladder","memory":"44.6 MB","code":"class Solution {\n    public int ladderLength(String beginWord, String endWord, List<String> wordList) {\n        HashSet<String> set=new HashSet<>(wordList);\n        if(!set.contains(endWord))\n            return 0;\n        \n        \n        Queue<Pair> q=new LinkedList<>();\n        q.add(new Pair(beginWord,1));\n        while(!q.isEmpty()){\n            Pair p=q.poll();\n            \n            if(p.word.equals(endWord)){\n                return p.step;\n            }\n            \n            String word=p.word;\n            for(int i=0;i<word.length();i++){\n                for(char ch='a'; ch<='z';ch++){\n                    char[] temp = word.toCharArray();\n                    temp[i]=ch;\n                    if(set.contains(new String(temp))){\n                        q.add(new Pair(new String(temp), p.step+1));\n                        set.remove(new String(temp));\n                    }\n                }\n            }\n        }\n        return 0;\n    }\n    \n    class Pair{\n        String word;\n        int step;\n        public Pair(String word ,int step){\n            this.word=word;\n            this.step = step;\n        }\n    }\n    \n}\n","compare_result":"11111111111111111111111111111111111111111111111111","title_slug":"word-ladder","has_notes":false,"flag_type":1}