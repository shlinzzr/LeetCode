{"id":898359255,"question_id":127,"lang":"java","lang_name":"Java","time":"1 year, 3 months","timestamp":1676449154,"status":10,"status_display":"Accepted","runtime":"1862 ms","url":"/submissions/detail/898359255/","is_pending":"Not Pending","title":"Word Ladder","memory":"43.1 MB","code":"class Solution {\n    public int ladderLength(String beginWord, String endWord, List<String> wordList) {\n        HashSet<String> wordSet = new HashSet<>(wordList);\n        if(!wordSet.contains(endWord))\n            return 0;\n        \n        \n        HashMap<String, Set<String>> map = new HashMap<>();\n        findNeb(beginWord, wordSet, map);\n        for(String w : wordSet){\n            findNeb(w, wordSet, map);\n        }\n        \n        // for(Map.Entry<String, Set<String>> en : map.entrySet()){\n        //     System.out.println(en.getKey()+ \" \" + en.getValue());\n        // }\n        \n        \n        \n        HashSet<String> seen = new HashSet<>();\n        Queue<String> q = new LinkedList<>();\n        q.add(beginWord);\n        seen.add(beginWord);\n        int step=1;\n        while(!q.isEmpty()){\n            step++;\n            \n            for(int i=q.size(); i>0; i--){\n                \n                String p = q.poll();\n                Set<String> nebs = map.get(p);\n                if(nebs.contains(endWord))\n                    return step;\n                \n                for(String n : nebs){\n                    if(seen.contains(n))\n                        continue;\n                    \n                    seen.add(n);\n                    q.offer(n);\n                }\n            }\n            // System.out.println(step +\" \" + seen);\n            \n        }\n        \n        return 0;\n        \n        \n    }\n    \n     private void findNeb(String s, Set<String> wordSet, HashMap<String, Set<String>> map){\n         map.put(s, new HashSet<>());\n         \n        for(String w : wordSet){\n             \n            boolean diff=false;\n            boolean add = true;\n            for(int i=0; i<s.length(); i++){\n                if(s.charAt(i)!=w.charAt(i)){\n                    if(diff==false){\n                        diff=true;\n                    }else{\n                        add=false;\n                        break;\n                    }\n                }\n            }\n            if(add)\n                map.get(s).add(w);\n         }\n     }\n    \n//     private void findNeb(String s, List<String> wordList, HashMap<String, List<String>> map){\n        \n//         int[] arr = new int[26];\n//         for(char ch : s.toCharArray()){\n//             arr[ch-'a']++;\n//         }\n        \n//         map.put(s, new ArrayList<>());\n        \n//         int[] tmp = new int[26];\n//         for(String w : wordList){\n            \n//             System.arraycopy(arr, 0, tmp, 0, 26);\n            \n//             for(char ch : w.toCharArray()){\n//                 tmp[ch-'a']--;\n//             }\n            \n//             int diff=0;\n//             for(int t : tmp){\n//                 if(t>0)\n//                     diff++;\n//                 if(diff>2)\n//                     continue;\n//             }\n            \n//             if(diff<=2 && diff!=0)\n//                 map.get(s).add(w);\n//         }\n        \n//     }\n}","compare_result":"11111111111111111111111111111111111111111111111111","title_slug":"word-ladder","has_notes":false,"flag_type":1}