{"id":800902091,"question_id":127,"lang":"java","lang_name":"Java","time":"1 year, 9 months","timestamp":1663292007,"status":10,"status_display":"Accepted","runtime":"284 ms","url":"/submissions/detail/800902091/","is_pending":"Not Pending","title":"Word Ladder","memory":"118 MB","code":"class Solution {\n    \n    \n    public int ladderLength(String beginWord, String endWord, List<String> wordList) {\n        \n        if(beginWord.equals(endWord))\n            return 0;\n        \n        if(!wordList.contains(endWord))\n            return 0;\n        \n        \n\n        \n        return helper(beginWord, endWord, wordList);\n        \n        \n    }\n    \n    private int helper(String beginWord, String endWord, List<String> wordList){\n        System.out.println(\"\\nbeginWord=\"+beginWord);\n        \n        \n        Set<String> set = new HashSet<>(wordList);\n        Set<String> history  = new HashSet<>();\n        Queue<String> queue = new LinkedList<>();\n        queue.offer(beginWord);\n        int cnt=0;\n        \n        while(!queue.isEmpty()){\n            cnt++;  \n            int size = queue.size();\n            for(int i = 0; i < size; i++){\n                String word = queue.poll();\n                \n                if(word.equals(endWord))\n                    return cnt;\n\n                // Set<String> candidate = findCandidate(str, wordList, history);\n                // for(String can : candidate){\n                //        queue.offer(can); \n                // } \n                \n                for(int j = 0; j < word.length(); j++){\n                    for(int k = 'a'; k <= 'z'; k++){\n                        char arr[] = word.toCharArray();\n                        arr[j] = (char) k;\n                        \n                        String str = new String(arr);\n                        if(set.contains(str) && !history.contains(str)){\n                            queue.add(str);\n                            history.add(str);\n                        }\n                    }\n                }\n                \n            }\n        }\n            \n        return 0;\n    }\n    \n    \n    \n    private Set<String> findCandidate(String s, List<String> wordList, Set<String> history){\n        Set<String> candidate = new HashSet<>();\n        \n        for(String word : wordList){\n            int cnt=0;\n            \n            if(s.length()!=word.length() || history.contains(word))\n                continue;\n            \n            for(int i=0; i<s.length(); i++){\n                if(s.charAt(i)!=word.charAt(i))\n                    cnt++;\n                \n                if(cnt>1)\n                    break;\n            }\n            \n            if(cnt==1)\n                candidate.add(word);\n        }\n        \n        return candidate;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111","title_slug":"word-ladder","has_notes":false,"flag_type":1}