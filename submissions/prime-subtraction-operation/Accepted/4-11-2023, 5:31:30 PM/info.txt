{"id":931802944,"question_id":2716,"lang":"java","lang_name":"Java","time":"1 year, 2 months","timestamp":1681205490,"status":10,"status_display":"Accepted","runtime":"9 ms","url":"/submissions/detail/931802944/","is_pending":"Not Pending","title":"Prime Subtraction Operation","memory":"42.9 MB","code":"class Solution {\n    public boolean primeSubOperation(int[] nums) {\n        List<Integer> primes = sieveOfEratosthenes(1000);\n        for (int i = nums.length; i >= 2; i--) {\n            if (nums[i - 2] >= nums[i - 1]) {\n                int index = -1;\n                for (int primeIndex = 0; primeIndex < primes.size(); primeIndex++) {\n                    if (primes.get(primeIndex) >= nums[i - 2]) {\n                        break;\n                    }\n                    \n                    if (nums[i - 2] - primes.get(primeIndex) < nums[i - 1]) {\n                        index = primeIndex;\n                        break;\n                    }\n                }\n                if (index == -1) {\n                    return false;\n                }\n                nums[i - 2] = nums[i - 2] - primes.get(index);\n            }\n        }\n        return true;\n    }\n    public List<Integer> sieveOfEratosthenes(int count) {\n        List<Integer> result = new ArrayList<>();\n        boolean[] primes = new boolean[count + 1];\n        for (int i = 0; i < primes.length; i++) {\n            primes[i] = true;\n        }        \n        for (int i = 2; i * i <= count; i++) {\n            if (primes[i]) {\n                for (int j = i * 2; j <= count; j = j + i) {\n                    primes[j] = false;\n                }\n            }\n        }\n        for (int i = 2; i <= count; i++) {\n            if (primes[i]) {\n                result.add(i);\n            }\n        }\n        return result;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"prime-subtraction-operation","has_notes":false,"flag_type":1}