{"id":1014554260,"question_id":352,"lang":"java","lang_name":"Java","time":"10 months, 1 week","timestamp":1691401094,"status":10,"status_display":"Accepted","runtime":"22 ms","url":"/submissions/detail/1014554260/","is_pending":"Not Pending","title":"Data Stream as Disjoint Intervals","memory":"43.8 MB","code":"class SummaryRanges {\n\n    private Set<Integer> set;\n\n    public SummaryRanges() {\n        set = new TreeSet<>();\n    }\n    \n    public void addNum(int value) {\n       set.add(value);\n    }\n    \n    public int[][] getIntervals() {\n        \n        if (set.isEmpty()) {\n            return new int[0][];\n        }\n        \n        List<int[]> intervals = new ArrayList<>();\n        int left = -1, right = -1;\n        for (Integer val : set) {\n            if (left < 0) {\n                left = val;\n                right= val;\n                \n            } else if (val == right + 1) {\n                right = val;\n                \n            } else {\n                intervals.add(new int[] {left, right});\n                left = val;\n                right= val;\n            } \n        }\n        intervals.add(new int[] {left, right});\n        return intervals.toArray(new int[0][]); \n    }\n}\n\n/**\n * Your SummaryRanges object will be instantiated and called as such:\n * SummaryRanges obj = new SummaryRanges();\n * obj.addNum(value);\n * int[][] param_2 = obj.getIntervals();\n */","compare_result":"1111111","title_slug":"data-stream-as-disjoint-intervals","has_notes":false,"flag_type":1}