{"id":1226341543,"question_id":1308,"lang":"java","lang_name":"Java","time":"2Â months","timestamp":1712547777,"status":10,"status_display":"Accepted","runtime":"36 ms","url":"/submissions/detail/1226341543/","is_pending":"Not Pending","title":"Smallest String With Swaps","memory":"85.6 MB","code":"class Solution {\n\n    int[] parent;\n\n    public String smallestStringWithSwaps(String s, List<List<Integer>> pairs) {\n\n        int len = s.length();\n\n        parent = new int[len];\n        for(int i=0; i<len; i++){\n            parent[i] = i;\n        }\n\n        for(List<Integer> p : pairs){\n            union(p.get(0), p.get(1));\n        }\n\n        Map<Integer, List<Integer>> map = new HashMap<>(); // root -> all children idx\n\n\n        for(int i=0; i<len; i++){\n\n            int root = find(i);\n            map.putIfAbsent(root, new ArrayList<>());\n            map.get(root).add(i);\n        }\n\n        char[] arr = s.toCharArray();\n\n        for(List<Integer> idxs : map.values()){\n            List<Character> list = new ArrayList<>();\n            for(int idx : idxs){\n                list.add(s.charAt(idx));\n            }\n\n            Collections.sort(list);\n            \n            for(int i =0; i<idxs.size(); i++){\n                arr[idxs.get(i)] = list.get(i);   \n            }\n\n\n        }\n\n        return new String(arr);\n\n\n\n    }\n\n\n    private int find( int x){\n        if(parent[x]!=x) \n            parent[x]= find(parent[x]);\n        return parent[x];\n    }\n\n    private void union(int a,int b){\n        a = find(a);\n        b = find(b);\n        if(a==b) return ;\n\n        if(a<b){\n            parent[b] = a;\n        }else{\n            parent[a] = b;\n        }\n    }\n}","compare_result":"111111111111111111111111111111111111","title_slug":"smallest-string-with-swaps","has_notes":false,"flag_type":1}