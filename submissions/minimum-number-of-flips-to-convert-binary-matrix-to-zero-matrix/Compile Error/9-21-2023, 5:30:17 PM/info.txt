{"id":1055293147,"question_id":1409,"lang":"java","lang_name":"Java","time":"8 months, 3 weeks","timestamp":1695288617,"status":20,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/1055293147/","is_pending":"Not Pending","title":"Minimum Number of Flips to Convert Binary Matrix to Zero Matrix","memory":"N/A","code":"class Solution {\n    public int minFlips(int[][] mat) {\n\n        int start = 0;\n        int h = mat.length;\n        int w = mat[0].length;\n\n        for (int i = 0; i < h; ++i)\n            for (int j = 0; j < w; ++j)\n                start |= mat[i][j] << (i * n + j); // convert the matrix to an int. \n\n        /*\n        [1, 0]\n        [0, 1] => 1001\n         */\n\n        int[][] dirs = {{1,0}, {0,1},{-1,0},{0,-1},{0,0}};\n\n        Queue<Integer> q = new LinkedList<>(Arrays.asList(start));\n        Set<Integer> seen = new HashSet<>(q);\n\n        for (int step = 0; !q.isEmpty(); step++) {\n            \n            int size = q.size();\n            while(siz-->0){\n                int cur = q.poll();\n                if (cur == 0) // All 0s matrix found.\n                    return step;\n\n                for (int i = 0; i < h; i++) { // traverse all m * n bits of cur.\n                    for (int j = 0; j < w; j++) {\n                        int next = cur;\n                        for(int[] d: dirs){\n                            int r = i + d[0]\n                            int c = j + d[1];\n                            if (r >= 0 && r < m && c >= 0 && c < n)\n                                next ^= 1 << (r * n + c);\n                        }\n                        if (seen.add(next)) // seen it before ?\n                            q.offer(next); // no, put it into the Queue.\n                    }\n                }    \n            }\n        }\n        return -1; // impossible to get all 0s matrix.\n}","compare_result":null,"title_slug":"minimum-number-of-flips-to-convert-binary-matrix-to-zero-matrix","has_notes":false,"flag_type":1}