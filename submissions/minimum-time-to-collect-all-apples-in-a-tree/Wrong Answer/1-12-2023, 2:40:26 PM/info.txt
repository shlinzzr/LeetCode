{"id":876612664,"question_id":1554,"lang":"java","lang_name":"Java","time":"1 year, 5 months","timestamp":1673505626,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/876612664/","is_pending":"Not Pending","title":"Minimum Time to Collect All Apples in a Tree","memory":"N/A","code":"class Solution {\n    public int minTime(int n, int[][] edges, List<Boolean> hasApple) {\n                \n        Map<Integer, List<Integer>> map = new HashMap<>();\n        \n        for(int i=0; i<n; i++){\n            map.put(i, new ArrayList<>());\n        }\n        \n        for(int[]e :edges){\n            map.get(e[0]).add(e[1]);\n            map.get(e[1]).add(e[0]);\n        }\n        \n        boolean[] seen = new boolean[n];\n        \n        return dfs(map, hasApple, seen, 0, 0);\n        \n    }\n    \n    private int dfs(Map<Integer, List<Integer>> map, List<Boolean> hasApple, boolean[] seen, int node, int cost){\n        \n        if(seen[node])\n            return 0;\n        seen[node]=true;\n        \n        int res = 0; \n        for(int next : map.get(node)){\n            res+=dfs(map, hasApple, seen, next, 2);\n        }\n        \n        if(res==0 && hasApple.get(node))\n            return 0;\n        \n        return res+cost;\n        \n        \n    }\n}","compare_result":"1000100100000001000000010000001000000000000000000000000","title_slug":"minimum-time-to-collect-all-apples-in-a-tree","has_notes":false,"flag_type":1}