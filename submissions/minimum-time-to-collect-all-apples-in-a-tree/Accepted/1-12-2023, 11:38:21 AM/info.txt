{"id":876525253,"question_id":1554,"lang":"java","lang_name":"Java","time":"1 year, 5 months","timestamp":1673494701,"status":10,"status_display":"Accepted","runtime":"50 ms","url":"/submissions/detail/876525253/","is_pending":"Not Pending","title":"Minimum Time to Collect All Apples in a Tree","memory":"85.8 MB","code":"class Solution {\n    public int minTime(int n, int[][] edges, List<Boolean> hasApple) {\n        \n        Map<Integer, List<Integer>> map = new HashMap<>();\n        boolean[] seen = new boolean[n];\n        for(int i=0; i<n; i++){\n            map.put(i, new ArrayList<>());\n        }\n        \n        for(int[]e :edges){\n            map.get(e[0]).add(e[1]);\n            map.get(e[1]).add(e[0]);\n        }\n        \n        return dfs(map, hasApple, 0, 0, seen);\n        \n    }\n    \n    \n    private int dfs( Map<Integer, List<Integer>> map, List<Boolean> hasApple, int node, int cost, boolean[] seen){\n        \n        if(seen[node])\n            return 0;\n        seen[node]=true;\n        \n        \n        List<Integer> list = map.get(node);\n        \n        int res = 0;\n        \n        for(int next : list){\n            res += dfs(map, hasApple, next, 2, seen);\n        }\n        \n        if(res==0 && hasApple.get(node) == false)\n            return 0;\n        \n        \n        \n        return res+cost;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111","title_slug":"minimum-time-to-collect-all-apples-in-a-tree","has_notes":false,"flag_type":1}