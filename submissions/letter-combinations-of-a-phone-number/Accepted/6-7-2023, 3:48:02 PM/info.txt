{"id":965731661,"question_id":17,"lang":"java","lang_name":"Java","time":"1Â year","timestamp":1686124082,"status":10,"status_display":"Accepted","runtime":"5 ms","url":"/submissions/detail/965731661/","is_pending":"Not Pending","title":"Letter Combinations of a Phone Number","memory":"41.6 MB","code":"class Solution {\n    \n    String[] arr = new String[]{\"\", \"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"qprs\", \"tuv\", \"wxyz\"};\n    \n    public List<String> letterCombinations(String digits) {\n        List<String> res = new ArrayList<>();\n        List<String> curr = new ArrayList<>();\n        \n        if(!digits.isEmpty())\n            curr.add(\"\");\n        \n        helper(digits, res, curr, 0);\n        \n        return res;\n    }\n    \n    private void helper(String digits,  List<String> res,  List<String> curr, int idx){\n        \n        if(idx==digits.length()){\n            \n            for(String cur : curr){\n                res.add(cur);\n            }\n            return;\n        }\n        \n        char n = digits.charAt(idx);\n        String can = arr[n-'1'];\n        \n        \n        List<String> tmp = new ArrayList<>();\n        for(char ch : can.toCharArray()){\n            \n            for(String cur : curr){\n                tmp.add(cur + ch);\n            }\n        }\n        \n        helper(digits, res, tmp, idx+1);\n        \n        \n        \n    }\n\n}","compare_result":"1111111111111111111111111","title_slug":"letter-combinations-of-a-phone-number","has_notes":false,"flag_type":1}