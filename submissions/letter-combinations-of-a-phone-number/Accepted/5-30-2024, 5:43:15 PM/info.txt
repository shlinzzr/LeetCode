{"id":1272230953,"question_id":17,"lang":"java","lang_name":"Java","time":"1 week, 6 days","timestamp":1717062195,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1272230953/","is_pending":"Not Pending","title":"Letter Combinations of a Phone Number","memory":"41.9 MB","code":"class Solution {\n    public List<String> letterCombinations(String digits) {\n\n        List<String> res= new ArrayList<>();\n\n        if(digits.isEmpty()) \n            return res;\n\n        Map<Character, String> map = new HashMap<>();\n        map.put('2', \"abc\");\n        map.put('3', \"def\");\n        map.put('4', \"ghi\");\n        map.put('5', \"jkl\");\n        map.put('6', \"mno\");\n        map.put('7', \"pqrs\");\n        map.put('8', \"tuv\");\n        map.put('9', \"wxyz\");\n\n\n        helper(digits, 0, new StringBuilder(), res, map);\n\n        return res;\n        \n    }\n\n    private void helper(String digits, int idx, StringBuilder sb, List<String> res, Map<Character, String> map){\n\n        if(idx==digits.length()){\n            res.add(sb.toString());\n            return;\n        }\n\n        \n        char key = digits.charAt(idx);\n        for(char ch : map.get(key).toCharArray()){\n            sb.append(ch);\n            helper(digits, idx+1, sb, res, map);\n            sb.deleteCharAt(sb.length()-1);\n        }\n\n    }\n}","compare_result":"1111111111111111111111111","title_slug":"letter-combinations-of-a-phone-number","has_notes":false,"flag_type":1}