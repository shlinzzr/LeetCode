{"id":1269033822,"question_id":2334,"lang":"java","lang_name":"Java","time":"2 weeks, 2 days","timestamp":1716783527,"status":10,"status_display":"Accepted","runtime":"37 ms","url":"/submissions/detail/1269033822/","is_pending":"Not Pending","title":"Number of Flowers in Full Bloom","memory":"80.4 MB","code":"class Solution {\n    public int[] fullBloomFlowers(int[][] flowers, int[] people) {\n\n        int n = flowers.length;\n        int[] start  = new int[n];\n        int[] end = new int[n];\n        for(int i = 0; i<n; i++){\n            start[i] = flowers[i][0];\n            end[i] = flowers[i][1];\n        }\n        // flowers = [[1,6],[3,7],[9,12],[4,13]], people = [2,3,7,11]\n        // n=4\n        // start : 1 3 4 9\n        // end :   6 7 12 13\n\n        //\n        // i==0, p=2, start bs find bloom = 3(idx==1)\n        // i==0, p=2, end bs find die = 6(idx==0)\n        // res[0] = 1-0 ??\n\n\n\n        Arrays.sort(start);\n        Arrays.sort(end);\n\n        int m = people.length;\n        int[] res =new int[m];\n        for(int i = 0; i<m; i++){\n            int bloom = binarySearch(start, people[i]+1); // for lowerbound offset, very tricky\n            int die = binarySearch(end, people[i]);\n            // System.out.println(bloom + \" \" + die);\n            res[i] = bloom - die;\n        }\n\n        return res;\n    }\n    //找第一個 arr[m]>= target\n    private int binarySearch(int[] arr, int target){\n        int res = arr.length;\n        int l =0;\n        int r = arr.length-1;\n        while(l<=r){\n            int m = (l+r)/2;\n            if(arr[m]>=target){\n                res = m;\n                r = m -1;\n            } else {\n                l = m +1;\n            }\n        }\n\n        return res;\n    }\n}\n\n\n        // // flowers : N, people: M\n        // // TreeMap : O(NlgN + MlgN)\n        // TreeMap<Integer, Integer> cntMap = new TreeMap<>();\n        // for(int[] f: flowers){\n        //     cntMap.put(f[0], cntMap.getOrDefault(f[0],0)+1);\n        //     cntMap.put(f[1]+1, cntMap.getOrDefault(f[1]+1,0)-1);\n        // }\n\n\n        // TreeMap<Integer, Integer> aggMap = new TreeMap<>();\n        // int agg = 0;\n        // for(int x : cntMap.keySet()){\n        //     agg += cntMap.get(x);\n        //     aggMap.put(x, agg);\n        // }\n\n        \n        // int len = people.length;\n        // int[] res = new int[len];\n        // for(int i=0; i<len; i++){\n        //     int t = people[i];\n        //     Integer x = aggMap.floorKey(t);\n        //     if(x!=null){\n        //         res[i] = aggMap.get(x);\n        //     }else{\n        //         res[i] = 0;\n        //     }\n        // }\n\n        // return res;\n\n\n\n        ","compare_result":"1111111111111111111111111111111111111111111111111111","title_slug":"number-of-flowers-in-full-bloom","has_notes":false,"flag_type":1}