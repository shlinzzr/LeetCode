{"id":1134459959,"question_id":526,"lang":"java","lang_name":"Java","time":"5 months, 1 week","timestamp":1704185059,"status":10,"status_display":"Accepted","runtime":"12 ms","url":"/submissions/detail/1134459959/","is_pending":"Not Pending","title":"Beautiful Arrangement","memory":"48.3 MB","code":"class Solution {\n\n    Integer[][] dp ;\n    int cnt =0 ;\n    public int countArrangement(int n) {\n         dp=new Integer[n+1][1<<(n+1)];\n        // if(n<=1) return n;\n\n        return dfs(n, 0, 1);\n    }\n\n    private int dfs(int n, int state, int agg){\n\n        if(agg==n+1){\n            return 1;\n        } \n\n        if(dp[agg][state]!=null) return dp[agg][state];\n\n        int res = 0 ;\n        for(int i=1; i<=n; i++){\n            if( (state & (1<<i))==0 && (i%agg==0 || agg%i==0)){\n                int newState = state | (1<<i);\n                res += dfs(n, newState, agg+1);\n            }\n        }\n        \n\n        return dp[agg][state]=res;\n    }\n}","compare_result":"111111111111111","title_slug":"beautiful-arrangement","has_notes":false,"flag_type":1}