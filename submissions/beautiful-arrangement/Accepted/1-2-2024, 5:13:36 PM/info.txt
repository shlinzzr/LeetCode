{"id":1134479870,"question_id":526,"lang":"java","lang_name":"Java","time":"5 months, 1 week","timestamp":1704186816,"status":10,"status_display":"Accepted","runtime":"64 ms","url":"/submissions/detail/1134479870/","is_pending":"Not Pending","title":"Beautiful Arrangement","memory":"61.8 MB","code":"class Solution {\n\n    Integer[][] dp ;\n    public int countArrangement(int n) {\n        dp = new Integer[1<<(n+3)][n+1];\n        if(n<=3) return n;\n\n        return dfs(n, 0, 1);\n        // 2 4 8 16 32 64\n        // 1 2 3 4. 5. 6\n    }\n\n    private int dfs(int n, int state, int agg){\n\n        if(agg==n+1){\n            return 1;\n        } \n        // System.out.println(state + \" \" + agg + \" \" + (1<<(n+2)));\n\n        if(dp[state][agg]!=null) return dp[state][agg];\n\n        int res = 0 ;\n        for(int i=1; i<=n; i++){\n            if( (state & (1<<i))==0 && (i%agg==0 || agg%i==0)){\n                int newState = state | (1<<i);\n                res += dfs(n, newState, agg+1);\n            }\n        }\n        \n        dp[state][agg]=res;\n        return res;\n    }\n}","compare_result":"111111111111111","title_slug":"beautiful-arrangement","has_notes":false,"flag_type":1}