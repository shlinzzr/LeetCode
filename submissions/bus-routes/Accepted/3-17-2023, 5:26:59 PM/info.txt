{"id":916777693,"question_id":833,"lang":"java","lang_name":"Java","time":"1 year, 2 months","timestamp":1679045219,"status":10,"status_display":"Accepted","runtime":"93 ms","url":"/submissions/detail/916777693/","is_pending":"Not Pending","title":"Bus Routes","memory":"99.8 MB","code":"class Solution {\n    public int numBusesToDestination(int[][] routes, int S, int T) {\n        int n = routes.length;\n        HashMap<Integer, HashSet<Integer>> to_routes = new HashMap<>();\n        for (int i = 0; i < routes.length; ++i) {\n            for (int j : routes[i]) {\n                if (!to_routes.containsKey(j))\n                    to_routes.put(j, new HashSet<Integer>());\n                to_routes.get(j).add(i);\n            }\n        }\n        Queue<int[]> bfs = new ArrayDeque();\n        bfs.offer(new int[] {S, 0});\n        HashSet<Integer> seen = new HashSet<>();\n        seen.add(S);\n        boolean[] seen_routes = new boolean[n];\n        while (!bfs.isEmpty()) {\n            int stop = bfs.peek()[0], bus = bfs.peek()[1];\n            bfs.poll();\n            if (stop == T) return bus;\n            for (int i : to_routes.get(stop)) {\n                if (seen_routes[i]) continue;\n                for (int j : routes[i]) {\n                    if (!seen.contains(j)) {\n                        seen.add(j);\n                        bfs.offer(new int[] {j, bus + 1});\n                    }\n                }\n                seen_routes[i] = true;\n            }\n        }\n        return -1;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111","title_slug":"bus-routes","has_notes":false,"flag_type":1}