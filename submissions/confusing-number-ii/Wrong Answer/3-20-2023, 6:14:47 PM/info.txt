{"id":918685170,"question_id":1077,"lang":"java","lang_name":"Java","time":"1 year, 2 months","timestamp":1679307287,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/918685170/","is_pending":"Not Pending","title":"Confusing Number II","memory":"N/A","code":"class Solution {\n    int[] base = {0,1,6,8,9};\n    int[] reverse_board = {0,1,-1,-1,-1,-1,9,-1,8,6};\n    public int confusingNumberII(int n) {\n        \n        // cal digit length\n        int temp = n;\n        int len = 0;\n        while(temp>0){\n            temp/=10;\n            len++;\n        }\n        \n        int ans = 0;\n        // if(len==10){\n        //     N-=1;\n        //     ans = 1;\n        //     len-=1;\n        // }\n        \n        Queue<Integer> queue = new LinkedList<>();\n        queue.offer(0);\n        int ori = 0;\n        for(int i =0; i<len;i++){  \n            int size = queue.size();\n            while(size>0){\n                int base_i = queue.poll();\n                for(int j =0; j < base.length; j++){\n                    int cur = base[j];\n                    if(i==0&&cur==0)continue;\n                    //build\n                    ori=base_i*10+cur;\n                    if(ori<=n){\n                        //store \n                        queue.offer(ori);\n                        //reverse\n                        int rev = reverse(ori);\n                        //check\n                        if(rev!=ori)ans++;                            \n                    }\n                }\n                size--;\n            }\n        }\n        return ans;\n    }\n    public int reverse(int b){\n        int a = 0;\n        while(b>0){\n            int bit = b%10;\n            b/=10;\n            a = a*10+ reverse_board[bit];\n        }\n        return a;\n    }\n}\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111110","title_slug":"confusing-number-ii","has_notes":false,"flag_type":1}