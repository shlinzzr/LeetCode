{"id":776820614,"question_id":930,"lang":"java","lang_name":"Java","time":"1 year, 9 months","timestamp":1660817254,"status":20,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/776820614/","is_pending":"Not Pending","title":"All Possible Full Binary Trees","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    \n    \n    public List<TreeNode> allPossibleFBT(int n) {\n        \n        List<TreeNode> res = new ArrayList<>();\n        if(N == 1) {\n            res.add(new TreeNode(0));\n            return res;\n        }\n        for(int i = 1; i < N; i += 2) {\n            List<TreeNode> leftSubTrees = allPossibleFBT(i);\n            List<TreeNode> rightSubTrees = allPossibleFBT(N - i - 1);\n            for(TreeNode l : leftSubTrees) {\n                for(TreeNode r : rightSubTrees) {\n                    TreeNode root = new TreeNode(0);\n                    root.left = l;\n                    root.right = r;\n                    res.add(root);\n                }\n            }\n        }\n        return res;\n    }\n    \n   // public List<TreeNode> allPossibleFBT(int n) {\n//         List<TreeNode> res = new ArrayList<>();\n        \n//         TreeNode head = new TreeNode(0);\n//         TreeNode curr = head;\n//         helper(res, head, curr, n-1);\n        \n//         return res;\n    // }\n    \n//     private void helper(List<TreeNode> res, TreeNode head, TreeNode curr, int n){\n        \n//         if(n==0){\n//             TreeNode node = head;\n//             res.add(node);\n//             return;\n//         }\n            \n//         for(int i=0; i<n; i++){\n//             curr.left = new TreeNode(0);\n//             helper(res, head, curr.left, i);    \n            \n//             curr.right = new TreeNode(0);\n//             helper(res, head, curr.right, n-1-i);\n//         }\n        \n//     }\n    \n    \n    \n    \n    \n}","compare_result":null,"title_slug":"all-possible-full-binary-trees","has_notes":false,"flag_type":1}