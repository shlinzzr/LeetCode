{"id":1277316018,"question_id":930,"lang":"java","lang_name":"Java","time":"1 week, 1 day","timestamp":1717496881,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1277316018/","is_pending":"Not Pending","title":"All Possible Full Binary Trees","memory":"47.5 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    \n    public List<TreeNode> allPossibleFBT(int n) {\n        \n        List<TreeNode> res = new ArrayList<>();\n        \n        TreeNode root = new TreeNode();\n        if(n==1) {\n            res.add(root);\n            return res;\n        }\n        \n        for(int i=1; i<=n-2; i+=2){\n            \n            List<TreeNode> left = allPossibleFBT(i);\n            List<TreeNode> right = allPossibleFBT(n-1-i);\n            \n            for(TreeNode l : left){\n                for(TreeNode r : right){\n                    TreeNode node = new TreeNode(0); // always new node\n                    node.left = l ;\n                    node.right = r;\n                    res.add(node);\n                }\n            }\n        }\n        return res;\n    }\n}\n\n","compare_result":"11111111111111111111","title_slug":"all-possible-full-binary-trees","has_notes":false,"flag_type":1}