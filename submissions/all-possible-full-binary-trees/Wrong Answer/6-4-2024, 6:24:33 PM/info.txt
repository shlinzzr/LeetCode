{"id":1277313296,"question_id":930,"lang":"java","lang_name":"Java","time":"1 week, 1 day","timestamp":1717496673,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1277313296/","is_pending":"Not Pending","title":"All Possible Full Binary Trees","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    int total;\n    int cnt = 0 ;\n    List<TreeNode> res;\n    public List<TreeNode> allPossibleFBT(int n) {\n        \n        this.total=n;\n        \n        res = new ArrayList<>();\n        TreeNode root = new TreeNode(0);\n        cnt++;\n        if(n==1){\n            res.add(root);\n             return res;\n        }\n        //n=7\n        //i = 1, 3, 5\n        \n        \n//         0\n//        0   0\n//       0 0 x x\n//      0 0      \n        \n        \n        for(int i=1; i<=n-2; i+=2){\n            // System.out.println(i + \" \" + (n-1-i));\n            TreeNode left = helper(i);\n            TreeNode right = helper(n-1-i);\n            root.left = left;\n            root.right = right;\n            \n            res.add(root);\n        }\n        \n        return res;\n        \n    }\n    \n    private TreeNode helper(int n){\n        \n        TreeNode root = new TreeNode(0);\n        \n        if(n==1) return root;\n\n        for(int i=1; i<=n-2; i+=2){\n            TreeNode left = helper(i);\n            TreeNode right = helper(n-1-i);\n            \n            root.left = left;\n            root.right = right;\n        }\n        return root;\n        \n    }\n}\n\n//[[0,0,0,0,0,null,null,0,0],[0,0,0,0,0,null,null,0,0],[0,0,0,0,0,null,null,0,0]]\n\n//[[0,0,0,null,null,0,0,null,null,0,0],[0,0,0,null,null,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,null,null,null,null,0,0],[0,0,0,0,0,null,null,0,0]]\n\n// [[0,0,0]]","compare_result":"01010100000000000000","title_slug":"all-possible-full-binary-trees","has_notes":false,"flag_type":1}