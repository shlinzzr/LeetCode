{"id":1022787327,"question_id":1612,"lang":"java","lang_name":"Java","time":"10 months","timestamp":1692170947,"status":10,"status_display":"Accepted","runtime":"63 ms","url":"/submissions/detail/1022787327/","is_pending":"Not Pending","title":"Avoid Flood in The City","memory":"59.3 MB","code":"class Solution {\n    public int[] avoidFlood(int[] rains) {\n        \n        HashMap<Integer, Integer> fill = new HashMap<>(); // fill[x] is the last day that rain filled lake x        \n        TreeSet<Integer> dryDays = new TreeSet<>();         // the days that are dry, i.e. when we can drain\n        \n        int len = rains.length;\n        int[] res = new int[len];\n        Arrays.fill(res, 1);\n        \n        for (int i=0; i<len; i++)\n        {\n            int r = rains[i];\n            if (r==0)            \n                dryDays.add(i);            \n            else\n            {\n                res[i] = -1;\n                if (fill.containsKey(r))\n                {\n                    Integer key = dryDays.higher(fill.get(r));// fill過後找dryDay 所以用higher\n                    if (key==null) return new int[0];                    \n                    \n                    res[key] = r;  \n                    dryDays.remove(key);\n                }\n                fill.put(r, i);\n            }            \n        }        \n        return res;        \n        \n//         int len = rains.length;\n//         int[] res = new int[len];\n        \n//         HashMap<Integer, Integer> map = new HashMap<>();\n//         HashSet<Integer> flood = new HashSet<>();\n        \n//         for(int i=0; i<len; i++){\n            \n//             int r = rains[i];\n            \n//             if(r==0){\n                \n                \n//                 int t=i+1;\n                \n//                 boolean flag=false;\n//                 while(t<len){\n//                     if(rains[t]!=0 && map.containsKey(rains[t])){\n//                         flag=true;\n//                         res[i] = map.get(rains[t]);\n//                         map.remove(rains[t]);\n//                         break;\n//                     }\n//                     t++;\n//                 }\n                \n//                 if(flag==false){\n                    \n//                     for(int key: map.keySet()){\n//                           flag=true;\n//                             res[i] = map.get(key);\n//                             map.remove(key);\n//                     }\n//                 }\n                \n                \n//             }else{\n                \n//                 if(map.containsKey(r)){\n//                     flood.add(r);\n//                 }\n//                 res[i]=-1;\n//                 map.put(r,r);\n//             }\n//             // System.out.println(i+ \" \"  + map.keySet());\n            \n//         }\n        \n        \n//         return !flood.isEmpty()? new int[0] : res;\n        \n        \n        \n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"avoid-flood-in-the-city","has_notes":false,"flag_type":1}