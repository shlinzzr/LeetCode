{"id":762958693,"question_id":287,"lang":"java","lang_name":"Java","time":"1 year, 10 months","timestamp":1659418222,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/762958693/","is_pending":"Not Pending","title":"Find the Duplicate Number","memory":"60.4 MB","code":"class Solution {\n    public int findDuplicate(int[] nums) {\n        \n        // // 1. sort\n        // Arrays.sort(nums);\n        // for(int i=0; i<nums.length-1; i++){\n        //     if(nums[i]==nums[i+1])\n        //         return nums[i];\n        // }\n        // return -1;\n        \n        // 2. set\n        // Set<Integer> set = new HashSet<>();\n        // for(int i : nums){\n        //     if(set.contains(i))\n        //         return i;\n        //     set.add(i);\n        // }\n        // return -1;\n        \n        \n        //3. Negatinve marking\n        // for(int i=0; i<nums.length; i++){\n        //     int cur = Math.abs(nums[i]);\n        //     if(nums[cur]>0){\n        //         nums[cur] *= -1;\n        //     }else{\n        //         return Math.abs(nums[i]);\n        //     }\n        // }\n        // return -1;\n        \n        // 4. Array as hashmap (recur)\n        // return store(nums, 0);\n        \n        // 5. Array as hashmap (iter)\n        while(nums[0]!=nums[nums[0]]){\n            int nxt = nums[nums[0]];\n            nums[nums[0]] = nums[0];\n            nums[0] = nxt;\n        }\n        return nums[0];\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    }\n    \n    // // 4. Array as hashmap\n    // private int store(int[] nums, int cur){\n    //     if(cur==nums[cur])\n    //         return cur;\n    //     int next = nums[cur];\n    //     nums[cur] = cur;\n    //     return store(nums, next);\n    // }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111","title_slug":"find-the-duplicate-number","has_notes":false,"flag_type":1}