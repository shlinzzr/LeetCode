{"id":831238855,"question_id":239,"lang":"java","lang_name":"Java","time":"1 year, 7 months","timestamp":1666853176,"status":10,"status_display":"Accepted","runtime":"54 ms","url":"/submissions/detail/831238855/","is_pending":"Not Pending","title":"Sliding Window Maximum","memory":"152.5 MB","code":"class Solution {\n    public int[] maxSlidingWindow(int[] nums, int k) {\n        \n        int len = nums.length;\n        int[] res = new int[len-k+1];\n        int ri=0;\n        Deque<Integer> q = new ArrayDeque<>();\n\t\tfor (int i = 0; i < nums.length; i++) {\n\t\t\t\n            // remove numbers out of range k\n\t\t\twhile (!q.isEmpty() && q.peek() < i - k + 1) {\n\t\t\t\tq.poll();\n\t\t\t}\n\t\t\t// remove smaller numbers in k range as they are useless\n\t\t\twhile (!q.isEmpty() && nums[q.peekLast()] < nums[i]) {\n\t\t\t\tq.pollLast();\n\t\t\t}\n\t\t\t// q contains index... r contains content\n\t\t\tq.offer(i);\n\t\t\tif (i >= k - 1) {\n\t\t\t\tres[ri++] = nums[q.peek()];\n\t\t\t}\n\t\t}\n\t\treturn res;\n        \n        \n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111","title_slug":"sliding-window-maximum","has_notes":false,"flag_type":1}