{"id":870367414,"question_id":239,"lang":"java","lang_name":"Java","time":"1 year, 5 months","timestamp":1672741519,"status":10,"status_display":"Accepted","runtime":"84 ms","url":"/submissions/detail/870367414/","is_pending":"Not Pending","title":"Sliding Window Maximum","memory":"154.2 MB","code":"class Solution {\n    public int[] maxSlidingWindow(int[] nums, int k) {\n        \n        // Deque => Decresing Queue\n        \n        int n = nums.length, j = 0;\n        int[] ans = new int[n - k + 1];\n        Deque<Integer> dq = new ArrayDeque<>(); // store index of `nums` elements, elements is in decreasing order, the front is the maximum element.\n        for (int i = 0; i < n; i++) {\n            // Eliminate elements less or equal to nums[i]\n            while (!dq.isEmpty() && nums[i] >= nums[dq.peekLast()]) dq.pollLast();\n            \n            // Push index of current nums[i] to the deque\n            dq.addLast(i);\n            \n            // if reach enough range size k -> add the result\n            if (i + 1 >= k) ans[j++] = nums[dq.peekFirst()]; \n            \n            // remove the last element of range k\n            if (i - dq.peekFirst() + 1 >= k) dq.removeFirst(); \n        }\n        return ans;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111","title_slug":"sliding-window-maximum","has_notes":false,"flag_type":1}