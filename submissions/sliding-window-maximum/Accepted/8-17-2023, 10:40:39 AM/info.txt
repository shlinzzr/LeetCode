{"id":1023549483,"question_id":239,"lang":"java","lang_name":"Java","time":"10 months","timestamp":1692240039,"status":10,"status_display":"Accepted","runtime":"26 ms","url":"/submissions/detail/1023549483/","is_pending":"Not Pending","title":"Sliding Window Maximum","memory":"61.3 MB","code":"class Solution {\n    public int[] maxSlidingWindow(int[] nums, int k) {\n        \n        int len = nums.length;\n        int[] res = new int[len-k+1];\n        ArrayDeque<Integer> dq = new ArrayDeque<>();\n        \n        for(int i=0; i<len; i++){\n            \n            int cur = nums[i];\n            \n            while(!dq.isEmpty() && cur> nums[dq.peekLast()]){\n                dq.pollLast();\n            }\n            \n            dq.offer(i);\n            \n            if(i-k+1>=0){\n                res[i-k+1] = nums[dq.peek()];\n            }\n            \n            \n            //[ 3 2 1 ]\n            //  i   dq.peek()\n            \n            if(i-k+1>=dq.peek()){\n                dq.poll();\n            }\n        }\n        \n        return res;\n        \n/* test case\n      \n[1,3,-1,-3,5,3,6,7]\n3\n[1]\n1\n[1,-1]\n1\n[1,3,1,2,0,5]\n3\n[-7,-8,7,5,7,1,6,0]\n4\n\n*/\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n//         int len = nums.length;\n//         ArrayDeque<Integer> dq = new ArrayDeque<>(); // poll head, offer last => phol;\n        \n//         //Queue  offer => tail [x, x, x, x, x] poll => head. // offer tail poll head; 給尾拉頭\n//         //                last                first\n//         //             new idx                old idx\n        \n//         int[] res = new int[len-k+1];\n        \n//         int idx = 0;\n        \n//         for(int i=0; i<len; i++){\n            \n//             int curr = nums[i];\n//             //  ex: arr: [3 2 1 4]\n//             //  當4進來 deque:=> tail [1 2 3] head\n//             //        因為4都比之前的大: x x x 拋掉 \n//             while(!dq.isEmpty() && curr >= nums[dq.peekLast()]){ //把之前插入太小的都拋掉\n//                 dq.removeLast();\n//             }\n\n//             dq.offer(i);\n            \n//             if(i-k+1>=0){  // 有k個數了\n//                 res[idx++] = nums[dq.peek()];\n//             }\n            \n//             // idx:  0 1 2   3\n//             // arr :[4 3 2 ] 1\n//             //               i\n//             // deque => 1 [2 3 4] **越前面index越老\n//             //             ^   ^\n//             //            i=2  dq.peek()==0\n            \n//             // 2-0.     >= 3-1            \n//             if(i-dq.peek()+1>= k // curr -> head 已經滿最遠k個限制 準備要拋掉變k-1 for next round\n//                 dq.poll();\n//             }\n//         }\n//         return res;\n        \n        \n        \n        \n        //  Java 會緩存-128和之間的整數127以獲得更好的性能\n        // PriorityQueue: TLE\n        //  O(NlgK)=> O(Nk), 因為 java 的 PriorityQueue.remove 使用了indexOf而不是binary search \n               \n//         PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());\n//         int len = nums.length;\n//         int[] res = new int[len-k+1];\n        \n//         for(int i=0; i<nums.length; i++){ // N\n//             pq.offer(nums[i]); // lgN\n            \n//             if(i-k+1>=0){\n//                 res[i-k+1] = pq.peek(); // O(1)\n//                 pq.remove(nums[i-k+1]); // O(lgN)\n//             }\n//         }\n//         return res;\n        \n        \n//         // TreeMap O(NlgN)\n//         TreeMap<Integer, Integer> map = new TreeMap<>(); // nums[i], cnt \n//         int len = nums.length;\n//         int[] res = new int[len-k+1];\n        \n//         int windowSize=0;\n//         for(int i=0; i<len ;i++){\n//             int cur = nums[i];\n//             map.put(cur, map.getOrDefault(cur, 0)+1);\n//             windowSize++;\n            \n//             if(windowSize>k){\n//                 map.put(nums[i-k], map.get(nums[i-k])-1);\n//                 windowSize--;\n             \n//                 if(map.get(nums[i-k])==0) // 要用map來存 才能保留key\n//                     map.remove(nums[i-k]);\n//             }\n            \n//             if(i+1-k>=0){\n//                 res[i+1-k] = map.lastKey();\n//             }\n//         }\n        \n//         return res;\n        \n        \n        \n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111","title_slug":"sliding-window-maximum","has_notes":false,"flag_type":1}