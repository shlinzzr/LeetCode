{"id":1022912598,"question_id":239,"lang":"java","lang_name":"Java","time":"10 months","timestamp":1692182658,"status":10,"status_display":"Accepted","runtime":"441 ms","url":"/submissions/detail/1022912598/","is_pending":"Not Pending","title":"Sliding Window Maximum","memory":"62 MB","code":"class Solution {\n    public int[] maxSlidingWindow(int[] nums, int k) {\n        \n        // TreeMap O(NlgN)\n        TreeMap<Integer, Integer> map = new TreeMap<>(); // nums[i], cnt \n        int len = nums.length;\n        int[] res = new int[len-k+1];\n        \n        int windowSize=0;\n        for(int i=0; i<len ;i++){\n            int cur = nums[i];\n            map.put(cur, map.getOrDefault(cur, 0)+1);\n            windowSize++;\n            \n            if(windowSize>k){\n                map.put(nums[i-k], map.get(nums[i-k])-1);\n                windowSize--;\n             \n                if(map.get(nums[i-k])==0) // 要用map來存 才能保留key\n                    map.remove(nums[i-k]);\n            }\n            \n            if(i+1-k>=0){\n                res[i+1-k] = map.lastKey();\n            }\n        }\n        \n        return res;\n        \n        \n        \n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111","title_slug":"sliding-window-maximum","has_notes":false,"flag_type":1}