{"id":1275439356,"question_id":45,"lang":"java","lang_name":"Java","time":"1 week, 3 days","timestamp":1717342478,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1275439356/","is_pending":"Not Pending","title":"Jump Game II","memory":"N/A","code":"class Solution {\n    public int jump(int[] nums) {\n\n        int len = nums.length;\n        int currEnd = nums[0];\n\n        int far = currEnd;\n        int cnt = 0 ;\n        for(int i=0; i<len; i++){\n\n            far = Math.max(far, i+nums[i]);\n            if(i==currEnd){\n                cnt++;\n                currEnd=far;\n            }\n        }\n\n        return cnt;\n/*\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        int len = nums.length;\n        int[][] dp = new int[len+1][len+1]; // min steps with using the first i selection to add up to idx s\n        for(int i=0; i<=len; i++){\n            Arrays.fill(dp[i], Integer.MAX_VALUE);\n        }\n        dp[0][0] = 1;\n\n        // I.  dp[i][s] = dp[i-1][s] // not using nums[i-1]\n        // II. dp[i][s] = Math.min(dp[i][s], dp[i-1][s-nums[i-1]]) //using nums[i], and \"that is min\"\n\n        for(int i=1; i<=len; i++){\n            dp[i][0] = dp[i-1][0];\n            for(int s=1; s<=len; s++){\n                if(s-nums[i-1]>=0 && dp[i-1][s-nums[i-1]]!=Integer.MAX_VALUE){\n                    dp[i][s] = Math.min(dp[i-1][s], dp[i-1][s-nums[i-1]]);\n                }\n            }\n        }\n\n        return dp[len][len];\n        */\n        \n    }\n}","compare_result":"1101100001111010111101100101111010111000000100001010000000000000100010000000000001000001000000100000001000011","title_slug":"jump-game-ii","has_notes":false,"flag_type":1}