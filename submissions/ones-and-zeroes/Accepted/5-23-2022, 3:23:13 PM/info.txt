{"id":705314608,"question_id":474,"lang":"java","lang_name":"Java","time":"2Â years","timestamp":1653290593,"status":10,"status_display":"Accepted","runtime":"69 ms","url":"/submissions/detail/705314608/","is_pending":"Not Pending","title":"Ones and Zeroes","memory":"43.2 MB","code":"class Solution {\n    public int findMaxForm(String[] strs, int m, int n) {\n        int [] ms = new int[strs.length];\n        int [] ns = new int[strs.length];\n        for(int i =0; i<strs.length;++i){\n            String s = strs[i];\n            for(int j=0; j<s.length();++j){\n                char c = s.charAt(j);\n                if(c=='0')++ms[i];\n                else ++ns[i];\n            }\n            \n             System.out.println(\"i=\"+ i +\" ms[i]=\"+ms[i] +\"\\t ns[i]=\"+ns[i]);\n        }\n        \n \n        \n        int [][] dp = new int[m+1][n+1];\n        int max = 0;\n        for(int i=0; i<ms.length;++i){\n              // System.out.println( \"i=\"+i);\n            \n            for(int mm = m; mm>=ms[i];--mm){\n                for(int nn=n; nn>=ns[i];--nn){\n  \n                    // System.out.println(\"   dp[\"+mm+\"][\"+nn+\"]=\" +dp[mm][nn] + \"\\t dp[\"+mm+\"-\" + ms[i] + \"][\" +nn+\"-\" +ns[i] + \"]=\"+dp[mm-ms[i]][nn-ns[i]] );\n                   \n                    dp[mm][nn]=Math.max(dp[mm][nn],dp[mm-ms[i]][nn-ns[i]]+1);\n                }\n            }\n        }\n        return dp[m][n];\n    }\n}\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"ones-and-zeroes","has_notes":false,"flag_type":1}