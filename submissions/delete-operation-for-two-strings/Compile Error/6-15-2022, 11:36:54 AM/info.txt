{"id":722551306,"question_id":583,"lang":"java","lang_name":"Java","time":"1 year, 12 months","timestamp":1655264214,"status":20,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/722551306/","is_pending":"Not Pending","title":"Delete Operation for Two Strings","memory":"N/A","code":"\n// // approach 1 recursive lcs (longest common string)\n// public class Solution {\n//     public int minDistance(String s1, String s2) {\n//         return s1.length() + s2.length() - 2 * lcs(s1, s2, s1.length(), s2.length());\n//     }\n//     public int lcs(String s1, String s2, int m, int n) {\n//         if (m == 0 || n == 0)\n//             return 0;\n//         if (s1.charAt(m - 1) == s2.charAt(n - 1))\n//             return 1 + lcs(s1, s2, m - 1, n - 1);\n//         else\n//             return Math.max(lcs(s1, s2, m, n - 1), lcs(s1, s2, m - 1, n));\n//     }\n// }\n\n// approach 2 use memo array\npublic class Solution {\n    public int minDistance(String s1, String s2) {\n        int[][] memo = new int[s1.length() + 1][s2.lengh() + 1];\n        return s1.length() + s2.length() - 2 * lcs(s1, s2, s1.length(), s2.length(), memo);\n    }\n    public int lcs(String s1, String s2, int m, int n, int[][] memo) {\n        if (m == 0 || n == 0)\n            return 0;\n        if (memo[m][n] > 0)   // keypoint is here, fast return\n            return memo[m][n];\n        if (s1.charAt(m - 1) == s2.charAt(n - 1))\n            memo[m][n] = 1 + lcs(s1, s2, m - 1, n - 1, memo);\n        else\n            memo[m][n] = Math.max(lcs(s1, s2, m, n - 1, memo), lcs(s1, s2, m - 1, n, memo));\n        return memo[m][n];\n    }\n}\n","compare_result":null,"title_slug":"delete-operation-for-two-strings","has_notes":false,"flag_type":1}