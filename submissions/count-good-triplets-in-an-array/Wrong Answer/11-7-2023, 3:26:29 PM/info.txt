{"id":1093432516,"question_id":2280,"lang":"java","lang_name":"Java","time":"7 months, 1 week","timestamp":1699341989,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1093432516/","is_pending":"Not Pending","title":"Count Good Triplets in an Array","memory":"N/A","code":"class Solution {\n    public long goodTriplets(int[] nums1, int[] nums2) {\n        int len = nums1.length;\n\n        HashMap<Integer, Integer> map = new HashMap<>();\n\n        for(int i=0; i<len; i++){\n            map.put(nums1[i], i);\n        }\n\n        for(int i=0; i<len; i++){\n            nums2[i] = map.get(nums2[i]);\n        }\n\n        LeetCode315 lc315 = new LeetCode315();\n\n        int[][] rt = lc315.countSmallerAndLarger(nums2); // 0: smaller, 1:larger\n\n        long res = 0;\n        int M = (int) 1e9+7;\n        for(int i=0; i<len; i++){\n            res += (long)rt[i][0] * (long)rt[i][1];\n        }\n\n        return res;\n\n\n    }\n}\n\n\nclass LeetCode315{\n\n    class Item{\n        int idx;\n        int val;\n        public Item(int idx, int val){\n            this.idx=idx;\n            this.val=val;\n        }\n    }\n\n    public int[][] countSmallerAndLarger(int[] nums){\n\n        int len = nums.length;\n        int[][] res = new int[len][2];\n\n        Item[] items = new Item[len];\n        for(int i=0; i<len; i++){\n            items[i] = new Item(i, nums[i]);\n        }\n        mergesort(items, 0, len-1, res);\n        return res;\n    }\n\n    public void mergesort(Item[] items, int st, int ed, int[][] res){\n        if(st>=ed) return;\n\n        int mid = st + (ed-st)/2;\n        mergesort(items, st, mid, res);\n        mergesort(items, mid+1, ed, res);\n        mergeHalves(items, st, mid, ed, res);\n    }\n\n    public void mergeHalves(Item[] items, int st, int mid, int ed, int[][] res){\n\n        int lo = st, loEnd=mid;\n        int hi = mid+1, hiEnd=ed;\n        int len = ed-st+1;\n        Item[] tmp = new Item[len];\n        int idx = 0;\n\n        // 用來算左邊跟右邊有幾個\n        int smallerCounter=0;\n        int leftCounter=0;\n\n        // res = new int[len][2], => 0用來記錄smaller, 1用來記錄larger\n\n        while(lo<=loEnd && hi<=hiEnd){\n\n            if(items[lo].val<=items[hi].val){\n                // 現在準備寫入lo到tmp, 此時也記錄左邊被寫入了幾個, \n\n                //如果lo<hi: 1.leftCounter++, 2. 在res[lo][0] 寫入(或加上)rightCounter\n                leftCounter++;\n                res[items[lo].idx][0]+=smallerCounter;\n                tmp[idx++] = items[lo++];\n\n            }else{\n                 // 現在準備寫入hi到tmp, 此時也記錄左邊被寫入了幾個\n\n\n                //反之: 1. rightCounter++, 2. 在res[hi][1] 寫入(或加上)目前的leftCounter\n                smallerCounter++; // 左半大於右半的時候, counter++\n                res[items[hi].idx][1]+=leftCounter;\n                tmp[idx++] = items[hi++];\n            }\n        }\n\n        while(lo<=loEnd){\n            res[items[lo].idx][0]+=smallerCounter;\n            tmp[idx++] = items[lo++];\n        }\n\n        while(hi<=hiEnd){\n            res[items[hi].idx][1]+=leftCounter;\n            tmp[idx++] = items[hi++];\n        }\n\n        System.arraycopy(tmp, 0, items, st, len);\n    }\n\n\n}","compare_result":"1100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000011100110111001010001111100001110001","title_slug":"count-good-triplets-in-an-array","has_notes":false,"flag_type":1}