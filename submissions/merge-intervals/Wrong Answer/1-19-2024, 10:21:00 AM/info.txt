{"id":1150291204,"question_id":56,"lang":"java","lang_name":"Java","time":"4 months, 3 weeks","timestamp":1705630860,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1150291204/","is_pending":"Not Pending","title":"Merge Intervals","memory":"N/A","code":"class Solution {\n    public int[][] merge(int[][] intervals) {\n        \n        Arrays.sort(intervals, (a,b)-> a[1]!=b[1]? a[1]-b[1] : a[0]-b[0]);\n        int len = intervals.length;\n        List<int[]> list = new ArrayList<>();\n        \n        if(len==1)\n            return intervals;\n        \n        int[] curr = intervals[0];\n        int idx = 0;\n        \n        while(idx<len){\n            \n            boolean merge = false;\n            while(idx<len && curr[1]>=intervals[idx][0]){\n                // curr[0] = Math.min(curr[0], intervals[idx][0]);\n                curr[1] = Math.max(curr[1], intervals[idx][1]);\n                idx++;\n                merge=true;\n            }\n            \n            list.add(curr);\n            \n            if(!merge)\n                idx++;\n            \n            if(idx<len)\n                curr = intervals[idx];\n        }\n        \n        int[][] res = new int[list.size()][];\n        for(int i=0; i<list.size(); i++){\n            res[i] = list.get(i);\n        }\n        \n        return res;\n    }\n}","compare_result":"11111111110011101011111110110011111001100111111101011111100011111001110111110110101101111110111010101010101111111111100111000101111011001010010110000000000000000000000111","title_slug":"merge-intervals","has_notes":false,"flag_type":1}