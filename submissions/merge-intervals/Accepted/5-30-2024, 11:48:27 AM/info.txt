{"id":1271982395,"question_id":56,"lang":"java","lang_name":"Java","time":"1Â week, 6Â days","timestamp":1717040907,"status":10,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/1271982395/","is_pending":"Not Pending","title":"Merge Intervals","memory":"47 MB","code":"class Solution {\n    public int[][] merge(int[][] intervals) {\n\n        int len = intervals.length;\n        if(len==1) return intervals;\n\n        Arrays.sort(intervals, (a,b)-> a[0]!=b[0] ? a[0]-b[0] : a[1]-b[1]);\n        \n        int[] prev = intervals[0];\n        List<int[]> list = new ArrayList<>();\n        for(int i=1; i<len; i++){\n            int[] curr = intervals[i];\n            if(prev[1] < curr[0]){\n                list.add(prev);\n                prev= curr;\n                continue;\n            }\n\n            prev[1] = Math.max(prev[1], curr[1]);\n        }\n\n        list.add(prev);\n\n        int[][] res = new int[list.size()][];\n        for(int i=0; i<res.length; i++){\n            res[i]= list.get(i);\n        }\n        return res;\n\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"merge-intervals","has_notes":false,"flag_type":1}