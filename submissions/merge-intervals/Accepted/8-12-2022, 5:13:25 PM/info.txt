{"id":771766310,"question_id":56,"lang":"java","lang_name":"Java","time":"1 year, 10 months","timestamp":1660295605,"status":10,"status_display":"Accepted","runtime":"12 ms","url":"/submissions/detail/771766310/","is_pending":"Not Pending","title":"Merge Intervals","memory":"54.7 MB","code":"class Solution {\n    public int[][] merge(int[][] intervals) {\n        List<int[]> list = new ArrayList<>();\n        \n        Arrays.sort(intervals, (i1, i2) -> Integer.compare(i1[0], i2[0]));\n        \n        int[] prev = null;\n        \n        for(int[] curr : intervals){\n            \n            \n            if(prev==null){\n                prev=curr;\n                continue;\n            }\n            // System.out.println(prev[0] + \",\" + prev[1] + \" \" +curr[0] + \",\"+curr[1]);\n            \n            \n            if(prev[1] >= curr[0]){\n                prev[1]=Math.max(prev[1], curr[1]);\n                \n            }else{\n                list.add(prev);\n                prev = curr;\n            }\n        }\n\n        list.add(prev);\n        \n        int[][] res = list.toArray(new int[list.size()][]);\n        \n        \n        return res;\n        \n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"merge-intervals","has_notes":false,"flag_type":1}