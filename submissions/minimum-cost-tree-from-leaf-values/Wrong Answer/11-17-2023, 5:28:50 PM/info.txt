{"id":1100689098,"question_id":1228,"lang":"java","lang_name":"Java","time":"6 months, 4 weeks","timestamp":1700213330,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1100689098/","is_pending":"Not Pending","title":"Minimum Cost Tree From Leaf Values","memory":"N/A","code":"class Solution {\n    public int mctFromLeafValues(int[] arr) {\n        int len = arr.length;\n        if(len==1)\n            return 0;\n\n        int[] nextGreater = new int[len];\n        Arrays.fill(nextGreater, Integer.MAX_VALUE);\n        Stack<Integer> st = new Stack<>();\n        for(int i=0; i<len; i++){\n            while(!st.isEmpty() && arr[st.peek()]<=arr[i]){\n                nextGreater[st.pop()] = i;\n            }\n            st.push(i);\n        }\n\n        int[] prevGreater = new int[len];\n        Arrays.fill(prevGreater, Integer.MAX_VALUE);\n        st.clear();\n        for(int i=len-1; i>=0; i--){\n            while(!st.isEmpty() && arr[st.peek()]<=arr[i]){\n                prevGreater[st.pop()] = i;\n            }\n            st.push(i);\n        }\n\n        int result = 0;\n        for (int i=0; i<len; i++)\n        {\n\n            if(prevGreater[i]!=Integer.MAX_VALUE){\n                prevGreater[i] = arr[prevGreater[i]];\n            }\n\n            if(nextGreater[i]!=Integer.MAX_VALUE){\n                nextGreater[i] = arr[nextGreater[i]];\n            }\n\n            int x = Math.min(prevGreater[i], nextGreater[i]);\n            if (x!=Integer.MAX_VALUE)\n                result += arr[i]*x;   \n        }\n        return result;\n\n    }\n}\n\n/*\nsol stack\n\n[ x x1 x2 x x ] [x x x x x]\n\nx1 : [..a]\nx2 : [..b]\n\ncost = Math.max(a, b) 小的數字被刪除\n其實就是找cost = Math.min(prevGreater, nextGreater);\n相消之後不影響後續抉擇\n\n\n\nsol dp:\n\n[x x x x x] [x x x x j]\n i.      k\n\n dp[i][j] = min { max[i][k]*max[k+1][j] + dp[i][k] + dp[k+1][j] } over k : i~j\n\n*/\n\n\n\n/* \n\na b c\n\nabc + ab is smaller\n\n    c* Math.max(a,b)\n    / \\\n  ab   c \n  /\\    \n a  b \n\n\n a * Math.max(b,c)\n /.  \\\n a   bc\n    / \\\n   b   c\n\n\n\n*/","compare_result":"1110111001111111111111111111111111000111101001111010000000000000000000000000000000000000000000000000000","title_slug":"minimum-cost-tree-from-leaf-values","has_notes":false,"flag_type":1}