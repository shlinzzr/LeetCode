{"id":859101368,"question_id":1228,"lang":"java","lang_name":"Java","time":"1 year, 6 months","timestamp":1670926551,"status":10,"status_display":"Accepted","runtime":"7 ms","url":"/submissions/detail/859101368/","is_pending":"Not Pending","title":"Minimum Cost Tree From Leaf Values","memory":"39.8 MB","code":"class Solution {\n    public int mctFromLeafValues(int[] arr) {\n        int n = arr.length;\n        int[][] dp = new int[n][n];\n        return dfs(arr, 0, n - 1, dp);\n    }\n    \n    public int dfs(int[] arr, int s, int e, int[][] dp) {\n        if (s == e) return 0;\n        if (dp[s][e] > 0) return dp[s][e];\n        int ans = Integer.MAX_VALUE;\n        for (int i = s; i < e; i++) {\n            int left = dfs(arr, s, i, dp);\n            int right = dfs(arr, i + 1, e, dp);\n            int maxLeft = 0, maxRight = 0;\n            for (int j = s; j <= i; j++) maxLeft = Math.max(maxLeft, arr[j]);\n            for (int j = i + 1; j <= e; j++) maxRight = Math.max(maxRight, arr[j]);\n            ans = Math.min(ans, left + right + maxLeft * maxRight);\n        }\n        dp[s][e] = ans;\n        return ans;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-cost-tree-from-leaf-values","has_notes":false,"flag_type":1}