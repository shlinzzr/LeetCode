{"id":1048927358,"question_id":332,"lang":"java","lang_name":"Java","time":"9Â months","timestamp":1694661488,"status":20,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/1048927358/","is_pending":"Not Pending","title":"Reconstruct Itinerary","memory":"N/A","code":"class Solution {\n    public List<String> findItinerary(List<List<String>> tickets) {\n        Map<String, List<String>> graph = new HashMap<>();\n        \n        for (List<String> ticket : tickets) {\n            graph.putIfAbsent(ticket.get(0), new ArrayList<>());\n            graph.get(ticket.get(0)).add(ticket.get(1));\n        }\n        \n        for(String k : graph.keySet()){\n            Collections.sort(map.get(k));\n        }\n\n\n        LinkedList<String> itinerary = new LinkedList<>();\n        HashSet<String> seen = new HashSet<>();\n        dfs(\"JFK\", graph, itinerary, seen);\n        \n        return itinerary;\n    }\n    \n    private void dfs(String airport, Map<String, List<String>> graph, LinkedList<String> itinerary, HashSet<String> seen) {\n        List<String> nextAirports = graph.getOrDefault(airport, new ArrayList<>());\n\n       \n        while (nextAirports != null && !nextAirports.isEmpty()) {\n\n            for(String next : nextAirports){\n                if(!seen.contains(airport+\"_\"+next)){\n                    seen.add(airport+\"_\"+next);\n                    dfs(next, graph, itinerary, seen);\n                    seen.remove(airport+\"_\"+next);\n                }\n            }\n        }\n        itinerary.addFirst(airport);\n    }\n}","compare_result":null,"title_slug":"reconstruct-itinerary","has_notes":false,"flag_type":1}