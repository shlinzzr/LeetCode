{"id":1099256022,"question_id":221,"lang":"java","lang_name":"Java","time":"7Â months","timestamp":1700036031,"status":10,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/1099256022/","is_pending":"Not Pending","title":"Maximal Square","memory":"54.5 MB","code":"class Solution {\n    public int maximalSquare(char[][] matrix) {\n        int m = matrix.length;\n        int n = matrix[0].length;\n\n        int[][] dp = new int[m+1][n+1];\n        dp[1][1] = matrix[0][0]-'0';\n\n        for(int i=2; i<=m; i++){\n            if(matrix[i-1][0]=='1')\n                dp[i][1] = 1 + dp[i-1][1];\n        }\n\n        for(int j=2; j<=n; j++){\n            if(matrix[0][j-1]=='1'){\n                dp[1][j] = 1 + dp[1][j-1];\n            }\n        }\n\n        int max= 0;\n\n        for(int i=1; i<=m; i++){\n            for(int j=1; j<=n; j++){\n                \n                if(matrix[i-1][j-1]=='1')\n                    dp[i][j] = Math.min(dp[i-1][j], Math.min(dp[i][j-1], dp[i-1][j-1])) + 1;\n\n                max = Math.max(max, dp[i][j]);\n            }\n        }\n\n        return max*max;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximal-square","has_notes":false,"flag_type":1}