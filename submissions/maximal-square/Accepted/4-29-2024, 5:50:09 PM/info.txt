{"id":1244808824,"question_id":221,"lang":"java","lang_name":"Java","time":"1 month, 2 weeks","timestamp":1714384209,"status":10,"status_display":"Accepted","runtime":"585 ms","url":"/submissions/detail/1244808824/","is_pending":"Not Pending","title":"Maximal Square","memory":"56.7 MB","code":"class Solution {\n    public int maximalSquare(char[][] matrix) {\n        \n        int h = matrix.length;\n        int w = matrix[0].length;\n        \n        int[][] dp = new int[h][w];\n        \n         int max= 0 ;\n        \n        for(int i=0; i<h; i++){\n            dp[i][0] = i==0 ? (matrix[0][0]=='0' ? 0 : 1) :(matrix[i][0]=='0' ? 0 :  1);\n            \n            if(matrix[i][0]=='1')   max = Math.max(max, 1);\n        }\n        \n        for(int j=1; j<w; j++){\n            dp[0][j] = (matrix[0][j]=='0' ? 0 : 1);\n            if(matrix[0][j]=='1')   max = Math.max(max, 1);\n        }\n        \n        \n       \n        for(int i=1; i<h; i++){\n            for(int j=1; j<w; j++){\n                \n                if(matrix[i][j]=='1'){\n                    max = Math.max(max, 1);\n                    dp[i][j] = 1+ Math.min(dp[i-1][j-1] , Math.min(dp[i-1][j] , dp[i][j-1]));    \n                     max = Math.max(max, dp[i][j]);\n                }\n                \n                \n                System.out.print(dp[i][j] + \" ,\");\n               \n                \n            }\n            \n            System.out.println();\n        }\n        \n        return max * max;\n        \n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximal-square","has_notes":false,"flag_type":1}