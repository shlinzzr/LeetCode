{"id":970887803,"question_id":221,"lang":"java","lang_name":"Java","time":"12Â months","timestamp":1686724535,"status":10,"status_display":"Accepted","runtime":"9 ms","url":"/submissions/detail/970887803/","is_pending":"Not Pending","title":"Maximal Square","memory":"54.4 MB","code":"class Solution {\n    public int maximalSquare(char[][] matrix) {\n        int max = 0 ;\n        \n        int m = matrix.length;\n        int n = matrix[0].length;\n        \n        int[][] dp = new int[m][n];\n        \n        for(int i=0; i<m; i++){ // set right 1\n            if(matrix[i][n-1]=='1'){\n                dp[i][n-1]=1;\n                max=1;\n            }\n        }\n        \n        for(int j=0; j<n; j++){ // set bottom 1\n            if(matrix[m-1][j]=='1'){\n                dp[m-1][j]=1;\n                max=1;\n            }\n                \n        }\n        \n        for(int i=m-2; i>=0; i--){\n            for(int j=n-2; j>=0; j--){\n                \n                if(matrix[i][j]=='1'){\n                    dp[i][j]=1;\n                    \n                    if(dp[i+1][j+1]>0 && dp[i+1][j]>0 && dp[i][j+1]>0){\n                        \n                        // min(bottom, right, bottomRight) \n                        dp[i][j] = 1 + Math.min(dp[i+1][j+1], Math.min(dp[i+1][j], dp[i][j+1])); \n                    }\n                    max = Math.max(max, dp[i][j]);\n                }\n            }\n        }\n        \n        return max*max;\n        \n    }\n}    \n    /*Input\n[\n[\"1\",\"1\",\"1\",\"1\",\"0\"],\n[\"1\",\"1\",\"1\",\"1\",\"0\"],\n[\"1\",\"1\",\"1\",\"1\",\"1\"],\n[\"1\",\"1\",\"1\",\"1\",\"1\"],\n[\"0\",\"0\",\"1\",\"1\",\"1\"]]\n    \n*/","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximal-square","has_notes":false,"flag_type":1}