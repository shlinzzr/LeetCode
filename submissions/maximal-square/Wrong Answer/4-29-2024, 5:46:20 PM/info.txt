{"id":1244806691,"question_id":221,"lang":"java","lang_name":"Java","time":"1 month, 2 weeks","timestamp":1714383980,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1244806691/","is_pending":"Not Pending","title":"Maximal Square","memory":"N/A","code":"class Solution {\n    public int maximalSquare(char[][] matrix) {\n        \n        int h = matrix.length;\n        int w = matrix[0].length;\n        \n        int[][] dp = new int[h][w];\n        \n        for(int i=0; i<h; i++){\n            dp[i][0] = i==0 ? (matrix[0][0]=='0' ? 0 : 1) :(matrix[i][0]=='0' ? 0 : dp[i-1][0] + 1);\n        }\n        \n        for(int j=1; j<w; j++){\n            dp[0][j] = (matrix[0][j]=='0' ? 0 : dp[0][j-1] + 1);\n        }\n        \n        \n        int max= 0 ;\n        for(int i=1; i<h; i++){\n            for(int j=1; j<w; j++){\n                \n                if(matrix[i][j]=='1'){\n                    dp[i][j] = 1+ Math.min(dp[i-1][j-1] , Math.min(dp[i-1][j] , dp[i][j-1]));    \n                     max = Math.max(max, dp[i][j]);\n                }\n                \n                \n                // System.out.print(dp[i][j] + \" ,\");\n               \n                \n            }\n            \n            // System.out.println();\n        }\n        \n        return max * max;\n        \n    }\n}","compare_result":"101010001101000110011101110011111111101011111111101111110110110111000000011110","title_slug":"maximal-square","has_notes":false,"flag_type":1}