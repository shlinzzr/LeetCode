{"id":839968928,"question_id":954,"lang":"java","lang_name":"Java","time":"1 year, 7 months","timestamp":1667981448,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/839968928/","is_pending":"Not Pending","title":"Maximum Sum Circular Subarray","memory":"N/A","code":"class Solution {\n    public int maxSubarraySumCircular(int[] nums) {\n        \n        int noncir_sum = getMaxSum(nums);\n        \n        \n        int len = nums.length;\n        int min =Integer.MAX_VALUE;\n        int sum = 0;\n        \n        int total=0;\n        for(int i=0; i<len; i++){\n            \n            total+=nums[i];\n            nums[i] = -nums[i];\n        }\n        \n        int circularSum = total-getMaxSum(nums);\n        \n        return Math.max(noncir_sum, circularSum);\n        \n    }\n    \n    private int getMaxSum(int[] nums){\n        int len = nums.length;\n        int max =Integer.MIN_VALUE;\n        int sum = 0;\n        \n        for(int i=0; i<len; i++){\n            \n            if(sum<0){\n                sum=0;\n            }\n            \n            sum+=nums[i];\n            \n            max = Math.max(max, sum);\n        }\n        \n        return max;\n    }\n    \n}","compare_result":"101111111011001101011111011001100001101100011101101111011001011100011100101100100011110000001101100001100110111","title_slug":"maximum-sum-circular-subarray","has_notes":false,"flag_type":1}