{"id":839971580,"question_id":954,"lang":"java","lang_name":"Java","time":"1 year, 7 months","timestamp":1667981857,"status":10,"status_display":"Accepted","runtime":"9 ms","url":"/submissions/detail/839971580/","is_pending":"Not Pending","title":"Maximum Sum Circular Subarray","memory":"61.7 MB","code":"class Solution {\n    public int maxSubarraySumCircular(int[] nums) {\n        \n        int nSum = getMaxSum(nums);\n        \n        \n        int len = nums.length;\n        int min =Integer.MAX_VALUE;\n        int sum = 0;\n        \n        int total=0;\n        for(int i=0; i<len; i++){\n            \n            total+=nums[i];\n            nums[i] = -nums[i];\n        }\n        \n        int cSum = total-(-getMaxSum(nums));\n        \n        if(cSum==0)\n            return nSum;\n        // System.out.println(\"nSum=\"+nSum+ \" cSum=\"+cSum);\n        \n        return Math.max(nSum, cSum);\n        \n    }\n    \n    private int getMaxSum(int[] nums){\n        int len = nums.length;\n        int max =Integer.MIN_VALUE;\n        int sum = 0;\n        \n        for(int i=0; i<len; i++){\n            \n            if(sum<0){\n                sum=0;\n            }\n            \n            sum+=nums[i];\n            \n            max = Math.max(max, sum);\n        }\n        \n        return max;\n    }\n    \n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-sum-circular-subarray","has_notes":false,"flag_type":1}