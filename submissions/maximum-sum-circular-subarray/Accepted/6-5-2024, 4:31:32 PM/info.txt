{"id":1278264254,"question_id":954,"lang":"java","lang_name":"Java","time":"1 week","timestamp":1717576292,"status":10,"status_display":"Accepted","runtime":"6 ms","url":"/submissions/detail/1278264254/","is_pending":"Not Pending","title":"Maximum Sum Circular Subarray","memory":"49.1 MB","code":"class Solution {\n    public int maxSubarraySumCircular(int[] nums) {\n\n        // circular means that we have 2 cases:\n        // 1. normal case : like leetcode 53.\n        // 2. presum + sufsum case :  i.e.  sumAll - minSubArray\n        int len = nums.length;\n\n        int minSum=Integer.MAX_VALUE;\n        int maxSum = maxSubArray(nums); //leetcode 53 : kadane's algo\n        int sumAll = 0;\n        int curmin = 0;\n\n        //找minSubArray\n        for(int i=0; i<len; i++){\n            sumAll += nums[i];\n            \n            curmin += nums[i];\n            minSum = Math.min(minSum , curmin );\n            if(curmin>0){\n                curmin = 0;\n            }\n        }\n\n\n        int res = Math.max(maxSum , sumAll-minSum==0 ? Integer.MIN_VALUE : sumAll-minSum);\n\n        return res;\n\n\n\n\n    }\n\n     public int maxSubArray(int[] nums) {\n        // leetcode 53\n        // kadane's algo\n        \n        int len = nums.length;\n        \n        int cur = 0;\n        int max = nums[0];\n        for(int n : nums){\n            if(cur<0) cur=0;\n            cur+=n;\n            max = Math.max(max, cur);\n        }\n        \n        return max;\n       \n        \n        \n        \n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-sum-circular-subarray","has_notes":false,"flag_type":1}