{"id":897011472,"question_id":766,"lang":"java","lang_name":"Java","time":"1 year, 4 months","timestamp":1676272384,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/897011472/","is_pending":"Not Pending","title":"Flatten a Multilevel Doubly Linked List","memory":"40.7 MB","code":"class Solution {\n    public Node flatten(Node head) {\n        if( head == null) return head;\n\t// Pointer\n        Node p = head; \n        while( p!= null) {\n            /* CASE 1: if no child, proceed */\n            if( p.child == null ) {\n                p = p.next;\n                continue;\n            }\n            /* CASE 2: got child, find the tail of the child and link it to p.next */\n            Node temp = p.child;\n            // Find the tail of the child\n            while( temp.next != null ) \n                temp = temp.next;\n            // Connect tail with p.next, if it is not null\n            temp.next = p.next;  \n            if( p.next != null )  p.next.prev = temp;\n            // Connect p with p.child, and remove p.child\n            p.next = p.child; \n            p.child.prev = p;\n            p.child = null;\n        }\n        return head;\n    }\n}","compare_result":"11111111111111111111111111","title_slug":"flatten-a-multilevel-doubly-linked-list","has_notes":false,"flag_type":1}