{"id":1273844873,"question_id":124,"lang":"java","lang_name":"Java","time":"1 week, 4 days","timestamp":1717218645,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1273844873/","is_pending":"Not Pending","title":"Binary Tree Maximum Path Sum","memory":"44 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    int max=Integer.MIN_VALUE;\n\n    public int maxPathSum(TreeNode root) {\n        getDepth(root);\n        return max;\n    }\n\n    private int getDepth(TreeNode node){\n        if(node==null) return 0;\n\n        int res = node.val;\n\n        int left = getDepth(node.left);\n        int right = getDepth(node.right);\n\n        int big = Math.max(left, right);\n        max = Math.max(max, left+right+res);\n\n        max =Math.max(max, res);\n        if(big<0) return res;\n\n        max = Math.max(max, res+big);\n        \n        return res+big;\n\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-tree-maximum-path-sum","has_notes":false,"flag_type":1}