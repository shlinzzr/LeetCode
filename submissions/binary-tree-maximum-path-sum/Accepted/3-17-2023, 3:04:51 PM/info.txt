{"id":916720020,"question_id":124,"lang":"java","lang_name":"Java","time":"1 year, 2 months","timestamp":1679036691,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/916720020/","is_pending":"Not Pending","title":"Binary Tree Maximum Path Sum","memory":"44 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    int max = Integer.MIN_VALUE;\n    \n    public int maxPathSum(TreeNode root) {\n        \n        getDepth(root);\n        return max;\n        \n    }\n    \n    \n    private int getDepth(TreeNode root){ // 1. 先定義這個func. 一定是回傳leafSum\n        if(root==null)\n            return 0;\n        \n        \n        int left = Math.max(0, getDepth(root.left));\n        int right = Math.max(0, getDepth(root.right));\n        \n        max = Math.max(max, left+right+root.val); // 這個時候 全域變數的max 就會跟left+right+val比\n        \n        return Math.max(left, right)+root.val; //1.a 這裡回傳max(left, right) + root.val\n        \n        \n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-tree-maximum-path-sum","has_notes":false,"flag_type":1}