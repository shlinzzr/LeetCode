{"id":1088935779,"question_id":124,"lang":"java","lang_name":"Java","time":"7 months, 2 weeks","timestamp":1698822752,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1088935779/","is_pending":"Not Pending","title":"Binary Tree Maximum Path Sum","memory":"42.9 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    int max=Integer.MIN_VALUE;\n    public int maxPathSum(TreeNode root) {\n        getSum(root);\n        return max;\n    }\n\n    private int getSum(TreeNode node){\n        if(node==null)\n            return 0;\n\n        int left =  Math.max(0 ,getSum(node.left) );\n        int right = Math.max(0 ,getSum(node.right) );\n\n        max = Math.max(max, left + right + node.val);\n\n        return node.val + Math.max(left, right);\n    }\n\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-tree-maximum-path-sum","has_notes":false,"flag_type":1}