{"id":1233754444,"question_id":124,"lang":"java","lang_name":"Java","time":"1 month, 3 weeks","timestamp":1713252580,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1233754444/","is_pending":"Not Pending","title":"Binary Tree Maximum Path Sum","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n\n    int max;\n    public int maxPathSum(TreeNode root) {\n        max = Integer.MIN_VALUE;\n\n        getMaxDepthSum(root);\n        return max;\n        \n    }\n\n    private int getMaxDepthSum(TreeNode root){\n        if(root==null) return 0;\n\n        if(root.left==null && root.right==null){\n            max = Math.max(root.val, max);\n            return root.val;\n        }\n\n        int left = getMaxDepthSum(root.left);\n        int right = getMaxDepthSum(root.right);\n        max = Math.max(max, left+right+root.val);\n\n        return Math.max(left, right);\n        \n\n    }\n}","compare_result":"111111011001101000000000011010010101010100010110100010000000000000000001100000011000000000000010","title_slug":"binary-tree-maximum-path-sum","has_notes":false,"flag_type":1}