{"id":1154203210,"question_id":124,"lang":"java","lang_name":"Java","time":"4 months, 3 weeks","timestamp":1705981646,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1154203210/","is_pending":"Not Pending","title":"Binary Tree Maximum Path Sum","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    int max = Integer.MIN_VALUE;\n    public int maxPathSum(TreeNode root) {\n        getDepth(root);\n        return max;\n        \n    }\n    \n    private int getDepth(TreeNode root){\n        \n        if(root==null) return 0;\n        \n        int val = 0;\n        if(root.val>0) val+=root.val;\n        \n        int left = getDepth(root.left);\n        int right = getDepth(root.right);\n        \n        if(left>0) val+= left;\n        if(right>0) val+=right;\n        \n        max = Math.max(max, val);\n        \n        return Math.max(left, right)+root.val;\n        \n    }\n}","compare_result":"101101110011110111011111111111111111111111111110110110011111111111001100111011110011010000001011","title_slug":"binary-tree-maximum-path-sum","has_notes":false,"flag_type":1}