{"id":1208868908,"question_id":124,"lang":"java","lang_name":"Java","time":"2 months, 3 weeks","timestamp":1710916895,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1208868908/","is_pending":"Not Pending","title":"Binary Tree Maximum Path Sum","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    int max= 0 ;\n    public int maxPathSum(TreeNode root) {\n        getSum(root);\n        return max;\n    }\n\n    private int getSum(TreeNode root){\n        if(root==null) return 0;\n\n        if(root.left==null && root.right==null) return root.val;\n\n        int left = getSum(root.left);\n        int right= getSum(root.right);\n        max = Math.max(max, left+right + root.val);\n        return Math.max(left , right) + root.val;\n    }\n}","compare_result":"111001000001000101011101111101001101100000110001110101000010111101010110000110010111110111111110","title_slug":"binary-tree-maximum-path-sum","has_notes":false,"flag_type":1}