{"id":831270668,"question_id":124,"lang":"java","lang_name":"Java","time":"1 year, 7 months","timestamp":1666857355,"status":20,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/831270668/","is_pending":"Not Pending","title":"Binary Tree Maximum Path Sum","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public int maxPathSum(TreeNode root) {\n        HashMap<TreeNode, Set<TreeNode>> map = new HashMap<>();\n        genMap(null, root, map);\n        return -1;  \n    }\n    \n    private int dfs(TreeNode root, HashMap<TreeNode, Set<TreeNode>> map){\n        \n        HashSet<TreeNode> seen = new HashSet<>();\n        Stack<TreeNode> = \n        \n        \n    }\n    \n    \n    private void genMap(TreeNode parent, TreeNode root, HashMap<TreeNode, Set<TreeNode>> map){\n        \n        if(root==null){\n            return;\n        }\n        \n        if(!map.containsKey(root))\n            map.put(root, new HashSet<>());\n        \n        if(parent!=null)\n            map.get(root).add(parent);\n        \n        if(root.left!=null);\n            map.get(root).add(root.left);\n        \n        if(root.right!=null);\n            map.get(root).add(root.right);\n        \n        genMap(root, root.left, map); \n        genMap(root, root.right, map); \n        \n    }\n}","compare_result":null,"title_slug":"binary-tree-maximum-path-sum","has_notes":false,"flag_type":1}