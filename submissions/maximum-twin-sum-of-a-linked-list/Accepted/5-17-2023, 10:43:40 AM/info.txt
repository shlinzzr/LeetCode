{"id":951787339,"question_id":2236,"lang":"java","lang_name":"Java","time":"1Â year","timestamp":1684291420,"status":10,"status_display":"Accepted","runtime":"14 ms","url":"/submissions/detail/951787339/","is_pending":"Not Pending","title":"Maximum Twin Sum of a Linked List","memory":"64.3 MB","code":"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public int pairSum(ListNode head) {\n        ListNode fast = head;\n        ListNode slow = head;\n        \n        List<Integer> list = new ArrayList<>();\n        \n        \n        while(fast!=null && fast.next!=null){\n            \n            list.add(slow.val);\n            fast = fast.next.next;\n            slow = slow.next;\n            \n        }\n        \n        ListNode rev = reverse(head);\n        fast = rev;\n        slow = rev;\n         \n        int idx = 0;\n        int max = 0;\n        while(fast!=null && fast.next!=null){\n            max = Math.max(max , list.get(idx++)+slow.val);\n             fast = fast.next.next;\n            slow = slow.next;\n            \n            \n            \n        }\n        \n        return max;\n        \n    }\n    \n    private ListNode reverse(ListNode head){\n        \n        ListNode prev = null;\n        \n        ListNode curr = head;\n        while(curr!=null){\n            \n            ListNode next = curr.next;\n            curr.next = prev;\n            prev = curr;\n            curr = next;\n        }\n        \n        return prev;\n    }\n    \n    \n}","compare_result":"1111111111111111111111111111111111111111111111","title_slug":"maximum-twin-sum-of-a-linked-list","has_notes":false,"flag_type":1}