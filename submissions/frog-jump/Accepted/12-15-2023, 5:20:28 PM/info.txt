{"id":1120224367,"question_id":403,"lang":"java","lang_name":"Java","time":"6Â months","timestamp":1702632028,"status":10,"status_display":"Accepted","runtime":"42 ms","url":"/submissions/detail/1120224367/","is_pending":"Not Pending","title":"Frog Jump","memory":"47.9 MB","code":"class Solution {\n    HashSet<String> fail = new HashSet<>(); \n    TreeSet<Integer> set = new TreeSet<>();\n    public boolean canCross(int[] stones) {\n        int len = stones.length;\n\n        for(int s : stones){\n            set.add(s);\n        }\n\n        if(!set.contains(1)) return false;\n\n        return helper(stones, 0, 1);\n    }\n\n    private boolean helper(int[] stones, int idx, int k){\n        int pos = idx+k; // 1\n\n        if(fail.contains(pos+\"_\"+k))\n            return false;\n\n\n        if(pos==set.last()) // x\n            return true;\n\n        if(pos>set.last()) //x\n            return false;\n\n        \n        if(k-1>0 && set.contains(pos+k-1)){\n            if(helper(stones, pos, k-1))\n                return true;\n        }\n\n        if(set.contains(pos+k)){ //x\n            if(helper(stones, pos, k))\n                return true;\n        }\n\n        if(set.contains(pos+k+1)){ \n            if(helper(stones, pos, k+1))\n                return true;\n        }\n        fail.add(pos+\"_\"+k);\n        return false;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111","title_slug":"frog-jump","has_notes":false,"flag_type":1}