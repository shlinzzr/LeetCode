{"id":939848601,"question_id":2601,"lang":"java","lang_name":"Java","time":"1 year, 1 month","timestamp":1682482450,"status":10,"status_display":"Accepted","runtime":"76 ms","url":"/submissions/detail/939848601/","is_pending":"Not Pending","title":"Number of Great Partitions","memory":"61 MB","code":"class Solution {\n    public int countPartitions(int[] nums, int k) {\n        \n        int M = (int)1e9+7;\n        \n        int len = nums.length;\n        long sum = 0;\n        for(int n : nums){\n            sum+=n;\n        }\n        \n        if(sum<2*k)\n            return 0;\n        \n        long[][] dp = new long[len+1][1005];\n        dp[0][0] = 1;\n        \n        for(int i=1; i<=len; i++){\n            \n            for(int s=0; s<k; s++){\n                \n                dp[i][s] += dp[i-1][s];\n                if(s-nums[i-1]>=0){\n                    dp[i][s] += dp[i-1][s-nums[i-1]];\n                }\n                \n                dp[i][s] %= M;\n            }\n        }\n        \n        long total=1;\n        for(int i=0; i<len; i++){\n            total = total * 2 % M;\n        }\n        \n        long invalid= 0;\n        for(int i=0; i<k; i++){\n            invalid = (invalid + (long)dp[len][i]) % M;\n        }\n\n        return (int)((total-2*invalid +M) %M);\n        \n        \n        \n        \n        \n    }\n}","compare_result":"111111111111111111111111111111111111111111111","title_slug":"number-of-great-partitions","has_notes":false,"flag_type":1}