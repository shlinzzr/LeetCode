{"id":939829675,"question_id":2601,"lang":"java","lang_name":"Java","time":"1 year, 1 month","timestamp":1682479429,"status":10,"status_display":"Accepted","runtime":"99 ms","url":"/submissions/detail/939829675/","is_pending":"Not Pending","title":"Number of Great Partitions","memory":"63.4 MB","code":"class Solution {\n    \n    int M =(int)1e9+7;\n    \n    public int countPartitions(int[] nums, int k) {\n        int n = nums.length;\n        long[][] dp = new long[1005][1005];\n        \n        long[] presum = new long[n];\n        for(int i=0; i<n; i++){\n            if(i==0)\n                presum[0] = (long)nums[0];\n            else\n                presum[i] = (long)presum[i-1] + (long)nums[i];\n        }\n        \n        if(presum[n-1]<k*2)\n            return 0;\n        \n        \n        \n        dp[0][0] = 1;\n        \n        for (int i=1; i<=n; i++)\n            for (int s = 0; s<k; s++)\n            {                \n                dp[i][s] += dp[i-1][s];\n                if (s>=nums[i-1])\n                    dp[i][s] += dp[i-1][s-nums[i-1]];\n                dp[i][s] %= M;\n            }\n        \n        long total = 1;\n        for (int i=1; i<=n; i++)\n            total = total * 2 % M;\n        \n        long invalid = 0;\n        for (int s=0; s<k; s++)\n            invalid = (invalid + dp[n][s]) % M;\n        \n        return (int)((total - invalid - invalid + M) % M);        \n        \n//         int ed = len;\n//         for(int i = len-2; i>=0; i--){\n//             if(presum[len-1] -presum[i]>=k ){\n//                 ed=i+1;\n//                 break;\n//             }\n                \n//         }            \n            \n//         System.out.println(st + \" \" + ed) ;\n//         if(st>=ed)\n//             return 0;\n        \n//         return (int)Math.pow(2, (ed-st-1));\n        \n        \n    }\n}","compare_result":"111111111111111111111111111111111111111111111","title_slug":"number-of-great-partitions","has_notes":false,"flag_type":1}