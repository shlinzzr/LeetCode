{"id":939830247,"question_id":2601,"lang":"java","lang_name":"Java","time":"1 year, 1 month","timestamp":1682479524,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/939830247/","is_pending":"Not Pending","title":"Number of Great Partitions","memory":"N/A","code":"class Solution {\n    \n    // https://www.youtube.com/watch?v=V7wdVxiPFCU\n    \n    public int countPartitions(int[] nums, int k) {\n        int len = nums.length;\n        int st = -1;\n        long[] presum = new long[len];\n        for(int i=0; i<len; i++){\n            if(i==0)\n                presum[0] = (long)nums[0];\n            else\n                presum[i] = (long)presum[i-1] + (long)nums[i];\n            \n            if(st==-1 && presum[i]>=k)\n                st=i;\n        }\n        \n        int ed = len;\n        for(int i = len-2; i>=0; i--){\n            if(presum[len-1] -presum[i]>=k ){\n                ed=i+1;\n                break;\n            }\n                \n        }            \n            \n        System.out.println(st + \" \" + ed) ;\n        if(st>=ed)\n            return 0;\n        \n        return (int)Math.pow(2, (ed-st-1));\n        \n        \n    }\n}","compare_result":"010000000001000000000000011000000000000000000","title_slug":"number-of-great-partitions","has_notes":false,"flag_type":1}