{"id":1125762697,"question_id":2596,"lang":"java","lang_name":"Java","time":"5 months, 3 weeks","timestamp":1703238071,"status":10,"status_display":"Accepted","runtime":"75 ms","url":"/submissions/detail/1125762697/","is_pending":"Not Pending","title":"Add Edges to Make Degrees of All Nodes Even","memory":"102.2 MB","code":"class Solution {\n    public boolean isPossible(int n, List<List<Integer>> edges) {\n        List<Set<Integer>> adjacencyList  = new ArrayList<>();\n        List<Integer> odd = new ArrayList<>();\n        for (int i = 0; i <= n; i++) {\n            adjacencyList.add(new HashSet<>());\n        }\n        for (List<Integer> e : edges) {\n            adjacencyList.get(e.get(0)).add(e.get(1));\n            adjacencyList.get(e.get(1)).add(e.get(0));\n        }\n        for (int i = 1; i <= n; i++) {\n            Set<Integer> curSet = adjacencyList.get(i);\n            if (curSet.size() % 2 == 1) {\n                odd.add(i);\n            }\n        }\n        if (odd.size() == 2) {\n            for (int i = 1; i <= n; i++) {\n                int e1 = odd.get(0);\n                int e2 = odd.get(1);\n                if (!adjacencyList.get(e1).contains(i) && !adjacencyList.get(e2).contains(i)) {\n                    return true;\n                }\n            }\n        }\n        if (odd.size() == 4) {\n            int e1 = odd.get(0);\n            int e2 = odd.get(1);\n            int e3 = odd.get(2);\n            int e4 = odd.get(3);\n            return (!adjacencyList.get(e1).contains(e2) && !adjacencyList.get(e3).contains(e4)) \n                || (!adjacencyList.get(e1).contains(e3) && !adjacencyList.get(e2).contains(e4)) \n                || (!adjacencyList.get(e1).contains(e4) && !adjacencyList.get(e2).contains(e3));\n        }\n        return odd.size() == 0;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111","title_slug":"add-edges-to-make-degrees-of-all-nodes-even","has_notes":false,"flag_type":1}