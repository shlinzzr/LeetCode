{"id":1123060650,"question_id":1106,"lang":"java","lang_name":"Java","time":"5 months, 3 weeks","timestamp":1702955432,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1123060650/","is_pending":"Not Pending","title":"Escape a Large Maze","memory":"N/A","code":"class Solution {\n    public boolean isEscapePossible(int[][] blocked, int[] source, int[] target) {\n        HashSet<String > blk = new HashSet<>();\n\n        for(int[] b : blocked){\n            blk.add(b[0]+\"_\"+b[1]);\n        }\n\n        Queue<int[]> q = new LinkedList<>();\n        q.offer(new int[]{source[1], source[0]});\n        int x = source[0];\n        int y = source[1];\n\n        if(x==target[0] && y==target[1])\n            return true;\n\n        HashSet<String> seen = new HashSet<>();\n        int[][] dirs = new int[][]{{1,0}, {0,1}, {-1,0}, {0,-1}};\n        while(!q.isEmpty()){\n            int[] p = q.poll();\n\n            for(int[] d : dirs){\n                int r = d[0] + p[0];\n                int c = d[1] + p[1];\n\n                if(r==target[0] && c==target[1])\n                    return true;\n\n                \n                if(r<0 || c<0 || r>=1000000 || c>=1000000 || seen.contains(r+\"_\"+c) || blk.contains(r+\"_\"+c))\n                    continue;\n\n                if(r>y+200 || c>x+200 || r<y-200 || c<x-200)\n                    return true;\n\n                seen.add(r+\"_\"+c);\n                q.offer(new int[]{r,c});\n            }\n        }\n\n        return false;\n\n    }\n}","compare_result":"111111111111110101011011111101","title_slug":"escape-a-large-maze","has_notes":false,"flag_type":1}