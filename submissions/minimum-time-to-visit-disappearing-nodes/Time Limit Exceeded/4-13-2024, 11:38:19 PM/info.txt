{"id":1231317668,"question_id":3389,"lang":"java","lang_name":"Java","time":"2Â months","timestamp":1713022699,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1231317668/","is_pending":"Not Pending","title":"Minimum Time to Visit Disappearing Nodes","memory":"N/A","code":"class Solution {\n    public int[] minimumTime(int n, int[][] edges, int[] dis) {\n        int len = n;\n        int[] res = new int[n];\n        Arrays.fill(res, Integer.MAX_VALUE);\n        res[0]=0;\n        \n        Map<Integer, List<int[]>> g = new HashMap<>();\n        \n        for(int[] e : edges){\n            g.putIfAbsent(e[0], new ArrayList<>());\n            g.get(e[0]).add(new int[]{e[1], e[2]});\n            \n            g.putIfAbsent(e[1], new ArrayList<>());\n            g.get(e[1]).add(new int[]{e[0], e[2]});\n        }\n        \n        \n        for(int k : g.keySet()){\n            Collections.sort(g.get(k), (a,b)-> a[1]-b[1]);\n        }\n        \n        Stack<int[]> st = new Stack<>(); // node , time\n        \n        Set<Integer> seen = new HashSet<>();\n        seen.add(0);\n        st.push(new int[]{0,0});\n        \n        while(!st.isEmpty()){\n            int[] p = st.pop();\n\n            int cur = p[0];\n            int time = p[1];\n\n            List<int[]> adjs = g.getOrDefault(cur, new ArrayList<>());\n\n            for(int[] adj : adjs){\n\n                int next = adj[0];\n                int cost = adj[1];\n\n\n\n                if( time+cost<res[next] && time+cost < dis[next] ){\n                    // System.out.println(\n                    // System.out.println(\"net= \" + next + \" t=\" + time+ \" cost=\" + cost + \" res=\"  + res[next]);\n                    res[next] = time + cost;\n                    st.push(new int[]{next, time+cost});\n                }\n\n            }\n                \n            \n           \n        }\n        \n        \n        for(int i=0; i<len ; i++){\n            if(res[i]==Integer.MAX_VALUE){\n                res[i] = -1;\n            }\n        }\n\n        return res;\n        \n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110","title_slug":"minimum-time-to-visit-disappearing-nodes","has_notes":false,"flag_type":1}