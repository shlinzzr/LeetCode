{"id":951908034,"question_id":685,"lang":"java","lang_name":"Java","time":"1Â year","timestamp":1684306814,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/951908034/","is_pending":"Not Pending","title":"Redundant Connection II","memory":"N/A","code":"class Solution {\n    public int[] findRedundantDirectedConnection(int[][] edges) {\n        \n        int len = edges.length;\n        \n        List<int[]> list = new ArrayList<>();\n        \n        UnionFind uf = new UnionFind(len+1);\n        \n        \n        for(int[] e : edges){\n            \n            int a=uf.find(e[0]);\n            int b=uf.find(e[1]);\n            \n            if(a==b)\n                list.add(e);\n            else{\n                uf.union(e[0], e[1]);\n            }\n        }\n        \n        return list.get(list.size()-1);\n        \n        \n    }\n    \n    \n    class UnionFind{\n        \n        int[] parent;\n        int[] weight;\n        \n        public UnionFind(int n){\n            parent = new int[n];\n            weight = new int[n];\n            for(int i=0; i<n; i++){\n                parent[i]= i;\n            }\n            Arrays.fill(weight, 1);\n        \n        }\n        public int find(int x){\n            \n            if(parent[x]!=x)\n                parent[x] = find(parent[x]);\n            \n            return parent[x];\n        }\n        \n        public void union(int a, int b){\n\n            a=find(a);\n            b=find(b);\n            \n            if(a==b)\n                return;\n            \n            if(a<b){\n            \n            // if(weight[a]<=weight[b]){\n                weight[a]+=weight[b];\n                parent[b] = a;\n            }else{\n                weight[b]+=weight[a];\n                parent[a] = b;\n            }\n        }\n        \n    }\n}","compare_result":"1101100111001101011100000000001001100000000000000000010","title_slug":"redundant-connection-ii","has_notes":false,"flag_type":1}