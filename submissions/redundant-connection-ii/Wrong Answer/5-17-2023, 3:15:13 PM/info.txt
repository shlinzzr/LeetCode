{"id":951915413,"question_id":685,"lang":"java","lang_name":"Java","time":"1Â year","timestamp":1684307713,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/951915413/","is_pending":"Not Pending","title":"Redundant Connection II","memory":"N/A","code":"class Solution {\n    public int[] findRedundantDirectedConnection(int[][] edges) {\n        \n        int len = edges.length;\n        \n        List<int[]> list = new ArrayList<>();\n        \n        UnionFind uf = new UnionFind(len+1);\n        \n        \n        for(int[] e : edges){\n            \n            int a=uf.find(e[0]);\n            int b=uf.find(e[1]);\n            \n            if(a==b || uf.indegree[e[1]]>0){\n                list.add(e);\n                \n                for(int i=0;i<=len; i++){\n                    if(uf.parent[i]==e[1]){\n                        list.add(new int[]{i, e[1]});                \n                        uf.parent[i] = i;\n                    }\n                        \n                }\n            }\n            \n            \n            else{\n                uf.union(e[1], e[0]);\n                 uf.indegree[e[1]]++;\n            }\n           \n            \n            \n            \n//             for(int i=0; i<len+1; i++){\n                \n//                 System.out.println(i +\" \" + uf.parent[i]);\n//             }\n//               System.out.println();\n            \n            \n        }\n        \n        return list.get(list.size()-1);\n        \n        \n    }\n    \n    \n    class UnionFind{\n        \n        int[] parent;\n        int[] weight;\n        int[] indegree;\n        \n        public UnionFind(int n){\n            parent = new int[n];\n            weight = new int[n];\n            indegree = new int[n];\n            for(int i=0; i<n; i++){\n                parent[i]= i;\n            }\n            Arrays.fill(weight, 1);\n        \n        }\n        public int find(int x){\n            \n            if(parent[x]!=x)\n                parent[x] = find(parent[x]);\n            \n            return parent[x];\n        }\n        \n        public void union(int a, int b){\n\n            a=find(a);\n            b=find(b);\n            \n            if(a==b)\n                return;\n            \n            // if(a<b){\n            \n            // if(weight[a]<=weight[b]){\n                weight[a]+=weight[b];\n                parent[b] = a;\n            // }else{\n            //     weight[b]+=weight[a];\n            //     parent[a] = b;\n            // }\n        }\n        \n    }\n}","compare_result":"0111110101001101011001101000101000010000010010001001011","title_slug":"redundant-connection-ii","has_notes":false,"flag_type":1}