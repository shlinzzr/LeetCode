{"id":951941369,"question_id":685,"lang":"java","lang_name":"Java","time":"1Â year","timestamp":1684311137,"status":10,"status_display":"Accepted","runtime":"5 ms","url":"/submissions/detail/951941369/","is_pending":"Not Pending","title":"Redundant Connection II","memory":"43.3 MB","code":"class Solution {\n    \n    Map<Integer, Integer> incoming = new HashMap<>();\n    \n    public int[] findRedundantDirectedConnection(int[][] a) {\n        \n        // count incoming edges for all nodes\n        int nodeWithTwoIncomingEdges = -1;\n        for(int[] v : a){\n            incoming.put(v[1], incoming.getOrDefault(v[1], 0)+1);\n            if(incoming.get(v[1])==2) nodeWithTwoIncomingEdges=v[1];\n        }\n        \n        if(nodeWithTwoIncomingEdges==-1){    \n            // if there are no nodes with 2 incoming edges -> just find a cycle\n            return findRedundantConnection(a, -1);\n        }else{\n            // if there is a node with 2 incoming edges -> skip them one by one and try to build a graph\n            // if we manage to build a graph without a cycle - the skipped node is what we're looking for\n            for(int i=a.length-1;i>=0;i--){                           \n                if(a[i][1]==nodeWithTwoIncomingEdges) {\n                    int[] res = findRedundantConnection(a, i);\n                    if(res==null) return a[i];\n                }\n            }\n        }\n        \n        return null;\n    }\n    \n    // 'Redundant Connection' solution is extended to skip a node.\n    int[] findRedundantConnection(int[][] a, int skip){\n        UnionFind uf = new UnionFind();\n        \n        for(int i=0;i<a.length;i++){\n            if(i==skip) continue;\n            if(!uf.union(a[i][0], a[i][1])) return a[i];\n        } \n        \n        return null;\n    }\n    \n    class UnionFind {\n        Map<Integer, Integer> map = new HashMap<>();\n\n        int find(int x){\n            if(!map.containsKey(x)) map.put(x, x);\n\n            if(map.get(x)==x) return x;\n            int par = find(map.get(x));\n            map.put(x, par);\n            return par;\n        }\n\n        boolean union(int x, int y){\n            int px = find(x);\n            int py = find(y);\n\n            if(px==py) return false;\n            map.put(px, py);\n            return true;\n        }        \n    }\n    \n}","compare_result":"1111111111111111111111111111111111111111111111111111111","title_slug":"redundant-connection-ii","has_notes":false,"flag_type":1}