{"id":1276933446,"question_id":1766,"lang":"java","lang_name":"Java","time":"1 week, 2 days","timestamp":1717466807,"status":10,"status_display":"Accepted","runtime":"14 ms","url":"/submissions/detail/1276933446/","is_pending":"Not Pending","title":"Minimum Number of Removals to Make Mountain Array","memory":"44.4 MB","code":"class Solution {\n    public int minimumMountainRemovals(int[] nums) {\n\n        int len = nums.length;\n        int[] left = new int[len];\n        List<Integer> list = new ArrayList<>();\n        for(int i=0; i<len; i++){\n            if(list.isEmpty() || nums[i]>list.get(list.size()-1)){\n                list.add(nums[i]);\n            }else {\n                int idx = ceiling(list, nums[i]);\n                list.set(idx, nums[i]);\n            }\n\n            left[i] = list.size();\n        }\n\n        int[] right = new int[len];\n        list = new ArrayList<>();\n        for(int i=len-1; i>=0; i--){\n            if(list.isEmpty() || nums[i]>list.get(list.size()-1)){\n                list.add(nums[i]);\n            }else {\n                int idx = ceiling(list, nums[i]);\n                list.set(idx, nums[i]);\n            }\n            right[i] = list.size();\n        }\n\n        int max = 0;\n        for(int i=0; i<len; i++){\n            if(left[i]>1 && right[i]>1)\n                max = Math.max(max, left[i] + right[i] - 1);\n        }\n\n        return len-max;\n        \n    }\n\n    private int ceiling(List<Integer> list, int n){\n        int st=0, ed=list.size()-1;\n\n        while(st<ed){\n            int mid = st+ (ed-st)/2;\n            if(list.get(mid)>=n){\n                ed = mid;\n            }else{\n                st = mid+1;\n            }\n        }\n        return st;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-number-of-removals-to-make-mountain-array","has_notes":false,"flag_type":1}