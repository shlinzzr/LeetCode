{"id":1092584205,"question_id":1766,"lang":"java","lang_name":"Java","time":"7 months, 1 week","timestamp":1699251816,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1092584205/","is_pending":"Not Pending","title":"Minimum Number of Removals to Make Mountain Array","memory":"N/A","code":"class Solution {\n    public int minimumMountainRemovals(int[] nums) {\n        int len = nums.length;\n        int st =0, ed=len-1;\n\n        while(st<ed){\n            int mid = st+(ed-st)/2;\n\n            if(isValid(nums, mid)){\n                ed = mid;\n            }else{\n                st = mid+1;\n            }\n        }\n\n        return st;\n\n    }\n\n    private boolean isValid(int[] nums, int mid){\n\n        List<Integer> list = new ArrayList<>();\n\n        int len = nums.length;\n\n        for(int i=1; i<len-1; i++){\n            if(nums[i-1]<nums[i] && nums[i]>nums[i+1]){\n                list.add(i);\n            }\n        }\n\n\n        int cnt = 0;\n        for(int peak : list){\n\n            for(int i=1; i<len-1; i++){\n                \n                if(i<peak){\n                    if(nums[i]<nums[i-1]){\n                        cnt++;\n                    }\n                }else{\n                    if(nums[i]<nums[i+1]){\n                        cnt++;\n                    }\n                }\n\n                if(cnt>mid)\n                    continue;\n            }\n\n            if(cnt<=mid)\n                return true;\n        }\n\n        return false;\n\n    }\n\n\n}","compare_result":"100010111101001101010000000000000000100000000000000000000000000000000000000000000000000000","title_slug":"minimum-number-of-removals-to-make-mountain-array","has_notes":false,"flag_type":1}