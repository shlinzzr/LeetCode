{"id":845713024,"question_id":435,"lang":"java","lang_name":"Java","time":"1 year, 6 months","timestamp":1668760900,"status":10,"status_display":"Accepted","runtime":"65 ms","url":"/submissions/detail/845713024/","is_pending":"Not Pending","title":"Non-overlapping Intervals","memory":"100.2 MB","code":"class Solution {\n    public int eraseOverlapIntervals(int[][] intervals) {\n        \n        Arrays.sort(intervals, (i1, i2) -> Integer.compare(i1[0], i2[0]));\n        // Arrays.sort(intervals, new myComparator());\n        \n        // for(int[] r : intervals){\n        //     System.out.print(\"[\" + r[0] + \",\" + r[1] + \"], \");\n        // }\n        // System.out.println();\n\n        int count=0;\n        int[] prev = intervals[0];\n        \n        for(int i=1; i<intervals.length; i++){\n            int[] curr = intervals[i];\n            if(curr[0]<prev[1]){\n                count++;\n                prev[1] = Math.min(curr[1], prev[1]);\n            }else{\n                prev = curr;\n            }\n        }\n        \n        \n        return count;\n\n    }\n    \n    // class myComparator implements Comparator<int[]>{\n    //     public int compare(int[] a, int[] b){\n    //         return a[1]-b[1];\n    //     }\n    // }\n    \n}","compare_result":"1111111111111111111111111111111111111111111111111111111111","title_slug":"non-overlapping-intervals","has_notes":false,"flag_type":1}