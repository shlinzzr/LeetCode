{"id":1266401079,"question_id":1311,"lang":"java","lang_name":"Java","time":"2 weeks, 5 days","timestamp":1716531490,"status":10,"status_display":"Accepted","runtime":"6 ms","url":"/submissions/detail/1266401079/","is_pending":"Not Pending","title":"Largest Magic Square","memory":"43.9 MB","code":"class Solution {\n    public int largestMagicSquare(int[][] grid) {\n\n        int h = grid.length;\n        int w = grid[0].length;\n\n        \n        int[][] presum_row = new int[h][w];\n        int[][] presum_col = new int[h][w];\n\n        for(int i=0; i<h; i++){\n            for(int j=0; j<w; j++){\n                presum_row[i][j] = j==0 ? grid[i][j] : grid[i][j] + presum_row[i][j-1];\n            }\n        }\n\n        for(int j=0; j<w; j++){\n            for(int i=0; i<h; i++){\n                presum_col[i][j] = i==0 ? grid[i][j] : grid[i][j] + presum_col[i-1][j];\n            }\n        }\n\n        int res = 1 ;\n\n        for(int i=0; i<h;i++){\n            for(int j=0; j<w; j++){\n                int maxEdge = Math.min(h-i, w-j);\n\n                for(int e=maxEdge; e>res; e--){\n\n                    int target = presum_col[i+e-1][j] - presum_col[i][j] + grid[i][j];\n\n                    if(isValid(target, presum_row, presum_col, grid, i, j, e)){\n                        res = e;\n                        break;\n                    }\n                        \n\n                }\n            }\n        }\n\n        return res;\n\n        \n    }\n\n    private boolean isValid(int target, int[][] presum_row, int[][] presum_col, int[][] grid, int i, int j, int e){\n \n        // check each row\n        for(int k=0; k<e; k++){\n            if(presum_row[i+k][j+e-1] - presum_row[i+k][j] + grid[i+k][j] != target) return false;\n        }\n\n        for(int k=0; k<e; k++){\n            if(presum_col[i+e-1][j+k] - presum_col[i][j+k] + grid[i][j+k] != target) return false;\n        }\n\n        // check diagonal\n        int diagonal = 0 ;\n        for(int k=0; k<e; k++){\n            diagonal += grid[i+k][j+k];\n        }\n        if(diagonal!=target) return false;\n\n        for(int k=0; k<e; k++){\n            diagonal -= grid[i+e-1-k][j+k];\n        }\n\n        if(diagonal!=0) return false;\n\n        return true;\n\n\n\n\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"largest-magic-square","has_notes":false,"flag_type":1}