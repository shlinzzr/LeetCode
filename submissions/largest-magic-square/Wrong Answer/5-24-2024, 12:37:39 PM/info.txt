{"id":1266334381,"question_id":1311,"lang":"java","lang_name":"Java","time":"2 weeks, 5 days","timestamp":1716525459,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1266334381/","is_pending":"Not Pending","title":"Largest Magic Square","memory":"N/A","code":"class Solution {\n    public int largestMagicSquare(int[][] grid) {\n\n        int h = grid.length;\n        int w = grid[0].length;\n\n        int[][] presum_row = new int[h+1][w+1];\n        int[][] presum_col = new int[h+1][w+1];\n\n        for(int i=0; i<h; i++){\n            for(int j=0; j<w; j++){\n                presum_row[i+1][j+1] = grid[i][j] + presum_row[i+1][j];\n            }\n        }\n        \n        for(int j=0; j<w; j++){\n            for(int i=0; i<h; i++){\n                presum_col[i+1][j+1] = grid[i][j] + presum_col[i][j+1];\n            }\n        }\n        int res= 1 ;\n        for(int i=0; i<h; i++){\n            for(int j=0; j<w; j++){\n                \n                for(int e=Math.min(i, j); e>res; e--){\n\n                    int target = presum_row[i+1][j+1]-presum_row[i+1-e][j+1];\n\n                    System.out.println(i+\" \" + j + \" \" + e+ \" \" + target);\n\n                    if(isValid(target, presum_row, presum_col, grid, i+1, j+1, e)){\n                        res = Math.max(res, e);\n                    }\n                }\n            }\n        }\n\n        return res;\n    }\n\n\n    private boolean isValid(int target, int[][] presum_row, int[][] presum_col, int[][] grid, int i, int j, int e){\n\n            // check every row\n        for (int k = 0; k < e; k++) {\n            if (presum_row[i-k][j] - presum_row[i-k][j-e]!= target) {\n                return false;\n            }\n        }\n\n        // check every column\n        for (int k = 0; k < e; k++) {\n            if (presum_col[i][j-k] - presum_col[i-e][j-k] != target) {\n                return false;\n            }   \n        }\n\n        // check both diagonal\n        int diagonal = 0;\n        //  \\\n        //   \\\n        for (int k = 0; k < e; k++) {\n            diagonal += grid[i - k][j - k];\n        }\n\n        if (diagonal != target) {\n            return false;\n        }\n\n        //   /\n        //  /\n        for (int k = 0; k < e; k++) {\n            diagonal -= grid[i - e + 1 - k][j - k];\n        }\n\n        return diagonal == 0;\n    }\n        \n}","compare_result":"00111000000011100001001010000100000010000000000000011011011110000011111111001111","title_slug":"largest-magic-square","has_notes":false,"flag_type":1}