{"id":902073110,"question_id":540,"lang":"java","lang_name":"Java","time":"1 year, 3 months","timestamp":1676961568,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/902073110/","is_pending":"Not Pending","title":"Single Element in a Sorted Array","memory":"47.9 MB","code":"class Solution {\n    public int singleNonDuplicate(int[] nums) {\n\n        int start = 0, end = nums.length - 1;\n\n        while (start < end) {\n            // We want the first element of the middle pair,\n            // which should be at an even index if the left part is sorted.\n            // Example:\n            // Index: 0 1 2 3 4 5 6\n            // Array: 1 1 3 3 4 8 8\n            //            ^\n            int mid = (start + end) / 2;\n            if (mid % 2 == 1) mid--;\n\n            // We didn't find a pair. The single element must be on the left.\n            // (pipes mean start & end)\n            // Example: |0 1 1 3 3 6 6|\n            //               ^ ^\n            // Next:    |0 1 1|3 3 6 6\n            if (nums[mid] != nums[mid + 1]) end = mid;\n\n            // We found a pair. The single element must be on the right.\n            // Example: |1 1 3 3 5 6 6|\n            //               ^ ^\n            // Next:     1 1 3 3|5 6 6|\n            else start = mid + 2;\n        }\n\n        // 'start' should always be at the beginning of a pair.\n        // When 'start > end', start must be the single element.\n        return nums[start];\n    }\n}","compare_result":"111111111111111","title_slug":"single-element-in-a-sorted-array","has_notes":false,"flag_type":1}