{"id":738788275,"question_id":128,"lang":"java","lang_name":"Java","time":"1 year, 11 months","timestamp":1656994281,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/738788275/","is_pending":"Not Pending","title":"Longest Consecutive Sequence","memory":"N/A","code":"class Solution {\n    public int longestConsecutive(int[] nums) {\n        \n        if(nums.length<2)\n            return nums.length;\n        \n        // merge sort\n        mergesort(nums);\n        \n        for(int n : nums){\n            System.out.println(n);\n        }\n        \n        \n        int max = 0;\n        int curr = 1;\n        for(int n=1; n<nums.length; n++){\n            \n            if(nums[n]==nums[n-1])\n                continue;\n            \n            if(nums[n]==nums[n-1] +1){\n                curr++;\n            }else{\n                if(curr>max){\n                    max = curr;\n                    \n                }\n                \n                curr=1;\n            }\n            \n            System.out.println(nums[n] + \", max=\"+max + \" curr\"+ curr);\n            \n\n        }\n         if(curr>max){\n                    max = curr;\n                    \n                }\n        \n        \n        return max;\n        \n    }\n    \n    \n    private void mergesort(int[] nums){\n        \n        mergesort(nums, new int[nums.length], 0, nums.length-1);\n        \n        \n    }\n    \n    private void mergesort(int[] nums, int[] temp, int leftStart, int rightEnd){\n        \n        if(leftStart >= rightEnd)\n            return;\n        \n        // System.out.println(\"mergesort(\" + leftStart + \", \" + rightEnd + \")\");\n        \n        int mid = (leftStart + rightEnd) /2;\n        mergesort(nums, temp, 0, mid);\n        mergesort(nums, temp, mid+1, rightEnd);\n        mergeHalves(nums, temp, leftStart, rightEnd);\n        \n    }\n    \n    private void mergeHalves(int[] nums, int[] temp, int leftStart, int rightEnd){\n        int leftEnd = (leftStart + rightEnd)/2;\n        int rightStart = leftEnd+1;\n        \n        int left = leftStart;\n        int right = rightStart;\n        int idx = leftStart;\n        \n        while(left<=leftEnd && right<=rightEnd){\n            if(nums[left] <= nums[right]){\n                temp[idx] = nums[left];\n                left++;\n            }else{\n                temp[idx] = nums[right];\n                right++;\n            }\n            idx++;\n        }\n        \n        \n        // System.out.println(\"print temp:\");\n        // for(int t : temp){\n        //     System.out.println(t);\n        // }\n        \n        int size = rightEnd-leftStart +1;\n        \n        // System.arraycopy(nums, left, temp,idx, leftEnd-left+1);\n        // System.arraycopy(nums, right, temp,idx, rightEnd-right+1);\n        // System.arraycopy(temp, leftStart, nums, leftStart, size);\n        \n        \n        \n        \n        for(int i=left; i<=leftEnd; i++){\n            temp[idx] = nums[i];\n            idx++;\n        }\n        for(int i=right; i<=rightEnd; i++){\n            temp[idx] = nums[i];\n            idx++;\n        }\n        \n        \n        \n        for(int i=leftStart; i<=rightEnd; i++){\n            nums[i] = temp[i];\n        }\n        \n        \n        \n    }\n    \n}\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111111000000","title_slug":"longest-consecutive-sequence","has_notes":false,"flag_type":1}