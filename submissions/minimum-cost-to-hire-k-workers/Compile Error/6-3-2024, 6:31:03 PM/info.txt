{"id":1276229439,"question_id":887,"lang":"java","lang_name":"Java","time":"1 week, 2 days","timestamp":1717410663,"status":20,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/1276229439/","is_pending":"Not Pending","title":"Minimum Cost to Hire K Workers","memory":"N/A","code":"class Solution {\n\n    class Worker{\n        int q;\n        int w;\n        double ratio;\n        public Worker(int q, int w){\n            this.q = q;\n            this.w = w;\n\n            this.ratio = 1.0*w/q;\n        }\n    }\n    public double mincostToHireWorkers(int[] quality, int[] wage, int k) {\n\n        // wage : 期望拿到的薪水\n        // quality :工作產出\n        // 條件是必須要符合 所有k個worker中 最小的單位期望薪資(ratio)\n        // 對於每個員工 單位期望薪資(ratio)就是 w/q\n        // 限制是 薪資可以多給 但是不能少給\n        // 我們只想要最便宜的方式去hire. k workers, => 薪資越低越好, 產出越大越好\n        // 因此我們 sort workers by ratio asc => 當下ratio一定都比之前workers大\n        // 我們把員工放進pq內。 把產量太高的員工踢掉 => 產量太高表示薪資太貴\n        // sum up 產能 去乘以ratio就是總支付薪資         \n\n        int n = quality.length;\n\n        List<Worker> list = new ArrayList<>();\n        for(int i=0; i<n; i++){\n            Worker worker = new Worker(quality[i], wage[i]);\n            list.add(worker);\n        }\n        // cp直 : q/w\n        Collections.sort(list, (a,b)-> a.cp-b.cp);\n        \n\n        \n        \n    }\n}","compare_result":null,"title_slug":"minimum-cost-to-hire-k-workers","has_notes":false,"flag_type":1}