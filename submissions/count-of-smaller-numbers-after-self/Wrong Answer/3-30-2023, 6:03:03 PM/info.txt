{"id":924739722,"question_id":315,"lang":"java","lang_name":"Java","time":"1 year, 2 months","timestamp":1680170583,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/924739722/","is_pending":"Not Pending","title":"Count of Smaller Numbers After Self","memory":"N/A","code":"class Solution {\n    public List<Integer> countSmaller(int[] nums) {\n        int len = nums.length;\n        \n        int[] res = new int[len];\n        \n        mergeSort(nums, 0, len-1, res);\n        \n        List<Integer> list = new ArrayList<>();\n        for(int r: res) list.add(r);\n        return list;\n    }\n    \n   \n    private void mergeSort(int[] nums, int lo, int hi, int[] res){\n        if(lo>=hi) return;\n        int mid = lo + (hi-lo)/2;\n        mergeSort(nums, lo, mid, res);\n        mergeSort(nums, mid+1, hi, res);\n        mergeHalves(nums, lo, mid, mid+1, hi, res);\n    }\n    \n    private void mergeHalves(int[] nums, int lo, int loEnd, int hi, int hiEnd, int[] res){\n        \n        int loIdx = lo, hiIdx=hi;\n        int len = hiEnd-lo+1;\n        int[] sorted = new int[len];\n        int idx =0;\n        \n        int rightCounter = 0;\n        \n        \n        while(loIdx<=loEnd && hiIdx<=hiEnd){\n            if(nums[loIdx]<=nums[hiIdx]){\n                \n                res[loIdx]+=rightCounter;\n                sorted[idx++] = nums[loIdx++];\n                \n            }else{\n                rightCounter++;\n                sorted[idx++] = nums[hiIdx++];        \n            }\n        }\n        \n        while(loIdx<=loEnd){\n             res[loIdx]+=rightCounter;\n            sorted[idx++] = nums[loIdx++];\n        }\n        \n        while(hiIdx<=hiEnd){\n            sorted[idx++] = nums[hiIdx++];\n        }\n        \n        System.arraycopy(sorted, 0, nums, lo, len);\n    }\n    \n}","compare_result":"111111111011000011100100011000000000000101001001110000101000111001","title_slug":"count-of-smaller-numbers-after-self","has_notes":false,"flag_type":1}