{"id":994120088,"question_id":644,"lang":"java","lang_name":"Java","time":"11Â months","timestamp":1689320547,"status":10,"status_display":"Accepted","runtime":"52 ms","url":"/submissions/detail/994120088/","is_pending":"Not Pending","title":"Maximum Average Subarray II","memory":"45.6 MB","code":"class Solution {\n    public double findMaxAverage(int[] nums, int k) {\n        \n        //this video is awesome\n        \n        double left = nums[0];\n        double right = nums[0];\n        for(int n : nums){\n            left = Math.min(left, n);\n            right = Math.max(right, n);\n        }\n        \n        while(right-left>1e-5){\n            double mid = (left+right)/2;\n            if(isOk(nums, k, mid)){\n                left = mid;\n            }else{\n                right = mid;\n            }\n        }\n        \n        return left;\n    }\n    \n    private boolean isOk(int[] nums, int k, double mid){\n        \n        double currSum = 0;\n        double prevSum = 0;\n        double minSum = 0;\n        \n        for(int i=0; i<nums.length; i++){\n            currSum += nums[i]-mid;\n            if(i>=k-1){\n                if(currSum-minSum>=0) return true;\n                prevSum += nums[i-k+1]-mid;\n                minSum = Math.min(minSum, prevSum);\n            }\n        }\n        return false;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-average-subarray-ii","has_notes":false,"flag_type":1}