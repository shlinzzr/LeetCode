{"id":880456467,"question_id":143,"lang":"java","lang_name":"Java","time":"1 year, 4 months","timestamp":1674033713,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/880456467/","is_pending":"Not Pending","title":"Reorder List","memory":"44.6 MB","code":"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n     public void reorderList(ListNode head) {\n        if (head == null) {\n            return;\n        }\n        \n        // Find the middle node\n        ListNode slow = head, fast = head.next;\n        while (fast != null && fast.next != null) {\n            slow = slow.next;\n            fast = fast.next.next;\n        }\n        \n        // Reverse the second half\n        ListNode head2 = reverse(slow.next);\n        slow.next = null;\n        \n        // Link the two halves together\n        while (head != null && head2 != null) {\n            ListNode tmp1 = head.next;\n            ListNode tmp2 = head2.next;\n            head2.next = head.next;\n            head.next = head2;\n            head = tmp1;\n            head2 = tmp2;\n        }\n    }\n    \n    private ListNode reverse(ListNode n) {\n        ListNode prev = null;\n        ListNode cur = n;\n        while (cur != null) {\n            ListNode tmp = cur.next;\n            cur.next = prev;\n            prev = cur;\n            cur = tmp;\n        }\n        \n        return prev;\n    }\n}","compare_result":"111111111111","title_slug":"reorder-list","has_notes":false,"flag_type":1}