{"id":835927064,"question_id":747,"lang":"java","lang_name":"Java","time":"1 year, 7 months","timestamp":1667462207,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/835927064/","is_pending":"Not Pending","title":"Min Cost Climbing Stairs","memory":"43.1 MB","code":"class Solution {\n    \n    int[] dp;\n    \n    public int minCostClimbingStairs(int[] cost) {\n        int len = cost.length;\n        dp = new int[len+1];\n        return Math.min( helper(cost, len-2), helper(cost, len-1));\n    }\n    \n    private int helper(int[] cost, int n){\n        if(n<2){\n            return cost[n];\n        }\n        \n        if(dp[n]>0)\n            return dp[n];\n        \n        dp[n] = Math.min( helper(cost, n-2), helper(cost, n-1)) + cost[n];\n        \n        return dp[n];\n    }\n    \n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"min-cost-climbing-stairs","has_notes":false,"flag_type":1}