{"id":747583726,"question_id":747,"lang":"java","lang_name":"Java","time":"1 year, 11 months","timestamp":1657869334,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/747583726/","is_pending":"Not Pending","title":"Min Cost Climbing Stairs","memory":"43.8 MB","code":"class Solution {\n    public int minCostClimbingStairs(int[] cost) {\n        \n        //[1, 1, 44,  55, 1]\n        \n        // mincost[i] = cost[i] + Math.min(mincost[i-1], mincost[i-2])\n        // mincost[0] = cost[0];\n        // mincost[1] = cost[1];\n        // mincost[2] = cost[2] + min(cost[0], cost[1]);\n        \n        \n        \n        int n = cost.length;\n        \n        int[] dp = new int[n];\n        \n        return Math.min( helper(cost, n-1, dp) , helper(cost, n-2, dp) );\n    \n            \n    }\n    \n    private int helper(int[] cost, int i, int[] dp){\n        if(i<0)\n            return 0;\n        \n        if(i==0 || i==1)\n            return cost[i];\n        \n        if(dp[i]!=0)\n            return dp[i];\n        \n        dp[i] = cost[i] + Math.min(helper(cost, i-1, dp), helper(cost, i-2, dp));\n        return dp[i];\n        \n        \n    }\n    \n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"min-cost-climbing-stairs","has_notes":false,"flag_type":1}