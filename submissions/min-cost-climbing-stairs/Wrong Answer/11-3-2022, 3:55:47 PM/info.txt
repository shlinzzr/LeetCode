{"id":835926661,"question_id":747,"lang":"java","lang_name":"Java","time":"1 year, 7 months","timestamp":1667462147,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/835926661/","is_pending":"Not Pending","title":"Min Cost Climbing Stairs","memory":"N/A","code":"class Solution {\n    \n    int[] dp;\n    \n    public int minCostClimbingStairs(int[] cost) {\n        int len = cost.length;\n        dp = new int[len+1];\n        return Math.min( helper(cost, len-2), helper(cost, len-1));\n    }\n    \n    private int helper(int[] cost, int n){\n        if(n<2){\n            return cost[n];\n        }\n        \n        if(dp[n]>0)\n            return dp[n];\n        \n        \n        dp[n] = Math.min( helper(cost, n-2), helper(cost, n-1)) + cost[n-1];\n        \n        return dp[n];\n    }\n    \n}","compare_result":"1011111000100010000000111110001000000000001111100000000000000011111111100010001000111101110100010000000000011101000000000000000111111110001000100011110111010001001111011100110010000000000000001111111000100010001111011101000100111101110011001011110111001100011000000000000000001011110","title_slug":"min-cost-climbing-stairs","has_notes":false,"flag_type":1}