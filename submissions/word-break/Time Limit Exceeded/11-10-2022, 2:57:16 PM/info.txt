{"id":840588098,"question_id":139,"lang":"java","lang_name":"Java","time":"1 year, 7 months","timestamp":1668063436,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/840588098/","is_pending":"Not Pending","title":"Word Break","memory":"N/A","code":"class Solution {\n    \n    \n    TrieNode root = new TrieNode();\n    \n    public boolean wordBreak(String s, List<String> wordDict) {\n       \n        // solution 2 : use Trie\n        \n        for(String w : wordDict){\n            TrieNode node = root;\n            \n            for(char c : w.toCharArray()){\n                if(node.arr[c-'a']==null){\n                    node.arr[c-'a'] = new TrieNode();\n                }\n                node = node.arr[c-'a'];\n            }\n            node.isWord=true;\n        }\n        \n        \n        return dfs(s, 0);\n        \n        \n    }\n    \n    private boolean dfs(String s, int curr){\n        \n        if(curr==s.length())\n            return true;\n        \n        \n        TrieNode node = root;\n        \n        for(int i=curr; i<s.length(); i++){\n            char c = s.charAt(i);\n            if(node.arr[c-'a']!=null){\n                \n                node = node.arr[c-'a'];\n                if(node.isWord==true && dfs(s, i+1)){\n                    return true;\n                }\n            }else{\n                break;\n            }\n        }\n        \n        return false;\n    }\n    \n    \n    \n    \n    private class TrieNode{\n        TrieNode[] arr;\n        boolean isWord;\n        \n        public TrieNode(){\n            arr = new TrieNode[26];\n            isWord=false;\n        }\n    }\n}","compare_result":"111111111111111111111111111111111110000000000","title_slug":"word-break","has_notes":false,"flag_type":1}