{"id":925301399,"question_id":132,"lang":"java","lang_name":"Java","time":"1 year, 2 months","timestamp":1680256186,"status":10,"status_display":"Accepted","runtime":"11 ms","url":"/submissions/detail/925301399/","is_pending":"Not Pending","title":"Palindrome Partitioning II","memory":"40.9 MB","code":"class Solution {\n    public int minCut(String s) {\n        // validate input\n        if (s == null || s.length() <= 1) {\n            return 0;\n        }\n        // dp\n        int N = s.length();\n        int[] dp = IntStream.range(0, N).toArray(); // initial value: dp[i] = i\n\n        for (int mid = 1; mid <  N; mid++) { // iterate through all chars as mid point of palindrome\n            // CASE 1. odd len: center is at index mid, expand on both sides\n            for (int start = mid, end = mid; start >= 0 && end < N && s.charAt(start) == s.charAt(end); start--, end++) {\n                int newCutAtEnd = (start == 0) ? 0 : dp[start - 1] + 1;\n                dp[end] = Math.min(dp[end], newCutAtEnd);\n            }\n            // CASE 2: even len: center is between [mid-1,mid], expand on both sides\n            for (int start = mid - 1, end = mid; start >= 0 && end < N && s.charAt(start) == s.charAt(end); start--, end++) {\n                int newCutAtEnd = (start == 0) ? 0 : dp[start - 1] + 1;\n                dp[end] = Math.min(dp[end], newCutAtEnd);\n            }\n        }\n        return dp[N - 1];\n    }\n}","compare_result":"111111111111111111111111111111111111","title_slug":"palindrome-partitioning-ii","has_notes":false,"flag_type":1}