{"id":936754378,"question_id":1474,"lang":"java","lang_name":"Java","time":"1 year, 1 month","timestamp":1681971964,"status":10,"status_display":"Accepted","runtime":"6 ms","url":"/submissions/detail/936754378/","is_pending":"Not Pending","title":"Longest ZigZag Path in a Binary Tree","memory":"54 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    int max = 0;\n    public int longestZigZag(TreeNode root) {\n        if(root == null) return 0;\n        path(root.left, 0, false); //try both directions, and choose the better one\n        path(root.right, 0, true);\n        return max;\n    }\n    private void path(TreeNode node, int depth, boolean prevIsRight) { \n        \n        max = Math.max(max, depth);\n        if(node == null) \n            return;\n        \n        path(node.left, (prevIsRight) ? depth+1: 0, false); \n        path(node.right, (!prevIsRight) ? depth+1: 0, true);\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111","title_slug":"longest-zigzag-path-in-a-binary-tree","has_notes":false,"flag_type":1}