{"id":1206837056,"question_id":452,"lang":"java","lang_name":"Java","time":"2 months, 3 weeks","timestamp":1710731303,"status":20,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/1206837056/","is_pending":"Not Pending","title":"Minimum Number of Arrows to Burst Balloons","memory":"N/A","code":"class Solution {\n    public int findMinArrowShots(int[][] points) {\n        int len = points.length;\n\n        Arrays.sort(points, (a,b)-> a[0]==b[0] ? a[1]-b[1] : a[0]-b[0] );\n\n        PriorityQueue<int[]> pq = new PriorityQueue<>( // idx, pts\n            (a,b)->b[1]!=a[1] ? b[1]-a[1] : a[0]-b[0]\n        );\n\n        HashMap<Integer, Set<Integer>> pts = new HashMap<>();\n        TreeMap<Integer, Integer> map = new TreeMap<>();\n        for(int i=0; i<len; i++){\n            int[] p = points[i];\n            map.put(p[0], map.getOrDefault(p[0], 0)+1);\n            map.put(p[1], map.getOrDefault(p[1], 0)-1);\n\n            pts.putIfAbsent(p[0], new HashSet<>());\n            pts.putIfAbsent(p[1], new HashSet<>());\n            pts.get(p[0]).add(i);\n            pts.get(p[1]).add(i);\n        }\n\n        for(int k : )\n        \n\n\n    }\n}","compare_result":null,"title_slug":"minimum-number-of-arrows-to-burst-balloons","has_notes":false,"flag_type":1}