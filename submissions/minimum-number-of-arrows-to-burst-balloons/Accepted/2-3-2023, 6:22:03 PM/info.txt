{"id":890624631,"question_id":452,"lang":"java","lang_name":"Java","time":"1Â year, 4Â months","timestamp":1675419723,"status":10,"status_display":"Accepted","runtime":"73 ms","url":"/submissions/detail/890624631/","is_pending":"Not Pending","title":"Minimum Number of Arrows to Burst Balloons","memory":"78.7 MB","code":"class Solution {\n    public int findMinArrowShots(int[][] points) {\n        int len = points.length;\n        \n        Arrays.sort(points, (a,b)-> Integer.compare(a[0], b[0])==0?Integer.compare(a[1], b[1]) : Integer.compare(a[0], b[0]));\n        int[] p = new int[2];\n        p[0] = points[0][0];\n        p[1] = points[0][1];\n        \n        int cnt=1;\n        \n        for(int i=1; i<len; i++){\n            \n            // long[] next = new long[]{Long.valueOf(points[i][0]), Long.valueOf(points[i][1])};\n            int[] next = points[i];\n        \n            // System.out.println(next[0]<=p[1]);\n            \n            if(next[0]<=p[1]){\n                p[1]=Math.min(p[1], next[1]);\n                continue;\n            }else{\n                cnt++;\n                p[1] = next[1];\n            }\n        \n        }\n        \n        return cnt;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111","title_slug":"minimum-number-of-arrows-to-burst-balloons","has_notes":false,"flag_type":1}