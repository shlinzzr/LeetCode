{"id":1124720221,"question_id":1887,"lang":"java","lang_name":"Java","time":"5 months, 3 weeks","timestamp":1703128081,"status":10,"status_display":"Accepted","runtime":"58 ms","url":"/submissions/detail/1124720221/","is_pending":"Not Pending","title":"Minimum Degree of a Connected Trio in a Graph","memory":"71.2 MB","code":"class Solution {\n    public int minTrioDegree(int n, int[][] edges) {\n        int[][] grid = new int[n][n];\n\n        for(int i=0; i<edges.length; i++){\n            int[] e = edges[i];\n            int u = e[0]-1;\n            int v = e[1]-1;\n\n            grid[u][v] = 1;\n            grid[v][u] = 1;\n        }\n\n        int[] cnt = new int[n];\n        for(int i=0; i<n; i++){\n            for(int j=0; j<n; j++){\n                if(grid[i][j]==1)\n                    cnt[i]++;\n            }\n        }\n\n        int min = Integer.MAX_VALUE;\n        for(int i=0; i<n; i++){\n            for(int j=i+1; j<n; j++){\n                for(int k=j+1; k<n; k++){\n\n                    if(grid[i][j]==1 && grid[j][k]== 1 && grid[i][k]==1){\n                        min = Math.min(min, cnt[i]-2 + cnt[j]-2 + cnt[k]-2);\n                    }\n\n                }\n            }\n        }\n\n        return min==Integer.MAX_VALUE? -1 : min;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-degree-of-a-connected-trio-in-a-graph","has_notes":false,"flag_type":1}