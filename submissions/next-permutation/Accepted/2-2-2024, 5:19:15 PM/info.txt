{"id":1163767827,"question_id":31,"lang":"java","lang_name":"Java","time":"4 months, 1 week","timestamp":1706865555,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1163767827/","is_pending":"Not Pending","title":"Next Permutation","memory":"43.2 MB","code":"class Solution {\n    \n    //https://www.youtube.com/watch?v=IbcQOdtmvpA\n    // ex : 1 2 4 6 5 3 \n    \n    /*why point 1 ?\n    consider  9 8 7 6 5 3 , i 就會一直往左跑 最後把整個987653 reverse\n    只要保持 nums[i]>nums[i+1], 就能保證nums[i:k]都是當下max\n    */\n    \n    // 1 2 '4' 6 5 3   => 1.從右邊開始找  找到打破nums[i]>nums[i+1]的數字 : '4'\n    // 1 2 '4' 6 '5' 3 => 2.從右邊開始找 找到比4大又最接近4的數  \n    // 1 2 '5' 6 '4' 3 => 3.交換\n    // 1 2 '5' 3 '4' 6 => 4.reverse後半段\n    // 他媽的 這只能背了吧 幹\n    \n    public void nextPermutation(int[] nums) {\n        \n        int len = nums.length;\n        \n        // => 1.從右邊開始找  找到打破nums[i]>nums[i+1]的數字 : '4'\n        int i=len-2;\n        while(i>=0 && nums[i]>=nums[i+1]){\n            i--;\n        }\n        \n        // 2.從右邊開始找 找到比4大又最接近4的數  \n        if(i>=0){\n            int j=len-1;\n            while(j>=0 && nums[j]<=nums[i]){\n                j--;\n            }\n            \n            swap(nums, i, j); //3.交換\n        }\n        \n        reverse(nums, i+1, len-1); //4.reverse後半段\n    }\n    \n    private void swap(int[] nums, int i, int j){\n        int tmp = nums[i];\n        nums[i] = nums[j];\n        nums[j] = tmp;\n    }\n    \n    \n    private void reverse(int[] nums, int i, int j){\n        while(i<j){\n            swap(nums, i, j);\n            i++;\n            j--;\n        }\n        \n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"next-permutation","has_notes":false,"flag_type":1}