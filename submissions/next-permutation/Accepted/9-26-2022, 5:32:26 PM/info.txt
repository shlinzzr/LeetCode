{"id":808905483,"question_id":31,"lang":"java","lang_name":"Java","time":"1 year, 8 months","timestamp":1664184746,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/808905483/","is_pending":"Not Pending","title":"Next Permutation","memory":"42.7 MB","code":"class Solution {\n   public void nextPermutation(int[] A) {\n        if(A == null || A.length <= 1) return;\n        int i = A.length - 2;\n        while(i >= 0 && A[i] >= A[i + 1]) i--; // Find 1st id i that breaks descending order\n        if(i >= 0) {                           // If not entirely descending\n            int j = A.length - 1;              // Start from the end\n            while(A[j] <= A[i]) j--;           // Find rightmost first larger id j\n            swap(A, i, j);                     // Switch i and j\n        }\n        reverse(A, i + 1, A.length - 1);       // Reverse the descending sequence\n    }\n\n    public void swap(int[] A, int i, int j) {\n        int tmp = A[i];\n        A[i] = A[j];\n        A[j] = tmp;\n    }\n\n    public void reverse(int[] A, int i, int j) {\n        while(i < j) swap(A, i++, j--);\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"next-permutation","has_notes":false,"flag_type":1}