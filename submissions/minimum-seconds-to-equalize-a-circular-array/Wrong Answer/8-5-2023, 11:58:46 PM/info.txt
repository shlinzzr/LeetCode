{"id":1013070787,"question_id":2920,"lang":"java","lang_name":"Java","time":"10 months, 1 week","timestamp":1691251126,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1013070787/","is_pending":"Not Pending","title":"Minimum Seconds to Equalize a Circular Array","memory":"N/A","code":"class Solution {\n    public int minimumSeconds(List<Integer> nums) {\n        HashMap<Integer, Integer> map = new HashMap<>();\n        \n        int sum =0;\n        int max = 0;\n        int maxNum = -1;\n        for(int n : nums){\n            map.put(n, map.getOrDefault(n,0)+1);\n            if(map.get(n)>max){\n                max= map.get(n);\n                maxNum=n;\n            }\n            \n            sum+=n;\n        }\n        \n        int diff =0;\n        for(int n : nums){\n            if(n!=maxNum)\n                diff++;\n        }\n        \n        int len = nums.size();\n        int nextDiff = 0;\n        for(int i=0; i<len-1; i++){\n            if(nums.get(i)==maxNum && nums.get(i+1)!=maxNum)\n                nextDiff++;\n        }\n        if(nums.get(len-1)==maxNum && nums.get(0)!=maxNum)\n            nextDiff++;\n        \n        \n        int prevDiff=0;\n        for(int i=len-1; i>0; i--){\n            if(nums.get(i)==maxNum && nums.get(i-1)!=maxNum)\n                prevDiff++;\n        }\n        if(nums.get(0)==maxNum && nums.get(len-1)!=maxNum)\n            prevDiff++;\n        \n        \n        int[] arr = new int[len];\n        for(int i=0; i<len ;i++){\n            arr[i]=nums.get(i);\n        }\n\n        // System.out.println(maxNum + \" \" + diff+ \" \"+ nextDiff + \" \" + prevDiff);\n        \n        int res =0;\n        int target = maxNum*len;\n        while(diff>0){\n             // if(nextDiff >= prevDiff){\n            \n            int[] temp = new int[len];\n            for(int i=0; i<len; i++){\n                temp[i]=arr[i];\n            }\n            \n                for(int i=0; i<len; i++){\n                    if(i==len-1){\n                        if(temp[len-1]==maxNum && temp[0]!=maxNum){\n                            // sum-=arr[0];\n                            // sum+=maxNum;\n                            arr[0]=maxNum;\n                            diff--;\n                        }\n                            \n                        \n                    } else if(temp[i]==maxNum && temp[i+1]!=maxNum){\n                        // sum-=arr[i+1];\n                        // sum+=maxNum;\n                        arr[i+1]=maxNum;\n                        diff--;\n                    }else{\n                        temp[i]=arr[i];\n                    }\n                }\n            \n            \n            //     for(int ar : arr){\n            //         System.out.print(ar+\",\");\n            //     }\n            // System.out.println();\n            \n            // }else{\n                \n                 for(int i=len-1; i>=0; i--){\n                     \n                     if(i==0){\n                         if(temp[0]==maxNum && temp[len-1]!=maxNum){\n                             // sum-=arr[len-1];\n                             // sum+=maxNum;\n                             arr[len-1] = maxNum;\n                             diff--;\n                         }    \n                      }else if(temp[i]==maxNum && temp[i-1]!=maxNum){\n                             \n                             // sum-=arr[i-1];\n                             // sum+=maxNum;\n                             arr[i-1]=maxNum;\n                             diff--;\n                     }else{\n                         temp[i]=arr[i];\n                     }\n                     \n                 }\n                 \n                 \n            //     for(int ar : arr){\n            //         System.out.print(ar);\n            //     }\n            // System.out.println();\n\n            // }     \n            \n            res++;\n        }\n        \n       \n        return res;\n        \n        \n        \n        \n    }\n}","compare_resulttitle_slug":"minimum-seconds-to-equalize-a-circular-array","has_notes":false,"flag_type":1}