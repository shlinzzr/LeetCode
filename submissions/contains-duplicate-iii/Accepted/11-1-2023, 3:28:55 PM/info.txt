{"id":1088944582,"question_id":220,"lang":"java","lang_name":"Java","time":"7 months, 2 weeks","timestamp":1698823735,"status":10,"status_display":"Accepted","runtime":"147 ms","url":"/submissions/detail/1088944582/","is_pending":"Not Pending","title":"Contains Duplicate III","memory":"55.9 MB","code":"class Solution {\n    public boolean containsNearbyAlmostDuplicate(int[] nums, int indexDiff, int valueDiff) {\n        int len = nums.length;\n\n        TreeMap<Integer, Integer> map =new TreeMap<>(); // val, cnt\n        int st= 0;\n        for(int ed=0; ed<len; ed++){\n\n            Integer floor = map.floorKey(nums[ed]+valueDiff);\n            Integer ceiling = map.ceilingKey(nums[ed]-valueDiff);\n            \n            if( (floor!=null && floor>=nums[ed] )|| (ceiling!=null && ceiling<=nums[ed]))\n                return true;\n            \n\n            map.put(nums[ed], map.getOrDefault(nums[ed],0)+1);\n\n            if(ed-st<indexDiff)\n                continue;\n            \n            // for(int k : map.keySet()){\n \n            // }\n\n            map.put(nums[st], map.getOrDefault(nums[st],0)-1);\n            if(map.get(nums[st])==0){\n                map.remove(nums[st]);\n            }\n            st++;\n        }\n\n        return false;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111","title_slug":"contains-duplicate-iii","has_notes":false,"flag_type":1}