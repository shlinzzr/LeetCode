{"id":1094043265,"question_id":3191,"lang":"java","lang_name":"Java","time":"7 months, 1 week","timestamp":1699407587,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1094043265/","is_pending":"Not Pending","title":"Maximum Score After Applying Operations on a Tree","memory":"N/A","code":"class Solution {\n\n    public long maximumScoreAfterOperations(int[][] edges, int[] values) {\n        HashMap<Integer, List<Integer>> g = new HashMap<>();\n\n        int n = values.length;\n        int len = edges.length;\n\n        for(int i=0; i<len; i++){\n            int u = edges[i][0];\n            int v = edges[i][1];\n            g.putIfAbsent(u, new ArrayList<>());\n            g.putIfAbsent(v, new ArrayList<>());\n            g.get(u).add(v);\n            g.get(v).add(u);\n        }\n\n        int total = 0;\n        for(int v: values){\n            total+=v;\n        }\n\n        int min = dfs(-1, 0, g, values);\n        return total-min;\n\n    }\n\n    private int dfs(int parent, int node, HashMap<Integer, List<Integer>> g, int[] values){\n\n        int sum = 0;\n        for(int adj : g.get(node)){\n            if(adj==parent)\n                continue;\n\n            sum += dfs(node, adj, g, values);\n        }\n\n        if(sum==0){\n            return values[node];\n        }\n\n        return Math.min(values[node], sum);\n\n    }\n}","compare_result":"11111011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111010011100000001010001001000100001001101110000000000100011100000000000101000000100000000100010000001100010000000010001001001000000100000000010000001000001101000001110000010000000001011100010111000000001111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000","title_slug":"maximum-score-after-applying-operations-on-a-tree","has_notes":false,"flag_type":1}