{"id":1235422116,"question_id":336,"lang":"java","lang_name":"Java","time":"1 month, 3 weeks","timestamp":1713414201,"status":12,"status_display":"Memory Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1235422116/","is_pending":"Not Pending","title":"Palindrome Pairs","memory":"N/A","code":"class Solution {\n    private static class TrieNode {\n        TrieNode[] next;\n        boolean isWord;\n        Set<Integer> set;\n        int idx;\n            \n        TrieNode() {\n            next = new TrieNode[26];\n            set = new HashSet<>();\n            idx= -1;\n        }\n    }\n        \n    public List<List<Integer>> palindromePairs(String[] words) {\n        List<List<Integer>> res = new ArrayList<>();\n\n        TrieNode root = new TrieNode();\n            \n        for (int i = 0; i < words.length; i++) {\n            addWord(root, words[i], i); // add reverse w into trie\n        }\n            \n        for (int i = 0; i < words.length; i++) {\n            search(words, i, root, res);\n        }\n        \n        return res;\n    }\n        \n    private void addWord(TrieNode curr, String word, int index) {\n\n        int len = word.length();\n        for (int i = len-1; i >= 0; i--) {\n            int j = word.charAt(i) - 'a';\n                    \n            if (curr.next[j] == null) {\n                curr.next[j] = new TrieNode();\n            }\n                    \n            if (isPalindrome(word, 0, i)) { // if prefix is pal , then we can add it to list\n                curr.set.add(index);\n            }\n                    \n            curr = curr.next[j];\n        }\n        curr.idx = index;\n        curr.set.add(index);\n        curr.isWord = true;\n    }\n        \n    private void search(String[] words, int i, TrieNode curr, List<List<Integer>> res) {\n\n        String w = words[i];\n\n        for (int j = 0; j < w.length(); j++) {\t\n            // if( isWord && is not the same node &&  isPal(w.suffix) )\n            if (curr.idx>=0 && curr.idx != i && isPalindrome(w, j, w.length() - 1)) {\n                res.add(Arrays.asList(i, curr.idx));\n            }\n                \n            curr = curr.next[w.charAt(j) - 'a'];\n            if (curr == null) return;\n        }\n            \n        for (int j : curr.set) {\n            if (i == j) continue;\n            res.add(Arrays.asList(i, j));\n        }\n    }\n        \n    private boolean isPalindrome(String word, int i, int j) {\n        while (i < j) {\n            if (word.charAt(i++) != word.charAt(j--)) return false;\n        }\n            \n        return true;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110","title_slug":"palindrome-pairs","has_notes":false,"flag_type":1}