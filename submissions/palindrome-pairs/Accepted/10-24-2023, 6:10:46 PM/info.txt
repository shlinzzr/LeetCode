{"id":1082897170,"question_id":336,"lang":"java","lang_name":"Java","time":"7 months, 3 weeks","timestamp":1698142246,"status":10,"status_display":"Accepted","runtime":"194 ms","url":"/submissions/detail/1082897170/","is_pending":"Not Pending","title":"Palindrome Pairs","memory":"54.8 MB","code":"class Solution {\n    public List<List<Integer>> palindromePairs(String[] words) {\n        HashMap<String, Integer> map = new HashMap<>(); //word, index\n        TreeSet<Integer> set = new TreeSet<>();// length\n        int len = words.length;\n        for(int i=0; i<len;i++){\n            map.put(words[i], i);\n            set.add(words[i].length());\n        }\n        \n        List<List<Integer>> res = new ArrayList<>();\n        \n        \n        for(int i=0; i<len; i++){\n            \n            String w = words[i];\n            int wLen = w.length();\n            \n            if(wLen==1){\n                if(map.containsKey(\"\")){\n                    res.add(Arrays.asList(i, map.get(\"\")));\n                    res.add(Arrays.asList(map.get(\"\"), i));\n                }\n                continue;\n            }\n            \n            String reverse = new StringBuilder(w).reverse().toString(); //  case 0 : abcd, dcba\n            if(map.containsKey(reverse) && map.get(reverse)!=i){\n                res.add(Arrays.asList(i, map.get(reverse)));\n            }\n            \n            for(int k : set){ // from short to long\n                \n                if(k==wLen) // reverse case0 is already done, break\n                    break;\n            \n                \n                // case 1:\n                //  w = \"sssll\", using reverse string \"llsss\" to find palindrome, \n                //     that is : lls  ss\n                //               ^^^  ^^\n                // map.contains(0,k)  isPal(k, wLen-1)\n                // then we find \"lls\" \n                String sub = reverse.substring(0, k);\n                if(map.containsKey(sub) && isPalindrome(reverse, k, wLen-1)){\n                    res.add(Arrays.asList(map.get(sub), i));\n                }\n                \n\n                \n                // case 2 : if we append one more string : \"sss\" to words\n                // now: w = \"sssll\",  using reverse/contains \"llsss\" to find palindrome, \n                //     that is : ll sss\n                //               ^^ ^^^\n                //  isPal(0, wLen-k-1) map.contains(wLen-k, wLen)\n                // then we find \"sss\"\n                sub = reverse.substring(wLen-k, wLen);\n                if(isPalindrome(reverse, 0, wLen-k-1) && map.containsKey(sub)){\n                    res.add(Arrays.asList(i, map.get(sub)));\n                }\n            }            \n        }\n                        \n        return res;\n        \n    }\n                        \n    private boolean isPalindrome(String s, int st, int ed){\n        \n        while(st<ed){\n            if(s.charAt(st++)!=s.charAt(ed--)){\n                return false;\n            }\n        }\n        \n        return true;\n    }\n                        \n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"palindrome-pairs","has_notes":false,"flag_type":1}