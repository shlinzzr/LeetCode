{"id":907653903,"question_id":336,"lang":"java","lang_name":"Java","time":"1 year, 3 months","timestamp":1677751654,"status":10,"status_display":"Accepted","runtime":"907 ms","url":"/submissions/detail/907653903/","is_pending":"Not Pending","title":"Palindrome Pairs","memory":"222.1 MB","code":"class Solution {\n   private static class TrieNode {\n        TrieNode[] next;\n        int index;\n        List<Integer> list;\n\n        TrieNode() {\n            next = new TrieNode[26];\n            index = -1;\n            list = new ArrayList<>();\n        }\n    }\n\n    public List<List<Integer>> palindromePairs(String[] words) {\n        List<List<Integer>> res = new ArrayList<>();\n\n        TrieNode root = new TrieNode();\n\n        for (int i = 0; i < words.length; i++) {\n            addWord(root, words[i], i);\n        }\n\n        for (int i = 0; i < words.length; i++) {\n            search(words, i, root, res);\n        }\n\n        return res;\n    }\n\n    private void addWord(TrieNode root, String word, int index) {\n        for (int i = word.length() - 1; i >= 0; i--) {\n            int j = word.charAt(i) - 'a';\n\n            if (root.next[j] == null) {\n                root.next[j] = new TrieNode();\n            }\n\n            if (isPalindrome(word, 0, i)) {\n                root.list.add(index);\n            }\n\n            root = root.next[j];\n        }\n\n        root.list.add(index);\n        root.index = index;\n    }\n\n    private void search(String[] words, int i, TrieNode root, List<List<Integer>> res) {\n        for (int j = 0; j < words[i].length(); j++) {\t\n            if (root.index >= 0 && root.index != i && isPalindrome(words[i], j, words[i].length() - 1)) {\n                res.add(Arrays.asList(i, root.index));\n            }\n\n            root = root.next[words[i].charAt(j) - 'a'];\n            if (root == null) return;\n        }\n\n        for (int j : root.list) {\n            if (i == j) continue;\n            res.add(Arrays.asList(i, j));\n        }\n    }\n\n    private boolean isPalindrome(String word, int i, int j) {\n        while (i < j) {\n            if (word.charAt(i++) != word.charAt(j--)) return false;\n        }\n\n        return true;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"palindrome-pairs","has_notes":false,"flag_type":1}