{"id":957557735,"question_id":336,"lang":"java","lang_name":"Java","time":"1Â year","timestamp":1685087124,"status":10,"status_display":"Accepted","runtime":"149 ms","url":"/submissions/detail/957557735/","is_pending":"Not Pending","title":"Palindrome Pairs","memory":"55 MB","code":"class Solution {\n    public List<List<Integer>> palindromePairs(String[] words) {\n        HashMap<String, Integer> map = new HashMap<>(); //word, index\n        TreeSet<Integer> set = new TreeSet<>();\n        int len = words.length;\n        for(int i=0; i<len;i++){\n            map.put(words[i], i);\n            set.add(words[i].length());\n        }\n        \n        List<List<Integer>> res = new ArrayList<>();\n        \n        \n        for(int i=0; i<len; i++){\n            \n            String w = words[i];\n            int wLen = w.length();\n            \n            if(wLen==1){\n                if(map.containsKey(\"\")){\n                    res.add(Arrays.asList(i, map.get(\"\")));\n                    res.add(Arrays.asList(map.get(\"\"), i));\n                }\n                continue;\n            }\n            \n            String reverse = new StringBuilder(w).reverse().toString();\n            if(map.containsKey(reverse) && map.get(reverse)!=i){\n                res.add(Arrays.asList(i, map.get(reverse)));\n                // res.add(Arrays.asList(map.get(reverse), i));\n            }\n                        \n            \n            for(int k : set){\n                \n                if(k==wLen)\n                    break;\n            \n                // find \"sssll\" prefix \n                // curr = sssll finding lls\n                // rev = lls 'ss' check 'ss' is palindrome\n                if(isPalindrome(reverse, k, wLen-1)){\n                    String sub = reverse.substring(0, k);\n                    if(map.containsKey(sub)){\n                        res.add(Arrays.asList(map.get(sub), i));\n                    }\n                }\n                \n                \n                // find \"sssll\" postfix\n                // curr = sssll finding 'sss'\n                // rev = ll'sss' checking 'll' is palindorme\n                if(isPalindrome(reverse, 0, wLen-k-1)){\n                    String sub = reverse.substring(wLen-k, wLen);\n                    if(map.containsKey(sub)){\n                        res.add(Arrays.asList(i, map.get(sub)));\n                    }\n                }\n            }            \n        }\n                        \n                        return res;\n        \n    }\n                        \n    private boolean isPalindrome(String s, int st, int ed){\n        \n        while(st<ed){\n            if(s.charAt(st++)!=s.charAt(ed--)){\n                return false;\n            }\n        }\n        \n        return true;\n    }\n                        \n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"palindrome-pairs","has_notes":false,"flag_type":1}