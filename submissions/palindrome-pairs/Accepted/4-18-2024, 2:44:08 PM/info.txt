{"id":1235516304,"question_id":336,"lang":"java","lang_name":"Java","time":"1 month, 3 weeks","timestamp":1713422648,"status":10,"status_display":"Accepted","runtime":"1027 ms","url":"/submissions/detail/1235516304/","is_pending":"Not Pending","title":"Palindrome Pairs","memory":"55.5 MB","code":"class Solution {\n\n  public List<List<Integer>> palindromePairs(String[] words) {\n\n    List<List<Integer>> ans = new ArrayList<>();\n\n    Map<String, Integer> map = new HashMap<>(); // {reversed word: its index}\n\n    for (int i = 0; i < words.length; ++i)\n\n      map.put(new StringBuilder(words[i]).reverse().toString(), i);\n\n    for (int i = 0; i < words.length; ++i) {\n\n      final String word = words[i];\n\n      // a special case to prevent duplicate calculation\n\n      if (map.containsKey(\"\") && map.get(\"\") != i && isPalindrome(word))\n\n        ans.add(Arrays.asList(i, map.get(\"\")));\n\n      for (int j = 1; j <= word.length(); ++j) {\n\n        final String l = word.substring(0, j);\n\n        final String r = word.substring(j);\n\n        if (map.containsKey(l) && map.get(l) != i && isPalindrome(r))\n\n          ans.add(Arrays.asList(i, map.get(l)));\n\n        if (map.containsKey(r) && map.get(r) != i && isPalindrome(l))\n\n          ans.add(Arrays.asList(map.get(r), i));\n\n      }\n\n    }\n\n    return ans;\n\n  }\n\n  private boolean isPalindrome(final String word) {\n\n    int l = 0;\n\n    int r = word.length() - 1;\n\n    while (l < r)\n\n      if (word.charAt(l++) != word.charAt(r--))\n\n        return false;\n\n    return true;\n\n  }\n\n}\n        \n    ","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"palindrome-pairs","has_notes":false,"flag_type":1}