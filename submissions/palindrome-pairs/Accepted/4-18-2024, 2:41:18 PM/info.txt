{"id":1235514356,"question_id":336,"lang":"java","lang_name":"Java","time":"1 month, 3 weeks","timestamp":1713422478,"status":10,"status_display":"Accepted","runtime":"415 ms","url":"/submissions/detail/1235514356/","is_pending":"Not Pending","title":"Palindrome Pairs","memory":"262 MB","code":"class Solution {\n    private static class TrieNode {\n        TrieNode[] next;\n        int index;\n        List<Integer> list;\n            \n        TrieNode() {\n            next = new TrieNode[26];\n            index = -1;\n            list  = new ArrayList<>();\n        }\n    }\n        \n    public List<List<Integer>> palindromePairs(String[] words) {\n        List<List<Integer>> res = new ArrayList<>();\n\n        TrieNode root = new TrieNode();\n            \n        for (int i = 0; i < words.length; i++) {\n            addWord(root, words[i], i); // add reverse w into trie\n        }\n            \n        for (int i = 0; i < words.length; i++) {\n            search(words, i, root, res);\n        }\n        \n        return res;\n    }\n        \n    private void addWord(TrieNode curr, String word, int index) {\n\n        int len = word.length();\n        for (int i = len-1; i >= 0; i--) {\n            int j = word.charAt(i) - 'a';\n                    \n            if (curr.next[j] == null) {\n                curr.next[j] = new TrieNode();\n            }\n                    \n            if (isPalindrome(word, 0, i)) { // if prefix is pal , then we can add it to list\n                curr.list.add(index);\n            }\n                    \n            curr = curr.next[j];\n        }\n            \n        curr.list.add(index);\n        curr.index = index;\n    }\n        \n    private void search(String[] words, int i, TrieNode curr, List<List<Integer>> res) {\n\n        String w = words[i];\n\n        for (int j = 0; j < w.length(); j++) {\t// curr = ab   w= ab\"pal\"     \n            // if( isWord && is not the same node &&  isPal(w.suffix) )\n            if (curr.index >= 0 && curr.index != i && isPalindrome(w, j, w.length() - 1)) {\n                res.add(Arrays.asList(i, curr.index));\n            }\n                \n            curr = curr.next[w.charAt(j) - 'a'];\n            if (curr == null) return;\n        }\n\n        System.out.println(curr.list.size());   \n        for (int j : curr.list) {\n            if (i == j) continue;\n            res.add(Arrays.asList(i, j));\n        }\n    }\n        \n    private boolean isPalindrome(String word, int i, int j) {\n        while (i < j) {\n            if (word.charAt(i++) != word.charAt(j--)) return false;\n        }\n            \n        return true;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"palindrome-pairs","has_notes":false,"flag_type":1}