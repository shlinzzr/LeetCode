{"id":1252525214,"question_id":813,"lang":"java","lang_name":"Java","time":"1Â month","timestamp":1715160901,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/1252525214/","is_pending":"Not Pending","title":"All Paths From Source to Target","memory":"46.3 MB","code":"class Solution {\n    public List<List<Integer>> allPathsSourceTarget(int[][] graph) {\n        List<List<Integer>> res = new ArrayList<>();\n        int n = graph.length;\n        \n        List<Integer> curr = new ArrayList<>();\n        curr.add(0);\n        boolean[] seen = new boolean[n];\n        seen[0] = true;\n        dfs(0, graph, seen, curr, res);\n        return res;\n            \n    }\n    \n    private void dfs(int node, int[][] graph, boolean[] seen, List<Integer> curr, List<List<Integer>> res){\n        int n = seen.length;\n        if(node==n-1){\n            res.add(new ArrayList<>(curr));\n            return;\n        }\n        \n        for(int next : graph[node]){\n            if(seen[next]) continue;\n            seen[next] = true;\n            curr.add(next);\n            dfs(next, graph, seen, curr, res);\n            curr.remove(curr.size()-1);\n            seen[next] = false;\n        }\n        \n        \n    }\n}","compare_result":"111111111111111111111111111111","title_slug":"all-paths-from-source-to-target","has_notes":false,"flag_type":1}