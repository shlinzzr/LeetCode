{"id":899655754,"question_id":1665,"lang":"java","lang_name":"Java","time":"1 year, 3 months","timestamp":1676624193,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/899655754/","is_pending":"Not Pending","title":"Diameter of N-Ary Tree","memory":"41.9 MB","code":"/*\n// Definition for a Node.\nclass Node {\n    public int val;\n    public List<Node> children;\n\n    \n    public Node() {\n        children = new ArrayList<Node>();\n    }\n    \n    public Node(int _val) {\n        val = _val;\n        children = new ArrayList<Node>();\n    }\n    \n    public Node(int _val,ArrayList<Node> _children) {\n        val = _val;\n        children = _children;\n    }\n};\n*/\n\nclass Solution {\n    \n    int max = 0;\n    \n    \n    public int diameter(Node root) {\n        \n        if(root==null)\n            return 0;\n      \n        getDepth(root);\n        return max;\n        \n        \n    }\n    \n    private int getDepth(Node root){\n        \n        // System.out.println(\"getDepth node=\"+ro ot.val);\n        \n        if(root==null)\n            return 0;\n        \n        int len1=0, len2=0;\n        for(Node node : root.children){\n            int d = getDepth(node);\n            \n            // System.out.println(node.val + \" d=\"+d);\n            \n            if(d>len1){\n                len2=len1;\n                len1=d;\n            }else if(d>len2){\n                len2=d;\n            }\n        }\n        \n        max = Math.max(max, len1+len2);\n        \n        return len1+1;\n        \n    }\n    \n}","compare_result":"11111111111111111111111111111111111111","title_slug":"diameter-of-n-ary-tree","has_notes":false,"flag_type":1}