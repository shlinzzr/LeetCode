{"id":915487181,"question_id":1624,"lang":"java","lang_name":"Java","time":"1 year, 3 months","timestamp":1678863334,"status":10,"status_display":"Accepted","runtime":"6 ms","url":"/submissions/detail/915487181/","is_pending":"Not Pending","title":"Clone Binary Tree With Random Pointer","memory":"43.4 MB","code":"/**\n * Definition for Node.\n * public class Node {\n *     int val;\n *     Node left;\n *     Node right;\n *     Node random;\n *     Node() {}\n *     Node(int val) { this.val = val; }\n *     Node(int val, Node left, Node right, Node random) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *         this.random = random;\n *     }\n * }\n */\n\nclass Solution {\n    public NodeCopy copyRandomBinaryTree(Node root) {\n        if(root==null)\n            return null;\n        HashMap<Node, NodeCopy> map = new HashMap<>();\n        NodeCopy copy = helper(root, map);\n        helper2(root, map);\n        return copy;\n    }\n    \n    private NodeCopy helper(Node root, HashMap<Node, NodeCopy> map){\n        if(root==null)\n            return null;\n        \n        NodeCopy copy = new NodeCopy(root.val);\n        \n        copy.left = helper(root.left, map);\n        copy.right = helper(root.right, map);\n        \n        map.put(root, copy);\n        \n        return copy;\n    }\n    \n    private void helper2(Node root, HashMap<Node, NodeCopy> map){\n        if(root==null)\n            return;\n        \n        NodeCopy copy = map.get(root);\n        copy.random = map.get(root.random);\n        \n        helper2(root.left, map);\n        helper2(root.right, map);\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"clone-binary-tree-with-random-pointer","has_notes":false,"flag_type":1}