{"id":1041892737,"question_id":317,"lang":"java","lang_name":"Java","time":"9 months, 1 week","timestamp":1693982573,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1041892737/","is_pending":"Not Pending","title":"Shortest Distance from All Buildings","memory":"N/A","code":"class Solution {\n    public int shortestDistance(int[][] grid) {\n       \n        \n        HashSet<int[]> buildings = new HashSet<>();\n        int[] h = getHouse(grid, buildings);\n        if(h==null)\n            return -1;\n        \n        int res= 0;\n        for(int[] b : buildings){\n            res += Math.abs(h[0]-b[0]) + Math.abs(h[1]-b[1]);\n        }\n        \n        return res;\n        \n        \n    }\n    \n    private int[] getHouse(int[][] grid, HashSet<int[]> buildings){\n        int h = grid.length;\n        int w = grid[0].length;\n        \n        boolean[][][][] seen = new boolean[h][w][h][w]; // seen[i][j][k][l] 以i j出發的有沒有走過k l\n        \n        Queue<int[]> q= new LinkedList<>();\n        \n        int building = 0;\n        \n        for(int i=0; i<h;i++){\n            for(int j=0; j<w; j++){\n                \n                if(grid[i][j]==1){\n                    buildings.add(new int[]{i, j});\n                    q.offer(new int[]{i, j, i, j}); // 從i j 出發的 目前走到i j\n                    seen[i][j][i][j] = true;   \n                    building++;\n                }else if(grid[i][j]==2){\n                    grid[i][j]=-1;\n                }\n                \n            }\n        }\n        \n        int[][] dirs = new int[][]{{0,1}, {1,0}, {0,-1}, {-1,0}};\n        \n        int[] house = null;\n        \n        int step = 0;\n        while(!q.isEmpty()){\n            int siz = q.size();\n            \n            while(siz-->0){\n                \n                int[] p = q.poll();\n                for(int[] d: dirs){\n                    \n                    int i = p[0];\n                    int j = p[1];\n                    int k = d[0]+p[2];\n                    int l = d[1]+p[3];\n                    \n                    if(k<0 || l<0 || k>=h || l>=w || seen[i][j][k][l])\n                        continue;\n                    \n                    grid[k][l]++;\n                    \n                    if(grid[k][l]==building){\n                        house = new int[]{k, l};    \n                        return house;\n                    }\n                        \n                    \n                    seen[i][j][k][l] = true;\n                    q.offer(new int[]{i,j, k, l});\n                }\n            }\n            step++;\n        }\n        \n        return house;\n    }\n}","compare_result":"1111010100111000000000000000000000000000000000000000000000000000000000000000000010000","title_slug":"shortest-distance-from-all-buildings","has_notes":false,"flag_type":1}