{"id":1041913715,"question_id":317,"lang":"java","lang_name":"Java","time":"9 months, 1 week","timestamp":1693984388,"status":10,"status_display":"Accepted","runtime":"205 ms","url":"/submissions/detail/1041913715/","is_pending":"Not Pending","title":"Shortest Distance from All Buildings","memory":"44.2 MB","code":"public class Solution {\n    public int shortestDistance(int[][] grid) {\n        if (grid == null || grid[0].length == 0) return 0;\n        final int[] shift = new int[] {0, 1, 0, -1, 0};\n        \n        int row  = grid.length, col = grid[0].length;\n        int[][] distance = new int[row][col];\n        int[][] reach = new int[row][col];\n        int buildingNum = 0;\n        \n        for (int i = 0; i < row; i++) {\n            for (int j =0; j < col; j++) {\n                if (grid[i][j] == 1) {\n                    buildingNum++;\n                    Queue<int[]> myQueue = new LinkedList<int[]>();\n                    myQueue.offer(new int[] {i,j});\n\n                    boolean[][] isVisited = new boolean[row][col];\n                    int level = 1;\n                    \n                    while (!myQueue.isEmpty()) {\n                        int qSize = myQueue.size();\n                        for (int q = 0; q < qSize; q++) {\n                            int[] curr = myQueue.poll();\n                            \n                            for (int k = 0; k < 4; k++) {\n                                int nextRow = curr[0] + shift[k];\n                                int nextCol = curr[1] + shift[k + 1];\n                                \n                                if (nextRow >= 0 && nextRow < row && nextCol >= 0 && nextCol < col\n                                    && grid[nextRow][nextCol] == 0 && !isVisited[nextRow][nextCol]) {\n                                        //The shortest distance from [nextRow][nextCol] to thic building\n                                        // is 'level'.\n                                        distance[nextRow][nextCol] += level;\n                                        reach[nextRow][nextCol]++;\n                                        \n                                        isVisited[nextRow][nextCol] = true;\n                                        myQueue.offer(new int[] {nextRow, nextCol});\n                                    }\n                            }\n                        }\n                        level++;\n                    }\n                }\n            }\n        }\n        \n        int shortest = Integer.MAX_VALUE;\n        for (int i = 0; i < row; i++) {\n            for (int j = 0; j < col; j++) {\n                if (grid[i][j] == 0 && reach[i][j] == buildingNum) {\n                    shortest = Math.min(shortest, distance[i][j]);\n                }\n            }\n        }\n        \n        return shortest == Integer.MAX_VALUE ? -1 : shortest;\n        \n        \n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"shortest-distance-from-all-buildings","has_notes":false,"flag_type":1}