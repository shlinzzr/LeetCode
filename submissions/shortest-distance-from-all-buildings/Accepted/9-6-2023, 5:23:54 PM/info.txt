{"id":1041992966,"question_id":317,"lang":"java","lang_name":"Java","time":"9 months, 1 week","timestamp":1693992234,"status":10,"status_display":"Accepted","runtime":"231 ms","url":"/submissions/detail/1041992966/","is_pending":"Not Pending","title":"Shortest Distance from All Buildings","memory":"44.2 MB","code":"public class Solution {\n    \n    \n    private int[] getHouse(int[][] grid, HashSet<int[]> buildings){\n        int h = grid.length;\n        int w = grid[0].length;\n        \n        boolean[][][][] seen = new boolean[h][w][h][w]; // seen[i][j][k][l] 以i j出發的有沒有走過k l\n        \n        Queue<int[]> q= new LinkedList<>();\n        \n        int emptyLand = 0;\n        \n        for(int i=0; i<h;i++){\n            for(int j=0; j<w; j++){\n                \n                if(grid[i][j]==1){\n                    buildings.add(new int[]{i, j});\n                    q.offer(new int[]{i, j, i, j}); // 從i j 出發的 目前走到i j\n                    seen[i][j][i][j] = true;   \n                }else if(grid[i][j]==2){\n                    grid[i][j]=-1;\n                }else\n                    emptyLand++;\n            }\n        }\n        \n        // if(emptyLand==0)\n        //     return null;\n        \n        int[][] dirs = new int[][]{{0,1}, {1,0}, {0,-1}, {-1,0}};\n        \n        int[] house = null;\n        \n        int step = 0;\n        while(!q.isEmpty()){\n            int siz = q.size();\n            \n            while(siz-->0){\n                \n                int[] p = q.poll();\n                \n                for(int[] d: dirs){\n                    \n                    int i = p[0];\n                    int j = p[1];\n                    int k = d[0]+p[2];\n                    int l = d[1]+p[3];\n                    \n                    \n                    if(k<0 || l<0 || k>=h || l>=w || seen[i][j][k][l] || grid[k][l]==-1)\n                        continue;\n                    \n                    grid[k][l]++;\n                    // System.out.println(i+\" \"+j + \" \" + k + \" \" + l + \" grid[k][l]=\"+grid[k][l] + \" building=\"+buildings.size());\n                    \n                    if(grid[k][l]==buildings.size()){\n                        house = new int[]{k, l};    \n                        return house;\n                    }\n                    \n                    seen[i][j][k][l] = true;\n                    q.offer(new int[]{i,j, k, l});\n                }\n            }\n            step++;\n        }\n        \n        return house;\n    }\n    \n    \n    \n    public int shortestDistance(int[][] grid) {\n        if (grid == null || grid[0].length == 0) return 0;\n\n          \n        int[][] dirs = new int[][]{{0,1}, {1,0}, {0,-1}, {-1,0}};\n        \n        \n        int h = grid.length;\n        int w = grid[0].length;\n        \n        int[][] distance = new int[h][w];\n        int[][] reach = new int[h][w];\n        int buildingNum = 0;\n        \n        for(int i=0; i<h;i++){\n            for(int j=0; j<w; j++){\n                if (grid[i][j] == 1) {\n                    buildingNum++;\n                    Queue<int[]> q = new LinkedList<int[]>();\n                    q.offer(new int[] {i,j});\n\n                    boolean[][] seen = new boolean[h][w]; \n                    int step = 1;\n                    \n                    while (!q.isEmpty()) {\n                        int siz = q.size();\n                        while(siz-->0){\n                            int[] p = q.poll();\n                            \n                            for(int[] d : dirs){\n                                int r = p[0] + d[0];\n                                int c = p[1] + d[1];\n                                \n                                if(r<0 || c<0 || r>=h || c>=w || seen[r][c] || grid[r][c]!=0)\n                                    continue;\n                                \n                                distance[r][c] += step;\n                                reach[r][c]++;\n\n                                seen[r][c] =true;\n                                q.offer(new int[]{r,c});\n                            }\n                        }\n                        step++;\n                    }\n                }\n            }\n        }\n        \n        int shortest = Integer.MAX_VALUE;\n        for (int i = 0; i < h; i++) {\n            for (int j = 0; j < w; j++) {\n                if (grid[i][j] == 0 && reach[i][j] == buildingNum) {\n                    shortest = Math.min(shortest, distance[i][j]);\n                }\n            }\n        }\n        \n        return shortest == Integer.MAX_VALUE ? -1 : shortest;\n        \n        \n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"shortest-distance-from-all-buildings","has_notes":false,"flag_type":1}