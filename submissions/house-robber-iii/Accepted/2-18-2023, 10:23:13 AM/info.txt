{"id":900069367,"question_id":337,"lang":"java","lang_name":"Java","time":"1 year, 3 months","timestamp":1676686993,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/900069367/","is_pending":"Not Pending","title":"House Robber III","memory":"42.1 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n     public int rob(TreeNode root) {\n        if(root == null) return 0;\n        \n        Map<TreeNode, Integer> hmap = new HashMap<>();\n        \n        return robImpl(root, hmap);\n    }\n    \n    private int robImpl(TreeNode node, Map<TreeNode, Integer> hmap) {\n        if(node == null) return 0;\n        \n        if(hmap.containsKey(node)) return hmap.get(node);\n        \n        int count = Math.max(robIncluded(node, hmap), robExcluded(node, hmap));\n        \n        hmap.put(node, count);\n        return count;\n    }\n    \n    int robExcluded(TreeNode node, Map hmap) {\n        if(node == null) return 0;\n        return robImpl(node.left, hmap) + robImpl(node.right, hmap);\n    }\n    \n    int robIncluded(TreeNode node, Map hmap) {\n        if(node == null) return 0;\n        return robExcluded(node.left, hmap) + node.val + robExcluded(node.right, hmap);\n    }\n}\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"house-robber-iii","has_notes":false,"flag_type":1}