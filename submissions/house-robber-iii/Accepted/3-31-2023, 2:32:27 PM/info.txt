{"id":925228329,"question_id":337,"lang":"java","lang_name":"Java","time":"1 year, 2 months","timestamp":1680244347,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/925228329/","is_pending":"Not Pending","title":"House Robber III","memory":"42.2 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public int rob(TreeNode root) {\n        if(root==null) return 0;\n        HashMap<TreeNode, Integer> map = new HashMap<>();\n        return helper(root, map);\n    }\n    \n    private int helper(TreeNode root, HashMap<TreeNode, Integer> map){\n        if(root==null) return 0;\n        \n        if(map.containsKey(root))\n            return map.get(root);\n        \n        int max = Math.max( doRob(root, map), doNotRob(root, map));\n        \n        map.put(root, max);\n        \n        return max ;\n    }\n    \n    private int doRob(TreeNode root,  HashMap<TreeNode, Integer> map){\n        if(root==null) return 0;\n        return doNotRob(root.left, map) + root.val + doNotRob(root.right, map);\n    }\n    \n    private int doNotRob(TreeNode root,  HashMap<TreeNode, Integer> map){\n        if(root==null) return 0;\n        return helper(root.left, map) + helper(root.right, map);   \n    }\n    \n    \n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"house-robber-iii","has_notes":false,"flag_type":1}