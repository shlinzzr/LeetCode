{"id":933467583,"question_id":516,"lang":"java","lang_name":"Java","time":"1 year, 2 months","timestamp":1681453116,"status":10,"status_display":"Accepted","runtime":"54 ms","url":"/submissions/detail/933467583/","is_pending":"Not Pending","title":"Longest Palindromic Subsequence","memory":"52.7 MB","code":"class Solution {\n    public int longestPalindromeSubseq(String s) {\n        \n//          X X X X j X X X i => dp[i][j];\n//         dp[i][j]: the longest palindromic subsequence's length of substring(i, j), here i, j represent left, right indexes in the string\n//         State transition:\n//         dp[i][j] = dp[i+1][j-1] + 2 if s.charAt(i) == s.charAt(j)\n//         otherwise, dp[i][j] = Math.max(dp[i+1][j], dp[i][j-1])\n        \n        int[][] dp = new int[s.length()][s.length()];\n        \n        for (int i = s.length() - 1; i >= 0; i--) {\n            dp[i][i] = 1; // all the single character must be palindrome; \n            \n            for (int j = i+1; j < s.length(); j++) {\n                if (s.charAt(i) == s.charAt(j)) {\n                    dp[i][j] = dp[i+1][j-1] + 2;\n                } else {\n                    dp[i][j] = Math.max(dp[i+1][j], dp[i][j-1]);\n                }\n            }\n        }\n        return dp[0][s.length()-1];\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-palindromic-subsequence","has_notes":false,"flag_type":1}