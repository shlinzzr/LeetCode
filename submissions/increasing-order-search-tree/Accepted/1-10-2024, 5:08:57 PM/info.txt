{"id":1142251517,"question_id":933,"lang":"java","lang_name":"Java","time":"5Â months","timestamp":1704877737,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1142251517/","is_pending":"Not Pending","title":"Increasing Order Search Tree","memory":"41.1 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    \n    TreeNode dummy;\n    public TreeNode increasingBST(TreeNode root) {\n        // how to in-place\n        // newRoot = getNewRoot(root);\n\n        dummy = new TreeNode();\n        TreeNode newRoot = dummy;\n        helper(root);\n        return newRoot.right;\n    }\n\n    private void helper(TreeNode root){\n        if(root==null) return ;\n        helper(root.left);\n        root.left = null;\n        dummy.right = root;\n        dummy = dummy.right;\n        helper(root.right);\n        // dummy.right=null;\n    }\n\n    private TreeNode getNewRoot(TreeNode root){\n        \n        while(root.left!=null) root = root.left;\n        return root;\n    }\n}","compare_result":"11111111111111111111111111111111111111","title_slug":"increasing-order-search-tree","has_notes":false,"flag_type":1}