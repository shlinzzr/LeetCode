{"id":1103121251,"question_id":1305,"lang":"java","lang_name":"Java","time":"6 months, 3 weeks","timestamp":1700534033,"status":10,"status_display":"Accepted","runtime":"126 ms","url":"/submissions/detail/1103121251/","is_pending":"Not Pending","title":"Number of Visible People in a Queue","memory":"55.9 MB","code":"class Solution {\n    public int[] canSeePersonsCount(int[] heights) {\n        \n        int len = heights.length;\n\n        int[] ans = new int[len];\n\n        int[] prevGreater = new int[len];\n        Arrays.fill(prevGreater, -1);\n\n        Stack<Integer> st = new Stack<>();\n        for(int i =len-1; i>=0; i--){\n\n            while(!st.isEmpty() && heights[i]>heights[st.peek()]){\n                prevGreater[st.pop()] = i;\n            }\n            st.push(i);\n        }\n\n        st.clear();\n        int[] nextGreater = new int[len];\n        Arrays.fill(nextGreater, len);\n        for(int i=0; i<len; i++){\n            while(!st.isEmpty() && heights[st.peek()]<heights[i]){\n                nextGreater[st.pop()] = i;\n            }\n            st.push(i);\n        }\n\n\n        for(int i=0; i<len; i++){\n            if(prevGreater[i]!=-1){\n                ans[prevGreater[i]]++;\n            }\n\n           if(nextGreater[i]!=len){\n                ans[i]++;\n            }\n        }\n\n        return ans;\n\n\n    }\n}\n\n\n/*\n[3,0,1,0,0,0]\n\n\n\n*/\n","compare_result":"111111111111111111111111111111111111111111","title_slug":"number-of-visible-people-in-a-queue","has_notes":false,"flag_type":1}