{"id":1278124879,"question_id":871,"lang":"java","lang_name":"Java","time":"1Â week","timestamp":1717565972,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1278124879/","is_pending":"Not Pending","title":"Keys and Rooms","memory":"44 MB","code":"class Solution {\n    public boolean canVisitAllRooms(List<List<Integer>> rooms) {\n\n        Set<Integer> keys = new HashSet<>();\n        int n = rooms.size();\n        boolean[] seen = new boolean[n];\n        seen[0] = true;\n\n        Queue<Integer> q = new LinkedList<>();\n        q.offer(0);\n\n        while(!q.isEmpty()){\n\n            int p = q.poll();\n            \n            List<Integer> getKeys = rooms.get(p);\n            for(int k : getKeys){\n                if(seen[k]) continue;\n                seen[k] = true;\n                q.offer(k);\n            }\n        }\n\n        for(int i=0; i<n; i++){\n            if(seen[i]==false) return false;\n        }\n\n        return true;\n        \n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111","title_slug":"keys-and-rooms","has_notes":false,"flag_type":1}