{"id":1149609161,"question_id":347,"lang":"java","lang_name":"Java","time":"4 months, 3 weeks","timestamp":1705568706,"status":10,"status_display":"Accepted","runtime":"15 ms","url":"/submissions/detail/1149609161/","is_pending":"Not Pending","title":"Top K Frequent Elements","memory":"48.2 MB","code":"class Solution {\n     \n    Map<Integer, Integer> map;\n    public int[] topKFrequent(int[] nums, int k) {\n        \n        // 1. hashmap + pq\n        // 2. quickselect\n        \n        map = new HashMap<>();\n        for(int n: nums){\n            map.put(n , map.getOrDefault(n,0)+1);\n        }\n        \n        int len = map.size();\n        int[] unique = new int[len];\n        int i=0;\n        for(int num : map.keySet()){\n            unique[i++] = num;\n        }\n        \n        \n        quickselect(unique, 0, len-1, len-k);\n        \n        return Arrays.copyOfRange(unique, len-k, len);\n    }\n    \n    private void quickselect(int[] nums, int left, int right, int k){\n        \n        if(left>=right) return;\n        \n        int pivotIdx = partition(nums, left, right-1, right);\n        swap(nums, pivotIdx, right);\n        \n        if(k==pivotIdx) return;\n        else if(k<pivotIdx){\n            quickselect(nums, left, pivotIdx-1, k);\n        }else {\n            quickselect(nums, pivotIdx+1, right, k);\n        }\n            \n    }\n    \n    private int partition(int[] nums, int left, int right, int pivot){\n        while(left<=right){\n            if(map.get(nums[left])>map.get(nums[pivot])){\n                swap(nums, left, right);\n                right--;\n            }else\n                left++;\n        }\n        return left;\n    }\n    \n    private void swap(int[] nums, int a, int b){\n        int t = nums[a];\n        nums[a] = nums[b];\n        nums[b] = t;\n    }\n}","compare_result":"111111111111111111111","title_slug":"top-k-frequent-elements","has_notes":false,"flag_type":1}