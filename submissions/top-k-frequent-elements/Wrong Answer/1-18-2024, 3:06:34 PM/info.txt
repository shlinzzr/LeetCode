{"id":1149530244,"question_id":347,"lang":"java","lang_name":"Java","time":"4 months, 3 weeks","timestamp":1705561594,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1149530244/","is_pending":"Not Pending","title":"Top K Frequent Elements","memory":"N/A","code":"class Solution {\n\n    Map<Integer, Integer> fmap ;\n    public int[] topKFrequent(int[] nums, int k) {\n        \n        fmap = getFreqMap(nums);\n\n        int[] unique = new int[fmap.size()];\n\n        int i=0;\n        for(int key: fmap.keySet()){\n            unique[i++] = key;\n        }\n\n        // for(int u : unique){\n        //     System.out.print(u + \" ,\");\n        // }\n        // System.out.println();\n\n        int n = unique.length;\n        quickSelect(unique, 0, n-1, n-k); // left=0, right =2-1=1, k=0\n        return Arrays.copyOfRange(unique, n - k, n);\n    }\n\n    private void quickSelect(int[] nums, int left, int right, int k_smallest){// 0, 1, 0\n\n        if(left>=right) return;\n\n        int pivotVal = nums[right-(right-left)/2]; // pval=1\n        int pivotIdx = partition(nums, left, right, pivotVal);//pidx=1\n\n        // System.out.println(\"\\n quickselect pivotVal=\"+pivotVal + \" freq=\"+fmap.get(pivotVal) + \" privotIdx=\"+pivotIdx + \"k_smallest=\"+k_smallest);\n        for(int u : nums){\n            System.out.print(u + \" ,\");\n        }\n        System.out.println();\n\n        if(k_smallest==pivotIdx)\n            return;\n        else if(k_smallest<pivotIdx){ //0<1\n            quickSelect(nums, left, pivotIdx-1, k_smallest); // 0, 1, 0\n        }else{\n            quickSelect(nums, pivotIdx+1, right, k_smallest);\n        }\n        \n        \n\n    }\n\n    private int partition(int[] nums, int left, int right, int p){ // 0, 1, p=1\n         System.out.println(\"partition:\" + left+ \" \" + right+ \" ,p=\"+p);\n        while(left<right){\n\n            while( fmap.get(nums[left])<fmap.get(p)){\n                left++;\n            }\n\n            while(fmap.get(nums[right])>fmap.get(p)){\n                right--;\n            }\n\n            if(left<right){\n                swap(nums, left, right);\n                left++;\n                right--;\n            }\n        }\n\n        return left; // 1\n    }\n\n    public void swap(int[] nums, int a, int b) {\n        int tmp = nums[a];\n        nums[a] = nums[b];\n        nums[b] = tmp;\n    } \n\n\n\n    private Map<Integer, Integer> getFreqMap(int[] nums){\n\n        Map<Integer, Integer> fmap = new HashMap<>();\n        for(int n : nums){\n            fmap.put(n, fmap.getOrDefault(n, 0)+1);\n        }\n        return fmap;\n    }\n}","compare_result":"111111111111111001000","title_slug":"top-k-frequent-elements","has_notes":false,"flag_type":1}