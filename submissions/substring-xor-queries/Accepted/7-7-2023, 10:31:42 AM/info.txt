{"id":988231434,"question_id":2700,"lang":"java","lang_name":"Java","time":"11 months, 1 week","timestamp":1688697102,"status":10,"status_display":"Accepted","runtime":"66 ms","url":"/submissions/detail/988231434/","is_pending":"Not Pending","title":"Substring XOR Queries","memory":"101.4 MB","code":"class Solution {\n    public int[][] substringXorQueries(String s, int[][] q) {\n        \n        int len = q.length;\n        HashMap<Long, List<Integer>> map = new HashMap<>();\n        for(int i=0; i<len; i++){\n            map.putIfAbsent((long)q[i][0]^q[i][1], new ArrayList<>());\n            map.get( (long)q[i][0]^q[i][1] ).add(i);\n        }\n        \n        int[][] res = new int[len][2];\n        for(int[] r : res){\n            Arrays.fill(r, -1);\n        }\n        \n        \n        \n        for(int win=1; win<=31; win++){\n            \n            long sum = 0;\n            for(int i=0; i<s.length(); i++){\n                \n                sum = sum*2 + (s.charAt(i)-'0');\n                if(i>=win)\n                    sum -= (1L<<win) * (s.charAt(i-win)-'0');\n                \n                 if(map.containsKey(sum)){\n                    for(int idx : map.get(sum)){\n                        \n                        if(res[idx][0]!=-1)\n                            break;\n                        res[idx] = new int[]{i-win+1, i};\n                    }\n\n                }\n            }\n           \n        }\n        \n        return res;\n        \n        \n        \n        \n        \n        // solution 1 : TLE\n        \n//         int len = q.length;\n//         int[] ans = new int[len];\n//         for(int i=0; i<len; i++){\n//             ans[i] = q[i][0]^q[i][1];\n//         }\n        \n//         int[][] res = new int[len][2];\n        \n//         for(int i=0; i<len; i++){\n            \n//             String str = Integer.toBinaryString(ans[i]);\n            \n//             int idx = s.indexOf(str);\n            \n//             if(idx==-1){\n//                 res[i][0] = -1;\n//                 res[i][1] = -1;\n//                 continue;\n//             }\n            \n//             // System.out.println( i + \" \" + str);\n//             res[i][0]=s.indexOf(str);\n//             res[i][1]=s.indexOf(str)+str.length()-1;\n//         }\n        \n//         return res;\n        \n        \n        \n        \n        \n        \n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111","title_slug":"substring-xor-queries","has_notes":false,"flag_type":1}