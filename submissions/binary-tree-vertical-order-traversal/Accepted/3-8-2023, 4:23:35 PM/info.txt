{"id":911350475,"question_id":314,"lang":"java","lang_name":"Java","time":"1 year, 3 months","timestamp":1678263815,"status":10,"status_display":"Accepted","runtime":"9 ms","url":"/submissions/detail/911350475/","is_pending":"Not Pending","title":"Binary Tree Vertical Order Traversal","memory":"43 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    \n   public List<List<Integer>> verticalOrder(TreeNode root) {\n        List<List<Integer>> cols = new ArrayList<>();\n        if (root == null) {\n            return cols;\n        }\n\n        int[] range = new int[] {0, 0};\n        getRange(root, range, 0);\n\n        System.out.println(range[0] + \" \" + range[1]);    \n    \n    \n        for (int i = range[0]; i <= range[1]; i++) {\n            cols.add(new ArrayList<Integer>());\n        }\n\n        Queue<TreeNode> queue = new LinkedList<>();\n        Queue<Integer> colQueue = new LinkedList<>();\n\n        queue.add(root);\n        colQueue.add(-range[0]); // because root colIdx is equal to negative min Idx\n\n        while (!queue.isEmpty()) {\n            TreeNode node = queue.poll();\n            int col = colQueue.poll();\n\n            cols.get(col).add(node.val);\n\n            if (node.left != null) {\n                queue.add(node.left);   \n                colQueue.add(col - 1);\n            } \n            if (node.right != null) {\n                queue.add(node.right);\n                colQueue.add(col + 1);\n            }\n        }\n\n        return cols;\n    }\n\n    public void getRange(TreeNode root, int[] range, int col) {\n        if (root == null) {\n            return;\n        }\n        range[0] = Math.min(range[0], col);\n        range[1] = Math.max(range[1], col);\n\n        getRange(root.left, range, col - 1);\n        getRange(root.right, range, col + 1);\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-tree-vertical-order-traversal","has_notes":false,"flag_type":1}