{"id":1115833599,"question_id":3217,"lang":"java","lang_name":"Java","time":"6Â months","timestamp":1702136883,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1115833599/","is_pending":"Not Pending","title":"Number of Possible Sets of Closing Branches","memory":"N/A","code":"class Solution {\n    public int numberOfSets(int n, int maxDistance, int[][] roads) {\n        HashMap<Integer, Map<Integer, Integer>> g = new HashMap<>();\n        buildMap(g, roads);\n        \n        List<List<Integer>> res = new ArrayList<>();\n        helper(g, res, new ArrayList<>(), n, maxDistance, 0);\n        System.out.println(res);\n        return res.size();\n    }\n\n    \n    private void helper(HashMap<Integer, Map<Integer, Integer>> g,  List<List<Integer>> res, List<Integer> curr, int n, int md , int st){\n          res.add(new ArrayList<>(curr));\n        // System.out.println(\"helper=\"+curr  );\n        if(st==n){\n          \n            return;\n        }\n        \n        \n        for(int node=st; node<n; node++){\n            \n            Map<Integer, Integer> adj = g.getOrDefault(node, new HashMap<>());\n            boolean cantake =true;\n            for(Map.Entry<Integer,Integer>en : adj.entrySet()){\n                \n                // System.out.println(\"node=\"+node + \" k=\"+en.getKey() + \" v=\"+en.getValue() );\n                if(en.getValue()>md && en.getKey()<node && curr.contains(en.getKey())){\n                    cantake=false;\n                    break;\n                }\n            }\n                   \n            if(cantake){\n                curr.add(node);\n                helper(g, res, curr, n, md, node+1);\n                curr.remove(curr.size()-1);\n            }\n            \n        }\n    }\n    \n    \n    private void buildMap(HashMap<Integer, Map<Integer, Integer>> g, int[][] roads){\n        \n        \n        for(int[] r: roads){\n            int u = r[0];\n            int v = r[1];\n            int d = r[2];\n            \n            g.putIfAbsent(u, new HashMap<Integer, Integer>());\n            g.get(u).put(v, d);\n            \n            g.putIfAbsent(v, new HashMap<Integer, Integer>());\n            g.get(v).put(u, d);\n            \n        }\n    }\n    \n    \n}","compare_resulttitle_slug":"number-of-possible-sets-of-closing-branches","has_notes":false,"flag_type":1}