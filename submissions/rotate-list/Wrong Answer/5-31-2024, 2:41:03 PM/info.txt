{"id":1273034791,"question_id":61,"lang":"java","lang_name":"Java","time":"1 week, 5 days","timestamp":1717137663,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1273034791/","is_pending":"Not Pending","title":"Rotate List","memory":"N/A","code":"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode rotateRight(ListNode head, int k) {\n        if(head==null) return head;\n\n        ListNode fast = head;\n        int len = 0;\n        while(fast!=null){\n            len++;\n            fast= fast.next;\n        }\n        k%=len;\n\n\n        int cnt = 0;\n        fast = head;\n        while(cnt<k){\n            fast=fast.next;\n            cnt++;\n        }\n\n\n        ListNode prev_slow =null;\n        ListNode prev_fast =null;\n\n        ListNode slow = head;\n        while(fast!=null){\n            prev_slow = slow;\n            slow = slow.next;\n\n            prev_fast = fast;\n            fast = fast.next;\n        }\n\n        if(prev_slow!=null) prev_slow.next = null;\n        if(prev_fast!=null) prev_fast.next = head;\n        \n        return slow;\n\n\n        //0 1 2 \n        //  f\n        //    s\n\n        \n\n\n        \n    }\n}","compare_result":"1111000010111011011101110111101101111111101101111111101111111111111111111111111111111011111111110111011111110111011010111111011111011111111111111111111111101111111111111111111111111111111111111111111111111011111111111111111111111111","title_slug":"rotate-list","has_notes":false,"flag_type":1}