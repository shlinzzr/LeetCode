{"id":1246546804,"question_id":61,"lang":"java","lang_name":"Java","time":"1 month, 1 week","timestamp":1714568955,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1246546804/","is_pending":"Not Pending","title":"Rotate List","memory":"N/A","code":"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode rotateRight(ListNode head, int k) {\n        if(head==null) return null;\n\n        int cnt = 0;\n        ListNode fast = head;\n        while(fast!=null){\n            cnt++;\n            fast = fast.next;\n        }\n\n        if(cnt==1) return head;\n\n        \n\n        k = k%cnt;\n        fast = head;\n        while(k-->0){\n            fast = fast.next;\n        }\n\n        //  1    2  3  4   5\n        //            slow   fast\n        ListNode prev = new ListNode();\n        ListNode prevfast = new ListNode();\n        prevfast.next = fast;\n        prev.next = head;\n        ListNode slow = head;\n        while(fast!=null){\n            prev = slow;\n            slow = slow.next;\n            prevfast = fast;\n            fast = fast.next;\n        }\n\n        prev.next = null;\n        prevfast.next = head;\n\n        return slow;\n\n\n        \n    }\n}","compare_result":"1111111010111011011101110111101101111111101101111111101111111111111111111111111111111011111111110111011111110111011010111111011111011111111111111111111111101111111111111111111111111111111111111111111111111011111111111111111111111111","title_slug":"rotate-list","has_notes":false,"flag_type":1}