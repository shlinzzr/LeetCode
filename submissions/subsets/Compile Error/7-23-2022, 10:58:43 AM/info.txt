{"id":754167264,"question_id":78,"lang":"java","lang_name":"Java","time":"1 year, 10 months","timestamp":1658545123,"status":20,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/754167264/","is_pending":"Not Pending","title":"Subsets","memory":"N/A","code":"class Solution {\n   public List<List<Integer>> permute(int[] nums) {\n   List<List<Integer>> list = new ArrayList<>();\n   // Arrays.sort(nums); // not necessary\n   backtrack(list, new ArrayList<>(), nums);\n   return list;\n}\n\nprivate void backtrack(List<List<Integer>> list, List<Integer> tempList, int [] nums){\n   if(tempList.size() == nums.length){\n      list.add(new ArrayList<>(tempList));\n   } else{\n      for(int i = 0; i < nums.length; i++){ \n         if(tempList.contains(nums[i])) continue; // element already exists, skip\n         tempList.add(nums[i]);\n         backtrack(list, tempList, nums);\n         tempList.remove(tempList.size() - 1);\n      }\n   }\n} \n}","compare_result":null,"title_slug":"subsets","has_notes":false,"flag_type":1}