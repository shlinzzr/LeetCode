{"id":1131227697,"question_id":1466,"lang":"java","lang_name":"Java","time":"5 months, 2 weeks","timestamp":1703837943,"status":10,"status_display":"Accepted","runtime":"21 ms","url":"/submissions/detail/1131227697/","is_pending":"Not Pending","title":"Jump Game V","memory":"44.5 MB","code":"class Solution {\n    public int maxJumps(int[] arr, int d) {\n        // int len = arr.length;\n\n        // int[] dp = new int[len+1]; //  maximum number of indices you can visit. seeing the first n ladders, \n        // Brute-Force : recur + memo\n\n        int[] memo = new int[arr.length];\n        int res = 0;\n\n        for (int i=0; i<arr.length; i++) { //從0-n-1開始\n            res = Math.max(res, helper(i, memo, arr, d));\n        }\n        return res;\n    }\n\n    private int helper(int i, int[] memo, int[] arr, int d) {\n        if (memo[i] != 0)\n            return memo[i];\n\n        int cnt = 0;\n        for (int x = i+1; x <= (i+d) && x < arr.length; x++) {\n            if (arr[x] >= arr[i])\n                break;\n            cnt = Math.max(cnt, helper(x, memo, arr, d));\n        }\n        for (int x = i-1; x >= (i-d) && x >= 0; x--) {\n            if (arr[x] >= arr[i])\n                break;\n            cnt = Math.max(cnt, helper(x, memo, arr, d));\n        }\n        memo[i] = 1 + cnt;\n        return memo[i];\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"jump-game-v","has_notes":false,"flag_type":1}