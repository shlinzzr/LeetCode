{"id":923970097,"question_id":10,"lang":"java","lang_name":"Java","time":"1 year, 2 months","timestamp":1680057521,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/923970097/","is_pending":"Not Pending","title":"Regular Expression Matching","memory":"41 MB","code":"class Solution {\n    public boolean isMatch(String s, String p) {\n        \n//         if(p.length()==0) return s.length()==0;\n        \n//         boolean firstMatch = s.length()>0 && (s.charAt(0)==p.charAt(0) || p.charAt(0)=='.');\n        \n//         if(p.length()>=2 && p.charAt(1)=='*'){\n//             return isMatch(s, p.substring(2)) || (firstMatch && isMatch(s.substring(1), p));\n//         }else{\n            \n//             return firstMatch && isMatch(s.substring(1), p.substring(1));\n            \n//         }\n        \n        \n        int m = s.length();\n        int n = p.length();\n\n        boolean[][] dp = new boolean[m+1][n+1];\n        dp[0][0]=true;\n        \n        for(int j=2; j<=n; j++){\n            if(p.charAt(j-1)=='*')\n                dp[0][j] = dp[0][j-2];  // consider s==aa   p=a*\n        }\n        \n        for(int i=1; i<=m; i++){\n            for(int j=1; j<=n; j++){\n                char sc = s.charAt(i-1);\n                char pc = p.charAt(j-1);\n                \n                if(sc==pc || pc=='.')\n                    dp[i][j] = dp[i-1][j-1];\n                \n                else if(pc=='*'){\n                        \n                    if(dp[i][j-2])\n                        dp[i][j]=true;\n                    \n                    else if(sc==p.charAt(j-2) || p.charAt(j-2)=='.'){\n                        dp[i][j] = dp[i-1][j];\n                    }\n                }\n            }\n        }\n        \n        return dp[m][n];        \n        \n        \n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"regular-expression-matching","has_notes":false,"flag_type":1}