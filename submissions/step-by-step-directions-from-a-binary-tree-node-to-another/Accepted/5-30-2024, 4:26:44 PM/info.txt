{"id":1272180610,"question_id":2217,"lang":"java","lang_name":"Java","time":"1 week, 6 days","timestamp":1717057604,"status":10,"status_display":"Accepted","runtime":"20 ms","url":"/submissions/detail/1272180610/","is_pending":"Not Pending","title":"Step-By-Step Directions From a Binary Tree Node to Another","memory":"80 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public String getDirections(TreeNode root, int startValue, int destValue) {\n        // 拷貝難\n\n        //anyway... 同樣先找LCA\n\n        int st=startValue, dest = destValue;\n\n        TreeNode lca = findLCA(root, st, dest);\n        \n        int ucnt = getDepth(lca, st, 0);\n\n        // System.out.println(lca.val + \" u=\"+ucnt);\n\n        StringBuilder sb = new StringBuilder();\n        while(ucnt-->0) sb.append(\"U\");\n\n        findDest(lca, dest, sb);\n\n        return sb.toString();\n        \n    }\n\n    boolean found = false;\n\n     \n    private boolean findDest(TreeNode root, int val, StringBuilder sb) {\n        if (root.val == val) return true;\n        if (root.left != null){\n            sb.append(\"L\");\n            if (findDest(root.left, val, sb)){\n                return true;\n            }\n            sb.deleteCharAt(sb.length()-1);\n        }\n        \n        \n        if (root.right != null){\n            sb.append(\"R\");\n            if (findDest(root.right, val, sb)){\n                return true;\n            }\n            sb.deleteCharAt(sb.length()-1);\n        }\n        return false;\n    }\n\n    // private void findDest(TreeNode node, int dest, StringBuilder sb){\n\n    //     if(node==null) return;\n\n    //     if(node.val==dest) return;\n\n    //     sb.append(\"L\");\n    //     findDest(node.left, dest, sb);\n    //     if(found) return;\n\n    //     sb.deleteCharAt(sb.length()-1);\n    //     sb.append(\"R\");\n    //     findDest(node.right, dest, sb);\n    //     if(found==false)\n    //         sb.deleteCharAt(sb.length()-1);\n\n    // }\n\n    private int getDepth(TreeNode node, int st, int lv){\n        if(node==null) return Integer.MAX_VALUE/2;\n\n        if(node.val==st) return lv;\n\n        int left = getDepth(node.left, st, lv+1);\n        int right = getDepth(node.right,  st, lv+1);\n\n        return Math.min(left, right);\n\n    }\n\n\n    private TreeNode findLCA(TreeNode node, int st, int dest){\n        if(node==null) return null;\n\n        if(node.val==st || node.val==dest)\n            return node;\n        \n        \n        TreeNode left = findLCA(node.left, st, dest);\n        TreeNode right = findLCA(node.right, st, dest);\n\n        if(left!=null && right!=null) return node;\n\n        return left!=null ? left : right;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"step-by-step-directions-from-a-binary-tree-node-to-another","has_notes":false,"flag_type":1}