{"id":1040901138,"question_id":2217,"lang":"java","lang_name":"Java","time":"9 months, 1 week","timestamp":1693889134,"status":10,"status_display":"Accepted","runtime":"671 ms","url":"/submissions/detail/1040901138/","is_pending":"Not Pending","title":"Step-By-Step Directions From a Binary Tree Node to Another","memory":"83.6 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public String getDirections(TreeNode root, int startValue, int destValue) {\n        StringBuilder sb = new StringBuilder();\n        \n        helper(root, sb, startValue);\n        // System.out.println(sb.toString());\n        helper2(root, sb, destValue);\n        \n        String s = sb.toString();\n        Stack<Character> st = new Stack<>();\n        \n        \n        for(char ch : s.toCharArray()){\n            \n            if(ch=='R'){\n                if(!st.isEmpty() && st.peek()=='r')\n                    st.pop();\n                else\n                    st.push(ch);\n            }\n            \n            else if(ch=='L'){\n                if(!st.isEmpty() && st.peek()=='l')\n                    st.pop();\n                else\n                    st.push(ch);\n            }else{\n                st.push(ch);\n            }\n        }\n        \n        String res = \"\";\n        for(char ch : st){\n            if(ch=='r' || ch=='l')\n                ch='U';\n            res+=ch;\n        }\n            \n        \n        return res;\n        \n    }\n    \n    private boolean helper2(TreeNode root, StringBuilder sb, int target){\n        if(root==null)\n            return false;\n        \n        if(root.val==target)\n            return true;\n        \n        if(root.left!=null){\n            sb.append(\"L\");\n            if(helper2(root.left, sb, target))\n                return true;\n            sb.deleteCharAt(sb.length()-1);\n        }\n        \n        if(root.right!=null){\n            sb.append(\"R\");\n            if(helper2(root.right, sb, target))\n                return true;\n            sb.deleteCharAt(sb.length()-1);\n        } \n        \n        return false;\n        \n    }\n    \n    \n    \n    private boolean helper(TreeNode root, StringBuilder sb, int target){\n        \n        if(root==null)\n            return false;\n        \n        if(root.val==target)\n            return true;\n          // System.out.println(root.val + \" \" + sb.toString());\n        \n        if(root.left!=null){\n            sb.insert(0, \"l\");\n            if(helper(root.left, sb, target))\n                return true;\n            sb.deleteCharAt(0);\n        }\n        \n        if(root.right!=null){\n            sb.insert(0, \"r\");\n            if(helper(root.right, sb, target))\n                return true;\n            sb.deleteCharAt(0);\n        }        \n        \n        return false;\n        \n    }\n}\n","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"step-by-step-directions-from-a-binary-tree-node-to-another","has_notes":false,"flag_type":1}