{"id":1141992131,"question_id":333,"lang":"java","lang_name":"Java","time":"5Â months","timestamp":1704853949,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1141992131/","is_pending":"Not Pending","title":"Largest BST Subtree","memory":"43 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n\n    int res = 0 ;\n    public int largestBSTSubtree(TreeNode root) {\n\n        if(root==null) return 0;\n\n        helper(root);\n\n        return res;\n    }\n\n    private int helper(TreeNode root){\n        if(root==null) return 0;\n\n        boolean flag = true;\n\n        if(root.left!=null){\n            TreeNode node = root.left;\n            while(node.right!=null) node = node.right;\n            if(node.val>= root.val) \n                flag = false;\n        }\n\n        if(root.right!=null){\n\n            TreeNode node = root.right;\n            while(node.left!=null) node= node.left;\n            if(node.val<=root.val)\n                flag = false;\n        }\n\n        int leftVal = helper(root.left);\n        int rightVal = helper(root.right);\n\n        if(flag==false || leftVal==-1 || rightVal==-1) return -1;\n\n        res = Math.max(res, leftVal+rightVal+1);\n\n        return leftVal+rightVal+1;\n        \n\n        // if(node.left!=null && (node.left.val>node.val || node.left.val<lo ) return -1;\n        // if(node.right!=null && (node.right.val<node.val || node.right.val>hi ) return -1;\n\n        // int left = helper(node.left, )\n\n         \n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"largest-bst-subtree","has_notes":false,"flag_type":1}