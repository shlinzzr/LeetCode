{"id":1141981448,"question_id":333,"lang":"java","lang_name":"Java","time":"5Â months","timestamp":1704852735,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1141981448/","is_pending":"Not Pending","title":"Largest BST Subtree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    List<TreeNode> list = new ArrayList<>();\n    public int largestBSTSubtree(TreeNode root) {\n        helper(root);\n\n        int st=0, ed=list.size()-1;\n\n        while(st<ed){\n            int mid = st+(ed-st)/2;\n            if(list.get(mid).val==root.val){\n                return list.size() - mid -1;\n            }else if(list.get(mid).val > root.val){\n                ed = mid-1;\n\n            }else \n                st = mid+1;\n        }\n\n        return list.size()-st;\n    }\n\n    private void helper(TreeNode root){\n        if(root==null) return ;\n        \n        helper(root.left);\n        list.add(root);\n        helper(root.right);\n    }\n}","compare_result":"1111000101010001010110010000100101001100010000101110001000000000000000010","title_slug":"largest-bst-subtree","has_notes":false,"flag_type":1}