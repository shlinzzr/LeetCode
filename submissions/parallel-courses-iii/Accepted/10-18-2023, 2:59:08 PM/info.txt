{"id":1078165956,"question_id":2176,"lang":"java","lang_name":"Java","time":"7 months, 4 weeks","timestamp":1697612348,"status":10,"status_display":"Accepted","runtime":"17 ms","url":"/submissions/detail/1078165956/","is_pending":"Not Pending","title":"Parallel Courses III","memory":"68.6 MB","code":"public class Solution {\n    public int minimumTime(int n, int[][] relations, int[] time) {\n        List<List<Integer>> graph = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            graph.add(new ArrayList<>());\n        }\n\n        for (int[] relation : relations) {\n            int prev = relation[0] - 1;\n            int next = relation[1] - 1;\n            graph.get(next).add(prev);\n        }\n\n        int[] memo = new int[n];\n        int overallMinTime = 0;\n\n        for (int i = 0; i < n; i++) {\n            overallMinTime = Math.max(overallMinTime, calculateTime(i, graph, time, memo));\n        }\n\n        return overallMinTime;\n    }\n\n    private int calculateTime(int course, List<List<Integer> > graph, int[] time, int[] memo) {\n        if (memo[course] != 0) {\n            return memo[course];\n        }\n\n        int maxPrerequisiteTime = 0;\n        for (int prereq : graph.get(course)) {\n            maxPrerequisiteTime = Math.max(maxPrerequisiteTime, calculateTime(prereq, graph, time, memo));\n        }\n\n        memo[course] = maxPrerequisiteTime + time[course];\n        return memo[course];\n    }\n}","compare_result":"111111111111111111111111111111111111111111","title_slug":"parallel-courses-iii","has_notes":false,"flag_type":1}