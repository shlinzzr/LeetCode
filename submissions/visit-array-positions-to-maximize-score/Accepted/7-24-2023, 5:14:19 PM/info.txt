{"id":1002486359,"question_id":2893,"lang":"java","lang_name":"Java","time":"10 months, 3 weeks","timestamp":1690190059,"status":10,"status_display":"Accepted","runtime":"38 ms","url":"/submissions/detail/1002486359/","is_pending":"Not Pending","title":"Visit Array Positions to Maximize Score","memory":"58.6 MB","code":"class Solution {\n    public long maxScore(int[] nums, int x) {\n        \n        int n = nums.length;\n        long[][] dp = new long[n][2];\n        for(long[] d : dp){\n            Arrays.fill(d, Long.MIN_VALUE/2);\n        }\n        \n        if (nums[0]%2==0)\n            dp[0][0] = nums[0];\n        else\n            dp[0][1] = nums[0];\n        \n        for (int i=1; i<n; i++)            \n        {\n            dp[i][0] = Math.max(dp[i][0], dp[i-1][0]);\n            dp[i][1] = Math.max(dp[i][1], dp[i-1][1]);\n            \n            if (nums[i]%2==0)\n            {                                \n                dp[i][0] = Math.max(dp[i][0], dp[i-1][0] + nums[i]);\n                dp[i][0] = Math.max(dp[i][0], dp[i-1][1] + nums[i] - x);\n            }\n            else\n            {                \n                dp[i][1] = Math.max(dp[i][1], dp[i-1][1] + nums[i]);\n                dp[i][1] = Math.max(dp[i][1], dp[i-1][0] + nums[i] - x);\n            }            \n        }\n        \n        return Math.max(dp[n-1][0], dp[n-1][1]);\n        \n        \n        \n        \n//         int len = nums.length;\n        \n//         long[][] dp = new long[len][2];\n        \n//         if(nums[0]%2==0){\n//             dp[0][0] = nums[0];    \n//         }else{\n//             dp[0][1] = nums[0];\n//         }\n        \n        \n//         System.out.println(dp[0][0] + \"  \" + dp[0][1]);\n//         System.out.println( );\n//         System.out.println( );\n//         for(int i=1; i<len; i++){\n            \n//             dp[i][0] = dp[i-1][0];\n//             dp[i][1] = dp[i-1][1];\n            \n//             if(nums[i]%2==0){\n//                 dp[i][0] = Math.max(dp[i][0], dp[i-1][0]+nums[i]);\n//                 dp[i][0] = Math.max(dp[i][0], dp[i-1][1]+nums[i]-x);\n//             }else{\n//                 dp[i][1] = Math.max(dp[i][1], dp[i-1][1]+nums[i]);\n//                 dp[i][1] = Math.max(dp[i][1], dp[i-1][0]+nums[i]-x);\n//             }\n            \n//             System.out.println(dp[i][0] + \"  \" + dp[i][1] + \"   \"  + nums[i]);\n//         }\n                                                 \n\n//         return Math.max(dp[len-1][0], dp[len-1][1]);\n        \n       \n    }\n}","compare_resulttitle_slug":"visit-array-positions-to-maximize-score","has_notes":false,"flag_type":1}