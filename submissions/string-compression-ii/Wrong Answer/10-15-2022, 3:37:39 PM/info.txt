{"id":822814237,"question_id":1637,"lang":"java","lang_name":"Java","time":"1 year, 8 months","timestamp":1665819459,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/822814237/","is_pending":"Not Pending","title":"String Compression II","memory":"N/A","code":"class Solution {\n    public int getLengthOfOptimalCompression(String s, int k) {\n        int[] arr = new int[26];\n        int len = s.length();\n        for(int i=0; i<len;i++){\n             char c = s.charAt(i);\n             arr[c-'a']++;\n\n        }\n        \n        while(k>0){\n            int idx = findMin(arr);\n            System.out.println(idx);\n            arr[idx]--;\n            k--;\n        }\n        \n        int res=0;\n        \n        for (int i=0; i<26; i++){\n            if(arr[i]==1)\n                res++;\n            else if (arr[i]>0)\n                res+=String.valueOf(arr[i]).length()+1;\n\n        }\n        \n        return res;\n    }\n\n\nprivate int findMin(int[] arr){\n    int min = Integer.MAX_VALUE;\n    int idx =0;\n    \n    for (int i=0; i<26; i++){\n        int n=arr[i];\n         if(n<min&&n!=0){\n             min=n;\n             idx=i;\n         }\n\n    }\n    \n    return idx;\n}\n}","compare_result":"1111111111011111111101010111111111110111011011011011010010101001110010001000111100111001100000000100000010000001001100000000000000000001","title_slug":"string-compression-ii","has_notes":false,"flag_type":1}