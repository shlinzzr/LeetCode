{"id":1130324853,"question_id":1637,"lang":"java","lang_name":"Java","time":"5 months, 2 weeks","timestamp":1703747063,"status":10,"status_display":"Accepted","runtime":"79 ms","url":"/submissions/detail/1130324853/","is_pending":"Not Pending","title":"String Compression II","memory":"42.8 MB","code":"class Solution {\n   \n    public int getLengthOfOptimalCompression(String s, int k) {\n        int n = s.length();\n        int[][] dp = new int[n + 1][k + 1];  // sol with seeing n char of s and removed k char\n\n        for (int i = n; i >= 0; i--) {\n            for (int j = 0; j <= k; j++) {\n                // Base case - initial length declaration\n                if (i == n) {\n                    // dp[n][j] = 0;\n                    continue;\n                }\n\n                // Case 1 - delete the ith character if possible (j > 0)\n                dp[i][j] = (j > 0) ? dp[i + 1][j - 1] : Integer.MAX_VALUE;\n\n                /*\n                 0      <- i\n                \"aaabcccdddd\"\n\n                .... count = 4\n                del(c),\n                del(c),\n                del(c),\n\n                j=0-> k\n                    possible_del = j....0\n\n                dp[i][j] = Math.min(dp[i][j], getLength(count) + dp[end + 1][possible_del]);\n\n                find dp[0][k]\n\n                */\n\n\n                // Case 2 - we keep the ith index.\n                // We have to find the current char's index endpoint\n                int possible_del = j, count = 0;\n                for (int end = i; end < n && possible_del >= 0; end++) {\n                    // Check about the same char \"b b b ..\" for encoding\n                    if (s.charAt(end) == s.charAt(i)) {\n                        count++;\n\n                        // Assuming the block ends here \"aaaa\"\n                        dp[i][j] = Math.min(dp[i][j], getLength(count) + dp[end + 1][possible_del]);\n                    } else {\n                        // This character should be deleted to make the length min.\n                        possible_del--;\n                    }\n                }\n            }\n        }\n\n        return dp[0][k];\n    }\n\n     public int getLength(int count) {\n        if (count == 1) return 1;\n        else if (count < 10) return 2;\n        else if (count < 100) return 3;\n        else return 4;\n    }\n\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"string-compression-ii","has_notes":false,"flag_type":1}