{"id":822808751,"question_id":1637,"lang":"java","lang_name":"Java","time":"1 year, 8 months","timestamp":1665818660,"status":20,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/822808751/","is_pending":"Not Pending","title":"String Compression II","memory":"N/A","code":"class Solution {\n    public int getLengthOfOptimalCompression(String s, int k) {\n        int[] arr = new int[26];\n        int len = s.length();\n        for(int i=0; i<len;i++){\n             char c = s.charAt(i);\n             arr[c-'a']++;\n\n        }\n        \n        while(k>0){\n            int idx = findMin(arr);\n            arr[idx]--;\n            \n        }\n        \n    }\n\n\nprivate int findMin(int[] arr){\n    int min = Integer MAX_VALUE;\n    int idx =0;\n    for (int i=0; i<26; i++){\n         if(n<min){\n             min=n;\n             idx=i;\n         }\n\n    }\n    \n    return idx;\n}\n}","compare_result":null,"title_slug":"string-compression-ii","has_notes":false,"flag_type":1}