{"id":914883254,"question_id":2647,"lang":"java","lang_name":"Java","time":"1 year, 3 months","timestamp":1678781666,"status":10,"status_display":"Accepted","runtime":"656 ms","url":"/submissions/detail/914883254/","is_pending":"Not Pending","title":"Split the Array to Make Coprime Products","memory":"44.2 MB","code":"class Solution {\n    \n    List<Integer> factorize(int n) {\n        List<Integer> res = new ArrayList<>();\n        for (int i = 2; n > 1 && i < 1000; i += 1 + (i % 2))\n            if (n % i == 0) {\n                res.add(i);\n                while(n % i == 0)\n                    n /= i;\n            }\n        if (n > 1)\n            res.add(n);        \n        return res;\n    }\n    public int findValidSplit(int[] nums) {\n        Map<Integer, Integer> left = new HashMap<>(), right = new HashMap<>();\n        int res = 0;\n        for (var n : nums)\n            for (var f : factorize(n))\n                right.put(f, right.getOrDefault(f, 0) + 1);\n        for (int i  = 0, common = 0; i < nums.length - 1; ++i) {\n            for (int f : factorize(nums[i])) {\n                left.put(f, left.getOrDefault(f, 0) + 1);\n                common += left.get(f) == 1 ? 1 : 0;\n                common -= left.get(f).equals(right.get(f)) ? 1 : 0;\n            }        \n            if (common == 0)\n                return i;\n        }\n        return -1;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"split-the-array-to-make-coprime-products","has_notes":false,"flag_type":1}