{"id":801111024,"question_id":1896,"lang":"java","lang_name":"Java","time":"1 year, 9 months","timestamp":1663314347,"status":10,"status_display":"Accepted","runtime":"267 ms","url":"/submissions/detail/801111024/","is_pending":"Not Pending","title":"Maximum Score from Performing Multiplication Operations","memory":"127 MB","code":"class Solution {\n    int n, m;\n    int[] nums, muls;\n    Integer[][] memo;\n    public int maximumScore(int[] nums, int[] muls) {\n        n = nums.length;\n        m = muls.length;\n        this.nums= nums;\n        this.muls = muls;\n        this.memo = new Integer[m][m];\n        return dp(0, 0, n-1);\n    }\n    private int dp(int i, int l, int r) {\n        if (i == m) return 0; // Picked enough m elements\n        if (memo[l][i] != null) return memo[l][i];\n        \n        int pickLeft  = nums[l] * muls[i] + dp(i+1, l+1, r);  // Pick the left side\n        int pickRight = nums[r] * muls[i] + dp(i+1, l, r-1); // Pick the right side\n        return memo[l][i] = Math.max(pickLeft, pickRight);\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111","title_slug":"maximum-score-from-performing-multiplication-operations","has_notes":false,"flag_type":1}