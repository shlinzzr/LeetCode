{"id":993263869,"question_id":81,"lang":"java","lang_name":"Java","time":"11Â months","timestamp":1689231571,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/993263869/","is_pending":"Not Pending","title":"Search in Rotated Sorted Array II","memory":"N/A","code":"class Solution {\n    public boolean search(int[] nums, int target) {\n        int len = nums.length;\n        \n        int offset = findMin(nums);\n        \n        int st=0;\n        int ed=len-1;\n        \n        while(st<ed){\n            \n            int mid = st+(ed-st)/2;\n            \n            int cvt = (mid+offset)%len;\n            \n            if(nums[cvt]==target)\n                return true;\n            \n            else if(nums[cvt]>target){\n                ed = mid-1;\n                \n            }else {\n                st = mid+1;\n            }\n        }\n    \n        return (nums[(st+offset)%len]==target) ? true: false;\n        \n        \n            \n    }\n    \n    \n    \n    private int findMin(int[] nums){\n        \n        int len = nums.length;\n        \n        int st =0;\n        int ed=len-1;\n        \n        while(st<ed){\n            \n            int m = st + (ed-st)/2;\n            \n            if(nums[m]>nums[ed]){\n                st = m+1;\n            }else{\n                ed=m;\n            }\n        }\n        \n        return st;\n    }\n    \n}","compare_result":"1111110101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110111111","title_slug":"search-in-rotated-sorted-array-ii","has_notes":false,"flag_type":1}