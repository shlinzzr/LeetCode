{"id":1271927574,"question_id":322,"lang":"java","lang_name":"Java","time":"2Â weeks","timestamp":1717034524,"status":10,"status_display":"Accepted","runtime":"16 ms","url":"/submissions/detail/1271927574/","is_pending":"Not Pending","title":"Coin Change","memory":"43.8 MB","code":"class Solution {\n    public int coinChange(int[] coins, int amount) {\n\n        // ref 322. Coin Change\n        // ref 518. Coin Change II\n        // ref 416. Partition Equal Subset Sum\n        // ref 377. Combination Sum IV, \n\n        int[] dp = new int[amount+1];\n        Arrays.fill(dp, Integer.MAX_VALUE);\n        dp[0] = 0;\n\n        for(int i=1; i<=amount; i++){\n            for(int c: coins){\n                if(i-c>=0 && dp[i-c]!=Integer.MAX_VALUE){\n                    dp[i] = Math.min(dp[i], dp[i-c]+1);\n                }\n            }\n        }\n\n        return dp[amount]== Integer.MAX_VALUE ? -1 : dp[amount];\n\n\n\n        //  i 0 1 2 3 4 5 6\n        // dp 1 1 1 2 2 3 3\n        \n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"coin-change","has_notes":false,"flag_type":1}