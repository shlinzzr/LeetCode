{"id":1280095790,"question_id":322,"lang":"java","lang_name":"Java","time":"6Â days","timestamp":1717727885,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1280095790/","is_pending":"Not Pending","title":"Coin Change","memory":"N/A","code":"class Solution {\n    public int coinChange(int[] coins, int amount) {\n\n        int[] dp = new int[amount+1]; // fewest number of coins that you need to make up that amount.\n        Arrays.fill(dp, Integer.MAX_VALUE);\n        dp[0] = 0;\n\n        for(int i=1; i<=amount; i++){\n            for(int c: coins){\n                if(i-c>=0 && dp[i-c]!=Integer.MAX_VALUE){\n                    dp[i] = 1+ dp[i-c];\n                }\n            }\n        }\n\n        return dp[amount]==Integer.MAX_VALUE ? -1 : dp[amount];\n\n\n\n\n\n\n\n\n\n\n        // ref 322. Coin Change\n        // ref 518. Coin Change II\n        // ref 416. Partition Equal Subset Sum\n        // ref 377. Combination Sum IV, \n\n        // int[] dp = new int[amount+1];\n        // Arrays.fill(dp, Integer.MAX_VALUE);\n        // dp[0] = 0;\n\n        // for(int i=1; i<=amount; i++){\n        //     for(int c: coins){\n        //         if(i-c>=0 && dp[i-c]!=Integer.MAX_VALUE){\n        //             dp[i] = Math.min(dp[i], dp[i-c]+1);\n        //         }\n        //     }\n        // }\n\n        // return dp[amount]== Integer.MAX_VALUE ? -1 : dp[amount];\n\n\n\n        //  i 0 1 2 3 4 5 6\n        // dp 1 1 1 2 2 3 3\n        \n    }\n}","compare_result":"111111111111111111111111111111000011010110011000110000010100010001000101001000000000000000000000000000001000000111010100000000000000000000000100000000000000000000011000100000000001000111111","title_slug":"coin-change","has_notes":false,"flag_type":1}