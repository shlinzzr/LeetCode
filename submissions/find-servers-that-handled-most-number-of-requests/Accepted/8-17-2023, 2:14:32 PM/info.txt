{"id":1023680847,"question_id":1710,"lang":"java","lang_name":"Java","time":"10Â months","timestamp":1692252872,"status":10,"status_display":"Accepted","runtime":"110 ms","url":"/submissions/detail/1023680847/","is_pending":"Not Pending","title":"Find Servers That Handled Most Number of Requests","memory":"56.8 MB","code":"class Solution {\n    public List<Integer> busiestServers(int k, int[] arrival, int[] load) {\n        \n        int[] count = new int[k];\n        int len = arrival.length;\n        \n        PriorityQueue<int[]> busyServer = new PriorityQueue<>(\n            (a,b)-> a[0]-b[0]\n        );\n            \n            \n        TreeSet<Integer> avail = new TreeSet<>();\n        for(int i=0; i<k; i++){\n            avail.add(i);\n        }\n        \n        for(int i=0; i<len; i++){\n        \n            int st = arrival[i];\n            int ed = arrival[i] + load[i];\n            \n            while(!busyServer.isEmpty() && busyServer.peek()[0]<=st){\n                avail.add(busyServer.poll()[1]);\n            }\n            \n            \n            if(avail.isEmpty())// all server busy\n                continue;\n            \n            Integer serverId = avail.ceiling(i%k);\n            if(serverId==null){\n                serverId = avail.first();\n            }\n            \n            avail.remove(serverId);\n            busyServer.offer(new int[]{ed, serverId});\n            count[serverId]++;\n        }\n        \n        int max= 0;\n        List<Integer> res = new ArrayList<>();\n        for(int i=0; i<k; i++){\n            if(count[i]>max){\n                max = count[i];\n                res = new ArrayList<>();\n                res.add(i);\n            }else if(count[i]==max){\n                res.add(i);\n            }\n        }\n\n        return res;\n        \n        \n        \n        // double for loop cause TLE 1e10\n//         int[] count = new int[k];\n//         boolean[] isBusy = new boolean[k];\n        \n//         HashMap<Integer, TreeMap<Integer, Integer>> map = new HashMap<>(); // serverid, <st, ed>\n//         // ok\n//         // ----|>---<|---insert---|>----<|--\n//         //     st   ed            st.   ed\n//         //.   (if ed null, st must null),   (if st null, ed must null) && (if ed exist, st must< insert)&& (if st not null, ed must > st)\n        \n//         // fail\n//         // ---<|--|>--insert---<|--|>--\n//         //    ed  st           ed  st\n//         //   (ed null or ed<st)    (st null or st>ed)\n        \n//         int len = arrival.length;\n        \n//         for(int i=0; i<len; i++){ //1e5\n//             int st = arrival[i];\n//             int ed = st+load[i];\n            \n//             boolean found = false;\n//             int id =0;\n//             for(int j=0; j<k; j++ ){   // 1e5\n                \n//                 id = (i+j)%k;\n//                 map.putIfAbsent(id, new TreeMap<>());\n                \n//                 Integer prevSt = map.get(id).lowerKey(st);\n//                 if(prevSt==null){\n//                     map.get(id).put(st, ed);\n//                     found=true;\n//                     break;\n//                 }else{\n//                     int prevEd = map.get(id).get(prevSt);\n//                     if(prevEd<=st){\n//                         map.get(id).put(st, ed);\n//                         found = true;\n//                         break;\n//                     }else{\n//                         // server is busy\n//                     }\n//                 }\n//             }\n            \n//             if(found==false) // all server busy\n//             {\n//                 continue;\n//             }\n            \n//             count[id]++;\n//         }\n        \n//         // for(int c: count){\n//         //     System.out.print(c + \",\");    \n//         // }\n//         // System.out.println();\n        \n        \n//         int max= 0;\n//         List<Integer> res = new ArrayList<>();\n//         for(int i=0; i<k; i++){\n//             if(count[i]>max){\n//                 max = count[i];\n//                 res = new ArrayList<>();\n//                 res.add(i);\n//             }else if(count[i]==max){\n//                 res.add(i);\n//             }\n//         }\n\n//         return res;\n            \n            \n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-servers-that-handled-most-number-of-requests","has_notes":false,"flag_type":1}