{"id":903443369,"question_id":907,"lang":"java","lang_name":"Java","time":"1 year, 3 months","timestamp":1677146228,"status":10,"status_display":"Accepted","runtime":"16 ms","url":"/submissions/detail/903443369/","is_pending":"Not Pending","title":"Koko Eating Bananas","memory":"54.5 MB","code":"class Solution {\n    public int minEatingSpeed(int[] piles, int h) {\n        \n        int len = piles.length;\n        if(len>h)\n            return -1;\n        \n        int max = 0;\n        for(int p : piles){\n            max = Math.max(max, p);\n        }\n        \n        if(len==h)\n            return max;\n        \n        int low=1, high=max;\n        while(low<high){\n            \n            int mid = low + (high-low)/2;\n            \n            if(check(piles, mid, h)){\n                high = mid;\n                \n            }else{\n                low = mid+1;\n            }\n        }\n        \n        return low;\n        \n        \n        \n        \n    }\n    \n    \n    private boolean check(int[] piles, int k, int h){\n        \n        int cnt =0;\n            \n        for(int j=0; j<piles.length; j++){\n            \n            cnt+=piles[j]/k;\n            \n            if(piles[j]%k!=0)\n                cnt++;\n        }\n        \n        return cnt<=h;\n        \n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"koko-eating-bananas","has_notes":false,"flag_type":1}