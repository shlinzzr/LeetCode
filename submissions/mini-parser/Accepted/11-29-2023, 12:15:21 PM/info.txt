{"id":1108619498,"question_id":385,"lang":"java","lang_name":"Java","time":"6 months, 2 weeks","timestamp":1701231321,"status":10,"status_display":"Accepted","runtime":"7 ms","url":"/submissions/detail/1108619498/","is_pending":"Not Pending","title":"Mini Parser","memory":"44.5 MB","code":"/**\n * // This is the interface that allows for creating nested lists.\n * // You should not implement it, or speculate about its implementation\n * public interface NestedInteger {\n *     // Constructor initializes an empty nested list.\n *     public NestedInteger();\n *\n *     // Constructor initializes a single integer.\n *     public NestedInteger(int value);\n *\n *     // @return true if this NestedInteger holds a single integer, rather than a nested list.\n *     public boolean isInteger();\n *\n *     // @return the single integer that this NestedInteger holds, if it holds a single integer\n *     // Return null if this NestedInteger holds a nested list\n *     public Integer getInteger();\n *\n *     // Set this NestedInteger to hold a single integer.\n *     public void setInteger(int value);\n *\n *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.\n *     public void add(NestedInteger ni);\n *\n *     // @return the nested list that this NestedInteger holds, if it holds a nested list\n *     // Return empty list if this NestedInteger holds a single integer\n *     public List<NestedInteger> getList();\n * }\n */\nclass Solution {\n    public NestedInteger deserialize(String s) {\n        if (s.isEmpty())\n            return null;\n        if (s.charAt(0) != '[') // ERROR: special case\n            return new NestedInteger(Integer.valueOf(s));\n            \n        Stack<NestedInteger> stack = new Stack<>();\n        NestedInteger curr = null;\n        int st = 0; // l shall point to the start of a number substring; \n                // r shall point to the end+1 of a number substring\n        for (int ed = 0; ed < s.length(); ed++) {\n            char ch = s.charAt(ed);\n            if (ch == '[') {\n                if (curr != null) {\n                    stack.push(curr);\n                }\n                curr = new NestedInteger();\n                st = ed+1;\n            } else if (ch == ']') {\n                String num = s.substring(st, ed);\n                if (!num.isEmpty())\n                    curr.add(new NestedInteger(Integer.valueOf(num)));\n                if (!stack.isEmpty()) {\n                    NestedInteger pop = stack.pop();\n                    pop.add(curr);\n                    curr = pop;\n                }\n                st = ed+1;\n            } else if (ch == ',') {\n                if (s.charAt(ed-1) != ']') {\n                    String num = s.substring(st, ed);\n                    curr.add(new NestedInteger(Integer.valueOf(num)));\n                }\n                st = ed+1;\n            }\n        }\n        \n        return curr;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111","title_slug":"mini-parser","has_notes":false,"flag_type":1}