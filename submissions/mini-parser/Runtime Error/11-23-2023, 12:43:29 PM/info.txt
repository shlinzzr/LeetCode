{"id":1104611248,"question_id":385,"lang":"java","lang_name":"Java","time":"6 months, 3 weeks","timestamp":1700714609,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1104611248/","is_pending":"Not Pending","title":"Mini Parser","memory":"N/A","code":"/**\n * // This is the interface that allows for creating nested lists.\n * // You should not implement it, or speculate about its implementation\n * public interface NestedInteger {\n *     // Constructor initializes an empty nested list.\n *     public NestedInteger();\n *\n *     // Constructor initializes a single integer.\n *     public NestedInteger(int value);\n *\n *     // @return true if this NestedInteger holds a single integer, rather than a nested list.\n *     public boolean isInteger();\n *\n *     // @return the single integer that this NestedInteger holds, if it holds a single integer\n *     // Return null if this NestedInteger holds a nested list\n *     public Integer getInteger();\n *\n *     // Set this NestedInteger to hold a single integer.\n *     public void setInteger(int value);\n *\n *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.\n *     public void add(NestedInteger ni);\n *\n *     // @return the nested list that this NestedInteger holds, if it holds a nested list\n *     // Return empty list if this NestedInteger holds a single integer\n *     public List<NestedInteger> getList();\n * }\n */\nclass Solution {\n    public NestedInteger deserialize(String s) {\n        int len = s.length();\n\n        int lv1=0, op1=1;\n        // int lv2=1, op2=1;\n        \n        NestedInteger tmp = new NestedInteger();\n        \n        Integer val = null;\n\n\n        for(int i=0; i<len; i++){\n            char ch = s.charAt(i);\n\n            if(ch=='-'){\n                op1=-1;\n\n            }else if(ch==','){\n                op1 = s.charAt(i+1)=='-'? -1 : 1;\n                \n            }\n                \n            else if(Character.isDigit(ch)){\n                int num = ch-'0';\n                while(i+1<len && Character.isDigit(s.charAt(i+1))){\n                    num = num*10 + (s.charAt(++i)-'0');\n                }\n                if(val==null) val=0;\n                val += num*op1;\n                // res.setInteger(val);\n                // lv2 = op2==1?lv2*num : lv2/num;\n            }else if(ch=='['){\n                int j = i+1;\n                for(int cnt=0; i<len; i++){\n                    if(s.charAt(i)=='[') cnt++;\n                    if(s.charAt(i)==']') cnt--;\n                    if(cnt==0) break;\n                }\n                NestedInteger ni = deserialize(s.substring(j, i));\n                if(ni.isInteger()){\n                    NestedInteger nn = new NestedInteger();\n                    nn.add(new NestedInteger(ni.getInteger()));\n                    tmp.add(nn);\n                }\n               \n\n                    \n                else \n                    tmp.add(ni);\n            }\n        }\n\n        NestedInteger res = new NestedInteger();\n        if(tmp.getList().size()==0 && val!=null){\n            res.setInteger(val);\n        }else if(val==null && tmp.getList().size()>0){\n            return tmp.getList().get(0);\n        }else {\n            res.add(new NestedInteger(val));\n            for(NestedInteger ni : tmp.getList()){\n                res.add(ni);\n            }\n        }\n\n        return res;\n\n        \n    }\n}","compare_result":"1100000000000000000000000000000000000000000000000000000000","title_slug":"mini-parser","has_notes":false,"flag_type":1}