{"id":1244720042,"question_id":1207,"lang":"java","lang_name":"Java","time":"1 month, 2 weeks","timestamp":1714374452,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1244720042/","is_pending":"Not Pending","title":"Delete Nodes And Return Forest","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public List<TreeNode> delNodes(TreeNode root, int[] to_delete) {\n\n        Set<Integer> set = new HashSet<>();\n        for(int d : to_delete)\n            set.add(d);\n\n        List<TreeNode> res = new ArrayList<>();\n\n        helper(null, root, set, res);\n\n        return res;\n        \n    }\n\n    private void helper(TreeNode parent, TreeNode node, Set<Integer> set, List<TreeNode> res){\n\n        if(node==null) return;\n\n        if(parent==null && !set.contains(node.val)){\n            res.add(node);\n        }\n\n        if(set.contains(node.val)){\n\n            \n            if(parent!=null && parent.left!=null && parent.left.val==node.val){\n                parent.left = null;\n            }\n\n            if(parent!=null && parent.right!=null && parent.right.val==node.val){\n                parent.right = null;\n            } \n\n            helper(null, node.left, set, res);\n            helper(null, node.right, set, res);\n        }\n\n        helper(node, node.left, set, res);\n        helper(node, node.right, set, res);\n\n        \n\n    }\n}","compare_result":"111111111100111111110111110111110111110011111110101111011111000011001110110011010101101100000011111000000100000","title_slug":"delete-nodes-and-return-forest","has_notes":false,"flag_type":1}