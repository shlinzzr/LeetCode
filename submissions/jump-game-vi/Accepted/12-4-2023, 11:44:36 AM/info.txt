{"id":1111885372,"question_id":1814,"lang":"java","lang_name":"Java","time":"6 months, 1 week","timestamp":1701661476,"status":10,"status_display":"Accepted","runtime":"23 ms","url":"/submissions/detail/1111885372/","is_pending":"Not Pending","title":"Jump Game VI","memory":"57.6 MB","code":"class Solution {\n    public int maxResult(int[] nums, int k) {\n        int len = nums.length;\n        int max= nums[0];\n        Deque<int[]> dq = new ArrayDeque<>(); // idx, val\n        for(int i=0; i<len; i++){\n\n            while(!dq.isEmpty() && dq.peek()[0]<i-k){\n                dq.poll();\n            }\n            \n            max = dq.isEmpty() ? nums[i] : dq.peek()[1]+nums[i];\n\n            while(!dq.isEmpty() && dq.peekLast()[1]<max){\n                dq.pollLast();\n            }\n\n           \n\n            dq.offer(new int[]{i, max});\n\n          \n\n\n        }\n\n        return max;\n\n\n\n        // dp : O(NK) \n        // int[] dp = new int[len+1]; // the max score when meet i step;\n        // for(int i=1; i<=len; i++){\n        //     dp[i] = nums[i-1];\n        //     for(int j=1; j<=k && j+k<len; j++){\n        //         dp[i] = Math.max(dp[i], dp[j] + nums[i]) ...\n        //     }\n        // }\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"jump-game-vi","has_notes":false,"flag_type":1}