{"id":1010156437,"question_id":2538,"lang":"java","lang_name":"Java","time":"10 months, 2 weeks","timestamp":1690970572,"status":10,"status_display":"Accepted","runtime":"15 ms","url":"/submissions/detail/1010156437/","is_pending":"Not Pending","title":"Minimum Cost to Make Array Equal","memory":"54.1 MB","code":"class Solution {\n    public long minCost(int[] nums, int[] cost) {\n        int len = nums.length;\n        \n        Tuple[] arr = new Tuple[len];\n        for(int i=0; i<len; i++){\n            Tuple t = new Tuple(nums[i], cost[i]);\n            arr[i] = t;\n        }\n        \n        Arrays.sort(arr, (a,b)-> a.num-b.num);\n        // assume avg = k;\n        // total +=.  cost[i]*(k-nums[i])  find minimum\n        \n        // [1,3], [2,3]\n        // [1] avg=1 cost=0;\n        // [1,3] avg=3 cost=4\n        // st ed\n        \n        \n        // solution 2 :好孩子不要學 sum[0, i](xi-p) is median of totalCost\n        \n        long totalCost = 0; \n        for(int i=0; i<len; i++){\n            totalCost+= cost[i];\n        }\n        \n        int k=0;\n        long currCost = 0;\n        for(int i=0; i<len; i++){\n            currCost += arr[i].cost;\n            \n            if(currCost>=totalCost*1.0/2){\n                k=i;\n                break;\n            }\n        }\n        \n        long res = 0;\n        for(int i=0; i<len; i++){\n            \n            res += Math.abs(arr[i].num-arr[k].num)*(long)arr[i].cost;\n        }\n        \n        return res;\n\n        \n        \n        \n        \n        \n        // solution 1:\n//         long[] costLeft = new long[len];\n        \n        \n//         long costSum = 0;\n//         for(int i=0; i<len; i++){\n//             costLeft[i] = (i==0)? 0 : costLeft[i-1] + costSum*(arr[i].num-arr[i-1].num);\n//             costSum+=arr[i].cost;\n//         }\n        \n        \n//         long[] costRight = new long[len];\n//         costSum = 0;\n//         for(int i=len-1; i>=0; i--){\n//             costRight[i] = (i==len-1)? 0 : costRight[i+1] + costSum*(arr[i+1].num-arr[i].num);\n//             costSum+=arr[i].cost;\n//         }\n        \n//         long min = costLeft[0] + costRight[0];\n//         for(int i=1; i<len; i++){\n//             min = Math.min(min, costLeft[i] + costRight[i]);\n//         }\n        \n//         return min;\n    }\n    \n    \n    class Tuple{\n        int num;\n        int cost;\n        public Tuple(int num, int cost){\n            this.num = num;\n            this.cost = cost;\n        }\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111","title_slug":"minimum-cost-to-make-array-equal","has_notes":false,"flag_type":1}