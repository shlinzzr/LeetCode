{"id":912002369,"question_id":1706,"lang":"java","lang_name":"Java","time":"1 year, 3 months","timestamp":1678355768,"status":10,"status_display":"Accepted","runtime":"99 ms","url":"/submissions/detail/912002369/","is_pending":"Not Pending","title":"Min Cost to Connect All Points","memory":"65.4 MB","code":"class Solution {\n    \n   /* public int minCostConnectPoints(int[][] points) {\n        \n        PriorityQueue<int[]> pq = new PriorityQueue<>(\n            (a,b) -> a[0] - b[0]\n        );\n        int len = points.length;\n            \n        for(int i=0; i<len; i++){\n            for(int j=i+1; j<len; j++){\n                pq.offer(new int[]{getDis(points[i], points[j]), i, j});\n            }\n        }\n        \n        UnionFind uf = new UnionFind(len);\n        int res =0;\n        while(pq.isEmpty()){\n            \n            int[] p = pq.poll();\n            \n            int i = p[1];\n            int j = p[2];\n            \n            if(uf.find(i)!=uf.find(j)){\n                res += p[0];\n                uf.union(i, j);\n            }\n        }\n        return res;\n        \n        \n        \n    }*/\n    \n     public int minCostConnectPoints(int[][] points) {\n        int n = points.length, ans = 0;\n        PriorityQueue<int[]> pq = new PriorityQueue<>((a,b)->a[0]-b[0]);\n        for(int i = 0; i < n; i++) {\n            for(int j = i+1; j < n; j++) {\n                 pq.add(new int[]{ findDist(points, i, j), i, j });\n            }\n        }\n        int count = 0;\n        UnionFind uf = new UnionFind(n);\n        while(count < n-1) {\n            int[] edge = pq.poll();\n            if(uf.find(edge[1]) != uf.find(edge[2])) {\n                ans += edge[0];\n                count++;\n                uf.union(edge[1], edge[2]);\n            }\n        }\n        return ans;\n    }\n    \n   private int findDist(int[][] points, int a, int b) {\n        return Math.abs(points[a][0] - points[b][0]) + Math.abs(points[a][1] - points[b][1]);\n    }\n    \n    class UnionFind{\n        \n        int[] parent;\n        \n        public UnionFind(int n){\n            this.parent = new int[n];\n            for(int i=0; i<n; i++){\n                parent[i]=i;\n            }\n        }\n        \n        public void union(int a, int b){\n            \n            parent[find(a)] = parent[find(b)];\n            \n//             int rootA = find(a);\n//             int rootB = find(b);\n            \n//             if(rootA==rootB)\n//                 return;\n            \n//             parent[rootA]=rootB;\n        }\n        \n        public int find(int x){\n            if(parent[x]!=x)\n                parent[x] = find(parent[x]);\n            \n            return parent[x];\n        }\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"min-cost-to-connect-all-points","has_notes":false,"flag_type":1}