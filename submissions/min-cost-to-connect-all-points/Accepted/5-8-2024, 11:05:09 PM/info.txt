{"id":1252730899,"question_id":1706,"lang":"java","lang_name":"Java","time":"1Â month","timestamp":1715180709,"status":10,"status_display":"Accepted","runtime":"76 ms","url":"/submissions/detail/1252730899/","is_pending":"Not Pending","title":"Min Cost to Connect All Points","memory":"59 MB","code":"class Solution {\n    \n    int[] parent;\n    public int minCostConnectPoints(int[][] points) {\n        \n        int len = points.length;\n        \n        parent = new int[len];\n        for(int i=0; i<len; i++){\n            parent[i] = i;\n        }\n        \n        \n        PriorityQueue<int[]> pq = new PriorityQueue<>(\n            (a,b) -> a[2]-b[2]\n        );\n        \n        for(int i=0; i<len; i++){\n            for(int j=i+1; j<len; j++){\n                \n                int[] a = points[i];\n                int[] b = points[j];\n                \n                int dis = Math.abs(a[0]-b[0]) + Math.abs(a[1]-b[1]);\n                \n                pq.offer(new int[]{i, j, dis});\n            }\n        }\n        \n        int cnt=  0;\n        int res = 0;\n        while(cnt<len-1){\n            \n            \n            int[] p = pq.poll();\n            int a = p[0];\n            int b = p[1];\n            int dis = p[2];\n            \n            if(union(a,b)){\n                res+= p[2];\n                  cnt++;\n            }\n          \n            \n        }\n        \n        return res;\n    }\n    \n    private int find(int x){\n        if(x!=parent[x]) parent[x] = find(parent[x]);\n        return parent[x];\n    }\n    \n    private boolean union(int a, int b){\n        a = find(a);\n        b = find(b);\n        if(a==b) return false;\n        \n        if(a<b)\n            parent[b] = a;\n        else \n            parent[a] = b;\n        return true;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"min-cost-to-connect-all-points","has_notes":false,"flag_type":1}