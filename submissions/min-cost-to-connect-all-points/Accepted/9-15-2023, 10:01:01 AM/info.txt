{"id":1049758538,"question_id":1706,"lang":"java","lang_name":"Java","time":"9Â months","timestamp":1694743261,"status":10,"status_display":"Accepted","runtime":"78 ms","url":"/submissions/detail/1049758538/","is_pending":"Not Pending","title":"Min Cost to Connect All Points","memory":"58.7 MB","code":"class Solution {\n    \n    public int minCostConnectPoints(int[][] points) {\n        \n        PriorityQueue<int[]> pq = new PriorityQueue<>(\n            (a,b) -> a[0] - b[0]\n        );\n        int len = points.length;\n            \n        for(int i=0; i<len; i++){\n            for(int j=i+1; j<len; j++){\n                pq.offer(new int[]{getDis(points[i], points[j]), i, j});\n            }\n        }\n        \n        UnionFind uf = new UnionFind(len);\n        \n        int res =0;\n        int cnt=0;\n        while(cnt<len-1){\n            \n            int[] p = pq.poll();\n            \n            int i = p[1];\n            int j = p[2];\n            \n            if(uf.find(i)!=uf.find(j)){\n                res += p[0];\n                uf.union(i, j);\n                cnt++;\n            }\n        }\n        return res;\n        \n        \n        \n    }\n    \n    private int getDis(int[] p1, int[] p2){\n        return Math.abs(p1[0]-p2[0]) + Math.abs(p1[1]-p2[1]);\n    }\n    \n    class UnionFind{\n        \n        int[] parent;\n        \n        public UnionFind(int n){\n            this.parent = new int[n];\n            for(int i=0; i<n; i++){\n                parent[i]=i;\n            }\n        }\n        \n        public void union(int a, int b) {\n            parent[find(a)] = parent[find(b)];\n        }\n        \n        public int find(int x){\n            if(parent[x]!=x)\n                parent[x] = find(parent[x]);\n            \n            return parent[x];\n        }\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"min-cost-to-connect-all-points","has_notes":false,"flag_type":1}