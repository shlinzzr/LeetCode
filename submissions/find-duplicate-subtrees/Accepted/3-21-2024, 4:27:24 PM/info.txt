{"id":1209845144,"question_id":652,"lang":"java","lang_name":"Java","time":"2 months, 3 weeks","timestamp":1711009644,"status":10,"status_display":"Accepted","runtime":"152 ms","url":"/submissions/detail/1209845144/","is_pending":"Not Pending","title":"Find Duplicate Subtrees","memory":"77.4 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    Map<String, Integer> map = new HashMap<>();\n    Set<TreeNode> res = new HashSet<>();\n    public List<TreeNode> findDuplicateSubtrees(TreeNode root) {\n\n        if(root==null) return new ArrayList<>();\n        serialize(root);\n        return new ArrayList<>(res);\n    }\n\n    private String serialize(TreeNode node){\n        StringBuilder sb = new StringBuilder();\n        serializeHelper(node, sb);\n\n        if(node.left!=null) serialize(node.left);\n        if(node.right!=null) serialize(node.right);\n\n        if(map.containsKey(sb.toString()) && map.get(sb.toString())==1) \n            res.add(node);\n        map.put(sb.toString(), map.getOrDefault(sb.toString(), 0)+1);\n\n        return sb.toString();\n    }\n\n    private void serializeHelper(TreeNode node, StringBuilder sb){\n        if(node==null){\n            sb.append(\"null,\");\n            \n        } else{\n            sb.append(node.val+\",\");\n            serializeHelper(node.left, sb);\n            serializeHelper(node.right, sb);\n        }\n\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-duplicate-subtrees","has_notes":false,"flag_type":1}