{"id":1056100792,"question_id":652,"lang":"java","lang_name":"Java","time":"8 months, 3 weeks","timestamp":1695367990,"status":10,"status_display":"Accepted","runtime":"18 ms","url":"/submissions/detail/1056100792/","is_pending":"Not Pending","title":"Find Duplicate Subtrees","memory":"48.7 MB","code":"class Solution {\n\n    public List<TreeNode> findDuplicateSubtrees(TreeNode root) {\n        List<TreeNode> res = new LinkedList<TreeNode>();\n        HashMap<String,Integer> map = new HashMap<String,Integer>();\n        preOrder(root,map,res);\n        return res;\n    }\n    private String preOrder(TreeNode root,Map<String,Integer> map,List<TreeNode> res){\n        if(root==null){\n            return \"#\";\n        }\n        String left = preOrder(root.left, map, res);\n        String right = preOrder(root.right, map, res);\n        String serial = left + \",\" + right + \",\" + root.val;\n        if(map.containsKey(serial) && map.get(serial) == 1){\n            res.add(root);\n        }\n        map.put(serial,map.getOrDefault(serial,0)+1);\n        return serial;\n    }\n    \n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-duplicate-subtrees","has_notes":false,"flag_type":1}