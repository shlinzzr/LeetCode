{"id":1056088393,"question_id":652,"lang":"java","lang_name":"Java","time":"8 months, 3 weeks","timestamp":1695367026,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1056088393/","is_pending":"Not Pending","title":"Find Duplicate Subtrees","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n\n    Set<Integer> seen = new HashSet<>();\n\n    public List<TreeNode> findDuplicateSubtrees(TreeNode root) {\n   \n        List<TreeNode> res = new ArrayList<>();\n\n        HashMap<Integer, List<TreeNode>> map = new HashMap<>();\n\n        helper(root, map, res);\n\n        return res;\n\n    }\n\n    private void helper(TreeNode root, HashMap<Integer, List<TreeNode>> map  , List<TreeNode> res ){\n        if(root==null)\n            return;\n\n        if(map.containsKey(root.val)){\n            List<TreeNode> list = map.get(root.val);\n            for(TreeNode node : list){\n                if(isSameTree(node, root) && !seen.contains(root.val)){\n                    res.add(root);\n                    seen.add(root.val);\n                    break;\n                }\n                    \n            }\n        }\n\n        map.putIfAbsent(root.val, new ArrayList<>());\n        map.get(root.val).add(root);\n\n        if(root.left!=null)\n            helper(root.left, map, res);\n\n        if(root.right!=null)            \n            helper(root.right, map, res);\n\n    }\n\n    private boolean isContain(List<TreeNode> res, TreeNode a){\n\n        for(TreeNode t: res){\n            if(isSameTree(a, t))\n                return true;\n        }\n        return false;\n\n    }\n\n\n    private boolean isSameTree(TreeNode a, TreeNode b){\n        \n        if(a==null && b==null)\n            return true;\n\n        if(a==null || b==null || a.val!=b.val) \n            return false;\n\n        boolean left = isSameTree(a.left, b.left);\n        boolean right = isSameTree(a.right, b.right);\n\n        return left && right;\n    }\n}","compare_result":"1111110001111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110111111111101000000000000000000000000000000000000000000000000","title_slug":"find-duplicate-subtrees","has_notes":false,"flag_type":1}