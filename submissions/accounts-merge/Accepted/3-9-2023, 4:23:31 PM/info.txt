{"id":911961722,"question_id":721,"lang":"java","lang_name":"Java","time":"1 year, 3 months","timestamp":1678350211,"status":10,"status_display":"Accepted","runtime":"29 ms","url":"/submissions/detail/911961722/","is_pending":"Not Pending","title":"Accounts Merge","memory":"45.9 MB","code":"class Solution {\n    public List<List<String>> accountsMerge(List<List<String>> accounts) {\n        \n        \n        \n        int len= accounts.size();\n        int[] parents = new int[len];\n        for(int i=0; i<len; i++){\n            parents[i] = i;\n        }\n        \n        UnionFind uf = new UnionFind(len);\n        \n        \n        HashMap<String, Integer> emailToId = new HashMap<>();\n        for(int i=0; i<len ; i++){\n            List<String> list = accounts.get(i);\n            for(int j=1; j<list.size(); j++){\n                String email = list.get(j);\n                \n                if(emailToId.containsKey(email)){\n                    // parents[i] = emailToId.get(email);\n                    uf.union(emailToId.get(email), i);\n                } else{\n                    emailToId.put(email, i);\n                }\n            }\n        }\n        \n        HashMap<Integer, List<String>> idToEmails = new HashMap<>();\n        for(Map.Entry<String, Integer> en : emailToId.entrySet()){\n            String email = en.getKey();\n            int key = emailToId.get(email);\n            int root = uf.find(key);\n            \n            idToEmails.putIfAbsent(root, new ArrayList<>());\n            idToEmails.get(root).add(email);\n        }\n        \n        \n        List<List<String>> res = new ArrayList<>();\n        \n        for(Map.Entry<Integer, List<String>> en : idToEmails.entrySet()){\n            \n            List<String> list = en.getValue();\n            Collections.sort(list);\n            int id = en.getKey();\n            String usr = accounts.get(id).get(0);\n            list.add(0, usr);\n            \n            res.add(new ArrayList<>(list));\n            \n        }\n        return res;\n        \n        \n        \n    }\n    \n    private int find(int[] parents, int x){\n        \n        if(parents[x]==x)\n            return x;\n        \n        parents[x] = find(parents, parents[x]);\n        return parents[x];\n        \n    }\n    \n    class UnionFind{\n        \n        int[] parents;\n        int[] weights;\n        \n        public UnionFind(int n){\n            parents = new int[n];\n            weights = new int[n];\n            for(int i=0; i<n; i++){\n                parents[i] = i;\n                weights[i] = 1;\n            }\n            \n            \n            \n        }\n        \n        public void union(int a, int b){\n            \n            int rootA = find(a);\n            int rootB = find(b);\n            \n            if(rootA==rootB)\n                return;\n            \n            if(weights[rootA]>weights[rootB]){\n                weights[rootA] += weights[rootB];\n                parents[rootB] =  rootA;\n            }else{\n                weights[rootB] += weights[rootA];\n                parents[rootA] =  rootB;\n            }\n        }\n        \n        public int find(int x){\n            \n            if(parents[x]==x)\n                return x;\n            \n            parents[x] = find(parents[x]);\n            return parents[x];\n        }\n        \n    }\n    \n}","compare_result":"11111111111111111111111111111111111111111111111111","title_slug":"accounts-merge","has_notes":false,"flag_type":1}