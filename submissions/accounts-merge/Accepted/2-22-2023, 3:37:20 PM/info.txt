{"id":902770779,"question_id":721,"lang":"java","lang_name":"Java","time":"1 year, 3 months","timestamp":1677051440,"status":10,"status_display":"Accepted","runtime":"35 ms","url":"/submissions/detail/902770779/","is_pending":"Not Pending","title":"Accounts Merge","memory":"62.5 MB","code":"class Solution {\n    public List<List<String>> accountsMerge(List<List<String>> accounts) {\n        int size = accounts.size();\n        UnionFind uf = new UnionFind(size);\n        \n        \n        \n        HashMap<String, Integer> emailToId = new HashMap<>();\n        for(int i = 0; i < size; i++) {\n            List<String> list = accounts.get(i);\n            for(int j=1; j<list.size(); j++){\n                String email = list.get(j);\n                \n                if(emailToId.containsKey(email)){\n                    uf.union(emailToId.get(email), i);\n                    // uf.union(i, emailToId.get(email));\n                }else{\n                    emailToId.put(email, i);   \n                }\n            }\n        }\n        \n        \n        HashMap<Integer, List<String>> idToEmails = new HashMap<>();\n        for(String key : emailToId.keySet()) {\n            int root = uf.find(emailToId.get(key));\n            \n            idToEmails.putIfAbsent(root, new ArrayList<>());\n            idToEmails.get(root).add(key);\n        }\n        \n        List<List<String>> res =  new ArrayList<>();\n        for(Integer id : idToEmails.keySet()) {\n            List<String> emails = idToEmails.get(id);\n            Collections.sort(emails);\n            emails.add(0, accounts.get(id).get(0));\n            res.add(emails);\n        }\n        \n        return res;\n        \n    }\n    \n    \n    \n    \n    \n    class UnionFind{\n        \n        int[] parent;\n        int[] weight;\n        \n        \n        public UnionFind(int num){\n            parent = new int[num];\n            weight = new int[num];\n            \n            for(int i=0; i<num; i++){\n                parent[i] = i;\n                weight[i] = 1;\n            }\n        }\n        /*\n        private void union(int a, int b){\n            int roota = find(a);\n            int rootb = find(b);\n            if(roota==rootb)\n                return ;\n            \n            if(weight[roota]>weight[rootb]){\n                weight[roota] += weight[rootb];\n                parent[rootb] = roota;\n            }else{\n                weight[rootb] += weight[roota];\n                parent[roota] = rootb;\n            }\n        }\n        \n        \n        \n        private int find(int a){\n            if(parent[a]==a)\n                return a;\n            \n            // return find(parent[a]);\n            \n            parent[a] = find(a); // path compression\n            return parent[a];\n        }*/\n        \n         public void union(int a, int  b) {\n            int rootA = find(a);\n            int rootB = find(b);\n            \n            if (rootA == rootB) {\n                return;\n            }\n            \n            if (weight[rootA] > weight[rootB]) {\n                parent[rootB] = rootA;\n                weight[rootA] += weight[rootB];\n            } else {\n                parent[rootA] = rootB;\n                weight[rootB] += weight[rootA];\n            }\n        }\n        \n        public int find(int a) {\n            if (parent[a] == a) {\n                return a;\n            }\n            \n            parent[a] = find(parent[a]);\n            return parent[a];\n        }\n        \n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111","title_slug":"accounts-merge","has_notes":false,"flag_type":1}