{"id":1053399647,"question_id":1549,"lang":"java","lang_name":"Java","time":"8 months, 3 weeks","timestamp":1695114125,"status":10,"status_display":"Accepted","runtime":"69 ms","url":"/submissions/detail/1053399647/","is_pending":"Not Pending","title":"Longest Continuous Subarray With Absolute Diff Less Than or Equal to Limit","memory":"55.3 MB","code":"class Solution {\n    public int longestSubarray(int[] nums, int limit) {\n        int len = nums.length;\n\n        TreeMap<Integer, Integer> map = new TreeMap<>();\n        map.put(nums[0], 1);\n\n        int res = 0;\n\n        int ed=0;\n        for(int st=0; st<len; st++){\n            while(map.lastKey()- map.firstKey()<=limit){\n                res = Math.max(res, ed-st+1);\n                ed++;\n\n                if(ed<len)\n                    map.put(nums[ed], map.getOrDefault(nums[ed], 0)+1);\n                else\n                    break;\n            }\n\n            map.put(nums[st], map.get(nums[st])-1);\n            if(map.get(nums[st])==0)\n                map.remove(nums[st]);\n        }\n\n        return res;\n    }\n}\n\n//[8,2,4,7]","compare_result":"1111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-continuous-subarray-with-absolute-diff-less-than-or-equal-to-limit","has_notes":false,"flag_type":1}