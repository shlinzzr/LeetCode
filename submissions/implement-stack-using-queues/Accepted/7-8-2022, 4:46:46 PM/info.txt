{"id":741644811,"question_id":225,"lang":"java","lang_name":"Java","time":"1 year, 11 months","timestamp":1657270006,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/741644811/","is_pending":"Not Pending","title":"Implement Stack using Queues","memory":"42.4 MB","code":"class MyStack {\n\n  Queue<Integer> que;\n/** Initialize your data structure here. */\npublic MyStack() {\n    que = new LinkedList<>();\n}\n\n/** Push element x onto stack. */\npublic void push(int x) {\n    que.add(x);\n    for(int i=0; i<que.size()-1; i++) {\n        que.add(que.poll());\n    }\n}\n\n/** Removes the element on top of the stack and returns that element. */\npublic int pop() {\n    return que.remove();\n    \n}\n\n/** Get the top element. */\npublic int top() {\n    return que.peek();\n    \n}\n\n/** Returns whether the stack is empty. */\npublic boolean empty() {\n    return que.isEmpty();\n    \n}\n}\n\n/**\n * Your MyStack object will be instantiated and called as such:\n * MyStack obj = new MyStack();\n * obj.push(x);\n * int param_2 = obj.pop();\n * int param_3 = obj.top();\n * boolean param_4 = obj.empty();\n */","compare_result":"1111111111111111","title_slug":"implement-stack-using-queues","has_notes":false,"flag_type":1}