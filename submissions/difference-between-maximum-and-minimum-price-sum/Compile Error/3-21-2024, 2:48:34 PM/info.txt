{"id":1209787529,"question_id":2627,"lang":"java","lang_name":"Java","time":"2 months, 3 weeks","timestamp":1711003714,"status":20,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/1209787529/","is_pending":"Not Pending","title":"Difference Between Maximum and Minimum Price Sum","memory":"N/A","code":"class Solution {\n    Map<Integer, Set<Integer>> g;\n    // Map<Integer, Integer> sum1 = new HashMap<>();\n    // Map<Integer, Integer> sum2 = new HashMap<>();\n    long[] sum1;\n    long[] sum2;\n    long res = 0;\n    public long maxOutput(int n, int[][] edges, int[] price) {\n\n        sum1 = new long[n];\n        sum2 = new long[n];\n\n        g = new HashMap<>();\n        for(int[]e : edges){\n            g.putIfAbsent(e[0], new HashSet<>());\n            g.get(e[0]).add(e[1]);\n            g.putIfAbsent(e[1], new HashSet<>());\n            g.get(e[1]).add(e[0]);\n        }\n\n        dfs(0, -1, price);\n        dfs2(0, -1, price);\n\n        return res;\n\n    }\n\n    private void dfs(int cur, int parent,  int[] price){\n\n        if(g.get(cur).size()==1 && new ArrayList<>(g.get(cur)).get(0)==parent){\n            // no child\n          sum1[cur]=0;\n          sum2[cur]=price[cur];\n          return;\n        }\n\n        long maxSum1 = 0, maxSum2=0;\n        for(int next : g.get(cur)){\n            if(next==parent) continue;\n            dfs(next, cur, price);\n            maxSum1 = Math.max(maxSum1, sum1[next]);\n            maxSum2 = Math.max(maxSum2, sum2[next]);\n        }\n\n        sum1[cur] = maxSum1 + price[cur];\n        sum2[cur] = maxSum2 + price[cur];\n    }\n\n\n    private void dfs2(int cur, int parent,  int[] price){\n\n        List<long[]> arr1 = new ArrayList<>(); // sumVal, childNodeId\n        List<long[]> arr2 = new ArrayList<>();\n\n        long ans = sum1[cur];\n        if(cur!=0) ans = Math.max(ans, sum2[cur]);\n\n        for(int next : g.get(cur)){\n            if(next==parent) continue;\n\n            arr1.add(new long[] {sum1[next], next});\n            arr2.add(new long[] {sum2[next], next});\n        }\n\n        Collections.sort(arr1, (a,b)->a[0]-b[0]);\n        Collections.sort(arr2, (a,b)->a[0]-b[0]);\n\n        if(arr1.size()>=2){\n\n            if(arr1.get(0)[1]!=arr2.get(0)[1]){\n                ans = Math.max(ans ,arr1.get(0)[0] + arr2.get(0)[0] + price[cur]);\n            }else\n                ans = Math.max(ans, Math.max(arr.get(0)[0] + arr2.get(1)[0], arr1.get(1)[0]+arr2.get(0)[0]) + price[cur]);\n        }\n\n\n        res = Math.max(res, ans);\n    }\n}","compare_result":null,"title_slug":"difference-between-maximum-and-minimum-price-sum","has_notes":false,"flag_type":1}