{"id":763065304,"question_id":23,"lang":"java","lang_name":"Java","time":"1 year, 10 months","timestamp":1659427744,"status":10,"status_display":"Accepted","runtime":"6 ms","url":"/submissions/detail/763065304/","is_pending":"Not Pending","title":"Merge k Sorted Lists","memory":"48.3 MB","code":"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode mergeKLists(ListNode[] lists) {\n        \n        PriorityQueue<Tuple> pq = new PriorityQueue();\n        for(int i=0; i<lists.length; i++){\n            ListNode node = lists[i];\n            if(node!=null)\n                pq.offer(new Tuple(node.val, node));\n        }\n        \n        ListNode curr = new ListNode();\n        ListNode head = new ListNode();\n        head = curr;\n        \n        while(!pq.isEmpty()){\n            \n            Tuple t = pq.poll();\n            ListNode node = t.node;\n            curr.next = node;\n            curr = curr.next;\n            \n            if(node.next==null)\n                continue;\n            \n            pq.offer(new Tuple(node.next.val, node.next));\n        }\n        \n        return head.next;\n        \n    }\n}\nclass Tuple implements Comparable<Tuple>{\n    ListNode node;\n    int val;\n    \n    public Tuple(int val, ListNode node){\n        this.val = val;\n        this.node = node;\n    }\n    \n    @Override \n    public int compareTo(Tuple that){\n        return this.val-that.val;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"merge-k-sorted-lists","has_notes":false,"flag_type":1}