{"id":893947987,"question_id":23,"lang":"java","lang_name":"Java","time":"1 year, 4 months","timestamp":1675849655,"status":10,"status_display":"Accepted","runtime":"5 ms","url":"/submissions/detail/893947987/","is_pending":"Not Pending","title":"Merge k Sorted Lists","memory":"44.2 MB","code":"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode mergeKLists(ListNode[] lists) {\n        int len = lists.length;\n        \n        PriorityQueue<ListNode> pq = new PriorityQueue<>(\n            (a,b) -> Integer.compare(a.val, b.val)\n        \n        );\n        \n        for(int i=0; i<len; i++){\n            if(lists[i]!=null)\n                pq.add(lists[i]);\n        }\n        \n        ListNode dummy = new ListNode();\n        ListNode curr = dummy;\n        \n        while(pq.size()>0){\n            ListNode p = pq.poll();\n            \n            ListNode node = new ListNode(p.val);\n            curr.next = node;\n            curr=curr.next;\n            \n            if(p.next!=null){\n                pq.offer(p.next);\n            }\n        }\n        \n        return dummy.next;\n        \n        \n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"merge-k-sorted-lists","has_notes":false,"flag_type":1}