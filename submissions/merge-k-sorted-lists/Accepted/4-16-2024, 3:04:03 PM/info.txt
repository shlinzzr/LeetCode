{"id":1233737526,"question_id":23,"lang":"java","lang_name":"Java","time":"1 month, 3 weeks","timestamp":1713251043,"status":10,"status_display":"Accepted","runtime":"5 ms","url":"/submissions/detail/1233737526/","is_pending":"Not Pending","title":"Merge k Sorted Lists","memory":"44.2 MB","code":"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    class Tuple{\n        int val;\n        ListNode node;\n        int row;\n\n        public Tuple(int val, ListNode node, int row){\n            this.val=val;\n            this.node=node;\n            this.row = row;\n        }\n    }\n    public ListNode mergeKLists(ListNode[] lists) {\n\n\n        PriorityQueue<Tuple> pq = new PriorityQueue<>(\n            (a,b)-> a.val-b.val\n        ); // r, c\n\n        int len = lists.length;\n        for(int r=0; r<len; r++){\n            ListNode node = lists[r];\n            if(node==null) continue;\n\n            Tuple t = new Tuple(node.val, node, r);\n            pq.offer(t);   \n        }\n\n        ListNode dummy = new ListNode();\n        ListNode curr = dummy;\n        \n        while(!pq.isEmpty()){\n            Tuple t = pq.poll();\n            if(t==null) continue;\n            ListNode node = new ListNode(t.val);\n            curr.next = node;\n            curr = curr.next;\n\n            if(t.node.next!=null){\n                ListNode nxt = t.node.next;\n                pq.offer(new Tuple(nxt.val, nxt, t.row));\n            }\n        }\n\n        return dummy.next;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"merge-k-sorted-lists","has_notes":false,"flag_type":1}