{"id":984986254,"question_id":465,"lang":"java","lang_name":"Java","time":"11 months, 2 weeks","timestamp":1688357924,"status":10,"status_display":"Accepted","runtime":"14 ms","url":"/submissions/detail/984986254/","is_pending":"Not Pending","title":"Optimal Account Balancing","memory":"40.2 MB","code":"class Solution {\n    public int minTransfers(int[][] tran) {\n        int len = tran.length;\n        \n        Map<Integer, Integer> map = new HashMap<>();\n        \n        for(int i=0; i<len; i++){\n            int f = tran[i][0];\n            int t = tran[i][1];\n            int a = tran[i][2];\n            \n            map.putIfAbsent(f ,0);\n            map.putIfAbsent(t ,0);\n            \n            map.put(f, map.get(f)-a);\n            map.put(t, map.get(t)+a);\n        }\n        \n        List<Integer> list = new ArrayList<>();\n        \n        for(Map.Entry<Integer, Integer> en : map.entrySet()){\n            \n            if(en.getValue()!=0)\n                list.add(en.getValue());\n        }\n        \n        return  dfs(0, list);\n        \n    }\n    \n    \n    private int dfs(int k, List<Integer> list){\n        if(k==list.size())\n            return 0;\n        \n        int cur = list.get(k);\n        if(cur==0)\n            return dfs(k+1, list);\n        \n        int min = Integer.MAX_VALUE;\n        for(int i=k+1; i<list.size(); i++){\n            int next = list.get(i);\n            if(next*cur<0){\n                list.set(i, cur+next);\n                min = Math.min(min , 1+dfs(k+1, list));\n                list.set(i, next);\n                \n                if(cur+next==0) break;\n            }\n        }\n        return min;\n    }\n    \n    \n    \n    \n    \n}\n\n","compare_result":"111111111111111111111111111111111111","title_slug":"optimal-account-balancing","has_notes":false,"flag_type":1}