{"id":873181574,"question_id":550,"lang":"java","lang_name":"Java","time":"1 year, 5 months","timestamp":1673083984,"status":10,"status_display":"Accepted","runtime":"5 ms","url":"/submissions/detail/873181574/","is_pending":"Not Pending","title":"Shortest Path to Get Food","memory":"46.6 MB","code":"class Solution {\n    public int getFood(char[][] grid) {\n        int h = grid.length;\n        int w = grid[0].length;\n        \n        \n        Queue<int[]> q = new LinkedList<>();\n        boolean[][] seen = new boolean[h][w];\n        \n        \n        for(int i=0; i<h; i++){\n            for(int j=0; j<w; j++){\n                if(grid[i][j]=='*'){\n                    q.add(new int[] {i, j});\n                    seen[i][j]=true;\n                }\n                \n            }\n        }\n        \n        int step=1;\n        \n        int[][] dirs = new int[][]{{0,1} ,{0,-1}, {1,0}, {-1,0}};\n        while(!q.isEmpty()){\n            \n            for(int s=q.size(); s>0; s--){\n                int[] p = q.poll();\n            \n                for(int[] d : dirs){\n\n                    int r = p[0]+d[0];\n                    int c = p[1]+d[1];\n\n                    if(r>=0 && r<h && c>=0 && c<w && seen[r][c]==false){\n                        \n                        seen[r][c]=true;\n                        if(grid[r][c]=='#'){\n                            return step;\n                        }else if(grid[r][c]=='O'){\n                            q.add(new int[]{r,c});\n                        }\n                    }\n                }\n            }\n            step++;\n        }\n        \n        return -1;\n        \n    }\n    \n    \n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"shortest-path-to-get-food","has_notes":false,"flag_type":1}