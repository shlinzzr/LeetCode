{"id":925301748,"question_id":895,"lang":"java","lang_name":"Java","time":"1 year, 2 months","timestamp":1680256241,"status":10,"status_display":"Accepted","runtime":"138 ms","url":"/submissions/detail/925301748/","is_pending":"Not Pending","title":"Shortest Path to Get All Keys","memory":"51.1 MB","code":"class Solution {\n    public int shortestPathAllKeys(String[] grid) {\n\n        int n = grid.length, m = grid[0].length(), start[] = new int[3], KEYS = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                char c = grid[i].charAt(j);\n                if (c == '@') { start[1] = i; start[2] = j; }\n                else if ('a' <= c && c <= 'f') KEYS |= (1 << (c-'a'));                                    \n            }\n        }\n\n        Queue<int[]> queue = new LinkedList<>();\n        queue.add(start);\n\n        Set<String> visited = new HashSet<>();\n        visited.add(start[0] + \" \" + start[1] + \" \" + start[2]);\n\n        int moves = 0, Ds[][] = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};\n        while (!queue.isEmpty()) {\n            int size = queue.size();\n            while (size-- > 0) {\n                int[] A = queue.poll();\n                for (int[] D : Ds) {\n                    int i = A[1] + D[0], j = A[2] + D[1], keys = A[0];\n                    if (i < 0 || i >= n || j < 0 || j >= m) continue;                   // out of grid\n                    char c = grid[i].charAt(j);\n\n                    if (c == '#') continue;                                             // wall\n                    if ('A' <= c && c <= 'F' && ((A[0] >> (c-'A')) & 1) == 0) continue; // no key\n                    if ('a' <= c && c <= 'f') keys = A[0] | (1 << (c-'a'));             // update key\n                    if (visited.contains(keys + \" \" + i + \" \" + j)) continue;           // visited\n                    if (keys == KEYS) return moves+1;                                   // found !!!\n                    visited.add(keys + \" \" + i + \" \" + j);\n                    queue.offer(new int[] {keys, i, j});\n                }\n            }\n            moves++;\n        }\n\n        return -1; // not found\n    }\n}","compare_result":"11111111111111111111111111111111111","title_slug":"shortest-path-to-get-all-keys","has_notes":false,"flag_type":1}