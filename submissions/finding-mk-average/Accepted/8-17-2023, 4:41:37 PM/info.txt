{"id":1023778354,"question_id":1953,"lang":"java","lang_name":"Java","time":"10Â months","timestamp":1692261697,"status":10,"status_display":"Accepted","runtime":"51 ms","url":"/submissions/detail/1023778354/","is_pending":"Not Pending","title":"Finding MK Average","memory":"77.4 MB","code":"class MKAverage {\n\n    int m;\n    int k;\n    TreeMap<Integer, Integer> left;\n    TreeMap<Integer, Integer> mid;\n    TreeMap<Integer, Integer> right;\n    Queue<Integer> q;\n    long sum = 0;\n    int leftCnt=0, rightCnt=0, midCnt=0;\n    \n    public MKAverage(int m, int k) {\n        this.m = m;\n        this.k = k;\n        left = new TreeMap<>();\n        mid = new TreeMap<>();\n        right = new TreeMap<>();\n        q = new LinkedList<>();\n    }\n    \n    public void addElement(int num) {\n        \n        if (q.size() < m)\n        {                        \n            q.offer(num);\n            mid.put(num, mid.getOrDefault(num,0)+1);\n            midCnt++;\n            sum += num;\n\n            if (q.size()==m)\n            {\n                while (leftCnt<k)\n                {\n                    sum -= mid.firstKey();\n                    shiftLeft(left, mid);\n                    midCnt--;\n                    leftCnt++;\n                }                    \n                while (rightCnt<k)\n                {\n                    sum -= mid.lastKey();\n                    shiftRight(mid, right);\n                    midCnt--;\n                    rightCnt++;\n                }                    \n            }\n        }            \n        else if (q.size() == m)\n        {\n            // add the new element\n            q.offer(num);\n            if (!left.isEmpty() && num <= left.lastKey()){\n                left.put(num, left.getOrDefault(num,0)+1);\n                leftCnt++;\n                \n            }else if (!right.isEmpty() && num >= right.firstKey()){\n                right.put(num, right.getOrDefault(num,0)+1);\n                rightCnt++;\n                \n            } else  { // mid\n                mid.put(num, mid.getOrDefault(num,0)+1);\n                midCnt++;\n                sum += num;\n            }\n\n            if (leftCnt > k)\n            {   \n                sum += left.lastKey();\n                shiftRight(left, mid);\n                leftCnt--;\n                midCnt++;\n            }            \n            if (rightCnt > k)\n            {\n                sum += right.firstKey();\n                shiftLeft(mid, right);\n                rightCnt--;\n                midCnt++;\n            }\n            \n            // delete the old element\n            int x = q.poll();\n            if (left.containsKey(x)){\n                leftCnt--;\n                left.put(x, left.get(x)-1);\n                if(left.get(x)==0)\n                    left.remove(x);\n                \n            }else if (right.containsKey(x)){\n                rightCnt--;\n                right.put(x, right.get(x)-1);\n                if(right.get(x)==0)\n                    right.remove(x);\n                \n            }else { // mid\n                sum -= x;\n                midCnt--;\n                mid.put(x, mid.get(x)-1);\n                if(mid.get(x)==0)\n                    mid.remove(x);\n            }                \n                        \n            if (leftCnt < k)\n            {\n                sum -= mid.firstKey();\n                shiftLeft(left, mid);                \n                midCnt--;\n                leftCnt++;\n            }\n            if (rightCnt < k)\n            {\n                sum -= mid.lastKey();\n                shiftRight(mid, right);\n                midCnt--;\n                rightCnt++;\n            }                        \n        }\n        \n        \n    }\n    \n    private void shiftLeft(TreeMap<Integer, Integer> A, TreeMap<Integer, Integer> B){\n       \n        A.put(B.firstKey(), A.getOrDefault(B.firstKey(),0)+1);\n        B.put(B.firstKey(), B.get(B.firstKey())-1);\n        if(B.get(B.firstKey())==0)\n            B.remove(B.firstKey());\n    }\n    \n    private void shiftRight(TreeMap<Integer, Integer> A, TreeMap<Integer, Integer> B){\n    \n        B.put(A.lastKey(), B.getOrDefault(A.lastKey(),0)+1);\n        A.put(A.lastKey(), A.get(A.lastKey())-1);\n        if(A.get(A.lastKey())==0)\n            A.remove(A.lastKey());\n    }\n    \n    \n    public int calculateMKAverage() {\n        if (q.size() < m)\n            return -1;\n        else\n            return (int) ( sum / (m-2*k) );\n        \n    }\n}\n\n/**\n * Your MKAverage object will be instantiated and called as such:\n * MKAverage obj = new MKAverage(m, k);\n * obj.addElement(num);\n * int param_2 = obj.calculateMKAverage();\n */","compare_result":"11111111111111111","title_slug":"finding-mk-average","has_notes":false,"flag_type":1}