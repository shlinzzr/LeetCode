{"id":1241432419,"question_id":279,"lang":"java","lang_name":"Java","time":"1 month, 2 weeks","timestamp":1714026610,"status":10,"status_display":"Accepted","runtime":"42 ms","url":"/submissions/detail/1241432419/","is_pending":"Not Pending","title":"Perfect Squares","memory":"42.6 MB","code":"class Solution {\n    public int numSquares(int n) {\n        \n        \n        int[] dp = new int[n+1]; // least num of perfect sq sum to n when meet n\n        Arrays.fill(dp, Integer.MAX_VALUE);\n        dp[1] =1;\n        \n        for(int i=1; i<=n; i++){\n            \n            for(int j=(int)Math.sqrt(i); j>0; j--){\n                \n                if(j*j==i) dp[i] = 1;\n                else{\n                    dp[i] =  Math.min(dp[i],  dp[j*j] + dp[i-j*j]);\n                }\n            }\n            \n        }\n        \n        return dp[n];\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n//         int res= 0 ;\n//         while(n>0){\n//             for(int i=(int)Math.sqrt(n); i>0 && n>0; i--){\n//                 n-= i*i;\n//                 res++;\n//                 i=(int)Math.sqrt(n);\n//             }\n//         }\n//         return res;\n        \n    }\n}","compare_resulttitle_slug":"perfect-squares","has_notes":false,"flag_type":1}