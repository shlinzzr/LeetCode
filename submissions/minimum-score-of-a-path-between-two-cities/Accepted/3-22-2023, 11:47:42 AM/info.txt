{"id":919881047,"question_id":2582,"lang":"java","lang_name":"Java","time":"1 year, 2 months","timestamp":1679456862,"status":10,"status_display":"Accepted","runtime":"11 ms","url":"/submissions/detail/919881047/","is_pending":"Not Pending","title":"Minimum Score of a Path Between Two Cities","memory":"114.7 MB","code":"class Solution {\n    \n    class UnionFind{\n        \n        int[] parent;\n        \n        public UnionFind(int n){\n            parent = new int[n];\n            for(int i=0; i<n; i++){\n                parent[i]= i;\n            }\n        \n        }\n        \n        public int find(int x){\n            \n            if(parent[x]!=x)\n                parent[x] = find(parent[x]);\n            \n            return parent[x];\n        }\n        \n        public void union(int a, int b){\n            \n            \n            if(find(a)==find(b))\n                return;\n            \n            if(find(a)<=find(b)){\n                parent[find(b)] = find(a);\n            }else{\n                parent[find(a)] = find(b);\n            }\n        }\n        \n    }\n    \n    \n    \n    public int minScore(int n, int[][] roads) {\n        \n        UnionFind uf = new UnionFind(n+1);\n      \n        \n        for(int[] r : roads){\n            int a = r[0], b=r[1];\n            if(uf.find(a)!=uf.find(b))\n                uf.union(a, b);\n        }\n        \n        int min = Integer.MAX_VALUE;\n        for(int[] r : roads){\n            int a = r[0], b=r[1], d=r[2];\n            if(uf.find(a)==uf.find(1)){\n                min = Math.min(min, d);\n            }\n        }\n        \n        return min;\n    }\n}","compare_result":"11111111111111111111111111111111111111111","title_slug":"minimum-score-of-a-path-between-two-cities","has_notes":false,"flag_type":1}