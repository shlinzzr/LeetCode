{"id":919871502,"question_id":2582,"lang":"java","lang_name":"Java","time":"1 year, 2 months","timestamp":1679455364,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/919871502/","is_pending":"Not Pending","title":"Minimum Score of a Path Between Two Cities","memory":"N/A","code":"class Solution {\n    \n    class UnionFind{\n        \n        int[] parent;\n        int[] weight;\n        \n        public UnionFind(int n){\n            parent = new int[n];\n            weight = new int[n];\n        }\n        \n        public int find(int x){\n            \n            if(parent[x]==x)\n                return x;\n            \n            parent[x] = find(parent[x]);\n            \n            return parent[x];\n        }\n        \n        public void union(int a, int b){\n            \n            if(find(a)==find(b))\n                return;\n            \n            if(weight[a] >= weight[b]){\n                weight[a] += weight[b];\n                parent[b] = a;\n            }else{\n                weight[b] += weight[a];\n                parent[a] = b;\n            }\n        }\n        \n    }\n    \n    \n    \n    public int minScore(int n, int[][] roads) {\n        \n        UnionFind uf = new UnionFind(n+1);\n        for(int i=0; i<=n; i++){\n            uf.parent[i]= i;\n        }\n        \n        \n        for(int[] r : roads){\n            if(uf.find(r[0])!=uf.find(r[1]))\n                uf.union(r[0], r[1]);\n        }\n        \n        int min = Integer.MAX_VALUE;\n        for(int[] r : roads){\n            \n            if(uf.find(r[0])==uf.find(1)){\n                min = Math.min(min, r[2]);\n            }\n        }\n        \n        return min;\n    }\n}","compare_result":"11111111111111011011111111011111111010111","title_slug":"minimum-score-of-a-path-between-two-cities","has_notes":false,"flag_type":1}