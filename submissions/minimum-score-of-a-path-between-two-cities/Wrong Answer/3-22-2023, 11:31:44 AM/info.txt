{"id":919874906,"question_id":2582,"lang":"java","lang_name":"Java","time":"1 year, 2 months","timestamp":1679455904,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/919874906/","is_pending":"Not Pending","title":"Minimum Score of a Path Between Two Cities","memory":"N/A","code":"class Solution {\n    \n    class UnionFind{\n        \n        int[] parent;\n        int[] weight;\n        \n        public UnionFind(int n){\n            parent = new int[n];\n            weight = new int[n];\n            for(int i=0; i<n; i++){\n                parent[i]= i;\n            }\n        \n        }\n        \n        public int find(int x){\n            \n            if(parent[x]!=x)\n                parent[x] = find(parent[x]);\n            \n            return parent[x];\n        }\n        \n        public void union(int a, int b){\n            \n            if(find(a)==find(b))\n                return;\n            \n            // if(weight[a] >= weight[b]){\n            if(find(a)<find(b)){\n                weight[a] += weight[b];\n                parent[b] = a;\n            }else{\n                weight[b] += weight[a];\n                parent[a] = b;\n            }\n        }\n        \n    }\n    \n    \n    \n    public int minScore(int n, int[][] roads) {\n        \n        UnionFind uf = new UnionFind(n+1);\n      \n        \n        for(int[] r : roads){\n            int a = r[0], b=r[1];\n            if(uf.find(a)!=uf.find(b))\n                uf.union(a, b);\n        }\n        \n        int min = Integer.MAX_VALUE;\n        for(int[] r : roads){\n            int a = r[0], b=r[1], d=r[2];\n            if(uf.find(a)==uf.find(1) || uf.find(b)==uf.find(1)){\n                min = Math.min(min, d);\n            }\n        }\n        \n        return min;\n    }\n}","compare_result":"11111111011111011000001111111111111110111","title_slug":"minimum-score-of-a-path-between-two-cities","has_notes":false,"flag_type":1}