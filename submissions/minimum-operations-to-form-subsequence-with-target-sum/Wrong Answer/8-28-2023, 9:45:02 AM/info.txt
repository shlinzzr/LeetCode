{"id":1033659727,"question_id":3025,"lang":"java","lang_name":"Java","time":"9 months, 2 weeks","timestamp":1693187102,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1033659727/","is_pending":"Not Pending","title":"Minimum Operations to Form Subsequence With Target Sum","memory":"N/A","code":"class Solution {\n    public int minOperations(List<Integer> nums, int target) {\n//         int siz = nums.size();\n        \n        \n//         String need_str = Integer.toBinaryString(target);  //100000\n//         char[] arr = need_str.toCharArray(); \n//         reverse(arr); // 000001\n//         List<Integer> need = new ArrayList<>();\n//         for(int i=0; i<arr.length; i++){\n//             if(arr[i]=='1')\n//                 need.add(i);\n//         }\n        \n        \n//         int[] have = new int[32];\n//         for(int n : nums){\n//             String s = Integer.toBinaryString(n); //100000\n//             have[s.length()-1]++:\n//         }\n        \n        \n//         for(int i=0; i<31 i++){\n            \n//             if(have[i]<\n            \n            \n//         }\n        \n//         // 12 1100\n        \n//         // need 2,3\n//         // have 1 1 2 32 => 0 1 5\n        \n        \n        PriorityQueue<Integer> pq = new PriorityQueue<>();\n        \n        int sum = 0;\n        for(int n : nums){\n            sum+=n;\n            pq.offer(n);\n        }\n        \n        if(sum<target)\n            return -1;\n        \n        \n        int ans = 0;\n        while(target>0){\n            \n            int p = pq.poll();\n            sum-=p;\n            \n            \n            if(p<=target){\n                target-=p;\n                \n            }else{\n                sum+=p;\n                ans++;\n                pq.offer(p/2);\n                pq.offer(p/2);\n            }\n            \n            \n            if(pq.isEmpty() && target!=0){\n                return -1;\n            }\n\n            \n            \n        }\n        \n        return ans;\n    }\n    \n        \n        \n        \n        \n        \n    \n    \n//     private void reverse(char[] arr){\n        \n//         int len = arr.length;\n        \n//         for(int i=0; i<len/2; i++){\n         \n//             char tmp = arr[i];\n//             arr[i] = arr[len-i-1];\n//             arr[len-i-1]=tmp;\n            \n//         }\n        \n        \n//     }\n    \n}","compare_result":"11111111111111010101011111010101010111010101010111010101010101010101110101010101111101010101010101010101010101010101010101010111111010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010111100000000000000000000000010000000000000011000000000100000000000001000000000100000000000000000000000010000000000000000000000000000000010000000000000000000000000000101111110","title_slug":"minimum-operations-to-form-subsequence-with-target-sum","has_notes":false,"flag_type":1}