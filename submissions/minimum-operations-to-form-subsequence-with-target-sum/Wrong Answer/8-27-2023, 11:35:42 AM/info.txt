{"id":1032807227,"question_id":3025,"lang":"java","lang_name":"Java","time":"9 months, 2 weeks","timestamp":1693107342,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1032807227/","is_pending":"Not Pending","title":"Minimum Operations to Form Subsequence With Target Sum","memory":"N/A","code":"class Solution {\n    public int minOperations(List<Integer> nums, int target) {\n        int sum =0;\n        for(int n : nums){\n            sum+=n;\n        }\n        \n        if(sum<target)\n            return -1;\n        \n        \n        String s = Integer.toBinaryString(target);\n        System.out.println(s);\n        \n        char[] tarr = s.toCharArray(); //12 => 1100\n        List<Integer> need= new ArrayList<>();\n\n        int max = 0;\n        for(int i=0; i<tarr.length;i++ ){\n            \n            if(tarr[i]=='1'){\n                need.add(tarr.length-i-1);\n                max = Math.max(max, tarr.length-i-1);\n            }\n        }\n        \n        \n        \n        Set<Integer> set = new HashSet<>();\n        \n        \n        int smax = 0;\n        int min = Integer.MAX_VALUE;\n        for(int n : nums){\n            int idx = Integer.toBinaryString(n).length()-1; //10\n            \n            // need.remove(idx);\n            while(set.contains(idx)){\n                idx++;\n            }\n            \n            set.add(idx);\n            smax = Math.max(smax, idx);\n        }\n        \n        if(need.size()==0)\n            return 0;\n        \n        if(smax<max)\n            return -1;\n        \n        \n        // System.out.println(\"Set=\"+set);\n        \n        \n        //  7 5 2\n        //  8\n\n        Collections.sort(need);\n        \n        // System.out.println(\"need=\"+need);\n        \n        int res = 0;\n        for(int nd : need){\n            // System.out.println(\"nd=\"+nd);\n            while(!set.contains(nd)){\n                set.add(nd);\n                nd++;\n                res++;\n            }\n        }\n        \n        \n        \n        \n        \n        \n        return res;\n    }\n}","compare_resulttitle_slug":"minimum-operations-to-form-subsequence-with-target-sum","has_notes":false,"flag_type":1}