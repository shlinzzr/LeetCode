{"id":1176803783,"question_id":1604,"lang":"java","lang_name":"Java","time":"3 months, 3 weeks","timestamp":1708073892,"status":10,"status_display":"Accepted","runtime":"197 ms","url":"/submissions/detail/1176803783/","is_pending":"Not Pending","title":"Least Number of Unique Integers after K Removals","memory":"61.6 MB","code":"class Solution {\r\n    public int findLeastNumOfUniqueInts(int[] arr, int k) {\r\n        TreeMap<Integer, Integer> map = new TreeMap<>();\r\n\r\n        for(int a : arr){\r\n            map.put(a, map.getOrDefault(a, 0)+1);\r\n        }\r\n\r\n        PriorityQueue<Map.Entry<Integer, Integer>> pq = new PriorityQueue<>(\r\n            (a,b) -> a.getValue()-b.getValue()\r\n        );\r\n\r\n        pq.addAll(map.entrySet());\r\n\r\n        while(k>0){\r\n\r\n            if(k>=pq.peek().getValue()){\r\n                k-=pq.poll().getValue();\r\n            }else{\r\n                k=0;\r\n            }\r\n        }\r\n\r\n        return pq.size();\r\n    }\r\n\r\n}","compare_result":"1111111111111111111111111111111111111111111","title_slug":"least-number-of-unique-integers-after-k-removals","has_notes":false,"flag_type":1}