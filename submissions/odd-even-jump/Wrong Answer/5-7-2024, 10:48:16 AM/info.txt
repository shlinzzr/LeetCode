{"id":1251368193,"question_id":1017,"lang":"java","lang_name":"Java","time":"1 month, 1 week","timestamp":1715050096,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1251368193/","is_pending":"Not Pending","title":"Odd Even Jump","memory":"N/A","code":"class Solution {\n    public int oddEvenJumps(int[] arr) {\n        int len = arr.length;\n        \n//         i -> j\n//         odd : arr[i]<= arr[j](smallest val with smallest idx)\n//         even : arr[i]>= arr[j](largest val with smallest idx)\n        \n//         good: can reach end of arr (arr.length-1)\n//         return # of good idx\n        \n        TreeMap<Integer, Integer> map = new TreeMap<>();\n        \n        boolean[] higher = new boolean[len];\n        boolean[] lower = new boolean[len];\n        \n        higher[len-1] = true;\n        lower[len-1] = true;\n        map.put(arr[len-1], len-1);\n        \n        /*\n        higher            true\n                    val\n        lower             true\n        */\n        \n        int res = 0;\n        for(int i=len-2; i>=0; i--){\n            \n            int val = arr[len-2];\n            \n            Integer hi = map.ceilingKey(val);\n            if(hi!=null){\n                lower[i] = higher[map.get(hi)];\n            }\n            \n            Integer lo = map.floorKey(val);\n            if(lo!=null){\n                higher[i] = lower[map.get(lo)];   \n            }\n            \n            if(lower[i]) res++;\n            \n            map.put(val, i);\n            \n            \n        }\n        return res;\n    }\n}","compare_result":"10001000000000000001000000010001000001000000000000000000000000000","title_slug":"odd-even-jump","has_notes":false,"flag_type":1}