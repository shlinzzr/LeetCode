{"id":1155237850,"question_id":324,"lang":"java","lang_name":"Java","time":"4 months, 2 weeks","timestamp":1706073195,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1155237850/","is_pending":"Not Pending","title":"Wiggle Sort II","memory":"N/A","code":"class Solution {\n    public void wiggleSort(int[] nums) {\n        \n        // sort & partitiom : O(nlgn)/ \n        int len = nums.length;\n\n        quickselect(nums, 0, len-1, len/2);\n        int mid = nums[len/2];\n\n        // for(int i=1; i<len/2; i+=2){\n        //     swap(nums, i, len-i);\n        // }\n\n        int largePos = 1; //Odd position from start for larger than median numbers\n        int smallPos = len%2==0 ? len-2: len-1; //Even position from end for smaller than median numbers\n        int cur = 0;\n        while(cur<len) {\n\t\t\t//Avoiding already checked even positions from the end\n            if(nums[cur]<mid && (cur<smallPos || (cur>=smallPos && cur%2!=0))) {\n                swap(nums, cur, smallPos);\n                smallPos-=2;\n            }\n\t\t\t//Avoiding already checked odd positions from the start\n            else if(nums[cur]>mid && (largePos<cur || (largePos>=cur && cur%2==0))) {\n                swap(nums, cur, largePos);\n                largePos+=2;\n            }\n            \n            else cur++;\n        }\n       \n    }\n\n    private void quickselect(int[] nums, int st, int ed, int k){\n\n        if(st>=ed) return;\n\n        // select rightmost as pivot & return pivotIdx where rightmost value shoule be\n        int pivotIdx = partition_select(nums, st, ed-1, ed);\n        swap(nums, pivotIdx, ed);\n\n        if(k==pivotIdx) return;\n        if(k<pivotIdx)\n            quickselect(nums, st, pivotIdx, k);\n        else \n            quickselect(nums, pivotIdx+1, ed, k);\n    }\n\n    private int partition_select(int[] nums, int st, int ed, int p){\n        while(st<=ed){\n            if(nums[st]>nums[p]){\n                swap(nums, st, ed);\n                ed--;\n            }else \n                st++;\n        }\n\n        return st;\n    }\n\n    private void swap(int[] nums, int a, int b){\n        int t = nums[a];\n        nums[a] = nums[b];\n        nums[b] = t;\n    }\n}","compare_result":"1100000000000000000000000000000000000000000000000000","title_slug":"wiggle-sort-ii","has_notes":false,"flag_type":1}