{"id":1278353934,"question_id":1969,"lang":"java","lang_name":"Java","time":"1 week","timestamp":1717583447,"status":10,"status_display":"Accepted","runtime":"80 ms","url":"/submissions/detail/1278353934/","is_pending":"Not Pending","title":"Maximum Number of Accepted Invitations","memory":"51.2 MB","code":"class Solution {\n    public int maximumInvitations(int[][] grid) {\n        int m = grid.length;\n        int n = grid[0].length;\n\n        int[] girlFixed = new int[n];\n        Arrays.fill(girlFixed, -1);\n\n        // buildmap\n        HashMap<Integer, List<Integer>> map = new HashMap<>();\n        for(int i=0; i<m; i++){\n            for(int j=0; j<n; j++){\n                if(grid[i][j]==1){\n                    map.putIfAbsent(i, new ArrayList<>());\n                    map.get(i).add(j);\n                }\n            }\n        }\n\n        int cnt= 0 ;\n        for(int i=0; i<m; i++){ // loop all boy\n            Set<Integer> seen = new HashSet<>();\n            if(dfs( i, seen, map, girlFixed)){\n                cnt++;\n            }\n        }\n\n        return cnt;\n    }\n\n    private boolean dfs(int boy, Set<Integer> seen,  HashMap<Integer, List<Integer>> map, int[] girlFixed ){\n        for(int next : map.getOrDefault(boy, new ArrayList<>())){\n            if(!seen.contains(next)){\n                seen.add(next);\n                //女生還沒填的話就填男生, 如果已經填了男生, 就用已填的男生去配別的女生看看\n                if(girlFixed[next]==-1 || dfs(girlFixed[next], seen, map, girlFixed)){\n                    girlFixed[next] = boy;\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-number-of-accepted-invitations","has_notes":false,"flag_type":1}