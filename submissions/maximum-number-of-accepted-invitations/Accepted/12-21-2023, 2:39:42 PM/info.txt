{"id":1124854647,"question_id":1969,"lang":"java","lang_name":"Java","time":"5 months, 3 weeks","timestamp":1703140782,"status":10,"status_display":"Accepted","runtime":"72 ms","url":"/submissions/detail/1124854647/","is_pending":"Not Pending","title":"Maximum Number of Accepted Invitations","memory":"52.9 MB","code":"class Solution {\n    /*\n        Concept : Maximum Bipartite graph\n    */\n    public int maximumInvitations(int[][] grid) {\n        int m = grid.length; // boys\n        int n = grid[0].length; // girls\n\n        int[] girlFixed = new int[n];\n\n        for (int i = 0; i < n; i++) {\n            girlFixed[i] = -1;\n        }\n\n        int invitations = 0;\n\n        for (int i = 0; i < m; i++) {\n            Set<Integer> seenGirl = new HashSet<>();\n\n            if (dfs(grid, i, seenGirl, girlFixed)) {\n                invitations++;\n            }\n        }\n        return invitations;\n    }\n\n    private boolean dfs(int[][] grid, int boy, Set<Integer> seenGirl, int[] girlFixed) {\n        int m = grid.length; // boys\n        int n = grid[0].length; // girls\n\n        for (int i = 0; i < n; i++) {\n            if (grid[boy][i] == 1 && !seenGirl.contains(i)) {\n                seenGirl.add(i);\n                if (girlFixed[i] == -1 || dfs(grid, girlFixed[i], seenGirl, girlFixed)) {\n                    girlFixed[i] = boy;\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-number-of-accepted-invitations","has_notes":false,"flag_type":1}