{"id":893179033,"question_id":255,"lang":"java","lang_name":"Java","time":"1 year, 4 months","timestamp":1675755472,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/893179033/","is_pending":"Not Pending","title":"Verify Preorder Sequence in Binary Search Tree","memory":"N/A","code":"class Solution {\n    public boolean verifyPreorder(int[] preorder) {\n        \n        int len = preorder.length;\n        \n        Stack<Integer> st = new Stack<>();\n        \n        if(len==0 || len==1)\n            return true;\n        \n        int root = preorder[0];\n        System.out.println(root);\n        \n        int i=1;\n        for(; i<len ; i++){\n            int p = preorder[i];\n            if(p>root){\n                break;\n            }\n        }\n        \n        for(int j=i; j<len; j++){\n            int p = preorder[j];\n            if(p<root)\n                return false;\n            }\n            // System.out.println(i);\n            boolean left = (1>i-1)? true : verifyPreorder(Arrays.copyOfRange(preorder, 1, i-1));\n            boolean right = (i>len)? true : verifyPreorder(Arrays.copyOfRange(preorder, i, len));\n\n\n            return left && right;\n        \n    }\n}","compare_result":"1111111111111111111111111111111101111000111111111110110110111","title_slug":"verify-preorder-sequence-in-binary-search-tree","has_notes":false,"flag_type":1}