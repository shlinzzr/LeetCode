{"id":915408057,"question_id":2652,"lang":"java","lang_name":"Java","time":"1 year, 3 months","timestamp":1678853199,"status":10,"status_display":"Accepted","runtime":"85 ms","url":"/submissions/detail/915408057/","is_pending":"Not Pending","title":"Count Number of Possible Root Nodes","memory":"129.8 MB","code":"class Solution {\n    private int[] parents; //parents[i] => parent of vertex i if tree was rooted at vertex 0.\n    int answer=0;      //required answer\n    int k;\n    List<List<Integer>> tree;\n    List<HashSet<Integer>> guess_graph;\n    public int rootCount(int[][] edges, int[][] guesses, int k) {\n        this.tree = new ArrayList<>();\n        this.guess_graph = new ArrayList<>();\n        this.k = k;\n        int n = edges.length+1;\n        for(int i=0;i<n;i++) {\n            tree.add(new ArrayList<>());   //Initialize tree and guesses\n            guess_graph.add(new HashSet<>());\n        }\n        for(int[] edge: edges){\n            tree.get(edge[0]).add(edge[1]);  //Fill the tree\n            tree.get(edge[1]).add(edge[0]);\n        }\n        for(int[] g: guesses){\n            guess_graph.get(g[0]).add(g[1]); //Fill guesses\n        }\n        parents = new int[n];\n        int correct_guesses = 0;\n        fill_parent(0,-1);  //Fill the parents array\n        for(int i=1;i<n;i++){\n            int p = parents[i];\n            if(guess_graph.get(p).contains(i)) correct_guesses++;  //If its a correct guess increase the number of guesses\n        }\n        if(correct_guesses >= k) answer++;  //If 0 is a possible node increase answer\n        for(int c: tree.get(0)) dfs(c,0, correct_guesses); //Second dfs\n        return answer;\n    }\n    private void fill_parent(int node,int parent){\n        parents[node] = parent;\n        for(int child: tree.get(node)){\n            if(child==parent) continue;\n            fill_parent(child,node);\n        }\n    }\n    private void dfs(int node, int parent,int correct_guesses){\n        int cur = correct_guesses;\n        if(guess_graph.get(parent).contains(node)) cur--;\n        if(guess_graph.get(node).contains(parent)) cur++;\n        if(cur>=k) answer++;\n        for(int child: tree.get(node)){\n            if(child!=parent) dfs(child,node,cur);\n        }\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111","title_slug":"count-number-of-possible-root-nodes","has_notes":false,"flag_type":1}