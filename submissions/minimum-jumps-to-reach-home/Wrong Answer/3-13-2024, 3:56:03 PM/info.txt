{"id":1202327761,"question_id":1757,"lang":"java","lang_name":"Java","time":"3Â months","timestamp":1710316563,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1202327761/","is_pending":"Not Pending","title":"Minimum Jumps to Reach Home","memory":"N/A","code":"class Solution {\n    public int minimumJumps(int[] f, int a, int b, int x) {\n        Set<Integer> seen = new HashSet<>();\n        for(int i=0; i<f.length; i++){\n            seen.add(f[i]);\n        }\n\n        int step = 0;\n        Queue<int[]> q = new LinkedList<>();\n        q.offer(new int[]{0, 0});\n        seen.add(0);\n        while(!q.isEmpty()){\n\n            int siz = q.size();\n            while(siz-->0){\n                int[] p = q.poll();\n\n                if(p[0]>2000000) return -1;\n\n                if(p[0]==x) return step;\n\n                if(!seen.contains(p[0]+a)){\n                    //  if(p[0]+a==x) return step-1;\n                     seen.add(p[0]+a);\n                     q.offer(new int[]{p[0]+a, 0});\n                }\n                    \n\n                if(p[1]==0 && p[0]-b>0 && !seen.contains(p[0]-b)){\n                    // if(p[0]-b==x) return step-1;\n                    seen.add(p[0]-b);\n                    q.offer(new int[]{p[0]-b, 1});\n                }\n            }\n            \n            step ++;\n        }\n        return -1;\n    }\n}","compare_result":"111111111101000000101111110111101001001010100011001000101000111011110101101011111001100111111111","title_slug":"minimum-jumps-to-reach-home","has_notes":false,"flag_type":1}