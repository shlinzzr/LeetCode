{"id":1202337792,"question_id":1757,"lang":"java","lang_name":"Java","time":"3Â months","timestamp":1710317545,"status":10,"status_display":"Accepted","runtime":"50 ms","url":"/submissions/detail/1202337792/","is_pending":"Not Pending","title":"Minimum Jumps to Reach Home","memory":"45.8 MB","code":"class Solution {\n    public int minimumJumps(int[] f, int a, int b, int x) {\n\n        int  furthest = x + a + b;\n        Set<String> seen = new HashSet<>();\n        for(int i=0; i<f.length; i++){\n            seen.add(f[i]+\"_\"+1);\n            seen.add(f[i]+\"_\"+0);\n             furthest = Math.max(furthest, f[i] + a + b);\n        }\n\n        int step = 0;\n        Queue<int[]> q = new LinkedList<>();\n        q.offer(new int[]{0, 0});\n        seen.add(\"0_0\");\n        while(!q.isEmpty()){\n\n            int siz = q.size();\n            while(siz-->0){\n                int[] p = q.poll();\n\n                if(p[0]>=6000) {\n                    return -1;\n                }\n\n                if(p[0]==x) return step;\n\n                if(!seen.contains((p[0]+a)+\"_0\") && p[0]+a<=furthest){\n                    //  if(p[0]+a==x) return step-1;\n                     seen.add((p[0]+a)+\"_0\");\n                     q.offer(new int[]{p[0]+a, 0});\n                }\n                    \n\n                if(p[1]==0 && p[0]-b>=0 && !seen.contains((p[0]-b)+\"_1\")){\n                    // if(p[0]-b==x) return step-1;\n                    seen.add((p[0]-b)+\"_1\");\n                    q.offer(new int[]{p[0]-b, 1});\n                }\n            }\n            \n            step ++;\n        }\n        return -1;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-jumps-to-reach-home","has_notes":false,"flag_type":1}