{"id":1268118100,"question_id":3423,"lang":"java","lang_name":"Java","time":"2 weeks, 3 days","timestamp":1716694526,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1268118100/","is_pending":"Not Pending","title":"Maximum Sum of Subsequence With Non-adjacent Elements","memory":"N/A","code":"class Solution {\n    public int maximumSumSubsequence(int[] nums, int[][] queries) {\n        int len = nums.length;\n        \n        int sum = 0 ;\n        for(int[] q : queries){\n            \n            int pos = q[0];\n            int x = q[1];\n            nums[pos] = x;\n            \n            int[][] dp = new int[len+1][2];\n        \n            // dp[1][1] = Math.max(0, nums[0]);\n            // dp[2][0] = dp[1][1];\n            // dp[2][1] = Math.max(0, nums[1]);\n            for(int i=1; i<=len; i++){\n                dp[i][0] = Math.max(dp[i-1][1], dp[i-1][0]);\n                dp[i][1] = dp[i-1][0] + nums[i-1];\n            }    \n            \n            sum += Math.max(dp[len][0], dp[len][1]);            \n            // System.out.println(sum);\n            \n        }\n        \n        return sum;\n        \n        \n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000","title_slug":"maximum-sum-of-subsequence-with-non-adjacent-elements","has_notes":false,"flag_type":1}