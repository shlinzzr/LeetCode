{"id":1268139904,"question_id":3423,"lang":"java","lang_name":"Java","time":"2 weeks, 3 days","timestamp":1716695357,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1268139904/","is_pending":"Not Pending","title":"Maximum Sum of Subsequence With Non-adjacent Elements","memory":"N/A","code":"class Solution {\n    public int maximumSumSubsequence(int[] nums, int[][] queries) {\n        int len = nums.length;\n        \n        long[][] dp = new long[len+1][2];\n        \n        for(int i=1; i<=len; i++){\n            dp[i][0] = Math.max(dp[i-1][1], dp[i-1][0]);\n            dp[i][1] = Math.max(dp[i-1][0], dp[i-1][0] + nums[i-1]);\n        }\n        \n        // oxoxo\n        //\n        \n        int M = (int) 1e9+7;\n        \n        long sum = 0 ;\n        for(int[] q : queries){\n            \n            int pos = q[0];\n            int x = q[1];\n            nums[pos] = x;\n            \n            for(int i=pos+1; i<=len; i++){\n                long a = Math.max(dp[i-1][1], dp[i-1][0])%M;\n                long b = Math.max(dp[i-1][0], dp[i-1][0] + nums[i-1])%M;\n                \n                if(a== dp[i][0] && b==dp[i][1]) break;\n                dp[i][0] = a;\n                dp[i][1] = b;\n \n            }    \n            \n            sum = (sum + Math.max(dp[len][0], dp[len][1]))%M;            \n            // System.out.println(sum);\n            \n        }\n        \n        return (int)(sum%M);\n        \n        \n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111000000","title_slug":"maximum-sum-of-subsequence-with-non-adjacent-elements","has_notes":false,"flag_type":1}