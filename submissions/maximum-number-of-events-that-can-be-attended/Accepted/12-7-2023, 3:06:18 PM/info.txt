{"id":1114170659,"question_id":1478,"lang":"java","lang_name":"Java","time":"6 months, 1 week","timestamp":1701932778,"status":10,"status_display":"Accepted","runtime":"68 ms","url":"/submissions/detail/1114170659/","is_pending":"Not Pending","title":"Maximum Number of Events That Can Be Attended","memory":"77.3 MB","code":"class Solution {\n    public int maxEvents(int[][] events) {\n\n        int len = events.length;\n        Arrays.sort(events, (a, b) -> a[0]-b[0]);\n        PriorityQueue<Integer> pq = new PriorityQueue<Integer>(); // endTime\n     \n        int res = 0;\n        int i=0;\n\n        for (int d = 1; d <= 100000; ++d) {\n\n            while (i < len && events[i][0] == d){\n                pq.offer(events[i][1]); // endTime\n                i++;\n            }\n\n            // pop out of date endTime\n            while (!pq.isEmpty() && pq.peek() < d){\n                pq.poll();\n            }\n            \n            if (!pq.isEmpty()) {\n                pq.poll();\n                res++;\n            }\n        }\n        return res;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111","title_slug":"maximum-number-of-events-that-can-be-attended","has_notes":false,"flag_type":1}