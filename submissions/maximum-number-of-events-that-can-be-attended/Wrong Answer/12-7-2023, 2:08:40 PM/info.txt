{"id":1114134149,"question_id":1478,"lang":"java","lang_name":"Java","time":"6 months, 1 week","timestamp":1701929320,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1114134149/","is_pending":"Not Pending","title":"Maximum Number of Events That Can Be Attended","memory":"N/A","code":"class Solution {\n    public int maxEvents(int[][] events) {\n        int len = events.length;\n\n\n        int res = len;\n        Arrays.sort(events, (a,b)-> a[0]!=b[0] ? a[0]-b[0] : a[1]-b[1]);\n\n        PriorityQueue<int[]> pq = new PriorityQueue<>(\n            (a,b) -> a[1]-b[1]\n        );\n\n        for(int i=0; i<len; i++){\n            pq.offer(events[i]);\n        }\n\n\n        int cur = 0;\n        for(int i=0; i<len; i++){\n\n            int[] p = pq.poll();\n            if(cur<p[0] && cur<p[1]){\n                cur= p[1];\n            }else if(cur>p[0] && cur<p[1]){\n                res--;\n            }\n        }\n\n        return res;\n\n    }\n}","compare_result":"11011000100001100000000000000000000000000010","title_slug":"maximum-number-of-events-that-can-be-attended","has_notes":false,"flag_type":1}