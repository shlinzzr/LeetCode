{"id":1241523078,"question_id":1238,"lang":"java","lang_name":"Java","time":"1 month, 2 weeks","timestamp":1714035436,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1241523078/","is_pending":"Not Pending","title":"Alphabet Board Path","memory":"41.2 MB","code":"class Solution {\n    \n     public String alphabetBoardPath(String target) {\n         \n         int idx= 0 ;\n         int len = target.length();\n         \n         char ch = 'a';\n         int curx = 0, cury=0;\n         StringBuilder sb = new StringBuilder();\n         while(idx<len){\n             \n             curx = (int)(ch-'a') % 5;\n             cury = (int)(ch-'a') / 5;\n             \n             char dest = target.charAt(idx);\n             int destx = (int)(dest-'a') % 5;\n             int desty = (int)(dest-'a') / 5;\n             \n             if(ch==dest){\n                 sb.append('!');\n                 idx++;\n                 continue;\n             }\n             \n             \n             if(ch=='z'){ // go y-axis first\n                \n                 for(int i=0; i<Math.abs(cury-desty); i++){\n                    sb.append( (desty>cury ? 'D' : 'U'));\n                 }\n                 \n                 for(int j=0; j<Math.abs(curx-destx); j++){\n                    sb.append( (destx>curx ? 'R' : 'L'));\n                 }    \n                 \n             }else{\n                for(int j=0; j<Math.abs(curx-destx); j++){\n                    sb.append( (destx>curx ? 'R' : 'L'));\n                }    \n                 \n                for(int i=0; i<Math.abs(cury-desty); i++){\n                    sb.append( (desty>cury ? 'D' : 'U'));\n                }\n              \n             }\n             \n             ch = dest;\n         }\n         return sb.toString();\n         \n         \n     }\n    \n    \n//     public String alphabetBoardPath(String target) {\n        \n//         StringBuilder sb = new StringBuilder();\n//         int h = 6, w=5;\n//         char[][] mat = new char[6][5];\n//         char ch = 'a';\n//         for(int i=0; i<6; i++){\n//             for(int j=0; j<5; j++){\n//                 mat[i][j] = (ch++);\n                \n//                 if(i==5 && j==0) break;\n//             }\n//         }\n\n        \n//         int[][] dirs = new int[][]{{1,0}, {0,1},{-1,0}, {0,-1}};\n        \n//         int idx= 0;\n//         boolean[][] seen;\n//         resetSeen(seen);\n        \n//         Queue<int[]> q = new LinkedList<>();\n//         q.offer(new int[]{0,0});\n//         while(idx<target.length()){\n            \n//             int[] p = pq.poll();\n//             if( mat[p[0]][p[1]] == target.charAt(idx) ){\n//                 idx++;\n//                 sb.append(mat[p[0]][p[1]]);\n//                 resetSeen(seen);\n//                 if(idx==target.length()) return sb.toString();\n//             }\n            \n//             for(int[] d : dirs){\n//                 int r = d[0] + p[0];\n//                 int c = d[1] + p[1];\n//                 if(r<0 || c<0 || r>=h || c>=w || seen[r][c]) continue;\n                \n//                 seen[r][c] = true;\n//                 q.offer(new int[]{r,c});\n                \n//             }\n            \n            \n            \n            \n//         }\n        \n        \n        \n        \n//     }\n    \n//     private void resetSeen(int[][] seen){\n        \n//         seen[][] = new boolean[5][6];\n//         for(int j=1; j<5; j++){\n//             seen[5][j] = false;\n//         }\n//     }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111","title_slug":"alphabet-board-path","has_notes":false,"flag_type":1}