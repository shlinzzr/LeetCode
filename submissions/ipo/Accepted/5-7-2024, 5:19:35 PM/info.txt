{"id":1251627995,"question_id":502,"lang":"java","lang_name":"Java","time":"1Â month","timestamp":1715073575,"status":10,"status_display":"Accepted","runtime":"89 ms","url":"/submissions/detail/1251627995/","is_pending":"Not Pending","title":"IPO","memory":"59.3 MB","code":"class Solution {\n    public int findMaximizedCapital(int k, int w, int[] profits, int[] capital) {\n        \n        int len = profits.length;\n\n        PriorityQueue<int[]> task = new PriorityQueue<>( // idx, earn, capital\n            (a, b) -> a[2]-b[2]\n        );\n         for(int i=0; i<len; i++){\n            task.offer(new int[]{i, profits[i], capital[i]});\n        }\n\n\n        PriorityQueue<int[]> pq = new PriorityQueue<>(\n            // (a,b)-> (b[1]-b[2]) - (a[1]-a[2])\n            (a,b) -> (b[1]-a[1])\n        );\n        \n        while(k-->0){\n\n            // for(int i=0; i<len; i++){\n            //     if(done[i]) continue;\n\n            //     if(capital[i]<=w){\n            //         done[i] = true;\n            //         pq.offer(new int[]{i, profits[i], capital[i]});\n            //     }\n            // }\n            while(!task.isEmpty() && task.peek()[2]<=w){\n                pq.offer(task.poll());\n            }\n\n            if(pq.isEmpty()) break;\n\n            int[] p = pq.poll();\n            w = w+p[1];\n        }\n\n        return w;\n\n    }\n}","compare_result":"11111111111111111111111111111111111","title_slug":"ipo","has_notes":false,"flag_type":1}