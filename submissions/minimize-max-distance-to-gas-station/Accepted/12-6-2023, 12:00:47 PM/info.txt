{"id":1113339775,"question_id":788,"lang":"java","lang_name":"Java","time":"6 months, 1 week","timestamp":1701835247,"status":10,"status_display":"Accepted","runtime":"26 ms","url":"/submissions/detail/1113339775/","is_pending":"Not Pending","title":"Minimize Max Distance to Gas Station","memory":"44 MB","code":"class Solution {\n    public double minmaxGasDist(int[] stations, int k) {\n        \n        /*\n\n        s[i+1]- s[i] == distance\n        ==> if(distance > penalty). cnt++;   xx wrong\n\n        need calculate how many gas stations between i & i+1\n        => math.ceil((s[i+1] - s[i]) / mid) - 1\n\n\n        check cnt > k\n\n\n\n        */\n\n        double offset = (double) 1e-6;\n\n        int len = stations.length;\n\n        Arrays.sort(stations);\n \n        double st =0, ed=stations[len-1]-stations[0];\n\n        while(st+offset<ed){\n            \n            double mid = (st+ed)/2;\n            int count = 0;\n\n            for(int i=0; i<len-1;i++){\n                count += Math.ceil((stations[i+1]-stations[i])/ mid) -1;\n            }\n\n            if(count>k){\n                st = mid;\n            }else{\n                ed = mid;\n            }\n        }\n\n\n        return st;\n\n\n    }\n\n\n    private boolean isOk(int[] s, double mid, int k){\n        int len = s.length;\n\n        for(int i=0; i<len-1; i++){\n            if((s[i+1]-s[i])/2.0 < mid){\n\n                // System.out.println(\"hello k=\" + k);\n                // System.out.println(i + \" s[i+1]-s[i])/2.0=\" + (s[i+1]-s[i])/2.0);\n\n                if(k<0)\n                    return false;\n                k--;\n            }\n        }\n\n        return true;\n\n\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111","title_slug":"minimize-max-distance-to-gas-station","has_notes":false,"flag_type":1}