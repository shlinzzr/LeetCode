{"id":916698498,"question_id":1949,"lang":"java","lang_name":"Java","time":"1 year, 2 months","timestamp":1679033623,"status":20,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/916698498/","is_pending":"Not Pending","title":"Implement Trie II (Prefix Tree)","memory":"N/A","code":"class Trie {\n\n    class TrieNode{\n        \n        TrieNode[] arr = new TrieNode[26];\n        boolean isWord =false;\n        int wordCnt =0;\n        int prefixCnt =0;\n        \n        public TrieNode(){\n            arr = new TrieNode[26];\n            isWord = false;\n        }\n        \n    }\n    \n    TrieNode root;\n    \n    \n    public Trie() {\n        root = new TrieNode();    \n    }\n    \n    public void insert(String word) {\n        \n        TrieNode node = root;\n        for(char ch : word.toCharArray()){\n            \n            if(node.arr[ch-'a']==null){\n                node.arr[ch-'a'] = new TrieNode();\n            }\n            node = node.arr[ch-'a'];\n            node.prefixCnt++;\n        }\n        node.wordCnt++;\n        node.isWord=true;\n    }\n    \n    public int countWordsEqualTo(String word) {\n        \n        TrieNode node = root;\n        for(char ch : word.toCharArray()){\n            \n            if(node.arr[ch-'a']==null){\n                return 0;\n            }\n            node = node.arr[ch-'a'];\n        }\n        \n        return node.wordCnt;\n    }\n    \n    \n    public int countWordsStartingWith(String prefix) {\n        TrieNode node = root;\n        for(char ch : prefix.toCharArray()){\n            \n            if(node.arr[ch-'a']==null){\n                return 0;\n            }\n            node = node.arr[ch-'a'];\n        }\n        \n        return node.prefixCnt;\n    }\n    \n    public void erase(String word) {\n        TrieNode node = root;\n        for(char ch : word.toCharArray()){\n            \n            TrieNode tmp = node.arr[ch-'a'];\n            tmp.prefixCnt--;\n            \n            if(tmp.prefixCnt==0){\n                node.arr[ch-'a']=null;\n            }\n            \n            node = tmp\n            \n        }\n        node.wordCnt--;\n        if(node.wordCnt==0)\n            node.isWord=false;\n        \n    }\n}\n\n/**\n * Your Trie object will be instantiated and called as such:\n * Trie obj = new Trie();\n * obj.insert(word);\n * int param_2 = obj.countWordsEqualTo(word);\n * int param_3 = obj.countWordsStartingWith(prefix);\n * obj.erase(word);\n */","compare_result":null,"title_slug":"implement-trie-ii-prefix-tree","has_notes":false,"flag_type":1}