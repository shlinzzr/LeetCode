{"id":1270019062,"question_id":1949,"lang":"java","lang_name":"Java","time":"2 weeks, 1 day","timestamp":1716869071,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1270019062/","is_pending":"Not Pending","title":"Implement Trie II (Prefix Tree)","memory":"N/A","code":"class Trie {\n    \n    class TrieNode{\n        \n        TrieNode[] arr = new TrieNode[26];\n        boolean isWord =false;\n        int wordCnt =0;\n        int prefixCnt =0;\n        \n        public TrieNode(){\n            arr = new TrieNode[26];\n            isWord = false;\n        }\n        \n    }\n    \n    TrieNode root;\n    Map<String, Integer> map;\n\n    public Trie() {\n        root = new TrieNode();\n        map = new HashMap<>();\n    }\n    \n    public void insert(String word) {\n        \n        map.put(word, map.getOrDefault(word,0)+1);\n        TrieNode curr = root;\n        for(char ch : word.toCharArray()){\n            if(curr.arr[ch-'a']==null){\n                curr.arr[ch-'a'] = new TrieNode();\n            }\n            curr = curr.arr[ch-'a'];\n            curr.prefixCnt++;\n        }\n        curr.wordCnt++;\n        curr.isWord = true;\n        \n    }\n    \n    public int countWordsEqualTo(String word) {\n        return map.get(word);\n        \n    }\n    \n    public int countWordsStartingWith(String prefix) {\n        TrieNode curr = root;\n        for(char ch : prefix.toCharArray()){\n            if(curr.arr[ch-'a']==null) return 0;\n            curr = curr.arr[ch-'a'];\n        }\n\n        return curr.prefixCnt;    \n    }\n    \n    public void erase(String word) {\n        if(map.containsKey(word)){\n            map.put(word, map.get(word)-1);\n            if(map.get(word)==0) map.remove(word);\n        }\n            \n\n        TrieNode curr = root;\n        for(char ch : word.toCharArray()){\n            if(curr.arr[ch-'a']==null) return;\n            curr = curr.arr[ch-'a'];\n            curr.prefixCnt--;\n        }\n\n        \n        \n    }\n}\n\n/**\n * Your Trie object will be instantiated and called as such:\n * Trie obj = new Trie();\n * obj.insert(word);\n * int param_2 = obj.countWordsEqualTo(word);\n * int param_3 = obj.countWordsStartingWith(prefix);\n * obj.erase(word);\n */","compare_result":"111000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"implement-trie-ii-prefix-tree","has_notes":false,"flag_type":1}