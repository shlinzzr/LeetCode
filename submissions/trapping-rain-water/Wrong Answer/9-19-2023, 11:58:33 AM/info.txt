{"id":1053187145,"question_id":42,"lang":"java","lang_name":"Java","time":"8 months, 3 weeks","timestamp":1695095913,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1053187145/","is_pending":"Not Pending","title":"Trapping Rain Water","memory":"N/A","code":"class Solution {\n    public int trap(int[] height) {\n        int len = height.length;\n\n        int[] left = new int[len];\n        int[] right = new int[len];\n        // Arrays.fill(right, -1);\n        // Arrays.fill(left, len);\n\n        Stack<Integer> st = new Stack<>();\n\n        for(int i=0; i<len; i++){\n            while(!st.isEmpty() && height[st.peek()] >= height[i]){\n                right[st.pop()] = i;\n            }\n            st.push(i);\n        }\n        st = new Stack<>();\n        for(int i=len-1; i>=0; i--){\n\n            while(!st.isEmpty() && height[st.peek()] >= height[i]){\n                left[st.pop()] = i;\n            }\n            st.push(i);\n        }\n\n        int res = 0;\n\n        for(int i=0; i<len; i++){\n\n            int max = Math.min(height[left[i]], height[right[i]]);\n\n            if(max==0)\n                continue;\n\n            for(int j=left[i]+1; j<right[i]; j++){\n                res += max-height[j];\n            }\n            if(right[i]!=0)\n                i=right[i];\n        }\n\n        return res;\n\n\n    }\n}","compare_result":"0011100000000000000000000000000001000000100000000000000010000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101","title_slug":"trapping-rain-water","has_notes":false,"flag_type":1}