{"id":1185425983,"question_id":3292,"lang":"java","lang_name":"Java","time":"3 months, 2 weeks","timestamp":1708834078,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1185425983/","is_pending":"Not Pending","title":"Earliest Second to Mark Indices I","memory":"N/A","code":"class Solution {\n    public int earliestSecondToMarkIndices(int[] nums, int[] changeIndices) {\n        \n        \n        int n = nums.length; \n        int m = changeIndices.length;\n        \n        HashMap<Integer, Integer> lastOccur = new HashMap<>();\n        \n        for(int i=0; i<m; i++){\n            lastOccur.put(changeIndices[i]-1, i);\n        }\n        \n        PriorityQueue<Map.Entry<Integer, Integer>> pq= new PriorityQueue<>(\n            (a,b)->a.getValue()-b.getValue()\n        );\n        \n        pq.addAll(lastOccur.entrySet());\n        \n        /*\n        Input: nums = [2,2,0], changeIndices = [2,2,2,2,3,2,2,1]\nOutput: 8\nExplanation: In this example, we have 8 seconds. The following operations can be performed to mark all indices:\nSecond 1: Choose index 1 and decrement nums[1] by one. nums becomes [1,2,0].\nSecond 2: Choose index 1 and decrement nums[1] by one. nums becomes [0,2,0].\nSecond 3: Choose index 2 and decrement nums[2] by one. nums becomes [0,1,0].\nSecond 4: Choose index 2 and decrement nums[2] by one. nums becomes [0,0,0].\nSecond 5: Mark the index changeIndices[5], which is marking index 3, since nums[3] is equal to 0.\nSecond 6: Mark the index changeIndices[6], which is marking index 2, since nums[2] is equal to 0.\nSecond 7: Do nothing.\nSecond 8: Mark the index changeIndices[8], which is marking index 1, since nums[1] is equal to 0.\nNow all indices have been marked.\nIt can be shown that it is not possible to mark all indices earlier than the 8th second.\nHence, the answer is 8.\n\n*/\n        \n        // lastOccur.put(changeIndices[i], i+1);\n        \n        // nums = [1,3], changeIndices = [1,1,1,2,1,1,1]\n       // pq [1,3] , [0, 6] \n        \n        boolean[] seen = new boolean[n];\n        \n        int last = 0;\n        int sec =0;\n        while(!pq.isEmpty()){\n            \n            int idx = pq.peek().getKey(); // 1\n            \n            if(sec > pq.peek().getValue()) return -1;\n            /*\n            \n            Choose an index i in the range [1, n] and decrement nums[i] by 1.\n            If nums[changeIndices[s]] is equal to 0, mark the index changeIndices[s].\n            Do nothing.*/\n            \n            if(nums[idx]>0){\n                nums[idx]--;\n            }else if(nums[idx]==0){\n                \n                \n                // if(pq.size()>1)\n                //     last = pq.peek().getValue();\n                seen[idx]=true;\n                \n                if(pq.size()==1){\n                    sec = Math.max(sec, pq.peek().getValue());\n                }\n                pq.poll();\n                \n                \n                \n                if(pq.isEmpty()) break;\n            }\n            \n            System.out.println(\"sec=\"+sec);\n            \n            for(int a : nums){\n                System.out.print(a+\",\");\n            }\n            System.out.println();\n              sec++;\n        }\n        \n        \n        for(int i=0; i<n; i++){\n            if(seen[i]==false) return -1;\n        }\n        \n        return sec+1;\n        \n    }\n}","compare_resulttitle_slug":"earliest-second-to-mark-indices-i","has_notes":false,"flag_type":1}