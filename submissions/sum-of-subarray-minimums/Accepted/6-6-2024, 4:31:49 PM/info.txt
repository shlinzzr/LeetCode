{"id":1279310591,"question_id":943,"lang":"java","lang_name":"Java","time":"6 days, 18 hours","timestamp":1717662709,"status":10,"status_display":"Accepted","runtime":"52 ms","url":"/submissions/detail/1279310591/","is_pending":"Not Pending","title":"Sum of Subarray Minimums","memory":"52.8 MB","code":"class Solution {\n    public int sumSubarrayMins(int[] arr) {\n\n        int len = arr.length;\n\n     \n\n        int[] nextSmaller = new int[len];\n        Arrays.fill(nextSmaller, len);\n        Stack<Integer> st = new Stack<>();\n        for(int i=0; i<len; i++){\n            while(!st.isEmpty()&& arr[st.peek()]>arr[i]){\n                nextSmaller[st.pop()]=i;\n            }\n            st.push(i);\n        }\n\n        st.clear();\n        int[] prevSmallerOrEqual = new int[len];\n        Arrays.fill(prevSmallerOrEqual, -1);\n        for(int i=len-1; i>=0; i--){\n            while(!st.isEmpty() && arr[i]<=arr[st.peek()]){\n                prevSmallerOrEqual[st.pop()] = i;\n            }\n            st.push(i);\n        }\n\n\n        // 0 1 2\n        //     i\n\n        int M = (int)1e9+7;\n        long res =0L ;\n        for(int i=0; i<len; i++){\n            // for i\n            int left = prevSmallerOrEqual[i]+1;\n            int right = nextSmaller[i]-1;\n\n            long cnt = (i-left+1) * (right-i+1) %M;\n            res = (res+ cnt*arr[i])%M;\n\n            \n            // res += (right-left+1)*(long)arr[i]%M;\n\n            //  System.out.println(left + \" \" + arr[i] + \" \" + right + \" res=\"+res);\n        }\n\n        return (int)res;\n\n\n\n        // find all subarray\n        // b-f\n        // for(int i=0; i<len; i++){\n        //     for(int j=i; j<len; j++){\n        //         // iter all to find min of [i, j] ...\n        //     }\n        // }\n\n\n        \n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"sum-of-subarray-minimums","has_notes":false,"flag_type":1}