{"id":1279303905,"question_id":943,"lang":"java","lang_name":"Java","time":"6 days, 18 hours","timestamp":1717662199,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1279303905/","is_pending":"Not Pending","title":"Sum of Subarray Minimums","memory":"N/A","code":"class Solution {\n    public int sumSubarrayMins(int[] arr) {\n\n        int len = arr.length;\n\n     \n\n        int[] nextSmaller = new int[len];\n        Arrays.fill(nextSmaller, len);\n        Stack<Integer> st = new Stack<>();\n        for(int i=0; i<len; i++){\n            while(!st.isEmpty()&& arr[st.peek()]>arr[i]){\n                nextSmaller[st.pop()]=i;\n            }\n            st.push(i);\n        }\n\n        st.clear();\n        int[] prevSmaller = new int[len];\n        Arrays.fill(prevSmaller, -1);\n        for(int i=len-1; i>=0; i--){\n            while(!st.isEmpty() && arr[i]<arr[st.peek()]){\n                prevSmaller[st.pop()] = i;\n            }\n            st.push(i);\n        }\n\n        int M = (int)1e9+7;\n        long res =0L ;\n        for(int i=0; i<len; i++){\n            // for i\n            int left = prevSmaller[i]==-1 ? i : prevSmaller[i]+1;\n            int right = nextSmaller[i]==len ? i : nextSmaller[i]-1;\n\n            \n            res += (right-left+1)*(long)arr[i]%M;\n        }\n\n        return (int)res;\n\n\n\n        // find all subarray\n        // b-f\n        // for(int i=0; i<len; i++){\n        //     for(int j=i; j<len; j++){\n        //         // iter all to find min of [i, j] ...\n        //     }\n        // }\n\n\n        \n    }\n}","compare_result":"0011000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"sum-of-subarray-minimums","has_notes":false,"flag_type":1}