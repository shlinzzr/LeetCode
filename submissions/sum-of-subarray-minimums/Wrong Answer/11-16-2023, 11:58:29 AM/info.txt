{"id":1099807027,"question_id":943,"lang":"java","lang_name":"Java","time":"6 months, 4 weeks","timestamp":1700107109,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1099807027/","is_pending":"Not Pending","title":"Sum of Subarray Minimums","memory":"N/A","code":"class Solution {\n    public int sumSubarrayMins(int[] arr) {\n        int M = (int) 1e9+7;\n        int len = arr.length;\n        \n        int[] prevSmaller = new int[len];\n        Arrays.fill(prevSmaller, -1);\n\n        int[] nextSmaller = new int[len];\n        Arrays.fill(nextSmaller, len);\n\n        Stack<Integer> st = new Stack<>();\n        for(int i=0; i<len; i++){\n            while(!st.isEmpty() && arr[st.peek()]>arr[i]){\n                nextSmaller[st.pop()] = i;\n            }\n            st.push(i);\n        }\n\n        st.clear();\n        for(int i=len-1; i>=0; i--){\n            while(!st.isEmpty() && arr[st.peek()]>arr[i]){\n                prevSmaller[st.pop()] = i;\n            }\n            st.push(i);\n        }\n\n        long res = 0;\n        for(int i=0; i<len; i++){\n\n            long width = (nextSmaller[i]-i)*(i-prevSmaller[i])%M;\n            int a = arr[i];\n            res += a* width;\n        }\n\n        return (int)res;\n\n        \n    }\n}","compare_result":"111111111111111101101011111111111111111111001010101111111111111111111111100000000000000","title_slug":"sum-of-subarray-minimums","has_notes":false,"flag_type":1}