{"id":1143071134,"question_id":1465,"lang":"java","lang_name":"Java","time":"5Â months","timestamp":1704954411,"status":10,"status_display":"Accepted","runtime":"6 ms","url":"/submissions/detail/1143071134/","is_pending":"Not Pending","title":"Maximum Product of Splitted Binary Tree","memory":"58.4 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    long max = 0;\n    long total = 0;\n    int M = (int) 1e9+7;\n    public int maxProduct(TreeNode root) {\n        total = getTotal(root);\n        getTotal(root);\n\n        return (int) (max%M);\n    }\n\n    private long getTotal(TreeNode root){\n        if(root==null) return 0;\n        \n        long left = getTotal(root.left);\n        long right = getTotal(root.right);\n\n        long sub =root.val + left + right ;\n        max = Math.max(max, sub*(total-sub));\n\n        return sub;\n        \n    }\n\n    // private long getTotal(TreeNode root){\n    //     if(root==null) return 0;\n    //     long left = getTotal(root.left);\n    //     long right = getTotal(root.right);\n    //     long sum  = left + right  + root.val;\n    //     max = Math.max(max, sum*(total-sum));\n\n    //     return sum;\n    // }\n\n\n}","compare_result":"111111111111111111111111111111111111111111111111111111","title_slug":"maximum-product-of-splitted-binary-tree","has_notes":false,"flag_type":1}