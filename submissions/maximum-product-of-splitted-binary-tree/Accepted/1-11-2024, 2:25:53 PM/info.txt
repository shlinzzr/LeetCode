{"id":1143070467,"question_id":1465,"lang":"java","lang_name":"Java","time":"5Â months","timestamp":1704954353,"status":10,"status_display":"Accepted","runtime":"7 ms","url":"/submissions/detail/1143070467/","is_pending":"Not Pending","title":"Maximum Product of Splitted Binary Tree","memory":"58.4 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n        long res = 0, total = 0, sub;\n    public int maxProduct(TreeNode root) {\n        total = s(root); s(root);\n        return (int)(res % (int)(1e9 + 7));\n    }\n\n    private long s(TreeNode root) {\n        if (root == null) return 0;\n        sub = root.val + s(root.left) + s(root.right);\n        res = Math.max(res, sub * (total - sub));\n        return sub;\n    }\n\n\n}","compare_result":"111111111111111111111111111111111111111111111111111111","title_slug":"maximum-product-of-splitted-binary-tree","has_notes":false,"flag_type":1}