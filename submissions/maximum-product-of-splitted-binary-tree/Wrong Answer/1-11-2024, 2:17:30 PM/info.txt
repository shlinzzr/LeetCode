{"id":1143064237,"question_id":1465,"lang":"java","lang_name":"Java","time":"5Â months","timestamp":1704953850,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1143064237/","is_pending":"Not Pending","title":"Maximum Product of Splitted Binary Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    int max = 0;\n    int total = 0;\n    public int maxProduct(TreeNode root) {\n        total = getTotal(root);\n        getHalf(root);\n\n        return max;\n    }\n\n    private int getHalf(TreeNode root){\n        if(root==null) return 0;\n        \n        int left = getHalf(root.left);\n        int right = getHalf(root.right);\n\n        int half = left + right + root.val;\n            max = Math.max(max, half*(total-half));\n\n        return half;\n        \n    }\n\n    private int getTotal(TreeNode root){\n        if(root==null) return 0;\n        int left = getTotal(root.left);\n        int right = getTotal(root.right);\n\n        return left + right + root.val;\n    }\n\n\n}","compare_result":"111111111111111111111111111111110000000000000000000000","title_slug":"maximum-product-of-splitted-binary-tree","has_notes":false,"flag_type":1}