{"id":1273151424,"question_id":310,"lang":"java","lang_name":"Java","time":"1 week, 5 days","timestamp":1717147521,"status":10,"status_display":"Accepted","runtime":"37 ms","url":"/submissions/detail/1273151424/","is_pending":"Not Pending","title":"Minimum Height Trees","memory":"62.2 MB","code":"class Solution {\n    public List<Integer> findMinHeightTrees(int n, int[][] edges) {\n\n        List<Integer> res = new ArrayList<>();\n        if(n==1){\n            res.add(0);\n            return res;\n        }\n\n        Map<Integer, Set<Integer>> map= new HashMap<>();\n        int[] deg = new int[n];\n        for(int[] e : edges){\n            deg[e[0]]++;\n            deg[e[1]]++;\n            map.putIfAbsent(e[0], new HashSet<>());\n            map.putIfAbsent(e[1], new HashSet<>());\n            map.get(e[0]).add(e[1]);\n            map.get(e[1]).add(e[0]);\n        }\n\n        Queue<Integer> q = new LinkedList<>();\n        for(int i=0; i<n; i++){\n            if(deg[i]==1){\n                q.offer(i);\n                deg[i]--;\n            }\n        }\n\n        int cnt=n;\n\n        while(cnt>2){\n            int size = q.size();\n            cnt -= size;\n            while(size-->0){\n                int p = q.poll();\n                for(int next : map.get(p)){\n                    deg[next]--;\n                    if(deg[next]==1){\n                        q.offer(next);\n                        deg[next]--;\n                    }\n                }\n            }\n        }\n\n        return new ArrayList<>(q);\n\n\n        \n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-height-trees","has_notes":false,"flag_type":1}