{"id":1077366912,"question_id":310,"lang":"java","lang_name":"Java","time":"7 months, 4 weeks","timestamp":1697530944,"status":10,"status_display":"Accepted","runtime":"62 ms","url":"/submissions/detail/1077366912/","is_pending":"Not Pending","title":"Minimum Height Trees","memory":"56 MB","code":"class Solution {\n    public List<Integer> findMinHeightTrees(int n, int[][] edges) {\n        List<Integer> res = new ArrayList<>();\n        if(n==1){\n            res.add(0);\n            return res;\n        }\n        \n        \n        HashMap<Integer, Set<Integer>> map = new HashMap<>();\n        for(int[] e : edges){\n            map.putIfAbsent(e[0], new HashSet<>());\n            map.putIfAbsent(e[1], new HashSet<>());\n            map.get(e[0]).add(e[1]);\n            map.get(e[1]).add(e[0]);\n        }\n        \n        \n        // find leaves node\n        List<Integer> leaves = new ArrayList<>();\n        for(Map.Entry<Integer, Set<Integer>> en : map.entrySet()){\n            if(en.getValue().size()==1 ){\n                int leaf = en.getKey();\n                leaves.add(leaf);\n            }\n        } \n        \n        // start with leaves to reduce\n        while(n>2){ // <=== this is the key\n            \n            n-=leaves.size();\n            \n            List<Integer> next = new ArrayList<>();\n            \n            for(int leaf : leaves){\n                int parent = new ArrayList<>(map.get(leaf)).get(0);\n                map.get(parent).remove(leaf);\n                if(map.get(parent).size()==1)\n                    next.add(parent);\n            }\n            \n            leaves = next;\n        }\n        \n        return leaves;\n        \n        \n//         Set<Integer> del = new HashSet<>();\n        \n//         boolean valid = true;\n//         while(valid){\n//             valid = false;\n//             for(Map.Entry<Integer, Set<Integer>> en : map.entrySet()){\n//                 if(en.getValue().size()==1 && !del.contains(en.getKey())){\n//                     valid=true;\n//                     int leaf = en.getKey();\n//                     int parent = new ArrayList<>(en.getValue()).get(0);\n//                     map.get(parent).remove(leaf);\n//                     del.add(leaf);\n//                 }\n//             } \n//         }\n        \n//         for(int i=0; i<n; i++){\n//             if(!del.contains(i))\n//                 res.add(i);\n//         }\n        // return res;\n        \n        \n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-height-trees","has_notes":false,"flag_type":1}