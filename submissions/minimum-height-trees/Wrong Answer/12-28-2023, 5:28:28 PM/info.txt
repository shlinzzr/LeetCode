{"id":1130417544,"question_id":310,"lang":"java","lang_name":"Java","time":"5 months, 2 weeks","timestamp":1703755708,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1130417544/","is_pending":"Not Pending","title":"Minimum Height Trees","memory":"N/A","code":"class Solution {\n    public List<Integer> findMinHeightTrees(int n, int[][] edges) {\n\n        \n\n        List<Integer> res = new ArrayList<>();\n\n        if(n==1){\n            res.add(0);\n            return res;\n        }\n\n        HashMap<Integer, Set<Integer>> g = new HashMap<>();\n\n        int[] deg = new int[n];\n        for(int[] e : edges){\n\n            deg[e[0]]++;\n            deg[e[1]]++;\n            g.putIfAbsent(e[0], new HashSet<>());\n            g.putIfAbsent(e[1], new HashSet<>());\n            g.get(e[0]).add(e[1]);\n            g.get(e[1]).add(e[0]);\n\n\n        }\n\n\n        HashSet<Integer> set = new HashSet<>();\n        Queue<Integer> q = new LinkedList<>();\n        for(int i=0; i<n; i++){\n            if(deg[i]==1){\n                q.offer(i);\n                set.add(i);\n            }\n        }\n\n\n        \n        int dep = 0;\n        while(!q.isEmpty()){\n            int siz = q.size();\n            dep++;\n\n            res = new ArrayList<>();\n            while(siz-->0){\n                \n                int p = q.poll();\n                res.add(p);\n\n                for(int next : g.get(p)){\n\n                    if(!set.contains(next)){\n                        q.offer(next);\n                        set.add(next);\n                    }\n                }\n            }\n        }\n\n        return res;\n    }\n}","compare_result":"11111111100100101010000000000000000000000000000010000000000000000100001","title_slug":"minimum-height-trees","has_notes":false,"flag_type":1}