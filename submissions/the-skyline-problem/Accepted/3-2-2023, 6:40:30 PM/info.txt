{"id":907666671,"question_id":218,"lang":"java","lang_name":"Java","time":"1 year, 3 months","timestamp":1677753630,"status":10,"status_display":"Accepted","runtime":"259 ms","url":"/submissions/detail/907666671/","is_pending":"Not Pending","title":"The Skyline Problem","memory":"45.9 MB","code":"class Solution {\n    public List<List<Integer>> getSkyline(int[][] buildings) {\n        List<List<Integer>> result = new ArrayList<>();\n        List<int[]> height = new ArrayList<>();\n        for(int[] b:buildings) {\n            height.add(new int[]{b[0], -b[2]});\n            height.add(new int[]{b[1], b[2]});\n        }\n        Collections.sort(height, (a, b) -> {\n                if(a[0] != b[0]) \n                    return a[0] - b[0];\n                return a[1] - b[1];\n        });\n        Queue<Integer> pq = new PriorityQueue<>((a, b) -> (b - a));\n        pq.offer(0);\n        int prev = 0;\n        for(int[] h:height) {\n            if(h[1] < 0) {\n                pq.offer(-h[1]);\n            } else {\n                pq.remove(h[1]);\n            }\n            int cur = pq.peek();\n            if(prev != cur) {\n                List<Integer> list = new ArrayList<>();\n                list.add(h[0]);\n                list.add(cur);\n                result.add(list);\n                prev = cur;\n            }\n        }\n        return result;\n    }\n}","compare_result":"11111111111111111111111111111111111111111","title_slug":"the-skyline-problem","has_notes":false,"flag_type":1}