{"id":1248064249,"question_id":218,"lang":"java","lang_name":"Java","time":"1 month, 1 week","timestamp":1714722132,"status":10,"status_display":"Accepted","runtime":"229 ms","url":"/submissions/detail/1248064249/","is_pending":"Not Pending","title":"The Skyline Problem","memory":"47.3 MB","code":"class Solution {\n    public List<List<Integer>> getSkyline(int[][] buildings) {\n        List<List<Integer>> result = new ArrayList<>();\n        List<int[]> list = new ArrayList<>();\n        for(int[] b : buildings) {\n            int x1 = b[0];\n            int x2 = b[1];\n            int y = b[2];\n            list.add(new int[]{x1, -y});\n            list.add(new int[]{x2, y});\n        }\n\n        Collections.sort(list, (a,b)-> a[0]!=b[0] ? a[0]-b[0] : a[1]-b[1]);\n        // Collections.sort(height, (a, b) -> {\n        //         if(a[0] != b[0]) \n        //             return a[0] - b[0];\n        //         return a[1] - b[1];\n        // });\n\n        Queue<Integer> pq = new PriorityQueue<>((a, b) -> (b - a)); //y\n        pq.offer(0);\n        int prev = 0;\n        for(int[] p: list) {\n            if(p[1] < 0) {\n                pq.offer(-p[1]);\n            } else {\n                pq.remove(p[1]);\n            }\n            int cur = pq.peek();\n            if(prev != cur) {\n                List<Integer> sub = new ArrayList<>();\n                sub.add(p[0]);\n                sub.add(cur);\n                result.add(sub);\n                prev = cur;\n            }\n        }\n        return result;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111","title_slug":"the-skyline-problem","has_notes":false,"flag_type":1}