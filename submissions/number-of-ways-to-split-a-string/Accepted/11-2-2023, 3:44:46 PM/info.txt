{"id":1089726368,"question_id":1678,"lang":"java","lang_name":"Java","time":"7 months, 1 week","timestamp":1698911086,"status":10,"status_display":"Accepted","runtime":"7 ms","url":"/submissions/detail/1089726368/","is_pending":"Not Pending","title":"Number of Ways to Split a String","memory":"45 MB","code":"class Solution {\n    public int numWays(String s) {\n\n        HashMap<Integer, Integer> map = new HashMap<>(); // cnt, idx\n\n        int M = (int) 1e9+7;\n\n        long len = s.length();\n        int cnt = 0; \n        for(int i=0; i<len; i++){\n            char ch = s.charAt(i);\n            if(ch=='1'){\n                cnt++;\n                map.put(cnt, i);\n            }\n                \n        }\n\n        if(cnt%3!=0) return 0;\n        \n        // if(cnt==0) return combination(s.length()-1, 2); //TLE\n        if(cnt==0) return (int)((len-1)*(len-2)/2%M);\n\n        int each = cnt/3;\n        \n        int curr =1;\n\n        long a = map.get(cnt/3+1)-map.get(cnt/3);\n        long b = map.get(cnt/3*2+1) - map.get(cnt/3*2);\n      \n        return (int)(a*b%M);\n    }\n\n\n/* c幾取幾 => \"0000\" n-1個空格內取兩個分隔 c(n-1)取2 => (n-1)*(n-2)/2*/\n    private int combination(int n, int k){\n        if(k==0 || k==n){\n            return 1;\n        }else{\n            return combination(n-1, k) + combination(n-1, k-1);\n        }\n    }\n}\n\n/*\n10101\n1 | 01 | 01\n1 | 010 | 1\n10 | 10 | 1\n\n\n*/","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"number-of-ways-to-split-a-string","has_notes":false,"flag_type":1}