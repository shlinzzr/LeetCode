{"id":1089709847,"question_id":1678,"lang":"java","lang_name":"Java","time":"7 months, 1 week","timestamp":1698908979,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1089709847/","is_pending":"Not Pending","title":"Number of Ways to Split a String","memory":"N/A","code":"class Solution {\n    public int numWays(String s) {\n\n        int cnt = 0; \n        for(char ch : s.toCharArray()){\n            if(ch=='1')\n                cnt++;\n        }\n\n        if(cnt%3!=0)\n            return 0;\n        \n        if(cnt==0) \n            return combination(s.length()-1, 2);\n\n\n        int each = cnt/3;\n        \n        int st=-1, ed=-1;\n        int curr =1;\n\n        cnt= 0;\n        for(int i=0; i<s.length(); i++){\n            char ch = s.charAt(i);\n            if(ch=='1')\n                cnt++;\n\n            if((each==1 || cnt==each+1) && st!=-1){\n                ed = i;\n                curr *= (ed-st);\n            }\n\n            if(cnt==each){\n                cnt = 0;\n                st = i;\n            }\n\n            System.out.println(\"i=\"+i + \" st=\"+st + \" ed=\"+ed + \" cur=\"+curr);\n        }\n\n        return curr;\n    }\n\n    private int combination(int n, int k){\n        if(k==0 || k==n){\n            return 1;\n        }else{\n            return combination(n-1, k) + combination(n-1, k-1);\n        }\n    }\n}\n\n/*\n10101\n1 | 01 | 01\n1 | 010 | 1\n10 | 10 | 1\n\n\n*/","compare_result":"11101101010111100000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"number-of-ways-to-split-a-string","has_notes":false,"flag_type":1}