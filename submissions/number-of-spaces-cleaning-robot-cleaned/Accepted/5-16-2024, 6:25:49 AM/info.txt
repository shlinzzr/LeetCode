{"id":1259110045,"question_id":2203,"lang":"java","lang_name":"Java","time":"4Â weeks","timestamp":1715811949,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1259110045/","is_pending":"Not Pending","title":"Number of Spaces Cleaning Robot Cleaned","memory":"58.5 MB","code":"class Solution {\n    \n    private int m, n, r, c, d = 1;\n    private int[][] dirs = new int[][] { {}, {0,1}, {1,0}, {0,-1}, {-1,0}  };\n    \n    public int numberOfCleanRooms(int[][] room) {\n        this.m = room.length;\n        this.n = room[0].length;\n        int[][] visited = new int[m][n];\n        \n        int count = 0;\n        while (true) {\n            if (isOutOfBounds() || room[r][c] == 1) {\n                turnRight();\n                continue;\n            }\n            \n            if (visited[r][c] == d) return count;\n\n            if (visited[r][c] == 0) {\n                visited[r][c] = d;\n                count++;\n            }\n            \n            r += dirs[d][0];\n            c += dirs[d][1];\n        }\n    }\n    \n    private boolean isOutOfBounds() {\n        return r < 0 || r == m || c < 0 || c == n;\n    }\n\n    private void turnRight() {\n        r -= dirs[d][0];\n        c -= dirs[d][1];\n        d = (d % 4) + 1;        \n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"number-of-spaces-cleaning-robot-cleaned","has_notes":false,"flag_type":1}