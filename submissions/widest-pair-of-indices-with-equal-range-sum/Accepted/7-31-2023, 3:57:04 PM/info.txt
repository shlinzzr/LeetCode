{"id":1008315532,"question_id":519,"lang":"java","lang_name":"Java","time":"10 months, 2 weeks","timestamp":1690790224,"status":10,"status_display":"Accepted","runtime":"29 ms","url":"/submissions/detail/1008315532/","is_pending":"Not Pending","title":"Widest Pair of Indices With Equal Range Sum","memory":"60.5 MB","code":"class Solution {\n    public int widestPairOfIndices(int[] nums1, int[] nums2) {\n        \n//         int len1 = nums1.length;\n//         int len2 = nums2.length;\n        \n//         int[] presum1 = new int[len1];\n//         int[] presum2 = new int[len2];\n        \n//         for(int i=0; i<len1; i++){\n//             presum1+= i==0? nums1[0] : presum1[i-1] + nums1[i];\n//         }\n        \n//         for(int i=0; i<len2; i++){\n//             presum2+= i==0? nums2[0] : presum2[i-1] + nums2[i];\n//         }\n        \n//         for(int i=0; i<len1; i++){\n//         }\n        \n        Map<Integer, Integer> map = new HashMap<>(); // val, idx\n        map.put(0, -1);\n        int result = 0, sum = 0;\n        for(int i = 0; i < nums1.length; i++) {\n            sum += (nums1[i] - nums2[i]);\n            result = Math.max(result, i - map.getOrDefault(sum, i));\n            map.putIfAbsent(sum, i);\n        }\n        return result;\n        \n        \n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"widest-pair-of-indices-with-equal-range-sum","has_notes":false,"flag_type":1}