{"id":940369792,"question_id":2587,"lang":"java","lang_name":"Java","time":"1 year, 1 month","timestamp":1682563787,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/940369792/","is_pending":"Not Pending","title":"Design Memory Allocator","memory":"N/A","code":"class Allocator {\n\n    int capacity;\n    TreeSet<Integer> slot;\n    TreeSet<Integer> used;\n    HashMap<Integer, List<Integer>> map; // mId, idx\n    public Allocator(int n) {\n        capacity=n;\n        \n        slot = new TreeSet<>();\n        used = new TreeSet<>();\n        for(int i=0; i<n; i++)\n            slot.add(i);\n        \n        map = new HashMap<>();\n    }\n    \n    public int allocate(int size, int mID) {\n//            System.out.println(\"/////////\");\n//           System.out.println(\"size=\"+size);\n//         System.out.println(\"mID=\"+mID);\n//             for(int s: slot){\n//                 System.out.print(s + \",\");\n//             }\n//             System.out.println();\n            \n//             for(int u: used){\n//                 System.out.print(u + \",\");\n//             }\n//             System.out.println();\n        \n        Integer idx = slot.ceiling(0);\n      \n        if(idx==null)\n            return -1;\n        \n        while(idx!=null && idx<capacity){\n            // System.out.println(\"while idx=\"+idx);\n            //   System.out.println(\"used.floor(idx+size-1)=\"+used.floor(idx+size-1));\n            \n            if(used.floor(idx+size-1)!=null && used.floor(idx+size-1)>=idx){\n                idx = idx+size-1;\n                \n                    \n            }else{\n                \n                if(idx+size-1>capacity-1){\n                    idx+=size;\n                    break;\n                        \n                }\n                \n                map.putIfAbsent(mID, new ArrayList<>());\n                for(int i=idx; i<idx+size; i++){\n                    slot.remove(i);\n                    used.add(i);\n                    map.get(mID).add(i);\n                }\n                break;\n            }\n        }\n        if(idx>capacity)\n            return -1;\n        \n        \n        return idx;\n    }\n    \n    public int free(int mID) {\n        \n        List<Integer> list = map.get(mID);\n        if(list==null || list.size()==0)\n            return 0;\n        \n        map.remove(mID);\n        \n        for(int i : list){\n            slot.add(i);\n            used.remove(i);\n        }\n        \n        return list.size();\n    }\n}\n\n//expect [null, 0, 1, 2, 1, 3, 1, 6, 3, -1, 0]\n        //[null,0,1,2,1,3,1,6,3,9,0]\n\n      // [null, 0, 1, 2, 1, 4, 1, 3, 3, 10, 0]\n      //.\n//output [null,10,-1,-1,0,-1,-1,-1,10,10,0]\n\n/**\n * Your Allocator object will be instantiated and called as such:\n * Allocator obj = new Allocator(n);\n * int param_1 = obj.allocate(size,mID);\n * int param_2 = obj.free(mID);\n */","compare_result":"1111111111111111111111111111111011000100100111110011100100000001010110000010011000101010010111110111111111111","title_slug":"design-memory-allocator","has_notes":false,"flag_type":1}