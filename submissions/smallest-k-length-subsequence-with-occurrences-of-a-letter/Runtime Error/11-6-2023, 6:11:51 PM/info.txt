{"id":1092705091,"question_id":2157,"lang":"java","lang_name":"Java","time":"7 months, 1 week","timestamp":1699265511,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1092705091/","is_pending":"Not Pending","title":"Smallest K-Length Subsequence With Occurrences of a Letter","memory":"N/A","code":"class Solution {\n    public String smallestSubsequence(String s, int k, char letter, int repetition) {\n        \n        int k0 = s.length() - k; // # of total char can delete\n\n        int cnt =0 ;\n        for(char ch : s.toCharArray()){\n            if(ch==letter)\n                cnt++;\n        }\n        int k1 = cnt-repetition; // # of \"letter\" can delete\n\n        int cnt0 = 0;\n        int cnt1 = 0;\n        Stack<Character> st = new Stack<>();\n        for(int i=0; i<s.length(); i++){\n            char ch = s.charAt(i);\n            while(!st.isEmpty() && ch<st.peek() && cnt0<k0 && (st.peek()!=letter || (st.peek()==letter && cnt1<k1))){\n                if(st.peek()==letter)\n                    cnt1++;\n                st.pop();\n                cnt0++;\n               \n            }\n\n            st.push(ch);\n        }\n\n\n        StringBuilder sb = new StringBuilder();\n        for(char ch : st){\n            sb.append(ch);\n        }\n\n        int delIdx = sb.length()-1;\n        while(sb.length()>k){\n            while(cnt1==k1 && sb.charAt(delIdx)==letter){\n                delIdx--;\n            }\n            sb.deleteCharAt(delIdx);\n        }\n\n        return sb.toString();\n\n        \n    }\n}","compare_result":"11110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"smallest-k-length-subsequence-with-occurrences-of-a-letter","has_notes":false,"flag_type":1}