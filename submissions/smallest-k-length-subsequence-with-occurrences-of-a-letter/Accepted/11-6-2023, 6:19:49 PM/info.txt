{"id":1092709173,"question_id":2157,"lang":"java","lang_name":"Java","time":"7 months, 1 week","timestamp":1699265989,"status":10,"status_display":"Accepted","runtime":"260 ms","url":"/submissions/detail/1092709173/","is_pending":"Not Pending","title":"Smallest K-Length Subsequence With Occurrences of a Letter","memory":"44 MB","code":"class Solution {\n    public String smallestSubsequence(String s, int k, char letter, int repetition) {\n        \n        int k0 = s.length() - k; // # of total char can delete\n\n        int cnt =0 ;\n        for(char ch : s.toCharArray()){\n            if(ch==letter)\n                cnt++;\n        }\n        int k1 = cnt-repetition; // # of \"letter\" can delete\n\n        int cnt0 = 0;\n        int cnt1 = 0;\n        Stack<Character> st = new Stack<>();\n        for(int i=0; i<s.length(); i++){\n            while(!st.isEmpty() && s.charAt(i)<st.peek() && cnt0<k0 && (st.peek()!=letter || (st.peek()==letter && cnt1<k1))){\n                if(st.peek()==letter)\n                    cnt1++;\n                st.pop();\n                cnt0++;\n               \n            }\n\n            st.push(s.charAt(i));\n        }\n\n        \n        StringBuilder sb = new StringBuilder();\n        while(!st.isEmpty())\n            sb.append(st.pop());\n\n        StringBuilder res = new StringBuilder();\n        for(int i=0; i<sb.length(); i++){\n            if(cnt0==k0 || (sb.charAt(i)==letter && cnt1==k1)){\n                res.append(sb.charAt(i));\n            }else{\n                cnt0++;\n                if(sb.charAt(i)==letter)\n                    cnt1++;\n            }\n        }\n\n\n        return res.reverse().toString();\n\n        \n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"smallest-k-length-subsequence-with-occurrences-of-a-letter","has_notes":false,"flag_type":1}