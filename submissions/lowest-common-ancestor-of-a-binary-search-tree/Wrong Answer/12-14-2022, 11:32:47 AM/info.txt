{"id":859468603,"question_id":235,"lang":"java","lang_name":"Java","time":"1 year, 6 months","timestamp":1670988767,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/859468603/","is_pending":"Not Pending","title":"Lowest Common Ancestor of a Binary Search Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\n\nclass Solution {\n    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n        \n        if(root.val>p.val && root.val>q.val){\n            return lowestCommonAncestor(root.left, p, q);\n        }\n        \n        else if(root.val<p.val && root.val<q.val){\n            return lowestCommonAncestor(root.right, p, q);\n        }\n        \n        if((root.val > p.val && root.val<q.val) || (root.val>q.val && root.val<p.val))\n            return root;\n        \n        return null;\n    }\n}","compare_result":"10000011011010011101111111111","title_slug":"lowest-common-ancestor-of-a-binary-search-tree","has_notes":false,"flag_type":1}