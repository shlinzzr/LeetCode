{"id":1073309880,"question_id":235,"lang":"java","lang_name":"Java","time":"8Â months","timestamp":1697099769,"status":10,"status_display":"Accepted","runtime":"5 ms","url":"/submissions/detail/1073309880/","is_pending":"Not Pending","title":"Lowest Common Ancestor of a Binary Search Tree","memory":"43.9 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\n\nclass Solution {\n    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n        \n        if(root==null \n        || (p.val<root.val && q.val>root.val) \n        || (p.val>root.val && q.val<root.val )\n        || (p.val==root.val || q.val==root.val) ){\n            return root;\n        }else if(p.val>root.val && q.val>root.val){\n            return lowestCommonAncestor(root.right, p, q);\n        }else if(p.val<root.val && q.val<root.val){\n            return lowestCommonAncestor(root.left, p, q);\n        }\n\n        return root;\n    }\n}","compare_result":"111111111111111111111111111111","title_slug":"lowest-common-ancestor-of-a-binary-search-tree","has_notes":false,"flag_type":1}