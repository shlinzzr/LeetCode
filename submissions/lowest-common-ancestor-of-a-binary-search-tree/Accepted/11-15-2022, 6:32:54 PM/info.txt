{"id":843838224,"question_id":235,"lang":"java","lang_name":"Java","time":"1 year, 7 months","timestamp":1668508374,"status":10,"status_display":"Accepted","runtime":"18 ms","url":"/submissions/detail/843838224/","is_pending":"Not Pending","title":"Lowest Common Ancestor of a Binary Search Tree","memory":"49.4 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\n\nclass Solution {\n    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n        \n        if((root.val>=q.val && root.val<=p.val) || (root.val>=p.val && root.val<=q.val))\n            return root;\n        \n        \n        TreeNode res = null;\n        if(root.val>q.val && root.val>p.val)\n            res= lowestCommonAncestor(root.left, p, q);\n        \n        if(root.val<q.val && root.val<p.val)\n            res= lowestCommonAncestor(root.right, p, q);\n        \n        \n        return res;\n        \n    }\n}","compare_result":"11111111111111111111111111111","title_slug":"lowest-common-ancestor-of-a-binary-search-tree","has_notes":false,"flag_type":1}