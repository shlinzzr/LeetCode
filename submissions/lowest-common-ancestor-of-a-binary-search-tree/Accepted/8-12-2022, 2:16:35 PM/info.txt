{"id":771668424,"question_id":235,"lang":"java","lang_name":"Java","time":"1 year, 10 months","timestamp":1660284995,"status":10,"status_display":"Accepted","runtime":"7 ms","url":"/submissions/detail/771668424/","is_pending":"Not Pending","title":"Lowest Common Ancestor of a Binary Search Tree","memory":"50.9 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\n\nclass Solution {\n    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n        \n        if((p.val<=root.val && q.val>=root.val) || (q.val<=root.val && p.val>=root.val))\n            return root;\n        \n        else if(p.val<root.val && q.val<root.val)\n            return lowestCommonAncestor(root.left, p, q);\n        \n        else if(p.val>root.val && q.val>root.val)\n            return lowestCommonAncestor(root.right, p, q);\n        \n        else{\n            System.out.println(\"not exist\");\n            \n        }\n        \n        return null;\n        \n        \n        \n    }\n}","compare_result":"1111111111111111111111111111","title_slug":"lowest-common-ancestor-of-a-binary-search-tree","has_notes":false,"flag_type":1}