{"id":1271294920,"question_id":235,"lang":"java","lang_name":"Java","time":"2Â weeks","timestamp":1716977800,"status":10,"status_display":"Accepted","runtime":"5 ms","url":"/submissions/detail/1271294920/","is_pending":"Not Pending","title":"Lowest Common Ancestor of a Binary Search Tree","memory":"45 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\n\nclass Solution {\n    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n\n\n        if(root==null || p==null || q==null) return null;\n        \n        if(p.val < root.val && q.val<root.val){\n            return lowestCommonAncestor(root.left, p, q);\n        }else if(p.val>root.val && q.val>root.val){\n            return lowestCommonAncestor(root.right, p, q);\n        }\n\n        return root;\n        \n    }\n}","compare_result":"111111111111111111111111111111","title_slug":"lowest-common-ancestor-of-a-binary-search-tree","has_notes":false,"flag_type":1}