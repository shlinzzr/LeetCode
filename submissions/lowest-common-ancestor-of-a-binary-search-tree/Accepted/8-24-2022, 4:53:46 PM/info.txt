{"id":781999188,"question_id":235,"lang":"java","lang_name":"Java","time":"1 year, 9 months","timestamp":1661331226,"status":10,"status_display":"Accepted","runtime":"6 ms","url":"/submissions/detail/781999188/","is_pending":"Not Pending","title":"Lowest Common Ancestor of a Binary Search Tree","memory":"50.5 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\n\nclass Solution {\n    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n        if(root.val>=p.val && root.val<=q.val)\n            return root;\n        \n        if(root.val>=q.val && root.val<=p.val)\n            return root;\n        \n        TreeNode res = null;\n        if(root.val>p.val && root.val>q.val)\n            res = lowestCommonAncestor(root.left,p,q);\n        \n        if(root.val<p.val && root.val<q.val)\n            res = lowestCommonAncestor(root.right,p,q);\n        \n        return res;\n        \n    }\n}","compare_result":"1111111111111111111111111111","title_slug":"lowest-common-ancestor-of-a-binary-search-tree","has_notes":false,"flag_type":1}