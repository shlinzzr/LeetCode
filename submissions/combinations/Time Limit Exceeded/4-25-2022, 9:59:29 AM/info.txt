{"id":686959558,"question_id":77,"lang":"java","lang_name":"Java","time":"2 years, 1 month","timestamp":1650851969,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/686959558/","is_pending":"Not Pending","title":"Combinations","memory":"N/A","code":"class Solution {\n    public List<List<Integer>> combine(int n, int k) {\n        List<List<Integer>> res = new ArrayList<>();\n        \n        List<Integer> postfix =  new ArrayList<>();\n        for(int i=1; i<=n; i++){\n            postfix.add(i);\n        }\n        \n        permute(new ArrayList<Integer>(), postfix, res, n , k);\n        \n        return res;\n    }\n    \n    private void permute(List<Integer> prefix, List<Integer> postfix, List<List<Integer>> res, int n, int k){\n        \n        System.out.println(prefix);\n        \n        if(prefix.size()==k){\n            res.add(prefix);\n            return;\n        }\n        \n            \n            \n           \n         for(int p=0; p<postfix.size();  p++){\n             \n             ArrayList<Integer> newPrefix = new ArrayList<>(prefix);\n             ArrayList<Integer> newPostfix = new ArrayList<>(postfix);\n             \n             int max = 0;\n             for(int pre : prefix){\n                 if(pre > max)\n                     max = pre;\n             }\n             \n             if(max < postfix.get(p)){\n                 newPrefix.add( postfix.get(p) );\n                 newPostfix.remove( postfix.get(p) );\n                 permute(newPrefix, newPostfix, res, n, k);\n             }\n            \n         }\n            \n           \n        \n        \n      \n    }\n}","compare_result":"111111111111111111111111110","title_slug":"combinations","has_notes":false,"flag_type":1}