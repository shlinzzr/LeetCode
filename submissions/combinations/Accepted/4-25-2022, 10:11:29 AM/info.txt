{"id":686964759,"question_id":77,"lang":"java","lang_name":"Java","time":"2 years, 1 month","timestamp":1650852689,"status":10,"status_display":"Accepted","runtime":"28 ms","url":"/submissions/detail/686964759/","is_pending":"Not Pending","title":"Combinations","memory":"54.7 MB","code":"\n\n\nclass Solution {\n//     public List<List<Integer>> combine(int n, int k) {\n//         List<List<Integer>> res = new ArrayList<>();\n        \n//         List<Integer> postfix =  new ArrayList<>();\n//         for(int i=1; i<=n; i++){\n//             postfix.add(i);\n//         }\n        \n//         permute(new ArrayList<Integer>(), postfix, res, n , k);\n        \n//         return res;\n//     }\n    \n//     private void permute(List<Integer> prefix, List<Integer> postfix, List<List<Integer>> res, int n, int k){\n        \n//         // System.out.println(prefix);\n        \n//         if(prefix.size()==k){\n//             res.add(prefix);\n//             return;\n//         }\n//          for(int p=0; p<postfix.size();  p++){\n             \n//              ArrayList<Integer> newPrefix = new ArrayList<>(prefix);\n//              ArrayList<Integer> newPostfix = new ArrayList<>(postfix);\n             \n//              int max = 0;\n//              for(int pre : prefix){\n//                  if(pre > max)\n//                      max = pre;\n//              }\n             \n//              if(max < postfix.get(p)){\n//                  newPrefix.add( postfix.get(p) );\n//                  newPostfix.remove( postfix.get(p) );\n//                  permute(newPrefix, newPostfix, res, n, k);\n//              }\n            \n//          }\n//     }\n    \n    public static List<List<Integer>> combine(int n, int k) {\n\t\tList<List<Integer>> ans = new ArrayList<List<Integer>>();\n\t\tcombine(ans, new ArrayList<Integer>(), 1, n, k);\n\t\treturn ans;\n\t}\n\tpublic static void combine(List<List<Integer>> ans, List<Integer> prefix, int start, int n, int k) {\n\t\tif(k==0) {\n\t\t\tans.add(new ArrayList<Integer>(prefix));\n\t\t\treturn;\n\t\t}\n\t\tfor(int i=start;i<=n;i++) {\n\t\t\tprefix.add(i);\n\t\t\tcombine(ans, prefix, i+1, n, k-1);\n\t\t\tprefix.remove(prefix.size()-1);\n\t\t}\n\t}\n\n    \n    \n}","compare_result":"111111111111111111111111111","title_slug":"combinations","has_notes":false,"flag_type":1}