{"id":987576522,"question_id":1034,"lang":"java","lang_name":"Java","time":"11Â months, 1Â week","timestamp":1688627937,"status":10,"status_display":"Accepted","runtime":"55 ms","url":"/submissions/detail/987576522/","is_pending":"Not Pending","title":"Subarrays with K Different Integers","memory":"44.8 MB","code":"class Solution {\n    public int subarraysWithKDistinct(int[] nums, int k) {\n      \n        int a = leetcode340(nums, k) ;\n        int b = leetcode340(nums, k-1);\n        \n        return a-b;\n        \n    }\n    \n    // leetcode 340 => find the longest length of substring\n    // 992 request to find the \"number\" of the subarray: ref line 40\n     public int leetcode340(int[] nums, int k) {\n        int len = nums.length;\n        \n        int st= 0;\n        \n        HashMap<Integer, Integer> map = new HashMap<>();\n        \n        int res =0 ;\n        \n        for(int ed=0; ed<len; ed++){\n            \n            int n = nums[ed];\n            \n            map.put(n, map.getOrDefault(n, 0)+1);\n            \n            while(map.size()>k){\n                \n                int nn = nums[st];\n                map.put(nn, map.get(nn)-1);\n                if(map.get(nn)==0)\n                    map.remove(nn);\n                \n                st++;\n            }\n            \n            // the key is below : \n            // res = Math.max(res, ed-st+1);   // find longest;\n            res+=(ed-st+1);                    // find total number of subarray\n        }\n        return res;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111","title_slug":"subarrays-with-k-different-integers","has_notes":false,"flag_type":1}