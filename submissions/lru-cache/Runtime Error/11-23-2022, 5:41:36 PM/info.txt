{"id":848517622,"question_id":146,"lang":"java","lang_name":"Java","time":"1 year, 6 months","timestamp":1669196496,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/848517622/","is_pending":"Not Pending","title":"LRU Cache","memory":"N/A","code":"class LRUCache {\n\n    class Node{\n        \n        Node prev;\n        Node next;\n        Integer key;\n        Integer val;\n        \n        public Node(Integer key, Integer val){\n            this.key=key;\n            this.val=val;\n        }\n        \n    }\n    \n    Node head;\n    Node tail;\n    int capacity ;\n    HashMap<Integer, Node> map;\n    \n    \n    public LRUCache(int capacity) {\n        \n        this.head = new Node(null, null);\n        this.tail = new Node(null, null);\n        this.head.next = tail;\n        this.tail.prev = head;\n        this.capacity = capacity;\n        this.map = new HashMap<>();\n    }\n    \n    public int get(int key) {\n        if(!map.containsKey(key))\n            return -1;\n        \n        Node node = map.get(key);\n        removeNode(node);\n        addNode(node);\n        return node.val;\n    }\n\n    private void removeNode(Node node){\n        \n        map.remove(node.key);\n        \n        Node prev = node.prev;\n        Node next = node.next;\n        prev.next = next;\n        next.prev = prev;\n        \n    }\n    \n    private void addNode(Node node){\n        Node next = head.next;\n        \n        node.prev = head;\n        node.next = next;\n        head.next = node;\n        next.prev= node;\n        \n        map.put(node.key, node);\n        \n        if(map.size()>capacity){\n            // Node prev = tail.prev;\n            // map.remove(prev.key);\n            // prev.next=null;\n            removeNode(tail.prev);\n        }\n    }\n    \n    public void put(int key, int value) {\n        Node node = new Node(key, value);\n        if(!map.containsKey(key))\n            addNode(node);\n        else{\n            removeNode(node);\n            addNode(node);\n        }\n    }\n}\n\n/**\n * Your LRUCache object will be instantiated and called as such:\n * LRUCache obj = new LRUCache(capacity);\n * int param_1 = obj.get(key);\n * obj.put(key,value);\n */","compare_result":"1111111000000000000000","title_slug":"lru-cache","has_notes":false,"flag_type":1}