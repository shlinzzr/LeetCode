{"id":794566817,"question_id":146,"lang":"java","lang_name":"Java","time":"1 year, 9 months","timestamp":1662623730,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/794566817/","is_pending":"Not Pending","title":"LRU Cache","memory":"N/A","code":"class LRUCache {\n\n    class Node{\n        Integer key;\n        Integer val;\n        Node prev;\n        Node next;\n\n        public Node(Integer k, Integer v){\n            key=k;\n            val=v;\n        }\n        \n    }\n    \n    Node head;\n    Node tail;\n    HashMap<Integer, Node> map;\n    int capacity;\n    \n    public LRUCache(int capacity) {\n        this.head = new Node(null,null);\n        this.tail = new Node(null,null);\n        this.head.next = tail;\n        this.tail.prev = head;\n        this.map = new HashMap<>();\n        this.capacity = capacity;\n    }\n    \n    public int get(int key) {\n        if(!map.containsKey(key)){\n            return -1;\n        }else{\n            Node node = map.get(key);\n            removeNode(node);\n            addNode(node);\n            return node.val;\n        }\n    }\n    \n    private void removeNode(Node node){\n        \n        map.remove(node.val);\n        Node prev = node.prev;\n        Node next = node.next;\n        prev.next = next;\n        next.prev = prev;\n    }\n    \n    \n    private void addNode(Node node){\n        Node prev = head;\n        Node next = head.next;\n        node.prev = head;\n        node.next = next;\n        head.next = node;\n        next.prev = node;\n        map.put(node.val, node);\n        \n        if(map.size()>capacity){\n            removeNode(tail.prev);\n        }\n        \n    }\n    \n    \n    public void put(int key, int value) {\n        Node node = new Node(key, value);\n        \n        if(!map.containsKey(key)){\n            addNode(node);\n        }else{\n            removeNode(map.get(key));\n            addNode(node);\n        }\n        \n    }\n}\n\n\n\n\n/**\n * Your LRUCache object will be instantiated and called as such:\n * LRUCache obj = new LRUCache(capacity);\n * int param_1 = obj.get(key);\n * obj.put(key,value);\n */","compare_result":"1100000000001000000001","title_slug":"lru-cache","has_notes":false,"flag_type":1}