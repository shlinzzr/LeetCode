{"id":997166363,"question_id":146,"lang":"java","lang_name":"Java","time":"11Â months","timestamp":1689646515,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/997166363/","is_pending":"Not Pending","title":"LRU Cache","memory":"N/A","code":"class LRUCache {\n\n    class Node{\n        \n        \n        int key;\n        int val;\n        \n        Node next;\n        Node prev;\n        \n        \n        public Node(){\n        }\n        \n        public Node(int key, int val){\n            this.key = key;\n            this.val = val;\n        }\n        \n    }\n    \n    Node head;\n    Node tail;\n    HashMap<Integer, Node> map;\n    int capacity;\n    \n    \n    public LRUCache(int capacity) {\n        head = new Node();\n        tail = new Node();\n        head.next = tail;\n        tail.prev = head;\n        this.capacity = capacity;\n        map = new HashMap<>();\n    }\n    \n    public int get(int key) {\n        \n        if(!map.containsKey(key))\n            return -1;\n        \n        \n        // remove\n        \n        \n        Node node = map.get(key);\n        remove(node, map);\n        // Node prev = node.prev;\n        // Node next = node.next;\n        // prev.next = next;\n        // next.prev = prev;\n        \n        // add\n        add(node, map);\n        // next = head.next;\n        // head.next = node;\n        // node.next = next;\n        // node.prev = head;\n        // next.prev = node;\n        \n        \n        return node.val;\n    }\n    \n    \n    private void remove(Node node, HashMap<Integer, Node> map){\n         // remove\n        Node prev = node.prev;\n        Node next = node.next;\n        prev.next = next;\n        next.prev = prev;\n        \n        map.remove(node.key);\n    }\n    \n    \n    private void add(Node node, HashMap<Integer, Node> map){\n        Node next = head.next;\n        head.next = node;\n        node.next = next;\n        node.prev = head;\n        next.prev = node;\n        \n        map.put(node.key, node);\n    }\n    \n    \n    public void put(int key, int value) {\n        \n        Node node = new Node(key, value);\n        \n        if(map.containsKey(key)){\n           node = map.get(key); \n           remove(node, map);\n        }\n        add(node, map);\n        \n        if(map.size()>capacity){\n            remove(tail.prev, map);\n        }        \n        \n    }\n}\n\n/**\n * Your LRUCache object will be instantiated and called as such:\n * LRUCache obj = new LRUCache(capacity);\n * int param_1 = obj.get(key);\n * obj.put(key,value);\n */","compare_result":"1111111010011000000011","title_slug":"lru-cache","has_notes":false,"flag_type":1}