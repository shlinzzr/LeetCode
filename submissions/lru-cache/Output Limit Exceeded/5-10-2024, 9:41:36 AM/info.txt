{"id":1254037044,"question_id":146,"lang":"java","lang_name":"Java","time":"1Â month","timestamp":1715305296,"status":13,"status_display":"Output Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1254037044/","is_pending":"Not Pending","title":"LRU Cache","memory":"N/A","code":"class LRUCache {\n\n    class Node{\n\n        int key;\n        int val;\n        Node next;\n        Node prev;\n\n        public Node(){}\n\n        public Node(int key, int val){\n            this.key = key;\n            this.val = val;\n        }\n    }\n    int capacity;\n    Node head;\n    Node tail;\n    Map<Integer, Node> map;\n\n    public LRUCache(int capacity) {\n        this.capacity = capacity;\n        head = new Node();\n        tail = new Node();\n        head.prev = tail;\n        tail.next = head;\n\n        map  = new HashMap<>();\n\n    }\n    \n    public int get(int key) {\n\n        if(!map.containsKey(key)) return -1;\n\n        Node node = map.get(key);\n\n        Node prev = node.prev;\n        Node next = node.next;\n        if(prev!=null) prev.next = next;\n        if(next!=null) next.prev = prev;\n\n        // add from tail\n        Node last = tail.next;\n        last.prev = node;\n        node.prev = tail;\n        tail.next = node;\n        node.next = last;\n\n        return node.val;\n        \n    }\n    \n    public void put(int key, int value) {\n\n        if(map.containsKey(key)){\n            Node node = map.get(key);\n            node.val = value;\n            get(key);\n\n        }else{\n            if(map.size()==capacity){\n                Node first = head.prev;\n                Node prev = first.prev;\n\n                prev.next = head;\n                head.prev = prev;\n                map.remove(first.key);\n            }\n\n            Node node = new Node(key, value);\n            map.put(key, node);\n            get(key);\n        }\n\n        System.out.println(map);\n        \n    }\n}\n\n/**\n * Your LRUCache object will be instantiated and called as such:\n * LRUCache obj = new LRUCache(capacity);\n * int param_1 = obj.get(key);\n * obj.put(key,value);\n */","compare_result":"1111111111111111110000","title_slug":"lru-cache","has_notes":false,"flag_type":1}