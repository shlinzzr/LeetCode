{"id":965030392,"question_id":146,"lang":"java","lang_name":"Java","time":"1Â year","timestamp":1686042553,"status":10,"status_display":"Accepted","runtime":"80 ms","url":"/submissions/detail/965030392/","is_pending":"Not Pending","title":"LRU Cache","memory":"127.9 MB","code":"class LRUCache {\n    \n    class Node{\n        Node next;\n        Node prev;\n        int key;\n        int val;\n        \n        public Node(){}\n        \n        public Node(int key, int val){\n            this.key = key;\n            this.val = val;\n        }\n    }\n    \n    Node head;\n    Node tail;\n    int capacity;\n    HashMap<Integer, Node> map;\n        \n    \n    public LRUCache(int capacity) {\n        head = new Node();\n        tail = new Node();\n        head.next = tail;\n        tail.prev = head;\n        this.capacity = capacity;\n        map = new HashMap<>();\n    }\n    \n    public int get(int key) {\n        \n        if(!map.containsKey(key)){\n            return -1;\n        }\n        \n        Node node = map.get(key);\n        \n        remove(node);\n        add(node);\n        \n        return node.val;\n    }\n    \n    private void remove(Node node){\n        map.remove(node.key);\n        \n        Node next = node.next;\n        Node prev = node.prev;\n        prev.next = next;\n        next.prev = prev;\n    }\n    \n    private void add(Node node){\n        \n        Node next = head.next;\n        head.next = node;\n        node.next = next;\n        next.prev = node;\n        node.prev = head;\n        \n        map.put(node.key, node);\n    }\n    \n    \n    //  public void put(int key, int value) {\n    //     Node node = new Node(key, value);\n    //     if(map.containsKey(key))\n    //         remove(map.get(key));\n    //     System.out.println(node.key + \" \" + node.val);\n    //     add(node);\n    //     if(map.size()>capacity)\n    //         remove(tail.prev);\n    // }\n    \n    public void put(int key, int value) {\n        \n        if(map.containsKey(key)){\n            remove(map.get(key));\n        }\n        Node node = new Node(key, value);\n        add(node);\n        if(map.size()>capacity)\n            remove(tail.prev);\n    }\n}\n\n/**\n * Your LRUCache object will be instantiated and called as such:\n * LRUCache obj = new LRUCache(capacity);\n * int param_1 = obj.get(key);\n * obj.put(key,value);\n */","compare_result":"1111111111111111111111","title_slug":"lru-cache","has_notes":false,"flag_type":1}