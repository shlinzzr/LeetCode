{"id":879605289,"question_id":146,"lang":"java","lang_name":"Java","time":"1 year, 4 months","timestamp":1673923138,"status":10,"status_display":"Accepted","runtime":"71 ms","url":"/submissions/detail/879605289/","is_pending":"Not Pending","title":"LRU Cache","memory":"119.5 MB","code":"class LRUCache {\n\n    \n    class Node{\n        \n        Integer key;\n        Integer val;\n        Node next;\n        Node prev;\n        \n        public Node(Integer key, Integer val){\n            this.key=key;\n            this.val=val;\n        }\n    }\n    \n    Node head;\n    Node tail;\n    HashMap<Integer, Node> map;\n    int capacity;\n    \n    public LRUCache(int capacity) {\n        \n        head = new Node(null, null);\n        tail = new Node(null, null);\n        head.next=tail;\n        tail.prev=head;\n        map=new HashMap<Integer, Node>();\n        this.capacity=capacity;\n        \n    }\n    \n    public int get(int key) {\n        if(!map.containsKey(key))\n            return -1;\n        \n        Node node = map.get(key);\n        remove(node);\n        add(node);\n        \n        return node.val;\n    }\n    \n    private boolean remove(Node node){\n        \n        if(!map.containsKey(node.key)){\n            return false;\n        }\n        \n        map.remove(node.key);\n        \n        Node next = node.next;\n        Node prev = node.prev;\n        prev.next=next;\n        next.prev=prev;\n        \n        return true;\n    }\n    \n    private void add(Node node){\n        Node next = head.next;\n        node.next = next;\n        next.prev=node;\n        head.next=node;\n        node.prev=head;\n        map.put(node.key, node);\n        \n        if(map.size()>capacity){\n            remove(tail.prev);\n        }\n    }\n    \n    \n    public void put(int key, int value) {\n        Node node = new Node(key, value);\n        if(!map.containsKey(key)){\n            add(node);\n        }else{\n            remove(map.get(key));\n            add(node);\n        }\n    }\n}\n\n/**\n * Your LRUCache object will be instantiated and called as such:\n * LRUCache obj = new LRUCache(capacity);\n * int param_1 = obj.get(key);\n * obj.put(key,value);\n */","compare_result":"1111111111111111111111","title_slug":"lru-cache","has_notes":false,"flag_type":1}