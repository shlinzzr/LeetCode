{"id":898983096,"question_id":11,"lang":"java","lang_name":"Java","time":"1 year, 3 months","timestamp":1676531398,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/898983096/","is_pending":"Not Pending","title":"Container With Most Water","memory":"N/A","code":"class Solution {\n    public int maxArea(int[] height) {\n        int len = height.length;\n        \n        Stack<Integer> st = new Stack<>();\n        int[] left = new int[len];\n        int max = 0;\n        for(int i=0; i<len; i++){\n            \n            if(height[i]>height[max]){\n                max = i;\n            }\n            left[i] = max;          \n        }\n        \n        \n//         for(int l : left){\n//             System.out.print(l+ \", \");\n//         }\n//         System.out.println();\n        \n        int[] right = new int[len];\n        max = 0;\n        for(int i=len-1; i>=0; i--){\n            if(height[i]>height[max]){\n                max = i;\n            }\n            right[i] = max;          \n        }\n        \n//          for(int r : right){\n//             System.out.print(r+ \", \");\n//         }\n//         System.out.println();\n        \n        \n        max = 0;\n        for(int i=0; i<len; i++){\n            // System.out.println(\"i=\"+i + \" max=\"+(right[i]-left[i]-1)*Math.min(height[right[i]], height[left[i]]));\n            \n            max = Math.max(max, (right[i]-left[i])*Math.min(height[right[i]], height[left[i]]));\n        }\n        return max;\n        \n    }\n}","compare_result":"1000101100101101111110111100001100010000010101000000000100001","title_slug":"container-with-most-water","has_notes":false,"flag_type":1}