{"id":923381749,"question_id":307,"lang":"java","lang_name":"Java","time":"1 year, 2 months","timestamp":1679974101,"status":10,"status_display":"Accepted","runtime":"138 ms","url":"/submissions/detail/923381749/","is_pending":"Not Pending","title":"Range Sum Query - Mutable","memory":"71 MB","code":"class NumArray {\n\n    class SegmentTreeNode {\n        int start, end;\n        SegmentTreeNode left, right;\n        int sum;\n\n        public SegmentTreeNode(int start, int end) {\n            this.start = start;\n            this.end = end;\n            this.left = null;\n            this.right = null;\n            this.sum = 0;\n        }\n    }\n      \n    SegmentTreeNode root = null;\n    \n    public NumArray(int[] nums) {\n        root = buildTree(nums, 0, nums.length-1);\n    }\n    \n    private SegmentTreeNode buildTree(int[] nums, int start, int end) {\n        if(start>end)\n            return null;\n        else{\n            SegmentTreeNode ret = new SegmentTreeNode(start, end);\n            if(start==end){\n                ret.sum = nums[start];\n            }else{\n                int mid = start + (end-start)/2;\n                ret.left=buildTree(nums, start, mid);\n                ret.right = buildTree(nums, mid+1, end);\n                ret.sum = ret.left.sum + ret.right.sum;\n            }\n            \n            return ret;\n        }\n          \n    }\n    \n    \n    public void update(int index, int val) {\n        update(root, index, val);\n    }\n    \n    private void update(SegmentTreeNode root, int idx, int val) {\n        if(root.start==root.end)\n            root.sum=val;\n        else{\n            int mid = root.start + (root.end - root.start) / 2;\n            if (idx <= mid) {\n                 update(root.left, idx, val);\n            }else{\n                 update(root.right, idx, val);\n            }\n            \n            root.sum = root.left.sum + root.right.sum;\n        }\n       \n    }\n    \n    \n    public int sumRange(int left, int right) {\n         return sumRange(root, left, right);\n    }\n        \n        \n    public int sumRange(SegmentTreeNode root, int start, int end) {\n        if (root.end == end && root.start == start) {\n            return root.sum;\n        } else {\n            int mid = root.start + (root.end - root.start) / 2;\n            if (end <= mid) {\n                return sumRange(root.left, start, end);\n            } else if (start >= mid+1) {\n                return sumRange(root.right, start, end);\n            }  else {    \n                return sumRange(root.right, mid+1, end) + sumRange(root.left, start, mid);\n            }\n        }\n    }\n}\n\n/**\n * Your NumArray object will be instantiated and called as such:\n * NumArray obj = new NumArray(nums);\n * obj.update(index,val);\n * int param_2 = obj.sumRange(left,right);\n */","compare_result":"1111111111111111","title_slug":"range-sum-query-mutable","has_notes":false,"flag_type":1}