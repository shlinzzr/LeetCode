{"id":763094069,"question_id":668,"lang":"java","lang_name":"Java","time":"1 year, 10 months","timestamp":1659430795,"status":10,"status_display":"Accepted","runtime":"27 ms","url":"/submissions/detail/763094069/","is_pending":"Not Pending","title":"Kth Smallest Number in Multiplication Table","memory":"41 MB","code":"// TLE\n\n// class Solution {\n//     public int findKthNumber(int m, int n, int k) {\n        \n//         PriorityQueue<Tuple> pq = new PriorityQueue<>();\n//         for(int i=1; i<=m; i++){\n//             pq.offer(new Tuple(i, 1, i));\n//         }\n//         int res = 0;\n        \n//         while(k>0 && !pq.isEmpty()){\n//             Tuple t = pq.poll();\n            \n//             res = t.val;\n//             k--;\n            \n//             if(t.y==n)\n//                 continue;\n//             pq.offer(new Tuple(t.x, t.y+1, t.x*(t.y+1)));\n//         }\n        \n//         return res;\n    \n//     }\n// }\n\n\n// class Tuple implements Comparable<Tuple>{\n    \n//     int x, y, val;\n//     public Tuple(int x, int y, int val){\n//         this.x = x;\n//         this.y = y;\n//         this.val = val;\n        \n//     }\n    \n//     @Override \n//     public int compareTo(Tuple that){\n//         return this.val - that.val;\n//     }\n// }\n\n// Sol: binary search\nclass Solution {\n    public int findKthNumber(int m, int n, int k) {\n    \tint low = 1 , high = m * n + 1;\n        \n    \twhile (low < high) {\n    \t    int mid = low + (high - low) / 2;\n    \t    int c = count(mid, m, n);\n    \t    if (c >= k) high = mid;\n            else low = mid + 1;\n    \t}\n        \n    \treturn high;\n    }\n    \n    private int count(int v, int m, int n) {\n\tint count = 0;\n\tfor (int i = 1; i <= m; i++) {\n\t    int temp = Math.min(v / i , n);\n\t    count += temp;\n\t}\n\treturn count;\n    }\n}\n\n\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"kth-smallest-number-in-multiplication-table","has_notes":false,"flag_type":1}