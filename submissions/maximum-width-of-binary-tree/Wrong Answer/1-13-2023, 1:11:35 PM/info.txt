{"id":877225150,"question_id":662,"lang":"java","lang_name":"Java","time":"1 year, 5 months","timestamp":1673586695,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/877225150/","is_pending":"Not Pending","title":"Maximum Width of Binary Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public int widthOfBinaryTree(TreeNode root) {\n        \n        // use bfs trace by level;\n        \n        Queue<TreeNode> q = new LinkedList<>();\n        q.offer(root);\n        \n        int max = 0;\n        \n        while(!q.isEmpty()){\n                \n            max = Math.max(max, q.size());\n            \n            for(int i=q.size(); i>0; i--){\n                \n                TreeNode n  = q.poll();\n                if(n==null)\n                    continue;\n                \n                if(n.left==null && n.right==null)\n                    continue;\n                \n                q.add(n.left);\n                q.add(n.right);\n                \n            }\n            \n        }\n        \n\n        return max;\n        \n        \n    }\n    \n}","compare_result":"101011100010000110110100100001110011110110111110110000100110110100100000010011110010110101100000010000110010000000","title_slug":"maximum-width-of-binary-tree","has_notes":false,"flag_type":1}