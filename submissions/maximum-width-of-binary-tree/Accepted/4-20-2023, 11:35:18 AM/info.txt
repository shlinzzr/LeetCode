{"id":936687130,"question_id":662,"lang":"java","lang_name":"Java","time":"1 year, 1 month","timestamp":1681961718,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/936687130/","is_pending":"Not Pending","title":"Maximum Width of Binary Tree","memory":"42.3 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    \n    List<List<Integer>> list = new ArrayList<>();\n    \n    public int widthOfBinaryTree(TreeNode root) {\n        \n        helper(root, 0, 0);\n        \n        int max = 0;\n        for(List<Integer> sub : list){\n            Collections.sort(sub);\n            int width = sub.get(sub.size()-1) - sub.get(0) +1;\n            max = Math.max(max, width) ;\n        }\n        return max;\n        \n    }\n    \n    private void helper(TreeNode root, int idx, int level){\n        \n        \n        if(root==null)\n            return;\n        \n        if(list.size()<level+1){\n            list.add(new ArrayList<>());\n        }\n        \n        list.get(level).add(idx);\n        \n        helper(root.left, 2*idx+1, level+1);\n        helper(root.right, 2*idx+2, level+1);\n        \n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-width-of-binary-tree","has_notes":false,"flag_type":1}