{"id":1079016770,"question_id":662,"lang":"java","lang_name":"Java","time":"7 months, 3 weeks","timestamp":1697702156,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/1079016770/","is_pending":"Not Pending","title":"Maximum Width of Binary Tree","memory":"42.9 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public int widthOfBinaryTree(TreeNode root) {\n        List<List<Integer>> list = new ArrayList<>();\n        int max= 0;\n\n        helper(list, 0, root, 0);\n\n        for(List<Integer> sub : list){\n            max =Math.max(max, sub.get(sub.size()-1) - sub.get(0)+1);\n        }\n\n        return max;\n    }\n\n    private void helper( List<List<Integer>> list, int idx, TreeNode node, int lv){\n\n        if(node==null)\n            return ;\n\n        if(list.size()<lv+1)\n            list.add(new ArrayList<>());\n\n        list.get(lv).add(idx);\n\n        helper(list, 2*idx+1, node.left, lv+1);\n        helper(list, 2*idx+2, node.right, lv+1);\n        \n\n\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-width-of-binary-tree","has_notes":false,"flag_type":1}