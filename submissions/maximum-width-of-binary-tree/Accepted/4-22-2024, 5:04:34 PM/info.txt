{"id":1238896211,"question_id":662,"lang":"java","lang_name":"Java","time":"1 month, 3 weeks","timestamp":1713776674,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/1238896211/","is_pending":"Not Pending","title":"Maximum Width of Binary Tree","memory":"44.2 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n\n    List<List<Integer>> list = new ArrayList<>();\n\n    public int widthOfBinaryTree(TreeNode root) {\n        helper(root, 0, 0);\n\n        int max = 0;\n        for(int i=0; i<list.size(); i++){\n\n            List<Integer> sub = list.get(i);\n\n            max = Math.max( sub.get(sub.size()-1) - sub.get(0)+1, max);\n        }\n\n        return max;\n    }\n\n    private void helper(TreeNode node, int lv, int idx){\n        if(node==null) return;\n\n        if(list.size()<lv+1){\n            list.add(new ArrayList<>());\n        }\n\n        list.get(lv).add(idx);\n        helper(node.left, lv+1, 2*idx);\n        helper(node.right, lv+1, 2*idx+1);\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-width-of-binary-tree","has_notes":false,"flag_type":1}