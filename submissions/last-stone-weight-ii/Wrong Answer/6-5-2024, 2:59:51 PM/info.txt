{"id":1278194380,"question_id":1130,"lang":"java","lang_name":"Java","time":"1 week","timestamp":1717570791,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1278194380/","is_pending":"Not Pending","title":"Last Stone Weight II","memory":"N/A","code":"class Solution {\n    public int lastStoneWeightII(int[] stones) {\n        \n\n        // 1d - dp\n        // boolean[] dp = new boolean[1501];\n        // dp[0] = true;\n        // int sumA = 0;\n        // for (int a : stones) {\n        //     sumA += a;\n        //     for (int i = Math.min(1500, sumA); i >= a; --i)\n        //         dp[i] |= dp[i - a];\n        // }\n        // for (int i = sumA / 2; i >= 0; --i)\n        //     if (dp[i]) return sumA - i - i;\n        // return 0;\n\n\n        // 2d- dp \n        int len = stones.length;\n\n        boolean[][] dp = new boolean[len+1][1501]; //使用了前i個石頭 可以組成x \n        for(int i=0; i<=len; i++){\n            dp[i][0]=true; //  不管用了幾種石頭, 都可以組成0\n        }\n\n        int sum = 0;\n        for(int i=1; i<=len; i++){\n            sum += stones[i-1]; //累計\n            for (int x = Math.min(1500, sum); x >= stones[i-1]; --x) {  // 查看所有組合數, 若之前可以組, 那就可以往上疊加\n                dp[i][x] = dp[i-1][x] || dp[i-1][x - stones[i-1]];\n            }\n        }\n        for (int x = sum / 2; x >= 0; x--) {\n            if (dp[len][x]) return sum - 2 * x;\n        }\n        return 0;\n\n\n        // // huifeng ... 過不了\n        // Set<Integer> set = new HashSet<>();\n        // set.add(0);\n\n        // for(int a: stones){\n        //     Set<Integer> tmp = new HashSet<>(set);\n        //     set.clear();\n        //     for(int b: tmp){\n        //         set.add(a+b);\n        //         set.add(a-b);\n        //     }\n        // }\n\n        // int res = Integer.MAX_VALUE;\n        // for(int x: set){\n        //     if(x>=0 && res>x);\n        //         res = x;\n        // }\n\n        // return res;\n\n     \n        // int cnt = len ;\n        // Arrays.sort(stones);\n        // List<Integer> list = new ArrayList<>();\n        // for(int s : stones) list.add(s);\n\n        // while(list.size()>1){\n\n        //     List<Integer> next = new ArrayList<>();\n        //     for(int i=list.size()-1; i-1>=0; i-=2){\n        //         int a = list.get(i);\n        //         int b = list.get(i-1);\n        //         if(a==b){\n        //             cnt-=2;\n        //             continue;\n        //         }\n        //         else{\n        //             int abs = Math.abs(a-b);\n        //             cnt--;\n        //             next.add(abs);\n        //         }\n        //     }\n        //     list = next;\n        //     Collections.sort(list);\n        // }\n\n        // return list.isEmpty() ? 0 : list.get(0);\n        \n\n      \n    }\n}","compare_result":"110101111111111111111111111111111111111110111111010111111111101101110111111111111111110001","title_slug":"last-stone-weight-ii","has_notes":false,"flag_type":1}