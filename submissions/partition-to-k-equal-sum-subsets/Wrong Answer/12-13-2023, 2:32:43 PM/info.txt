{"id":1118610004,"question_id":698,"lang":"java","lang_name":"Java","time":"6Â months","timestamp":1702449163,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1118610004/","is_pending":"Not Pending","title":"Partition to K Equal Sum Subsets","memory":"N/A","code":"class Solution {\n    public boolean canPartitionKSubsets(int[] nums, int k) {\n        int len = nums.length;\n\n        int sum = 0;\n        for(int n: nums){\n            sum+=n;\n        }\n\n        if(sum%k!=0) return false;\n        int target = sum/4;\n\n        int[] arr = new int[k];\n\n        Arrays.sort(nums);\n\n        return match(nums, len-1, arr, target);\n    }\n\n    private boolean match(int[] nums, int idx, int[] arr, int target){\n        boolean rt = true;\n        for(int i=0; i<arr.length; i++){\n            if(arr[i]!=target)\n                rt = false;\n        }\n\n        if(rt) return true;\n\n        rt = true;\n        for(int i=0; i<arr.length; i++){\n            if(arr[i]>target)\n                rt = false;\n        }\n\n        if(rt==false) return false;\n\n        int v = nums[idx];\n        for(int i=0; i<arr.length; i++){\n            arr[i] += v;\n            if(match(nums, idx-1, arr, target)){\n                return true;\n            }\n            arr[i]-=v;\n        }\n\n        return false;\n\n\n    }\n\n\n\n}","compare_result":"1100111000010011011100000100000100100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"partition-to-k-equal-sum-subsets","has_notes":false,"flag_type":1}