{"id":1118618720,"question_id":698,"lang":"java","lang_name":"Java","time":"6Â months","timestamp":1702449907,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1118618720/","is_pending":"Not Pending","title":"Partition to K Equal Sum Subsets","memory":"N/A","code":"class Solution {\n    public boolean canPartitionKSubsets(int[] nums, int k) {\n        int len = nums.length;\n\n        int sum = 0;\n        for(int n: nums){\n            sum+=n;\n        }\n\n        if(sum%k!=0) return false;\n        int target = sum/k;\n\n        int[] arr = new int[k];\n\n        Arrays.sort(nums);\n\n        return match(nums, len-1, arr, target);\n    }\n\n    private boolean match(int[] nums, int idx, int[] arr, int target){\n\n        boolean allMatch = true;\n        for(int i=0; i<arr.length; i++){\n            if(arr[i]!=target)\n                allMatch = false;\n        }\n\n        if(allMatch) return true;\n\n        boolean overTarget = false;\n        for(int i=0; i<arr.length; i++){\n            if(arr[i]>target)\n                overTarget = true;\n        }\n        if(overTarget) return false;\n\n        int val= nums[idx];\n        for(int i=0; i<arr.length; i++){\n\n            if(arr[i]+val<=target){\n                arr[i] += val;\n                if(match(nums, idx-1, arr, target)){\n                    return true;\n                }\n                arr[i] -= val;\n            }\n            \n        }\n\n        return false;\n\n\n    }\n\n\n\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000000","title_slug":"partition-to-k-equal-sum-subsets","has_notes":false,"flag_type":1}