{"id":1134495276,"question_id":698,"lang":"java","lang_name":"Java","time":"5 months, 1 week","timestamp":1704188192,"status":10,"status_display":"Accepted","runtime":"701 ms","url":"/submissions/detail/1134495276/","is_pending":"Not Pending","title":"Partition to K Equal Sum Subsets","memory":"58.8 MB","code":"class Solution {\n    int cnt =0 ;\n    List<Integer> list = new ArrayList<>();\n\n    Boolean[][] dp;\n    public boolean canPartitionKSubsets(int[] nums, int k) {\n        int len = nums.length;\n\n        dp = new Boolean[1<<len][k+1];\n\n        int sum = 0 ;\n        for(int n : nums){\n            sum+=n;\n        }\n\n        if(sum%k!=0) return false;\n        int target = sum/k;\n        return dfs(nums, 0, 0, target, k);\n\n    }\n\n    private boolean dfs(int[] nums, int state, int cur , int target, int k){\n        if(cur>target) return false;\n\n        if(dp[state][k]!=null) return dp[state][k];\n        if(cur==target){\n            k--;\n            if(k==0)\n                return true;\n            cur=0;\n            \n        }\n\n        for(int i=0; i<nums.length; i++){\n            if( (state & (1<<i))==0){\n                list.add(i);\n                boolean rt = dfs(nums, state|(1<<i), cur+ nums[i], target, k);\n                list.remove(list.size()-1);\n                if(rt) return true;\n            }\n        }\n\n        dp[state][k]=false;\n        return false;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"partition-to-k-equal-sum-subsets","has_notes":false,"flag_type":1}