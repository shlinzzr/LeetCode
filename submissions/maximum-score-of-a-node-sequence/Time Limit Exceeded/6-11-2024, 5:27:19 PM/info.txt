{"id":1284729086,"question_id":2353,"lang":"java","lang_name":"Java","time":"1 day, 17 hours","timestamp":1718098039,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1284729086/","is_pending":"Not Pending","title":"Maximum Score of a Node Sequence","memory":"N/A","code":"class Solution {\n\n    int max= -1;\n    Map<Integer, Set<Integer>> map ;\n    public int maximumScore(int[] scores, int[][] edges) {\n\n        int n = scores.length;\n\n        map = new HashMap<>();\n        for(int[] e: edges){\n            map.putIfAbsent(e[0], new HashSet<>());\n            map.get(e[0]).add(e[1]);\n            map.putIfAbsent(e[1], new HashSet<>());\n            map.get(e[1]).add(e[0]);\n        }\n        \n\n        for(int i=0; i<n; i++){\n\n            LinkedHashSet<Integer> seen = new LinkedHashSet<>();\n            seen.add(i);\n            bfs(scores, -1, i, 0, seen);\n        }\n\n        return max;\n        \n    }\n\n    private void bfs(int[] scores, int parent, int i, int sum, LinkedHashSet<Integer> seen){\n\n        sum += scores[i];\n\n        if(sum > max && seen.size()==4){\n            max = Math.max(max, sum);\n            System.out.println(seen);\n            return ;\n        }\n\n\n        for(int next : map.getOrDefault(i, new HashSet<>())){\n            if(parent==next || seen.contains(next)) continue;\n            seen.add(next);\n            bfs(scores, i, next, sum, seen);\n            seen.remove(next);\n        }\n\n        sum -= scores[i];\n    }\n}","compare_result":"111111111111111111111111111100000000000000000000000000000000000000000000000","title_slug":"maximum-score-of-a-node-sequence","has_notes":false,"flag_type":1}