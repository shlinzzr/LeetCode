{"id":1239511858,"question_id":163,"lang":"java","lang_name":"Java","time":"1 month, 3 weeks","timestamp":1713838830,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1239511858/","is_pending":"Not Pending","title":"Missing Ranges","memory":"N/A","code":"class Solution {\n    public List<List<Integer>> findMissingRanges(int[] nums, int lower, int upper) {\n         List<List<Integer>> res = new ArrayList<>();\n        \n        int len = nums.length;\n        \n        if(len==0){\n            List<Integer> sub = new ArrayList<>();\n            sub.add(lower);\n            sub.add(upper);\n            res.add(sub);\n            return res;\n        }\n        \n        TreeSet<Integer> set = new TreeSet<>();\n        set.add(lower);\n        set.add(upper);\n        for(int n : nums){\n            set.add(n);\n        }\n        \n        List<Integer> list = new ArrayList<>(set);\n        for(int i=0; i<list.size()-1; i++){\n            \n            int st = list.get(i);\n            int ed = list.get(i+1);\n            if(ed==st+1) continue;\n            \n            List<Integer> sub = new ArrayList<>();\n            sub.add(st==lower ? st : st+1);\n            sub.add(ed==upper ? ed : ed-1);\n            res.add(sub);\n        }\n        return res;\n        \n    }\n}","compare_result":"111100010011001100010001100001000011011","title_slug":"missing-ranges","has_notes":false,"flag_type":1}