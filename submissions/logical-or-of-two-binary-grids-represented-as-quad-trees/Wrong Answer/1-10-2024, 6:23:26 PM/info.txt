{"id":1142298325,"question_id":773,"lang":"java","lang_name":"Java","time":"5Â months","timestamp":1704882206,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1142298325/","is_pending":"Not Pending","title":"Logical OR of Two Binary Grids Represented as Quad-Trees","memory":"N/A","code":"/*\n// Definition for a QuadTree node.\nclass Node {\n    public boolean val;\n    public boolean isLeaf;\n    public Node topLeft;\n    public Node topRight;\n    public Node bottomLeft;\n    public Node bottomRight;\n\n    public Node() {}\n\n    public Node(boolean _val,boolean _isLeaf,Node _topLeft,Node _topRight,Node _bottomLeft,Node _bottomRight) {\n        val = _val;\n        isLeaf = _isLeaf;\n        topLeft = _topLeft;\n        topRight = _topRight;\n        bottomLeft = _bottomLeft;\n        bottomRight = _bottomRight;\n    }\n};\n*/\nclass Solution {\n    public Node intersect(Node q1, Node q2) {\n        if (q1.isLeaf) {\n            return q1.val ? q1 : q2;\n        }\n        if (q2.isLeaf) {\n            return q2.val ? q2 : q1;\n        }\n        \n        q1.topLeft = intersect(q1.topLeft, q2.topLeft);\n        q1.topRight = intersect(q1.topRight, q2.topRight);\n        q1.bottomLeft = intersect(q1.bottomLeft, q2.bottomLeft);\n        q1.bottomRight = intersect(q1.bottomRight, q2.bottomRight);\n        \n        if (q1.topLeft.isLeaf && q1.topRight.isLeaf \n            && q1.bottomLeft.isLeaf && q1.bottomRight.isLeaf\n            && q1.topLeft.val == q1.topRight.val \n            && q1.topRight.val == q1.bottomLeft.val \n            && q1.bottomLeft.val == q1.bottomRight.val) {\n            q1.isLeaf = true;\n            q1.val = q1.topLeft.val;\n        }\n        return q1;\n    }\n}","compare_result":"1101110011111100001011010010110100000011000110001000101000001","title_slug":"logical-or-of-two-binary-grids-represented-as-quad-trees","has_notes":false,"flag_type":1}