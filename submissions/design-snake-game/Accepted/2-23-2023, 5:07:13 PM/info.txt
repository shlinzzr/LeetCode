{"id":903422520,"question_id":353,"lang":"java","lang_name":"Java","time":"1 year, 3 months","timestamp":1677143233,"status":10,"status_display":"Accepted","runtime":"74 ms","url":"/submissions/detail/903422520/","is_pending":"Not Pending","title":"Design Snake Game","memory":"94.6 MB","code":"public class SnakeGame {\n\n    //2D position info is encoded to 1D and stored as two copies \n    Set<Integer> set; // this copy is good for fast loop-up for eating body case\n    Deque<Integer> body; // this copy is good for updating tail\n    int score;\n    int[][] food;\n    int foodIndex;\n    int width;\n    int height;\n    \n    public SnakeGame(int width, int height, int[][] food) {\n        this.width = width;\n        this.height = height;\n        this.food = food;\n        set = new HashSet<>();\n        set.add(0); //intially at [0][0]\n        body = new LinkedList<>();\n        body.offerLast(0);\n    }\n    \n  \n    public int move(String direction) {\n        //case 0: game already over: do nothing\n        if (score == -1) {\n            return -1;\n        }\n        \n        // compute new head\n        int rowHead = body.peekFirst() / width;\n        int colHead = body.peekFirst() % width;\n        switch (direction) {\n            case \"U\" : rowHead--;\n                       break;\n            case \"D\" : rowHead++;\n                       break;\n            case \"L\" : colHead--;\n                       break;\n            default :  colHead++;\n        }\n        int head = rowHead * width + colHead;\n        \n        //case 1: out of boundary or eating body\n        set.remove(body.peekLast()); // new head is legal to be in old tail's position, remove from set temporarily \n        if (rowHead < 0 || rowHead == height || colHead < 0 || colHead == width || set.contains(head)) {\n            return score = -1;\n        }\n        \n        // add head for case2 and case3\n        set.add(head); \n        body.offerFirst(head);\n        \n        //case2: eating food, keep tail, add head\n        if (foodIndex < food.length && rowHead == food[foodIndex][0] && colHead == food[foodIndex][1]) {\n            set.add(body.peekLast()); // old tail does not change, so add it back to set\n            foodIndex++;\n            return ++score;\n        }\n        \n        //case3: normal move, remove tail, add head\n        body.pollLast();\n        return score;\n        \n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"design-snake-game","has_notes":false,"flag_type":1}