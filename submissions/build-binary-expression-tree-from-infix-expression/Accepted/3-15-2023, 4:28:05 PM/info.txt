{"id":915526351,"question_id":1736,"lang":"java","lang_name":"Java","time":"1 year, 3 months","timestamp":1678868885,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/915526351/","is_pending":"Not Pending","title":"Build Binary Expression Tree From Infix Expression","memory":"40.8 MB","code":"/**\n * Definition for a binary tree node.\n * class Node {\n *     char val;\n *     Node left;\n *     Node right;\n *     Node() {this.val = ' ';}\n *     Node(char val) { this.val = val; }\n *     Node(char val, Node left, Node right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\n\n// ref : https://leetcode.com/problems/build-binary-expression-tree-from-infix-expression/discuss/878008/Java-O(n)-solution-with-single-stack\n\nclass Solution {\n    public Node expTree(String s) {\n        s = '(' + s + ')';\n        Stack<Node> stack = new Stack<>();\n         \n        for (char c : s.toCharArray()) {\n            if (!Character.isDigit(c) && c != '(') {\n                Node right = stack.pop();\n                if (c == '*' || c == '/') {\n                    if (stack.peek().val == '*' || stack.peek().val == '/') {\n                        Node ops = stack.pop();\n                        Node left = stack.pop();\n                        ops.left = left;\n                        ops.right = right;\n                        right = ops;\n                    }\n                } else {\n                    while (stack.peek().val != '(') {\n                        Node ops = stack.pop();\n                        Node left = stack.pop();\n                        ops.left = left;\n                        ops.right = right;\n                        right = ops;\n                    }\n                    if (c == ')') {\n                        stack.pop();\n                    }\n                }\n                stack.push(right);\n            }\n            \n            if (c != ')') {\n                stack.push(new Node(c));\n            }\n            \n            // for(Node nd : stack){\n            //     System.out.print(nd.val + \", \");\n            // }\n            // System.out.println();\n        }\n        return stack.pop();\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111","title_slug":"build-binary-expression-tree-from-infix-expression","has_notes":false,"flag_type":1}