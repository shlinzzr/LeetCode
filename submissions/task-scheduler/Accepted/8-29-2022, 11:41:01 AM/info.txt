{"id":785985004,"question_id":621,"lang":"java","lang_name":"Java","time":"1 year, 9 months","timestamp":1661744461,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/785985004/","is_pending":"Not Pending","title":"Task Scheduler","memory":"59 MB","code":"class Solution {\n     public int leastInterval(char[] tasks, int n) {\n         \n         \n         // https://www.youtube.com/watch?v=YCD_iYxyXoo \n         // k groups = most freq count;\n         // s : same # as most freq counts\n         //ans = (k-1)*(n+1) + s\n         \n         int[] counter = new int[26];\n         int max = 0;\n         int maxCount = 0;\n         for(char task : tasks) {\n             counter[task - 'A']++;\n             if(max == counter[task - 'A']) {\n                 maxCount++;\n             }\n             else if(max < counter[task - 'A']) {\n                 max = counter[task - 'A'];\n                 maxCount = 1;\n             }\n         }\n         \n         // int ans = (maxCount-1)*(n+1)\n         // 分成k組 考慮最大出現頻率(max)有多個字母的狀況(maxCount>1的狀況)\n         \n         // partCount = count(A) - 1  // ex: 4A3B A為最大頻率分成4-1組\n         // emptySlots = partCount * n;  // 剩下空格數給其他字母填滿\n         // emptySlots = partCount * (n - (maxCount - 1)) // 只需額外考慮最大頻率字母可能一個以上 \n         // availableTasks = tasks.length - count(A)\n         // idles = max(0, emptySlots - availableTasks); // 可能為負 需要max一下\n          \n          \n         int partCount = max - 1; \n         int partLength = n - (maxCount - 1);\n         int emptySlots = partCount * partLength;\n         int availableTasks = tasks.length - max * maxCount;\n         int idles = Math.max(0, emptySlots - availableTasks);\n            \n         \n         return tasks.length + idles;\n         \n         \n         \n     }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"task-scheduler","has_notes":false,"flag_type":1}