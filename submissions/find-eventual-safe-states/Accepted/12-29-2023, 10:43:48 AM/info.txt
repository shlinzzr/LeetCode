{"id":1131029108,"question_id":820,"lang":"java","lang_name":"Java","time":"5 months, 2 weeks","timestamp":1703817828,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/1131029108/","is_pending":"Not Pending","title":"Find Eventual Safe States","memory":"55.2 MB","code":"class Solution {\n\n    int[] flag; //0 : not process yet,  1: true, 2:false\n    public List<Integer> eventualSafeNodes(int[][] graph) {\n        \n        List<Integer> res = new ArrayList<>();\n\n\n        int len = graph.length;\n        flag = new int[len];\n        \n        // // solution 1 dfs find cycle\n        for(int i=0; i<len; i++){\n            if(dfs(i, graph))\n                res.add(i);\n        }\n        return res;\n    }\n\n\n    private boolean dfs(int i, int[][] graph){\n        \n        if(flag[i]==1) return true;\n        if(flag[i]==2) return false;\n        \n        flag[i]=2;\n        for(int next : graph[i]){\n            if(dfs(next, graph)==false)\n                return false;\n        }\n        flag[i]=1;\n        return true;\n        \n        \n        \n    }\n\n    //     Set<Integer> res = new HashSet<>();\n\n    //     // HashMap<Integer, Set<Integer>> g= new HashMap<>();\n    //     HashMap<Integer, Set<Integer>> parent= new HashMap<>();\n\n    //     int len = graph.length;\n    //     int[] outdeg = new int[len];\n\n    //     Queue<Integer> q = new LinkedList<>();\n\n    //     for(int i =0; i<len; i++){\n    //         int[] adj = graph[i];\n    //         // g.putIfAbsent(i, new HashSet<>());\n\n    //         if(adj.length==0) q.offer(i);\n\n\n    //         for(int a: adj){\n    //             parent.putIfAbsent(a, new HashSet<>());\n    //             parent.get(a).add(i);\n    //             // g.get(i).add(a);\n    //             outdeg[i]++;\n    //         }\n    //     }\n\n        \n    //     // for(int i=0; i<len ;i++){\n    //     //     int o = outdeg[i];\n    //     //     // System.out.print(o+\",\");\n    //     //     if(o==0){\n    //     //         q.offer(i);\n    //     //         res.add(i);\n    //     //     }\n    //     // }\n\n    //     while(!q.isEmpty()){\n\n    //         int cur = q.poll();\n    //         res.add(cur);\n\n    //         for(int prev: parent.getOrDefault(cur, new HashSet<>())){\n    //             outdeg[prev]--;\n    //             if(outdeg[prev]==0)\n    //                 q.offer(prev);\n    //         }\n                    \n\n    //         // boolean allsave = true;\n    //         // for(int next : g.get(cur)){\n    //         //     if(!res.contains(next)){\n    //         //         allsave = false;\n    //         //     }\n    //         // }\n\n    //         // // System.out.println(cur + \" \" + allsave);\n\n    //         // if(allsave){\n    //         //     res.add(cur);\n    //         //     for(int prev: parent.getOrDefault(cur, new HashSet<>()))\n    //         //         q.offer(prev);\n    //         // } \n    //     }\n        \n    //     List<Integer> list = new ArrayList<>(res);\n    //     Collections.sort(list);\n    //     return list;\n\n\n    // }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-eventual-safe-states","has_notes":false,"flag_type":1}