{"id":1232902178,"question_id":3364,"lang":"java","lang_name":"Java","time":"1 month, 4 weeks","timestamp":1713171375,"status":10,"status_display":"Accepted","runtime":"143 ms","url":"/submissions/detail/1232902178/","is_pending":"Not Pending","title":"Minimum Sum of Values by Dividing Array","memory":"111.9 MB","code":"class Solution { //131071\n    public int minimumValueSum(int[] nums, int[] andValues) {\n        \n        HashMap<Integer, Integer>[][] dp = new HashMap[nums.length][andValues.length];\n        \n        int val = recur(0, 0, nums, andValues, 131071, dp);\n        \n        if(val >= (int)(1e9)) return -1;\n        \n        return val;\n    }\n    \n    int recur(int i, int j, int[] nums, int[] andValues, int runningAnd, HashMap<Integer, Integer>[][] dp) {\n\n        if(i == nums.length && j == andValues.length) {\n            return 0;\n        }\n        \n        if(j == andValues.length || i == nums.length) return (int)1e9;\n        \n\n        if(dp[i][j] != null && dp[i][j].get(runningAnd) != null) return dp[i][j].get(runningAnd);\n        \n        int newRun = runningAnd & nums[i];\n                \n        int tryNew = (int)(1e9);\n        if(newRun == andValues[j]) tryNew = nums[i] + recur(i + 1, j + 1, nums, andValues, 131071, dp);\n        int cont = recur(i + 1, j, nums, andValues, newRun, dp);\n        \n        if(dp[i][j] == null) dp[i][j] = new HashMap<>();\n        dp[i][j].put(runningAnd, Math.min(tryNew, cont));\n        return Math.min(tryNew, cont);\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-sum-of-values-by-dividing-array","has_notes":false,"flag_type":1}