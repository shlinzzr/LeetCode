{"id":1232901774,"question_id":3364,"lang":"java","lang_name":"Java","time":"1 month, 4 weeks","timestamp":1713171337,"status":10,"status_display":"Accepted","runtime":"565 ms","url":"/submissions/detail/1232901774/","is_pending":"Not Pending","title":"Minimum Sum of Values by Dividing Array","memory":"150.7 MB","code":"class Solution {\n    \n    public int minimumValueSum(int[] nums, int[] andValues) {\n        return dfs(0, 0, ~0, andValues, nums, new HashMap<>());\n    }\n    \n    int dfs(int i, int j, int currentValue, int[] andValues, int[] nums, Map<String, Integer> cache) {\n        \n        if(i == nums.length && j == andValues.length) {\n            return 0;\n        }\n        \n        if(i == nums.length || j == andValues.length) {\n            return -1;\n        }\n        \n        currentValue &= nums[i];\n        \n        if(currentValue < andValues[j]) {\n            return -1;\n        }\n        \n        String key = i + \"-\" + j + \"-\" + currentValue;\n        \n        if(cache.containsKey(key)) {\n            return cache.get(key);\n        }\n        \n        int continueTheArray = dfs(i + 1, j, currentValue, andValues, nums, cache);\n        \n        //can't break the subarray here, need to continue\n        if(currentValue != andValues[j]) {\n            cache.put(key, continueTheArray);\n            return cache.get(key);\n        }\n        \n        // break and evaluate\n        int next = dfs(i + 1, j + 1, ~0, andValues, nums, cache);\n            \n        if(next == -1) {\n            cache.put(key, continueTheArray);\n            return cache.get(key);\n        }\n\n        if(continueTheArray == -1) {\n            cache.put(key, nums[i] + next);\n            return cache.get(key);\n        }\n\n        cache.put(key, Math.min(nums[i] + next, continueTheArray));\n        return cache.get(key);\n        \n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-sum-of-values-by-dividing-array","has_notes":false,"flag_type":1}