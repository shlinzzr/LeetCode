{"id":1055323528,"question_id":2220,"lang":"java","lang_name":"Java","time":"8 months, 3 weeks","timestamp":1695291617,"status":10,"status_display":"Accepted","runtime":"59 ms","url":"/submissions/detail/1055323528/","is_pending":"Not Pending","title":"Find All Possible Recipes from Given Supplies","memory":"45.9 MB","code":"class Solution {\n    //  O(V + E) == O(recipes.length + supplies.length + sum(ingredients[i].size)) time and space.\n    public List<String> findAllRecipes(String[] recipes, List<List<String>> ingredients, String[] supplies) {\n        \n         // Recipes and supplies are nodes in the graph. The ingredients list gives us the edges.\n        Map<String, List<String>> graph = new HashMap<>();  \n        Map<String, Integer> inDegree = new HashMap<>();  \n        \n        // Needed so that later, while processing nodes during the topological sort,  we only add recipes to the result.\n        Set<String> recipesSet = new HashSet<>();   \n        \n        // Add supply nodes to the graph.\n        for (String sup : supplies) {\n            graph.put(sup, new ArrayList<>());\n            inDegree.put(sup, 0);\n        }\n        \n        // Add recipe nodes to the graph.\n        for (String rcp : recipes) {\n            graph.put(rcp, new ArrayList<>());\n            // inDegree.put(rcp, 0);\n            recipesSet.add(rcp);\n        }\n        \n        // Add edges to the graph.\n        for (int i = 0; i < ingredients.size(); ++i) {\n            for (String ing : ingredients.get(i)) {\n                graph.putIfAbsent(ing, new ArrayList<>());   \n                graph.get(ing).add(recipes[i]); \n            }\n            inDegree.put(recipes[i], ingredients.get(i).size());   \n        }\n        \n        // Standard topological sort\n        List<String> result = new ArrayList<>();\n        Deque<String> queue = new ArrayDeque<>();\n        \n        for (String currNode : inDegree.keySet()) {\n            if (inDegree.get(currNode) == 0) queue.offer(currNode);\n        }\n        \n        while (queue.size() > 0) {\n            String p = queue.poll();\n\n            if (recipesSet.contains(p)) {\n                result.add(p);   \n            }\n            for (String adj : graph.get(p)) {\n                inDegree.put(adj, inDegree.get(adj) - 1);\n                if (inDegree.get(adj) == 0) \n                    queue.offer(adj);\n            }\n        }\n        return result;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-all-possible-recipes-from-given-supplies","has_notes":false,"flag_type":1}