{"id":1082036304,"question_id":3166,"lang":"java","lang_name":"Java","time":"7 months, 3 weeks","timestamp":1698056180,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1082036304/","is_pending":"Not Pending","title":"Minimum Number of Groups to Create a Valid Assignment","memory":"N/A","code":"class Solution {\n    public int minGroupsForValidAssignment(int[] nums) {\n        HashMap<Integer, Integer> map =new HashMap<>();\n        for(int n : nums){\n            map.put(n, map.getOrDefault(n,0)+1);\n        }\n        \n        int min = nums.length;\n        for(int v : map.values()){\n            min = Math.min(min, v);\n        }\n\n        for(int i=min; i>0; i++){\n            int res = groupify(map, i);\n            if(res!=0)\n                return res;\n        }\n        \n        return 1;\n    } \n\n\n       private int groupify(Map<Integer, Integer> map, int size) {\n        int groups = 0;\n        int next = size + 1;\n        \n        for(int value : map.values()) {\n            int numGroups = value / next;\n            int remaining = value % next;\n\n            if(remaining == 0) {\n                groups += numGroups;\n            }\n            // So far we have divided things into numGroups + 1 groups\n            // where the first numGroups have size + 1 elements\n            // and the last group has has remaining = {1 ... size} elements.\n            //\n            // In order to make this grouping valid, each group out of numGroups\n            // can potentially give 1 element to the last group.\n            //\n            // The idea is that a subset of those groups should be able to give 1 element \n            // each to the last group so that the last group also has size elements. \n            //\n            // In other words, in order for the last group to have size elements, \n            // size - remaining groups have to contribute 1 element each.\n            // \n            // So there must be at least size - remaining groups of size + 1 elements.\n            else if(numGroups >= size - remaining) {\n                groups += numGroups + 1;\n            } \n            else {\n                return 0;\n            }\n        }\n        return groups;\n    }\n}\n","compare_resulttitle_slug":"minimum-number-of-groups-to-create-a-valid-assignment","has_notes":false,"flag_type":1}