{"id":1268296841,"question_id":2465,"lang":"java","lang_name":"Java","time":"2 weeks, 3 days","timestamp":1716708288,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1268296841/","is_pending":"Not Pending","title":"Shifting Letters II","memory":"N/A","code":"class Solution {\n    public String shiftingLetters(String s, int[][] shifts) {\n        TreeMap<Integer, Integer> aggMap = new TreeMap<>(); // idx, offset\n\n        for(int[] sh : shifts){\n\n            if(sh[2]==1){\n                aggMap.put(sh[0], aggMap.getOrDefault(sh[0], 0)+1);\n                aggMap.put(sh[1]+1, aggMap.getOrDefault(sh[1]+1, 0)-1);\n            }else{\n                aggMap.put(sh[0], aggMap.getOrDefault(sh[0], 0) -1);\n                aggMap.put(sh[1]+1, aggMap.getOrDefault(sh[1]+1,0)+1);\n            }\n        }\n\n\n        int curr=0;\n        TreeMap<Integer, Integer> map = new TreeMap<>();\n        for(int i: aggMap.keySet()){\n            curr += aggMap.get(i);\n            map.put(i, curr); // idx, offset Agg amount\n        }\n\n        char[] arr = s.toCharArray();\n        for(int i=0; i<arr.length; i++){\n            Integer key = map.floorKey(i);\n            if(key==null) continue;\n            int offset = map.get(key);\n            arr[i] = (char) ((arr[i]-'a'+26+offset)%26+'a') ;\n\n\n        }\n\n        return new String(arr);\n\n    }\n}","compare_result":"111111111111111111111011011010010001101","title_slug":"shifting-letters-ii","has_notes":false,"flag_type":1}