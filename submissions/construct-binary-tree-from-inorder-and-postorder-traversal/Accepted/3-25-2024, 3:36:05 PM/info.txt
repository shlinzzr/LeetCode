{"id":1213271556,"question_id":106,"lang":"java","lang_name":"Java","time":"2 months, 2 weeks","timestamp":1711352165,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/1213271556/","is_pending":"Not Pending","title":"Construct Binary Tree from Inorder and Postorder Traversal","memory":"44.1 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n\n    Map<Integer, Integer> map;\n    public TreeNode buildTree(int[] inorder, int[] postorder) {\n        int len = inorder.length;\n\n        map = new HashMap<>();\n        for(int i=0; i<len; i++){\n            map.put(inorder[i], i);\n        }\n\n\n        return helper(inorder, 0, len-1, postorder, 0, len-1);\n    }\n\n    private TreeNode helper(int[] in, int ist, int ied, int[] post, int pst, int ped){\n        int len = in.length;\n\n        if(len==0 || ist>ied || pst>ped) return null;\n\n        int val = post[ped];\n        int idx = map.get(val);\n        int rightCnt = ied-idx;\n\n        TreeNode root = new TreeNode(val);\n        root.right = helper(in, idx+1, ied, post, pst, ped-1);\n        root.left = helper(in, ist, idx-1, post, pst, ped-1-rightCnt);\n\n        return root;\n\n    }\n    \n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"construct-binary-tree-from-inorder-and-postorder-traversal","has_notes":false,"flag_type":1}