{"id":916019753,"question_id":106,"lang":"java","lang_name":"Java","time":"1 year, 2 months","timestamp":1678936605,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/916019753/","is_pending":"Not Pending","title":"Construct Binary Tree from Inorder and Postorder Traversal","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public TreeNode buildTree(int[] inorder, int[] postorder) {\n        \n//         System.out.print(\"inorder:\");\n//         for(int i: inorder){\n//             System.out.print(i+\",\");\n//         }\n//         System.out.println();\n        \n//         System.out.print(\"postorder:\");\n//          for(int i: postorder){\n//             System.out.print(i+\",\");\n//         }\n//         System.out.println();\n//          System.out.println();\n        \n        \n        int len = inorder.length;\n        \n        if(len==0)\n            return null;\n        \n        if(len==1){\n            return new TreeNode(inorder[0]);\n        }\n        \n        \n        int pi=len-1, i = 0;\n        \n        //find root;\n        \n        int rootVal = postorder[pi];\n        \n        TreeNode root = new TreeNode(rootVal);\n        \n        while(i<len && inorder[i]!=rootVal){\n            i++;\n        }\n        \n        if(i+1<len){\n            int leftVal = inorder[i+1];\n            while(pi>0 && postorder[pi]!=leftVal)\n                  pi--;\n        }\n        \n        TreeNode right = buildTree(Arrays.copyOfRange(inorder, i+1, len), \n                                   Arrays.copyOfRange(postorder, pi, len-1));\n        \n        TreeNode left = buildTree(Arrays.copyOfRange(inorder, 0, i), \n                                  Arrays.copyOfRange(postorder, 0, pi));\n        \n        root.right=  right;\n        root.left = left;\n        return root;\n        \n    }\n}","compare_result":"1111111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"construct-binary-tree-from-inorder-and-postorder-traversal","has_notes":false,"flag_type":1}