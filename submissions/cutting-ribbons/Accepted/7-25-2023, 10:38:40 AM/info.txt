{"id":1003147677,"question_id":2045,"lang":"java","lang_name":"Java","time":"10 months, 3 weeks","timestamp":1690252720,"status":10,"status_display":"Accepted","runtime":"43 ms","url":"/submissions/detail/1003147677/","is_pending":"Not Pending","title":"Cutting Ribbons","memory":"57.3 MB","code":"class Solution {\n    public int maxLength(int[] ribbons, int k) {\n        \n        int max= 0 ;\n        for(int r : ribbons)\n            max = Math.max(r, max);\n        \n        int st =1, ed=max;\n        \n        while(st<ed){\n            int mid = st + (ed-st+1)/2;\n            \n            if(getPieces(ribbons, mid)>=k)\n                st = mid  ;\n            else \n                ed = mid-1;\n        }\n        \n        if(getPieces(ribbons, st)>=k)\n            return st;\n        else if(getPieces(ribbons, st-1)>=k)\n            return st-1;\n        \n        \n        return 0;\n    }\n    \n    private int getPieces(int[] ribbons, int len){\n        if(len==0)\n            return 0;\n        \n        int cnt = 0;\n        \n        for(int r : ribbons){\n            cnt += r/len;\n        }\n           // System.out.println(\"getP(\"+len +\")= \"+cnt);\n        return cnt;\n        \n     \n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111","title_slug":"cutting-ribbons","has_notes":false,"flag_type":1}