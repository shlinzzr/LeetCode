{"id":1117104051,"question_id":312,"lang":"java","lang_name":"Java","time":"6Â months","timestamp":1702287379,"status":10,"status_display":"Accepted","runtime":"35 ms","url":"/submissions/detail/1117104051/","is_pending":"Not Pending","title":"Burst Balloons","memory":"41.1 MB","code":"class Solution {\n    public int maxCoins(int[] nums) {\n        // add 1 before and after nums\n        int n = nums.length + 2;\n        int[] newNums = new int[n];\n        System.arraycopy(nums, 0, newNums, 1, n - 2);\n        newNums[0] = 1;\n        newNums[n - 1] = 1;\n        // dp[i][j] represents\n        // maximum if we burst all nums[left]...nums[right], inclusive\n        int[][] dp = new int[n][n];\n        // do not include the first one and the last one\n        // since they are both fake balloons added by ourselves and we can not burst\n        // them\n        for (int left = n - 2; left >= 1; left--) {\n            for (int right = left; right <= n - 2; right++) {\n                // find the last burst one in newNums[left]...newNums[right]\n                for (int i = left; i <= right; i++) {\n                    // newNums[i] is the last burst one\n                    int gain = newNums[left - 1] * newNums[i] * newNums[right + 1];\n                    // recursively call left side and right side\n                    int remaining = dp[left][i - 1] + dp[i + 1][right];\n                    // update\n                    dp[left][right] = Math.max(remaining + gain, dp[left][right]);\n                }\n            }\n        }\n        // burst newNums[1]...newNums[n-2], excluding the first one and the last one\n        return dp[1][n - 2];\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"burst-balloons","has_notes":false,"flag_type":1}