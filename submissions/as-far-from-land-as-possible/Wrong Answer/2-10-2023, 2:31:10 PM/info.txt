{"id":895169930,"question_id":1117,"lang":"java","lang_name":"Java","time":"1 year, 4 months","timestamp":1676010670,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/895169930/","is_pending":"Not Pending","title":"As Far from Land as Possible","memory":"N/A","code":"class Solution {\n    public int maxDistance(int[][] grid) {\n        int h = grid.length;\n        int w = grid[0].length;\n        \n        boolean[][] seen = new boolean[h][w];\n        \n        Queue<int[]> q = new LinkedList<>();\n        \n        for(int i=0; i<h; i++){\n            for(int j=0; j<w; j++){\n                \n                if(grid[i][j]==1){\n                    q.offer(new int[]{i, j});\n                    seen[i][j]=true;\n                }\n                    \n            }\n        }\n        \n        \n        int[][] dirs = new int[][]{{0,1}, {0,-1}, {1,0}, {-1, 0}};\n        int step=0;        \n        while(!q.isEmpty()){\n            int siz = q.size();\n            // System.out.println(siz);\n            for(int i=0; i<siz; i++){\n                \n                int[] p = q.poll();\n                \n                // System.out.println(p[0]+\" \"+ p[1]);\n                for(int[] d: dirs){\n                    \n                    int r = p[0]+d[0];\n                    int c = p[1]+d[1];\n                    \n                    if(r>=0 && r<h && c>=0 && c<w && seen[r][c]==false){\n                        q.offer(new int[]{r,c});\n                        seen[r][c]=true;\n                    }\n                }\n            }\n            step++;\n        }\n        \n        return step-1;\n       \n        \n        \n        \n    }\n}","compare_result":"1110111111111111111111111111111111111","title_slug":"as-far-from-land-as-possible","has_notes":false,"flag_type":1}