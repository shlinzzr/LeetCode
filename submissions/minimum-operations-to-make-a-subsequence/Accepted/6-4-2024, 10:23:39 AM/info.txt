{"id":1276944162,"question_id":1832,"lang":"java","lang_name":"Java","time":"1 week, 2 days","timestamp":1717467819,"status":10,"status_display":"Accepted","runtime":"76 ms","url":"/submissions/detail/1276944162/","is_pending":"Not Pending","title":"Minimum Operations to Make a Subsequence","memory":"61.6 MB","code":"class Solution {\n    public int minOperations(int[] target, int[] arr) {\n        // 9,4,2,3,4 \n        //[x,x,x,2,x ]\n\n\n        // 5 1 3\n        // 0 1 2\n        int val = 0;\n        Map<Integer, Integer> map = new HashMap<>();\n        for(int i=0; i<target.length; i++){\n            int t = target[i];\n            if(!map.containsKey(t)){\n                map.put(t, val++);\n            }\n            target[i] = map.get(t);\n        }\n\n        List<Integer> list = new ArrayList<>();\n        for(int i=0; i<arr.length; i++){\n            int a = arr[i];\n            if(map.containsKey(a)){\n                a = map.get(a);\n                if(list.isEmpty() || a>list.get(list.size()-1)){\n                    list.add(a);\n                }else{\n                    int idx = ceiling(list, a);\n                    list.set(idx, a);\n                }\n            }\n        }\n\n        return target.length-list.size();\n       \n\n\n    }\n\n     private int ceiling(List<Integer> list, int n){\n        int st= 0, ed=list.size()-1;\n\n        while(st<ed){\n            int mid = st+(ed-st)/2;\n            if(list.get(mid)>=n){\n                ed = mid;\n            }else{\n                st = mid+1;\n            }\n        }\n\n        return st;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-operations-to-make-a-subsequence","has_notes":false,"flag_type":1}