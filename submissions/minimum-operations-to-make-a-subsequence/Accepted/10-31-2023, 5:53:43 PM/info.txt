{"id":1088247870,"question_id":1832,"lang":"java","lang_name":"Java","time":"7 months, 2 weeks","timestamp":1698746023,"status":10,"status_display":"Accepted","runtime":"89 ms","url":"/submissions/detail/1088247870/","is_pending":"Not Pending","title":"Minimum Operations to Make a Subsequence","memory":"61.6 MB","code":"class Solution {\n    public int minOperations(int[] target, int[] arr) {\n        int m = target.length;\n        int n = arr.length;\n\n        \n        HashMap<Integer, Integer> map = new HashMap<>();\n        int idx=0;\n        for(int t : target){\n            if(!map.containsKey(t)){\n                map.put(t, idx);\n                idx++;\n            }\n        }\n\n        for(int i=0; i<n; i++){\n            if(map.containsKey(arr[i])){\n                arr[i] = map.get(arr[i]);\n            }else{\n                arr[i] = Integer.MAX_VALUE;\n            }\n            // System.out.print(arr[i] + \", \");\n        }\n        // System.out.println();\n\n\n        int cnt = lis(arr);\n        // System.out.println(\"cnt=\"+cnt);\n\n    \n        return m-cnt;\n\n    }\n\n    private int lis(int[] arr){\n        int res = 0;\n\n        List<Integer> list = new ArrayList<>();\n        int len = arr.length;\n\n        for(int i=0; i<len; i++){\n\n            if(arr[i]==Integer.MAX_VALUE)\n                continue;\n\n            if(list.isEmpty() || arr[i]>list.get(list.size()-1)){\n                list.add(arr[i]);\n            }else{\n                int idx = binarySearch(list, arr[i]);\n                list.set(idx, arr[i]);\n\n            }\n        }        \n        return list.size();\n\n    }\n\n    private int binarySearch(List<Integer> list, int target){\n\n        int st=0, ed=list.size()-1;\n\n        while(st<ed){\n            int mid = (st+ed)/2;\n            if(list.get(mid)==target){\n                return mid;\n\n            }else if(target>list.get(mid)){\n                st = mid+1;\n\n            }else{\n                ed = mid;\n            }\n        }\n\n        return st;\n\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-operations-to-make-a-subsequence","has_notes":false,"flag_type":1}