{"id":931774058,"question_id":2671,"lang":"java","lang_name":"Java","time":"1 year, 2 months","timestamp":1681201404,"status":10,"status_display":"Accepted","runtime":"437 ms","url":"/submissions/detail/931774058/","is_pending":"Not Pending","title":"Shortest Cycle in a Graph","memory":"43.6 MB","code":"class Solution  {\n      public int findShortestCycle(int n, int[][] edges) {\n        List<Integer>[] adj = new List[n];\n        for (int i = 0; i < n; i++) {\n            adj[i] = new ArrayList<>();\n        }\n        for (int[] edge : edges) {\n            int u = edge[0];\n            int v = edge[1];\n            adj[u].add(v);\n            adj[v].add(u);\n        }\n\n        int minCycle = Integer.MAX_VALUE;\n        for (int i = 0; i < n; i++) {\n            int[] dist = new int[n];\n            Arrays.fill(dist, -1);\n            Queue<Integer> queue = new LinkedList<>();\n            queue.offer(i);\n            dist[i] = 0;\n            while (!queue.isEmpty()) {\n                int u = queue.poll();\n                for (int v : adj[u]) {\n                    if (dist[v] == -1) {\n                        dist[v] = dist[u] + 1;\n                        queue.offer(v);\n                    } else if (v != i && dist[v] >= dist[u]) {\n                        minCycle = Math.min(minCycle, dist[u] + dist[v] + 1);\n                    }\n                }\n            }\n        }\n\n        return minCycle == Integer.MAX_VALUE ? -1 : minCycle;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"shortest-cycle-in-a-graph","has_notes":false,"flag_type":1}