{"id":931777592,"question_id":2671,"lang":"java","lang_name":"Java","time":"1 year, 2 months","timestamp":1681201924,"status":10,"status_display":"Accepted","runtime":"574 ms","url":"/submissions/detail/931777592/","is_pending":"Not Pending","title":"Shortest Cycle in a Graph","memory":"44.5 MB","code":"class Solution  {\n      public int findShortestCycle(int n, int[][] edges) {\n        HashMap<Integer, List<Integer>> map  = new HashMap<>();\n        for(int[] e : edges){\n            map.putIfAbsent(e[0], new ArrayList<>());\n            map.putIfAbsent(e[1], new ArrayList<>());\n            map.get(e[0]).add(e[1]);\n            map.get(e[1]).add(e[0]);\n        }\n\n        int minCycle = Integer.MAX_VALUE;\n        for (int st = 0; st < n; st++) {\n            int[] distance = new int[n];\n            Arrays.fill(distance, -1);\n            Queue<Integer> queue = new LinkedList<>();\n            queue.offer(st);\n            distance[st] = 0;\n            \n            while (!queue.isEmpty()) {\n                int curr = queue.poll();\n                for (int next : map.getOrDefault(curr, new ArrayList<>())) {\n                    if (distance[next] == -1) {\n                        distance[next] = distance[curr] + 1;\n                        queue.offer(next);\n                    } else if (next!= st && distance[next] >= distance[curr]) {\n                        minCycle = Math.min(minCycle, distance[curr] + distance[next] + 1);\n                    }\n                }\n            }\n        }\n\n        return minCycle == Integer.MAX_VALUE ? -1 : minCycle;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"shortest-cycle-in-a-graph","has_notes":false,"flag_type":1}