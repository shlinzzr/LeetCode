{"id":1128508007,"question_id":2671,"lang":"java","lang_name":"Java","time":"5 months, 2 weeks","timestamp":1703555008,"status":10,"status_display":"Accepted","runtime":"755 ms","url":"/submissions/detail/1128508007/","is_pending":"Not Pending","title":"Shortest Cycle in a Graph","memory":"47.1 MB","code":"class Solution {\n    public int findShortestCycle(int n, int[][] edges) {\n        Set<Integer>[] adj = new HashSet[n];\n\n        for(int i=0; i<n; i++){\n            adj[i] = new HashSet<>();\n        }\n\n        for(int[] e : edges){\n            adj[e[0]].add(e[1]);\n            adj[e[1]].add(e[0]);\n        }\n        int res = Integer.MAX_VALUE;\n        for(int[] e : edges){\n            int a = e[0];\n            int b = e[1];\n            \n            adj[a].remove(b);\n            adj[b].remove(a);\n\n            res = Math.min(res, bfs(a, b, adj));\n\n            adj[e[0]].add(e[1]);\n            adj[e[1]].add(e[0]);\n        }\n\n        if(res==Integer.MAX_VALUE) return -1;\n        \n        return res+1;            \n    }\n\n    private int bfs(int a, int b, Set<Integer>[] adj){\n\n        Queue<Integer> q = new LinkedList<>();\n        q.offer(a);\n        HashSet<Integer> seen = new HashSet<>();\n        seen.add(a);\n\n        int step=0;\n\n        while(!q.isEmpty()){\n            int siz = q.size();\n            while(siz-->0){\n                int p = q.poll();\n\n                if(p==b) return step;\n\n                for(int next: adj[p]){\n                    if(seen.contains(next)) continue;\n                    seen.add(next);\n                    q.offer(next);\n                }\n            }\n            step++;       \n        }\n\n        return Integer.MAX_VALUE;\n\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"shortest-cycle-in-a-graph","has_notes":false,"flag_type":1}