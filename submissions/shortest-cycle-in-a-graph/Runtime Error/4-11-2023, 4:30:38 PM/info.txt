{"id":931777013,"question_id":2671,"lang":"java","lang_name":"Java","time":"1 year, 2 months","timestamp":1681201838,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/931777013/","is_pending":"Not Pending","title":"Shortest Cycle in a Graph","memory":"N/A","code":"class Solution  {\n      public int findShortestCycle(int n, int[][] edges) {\n        HashMap<Integer, List<Integer>> map  = new HashMap<>();\n        for(int[] e : edges){\n            map.putIfAbsent(e[0], new ArrayList<>());\n            map.putIfAbsent(e[1], new ArrayList<>());\n            \n            map.get(e[0]).add(e[1]);\n            map.get(e[1]).add(e[0]);\n        }\n\n        int minCycle = Integer.MAX_VALUE;\n        for (int i = 0; i < n; i++) {\n            int[] dist = new int[n];\n            Arrays.fill(dist, -1);\n            Queue<Integer> queue = new LinkedList<>();\n            queue.offer(i);\n            dist[i] = 0;\n            \n            while (!queue.isEmpty()) {\n                int curr = queue.poll();\n                for (int next : map.get(curr)) {\n                    if (dist[next] == -1) {\n                        dist[next] = dist[curr] + 1;\n                        queue.offer(next);\n                    } else if (next!= i && dist[next] >= dist[curr]) {\n                        minCycle = Math.min(minCycle, dist[curr] + dist[next] + 1);\n                    }\n                }\n            }\n        }\n\n        return minCycle == Integer.MAX_VALUE ? -1 : minCycle;\n    }\n}","compare_result":"1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"shortest-cycle-in-a-graph","has_notes":false,"flag_type":1}