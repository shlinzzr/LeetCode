{"id":931768394,"question_id":2671,"lang":"java","lang_name":"Java","time":"1 year, 2 months","timestamp":1681200560,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/931768394/","is_pending":"Not Pending","title":"Shortest Cycle in a Graph","memory":"N/A","code":"class Solution {\n    public int findShortestCycle(int n, int[][] edges) {\n        HashMap<Integer, List<Integer>> map  = new HashMap<>();\n        for(int[] e : edges){\n            map.putIfAbsent(e[0], new ArrayList<>());\n            map.putIfAbsent(e[1], new ArrayList<>());\n            \n            map.get(e[0]).add(e[1]);\n            map.get(e[1]).add(e[0]);\n        }\n    \n    \n    \n    \n    \n    int min=0;\n    \n        for(int st=0; st<n; st++){\n            int prev = -1;\n            boolean[] seen = new boolean[n];\n            seen[st]=true;\n            Queue<Integer> q = new LinkedList<>();\n            q.offer(st);\n            int step=0;\n\n            while(!q.isEmpty()){\n\n                int curr = q.poll();\n\n                List<Integer> list = map.get(curr);\n                for(int next : list){\n\n                    if(next==prev)\n                        continue;\n\n                    if(seen[next]==true)\n                        min = Math.min(min, step);\n\n                    seen[next]=true;\n                    q.offer(next);\n\n                }\n\n                step++;\n\n            }\n        }\n        return min;\n    }\n    \n    \n    \n}","compare_result":"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"shortest-cycle-in-a-graph","has_notes":false,"flag_type":1}