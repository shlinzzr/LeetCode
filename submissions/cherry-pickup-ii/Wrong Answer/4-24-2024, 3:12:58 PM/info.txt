{"id":1240575002,"question_id":1559,"lang":"java","lang_name":"Java","time":"1 month, 2 weeks","timestamp":1713942778,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1240575002/","is_pending":"Not Pending","title":"Cherry Pickup II","memory":"N/A","code":"class Solution {\n    public int cherryPickup(int[][] grid) {\n\n        int h = grid.length;\n        int w = grid[0].length;\n\n        int[][][] dp = new int[h][w][w];\n        for(int i=0; i<h; i++){\n            for(int j=0; j<w; j++){\n                Arrays.fill(dp[i][j], -1); \n            }\n        }\n\n        dp[0][0][w-1] = grid[0][0] + grid[0][w-1];\n\n        for(int i=1; i<h; i++){\n\n            for(int c1=0; c1<w; c1++){\n                for(int c2=0; c2<w; c2++){\n\n                    for(int a = c1-1; a<=c1+1; a++){\n                        for(int b=c2-1; b<=c2+1; b++){\n\n                            if(a<0 || a>=w || b<0 || b>=w) continue;\n\n                            if(c1==c2){\n                                dp[i][c1][c2] = Math.max(dp[i][c1][c2], dp[i-1][a][b] + grid[i][c1]);\n                            }else{\n                                dp[i][c1][c2] = Math.max(dp[i][c1][c2], dp[i-1][a][b]+ grid[i][c1] + grid[i][c2]);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        int max = 0;\n        for(int c1=0; c1<w; c1++){\n            for(int c2=0; c2<w; c2++){\n                max = Math.max(dp[h-1][c1][c2], max);\n            }   \n        }\n       \n\n       return max;\n    }\n}","compare_result":"11111111111111111111101011111100100111010011000100000010001","title_slug":"cherry-pickup-ii","has_notes":false,"flag_type":1}