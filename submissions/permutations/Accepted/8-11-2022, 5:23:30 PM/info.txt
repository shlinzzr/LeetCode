{"id":770949632,"question_id":46,"lang":"java","lang_name":"Java","time":"1 year, 10 months","timestamp":1660209810,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/770949632/","is_pending":"Not Pending","title":"Permutations","memory":"44.7 MB","code":"class Solution {\n    public List<List<Integer>> permute(int[] nums) {\n        \n        List<List<Integer>> res = new ArrayList<>();\n        \n        boolean[] isUsed = new boolean[nums.length];\n        \n        backtracking(nums, res, new ArrayList<>(), isUsed);\n        \n        \n        return res;\n        \n        \n        \n    }\n    \n    private void backtracking(int[] nums,  List<List<Integer>> res, List<Integer> list, boolean[] isUsed){\n        \n        if(list.size()==nums.length){\n            res.add(new ArrayList<>(list));\n            return;\n        }\n        \n        for(int i=0; i<nums.length; i++){\n            if(isUsed[i]==false){\n                list.add(nums[i]);\n                isUsed[i] = true;\n                backtracking(nums, res, list, isUsed);\n                isUsed[i] = false;\n                list.remove(list.size()-1);\n            }\n                        \n        }\n    }\n}","compare_result":"11111111111111111111111111","title_slug":"permutations","has_notes":false,"flag_type":1}