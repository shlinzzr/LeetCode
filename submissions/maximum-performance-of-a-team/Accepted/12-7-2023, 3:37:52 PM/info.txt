{"id":1114188940,"question_id":1499,"lang":"java","lang_name":"Java","time":"6 months, 1 week","timestamp":1701934672,"status":10,"status_display":"Accepted","runtime":"38 ms","url":"/submissions/detail/1114188940/","is_pending":"Not Pending","title":"Maximum Performance of a Team","memory":"57.2 MB","code":"class Solution {\n\n    class Engineer {\n        int sp;\n        int ef;\n        int idx;\n        public Engineer(int idx, int sp, int ef){\n            this.idx = idx;\n            this.sp = sp;\n            this.ef = ef;\n        }\n    }\n\n    public int maxPerformance(int n, int[] speed, int[] efficiency, int k) {    \n\n        Engineer[] arr = new Engineer[n];\n        for(int i=0; i<n; i++){\n            arr[i] = new Engineer(i, speed[i], efficiency[i]);\n        }\n\n        Arrays.sort(arr, (a,b)-> b.ef-a.ef); // arr sort by efficiency desc\n\n        PriorityQueue<Engineer> pq = new PriorityQueue<>( // pq sort by speed asc\n            (a,b) -> a.sp - b.sp\n        );\n\n        // keep the best performance in the pq, ef:from high to low \n        // so every time we multiply the current Engineer's efficiency\n        // and  :pop the minimum speed enginner\n\n        int M = (int) 1e9+7;\n\n        long speedSum = 0,  max=0;\n        for(int i=0; i<n; i++){\n            \n            pq.offer(arr[i]);\n            speedSum += arr[i].sp;\n\n            max = Math.max(max, arr[i].ef*speedSum);\n\n            if(pq.size()==k){\n                speedSum-=pq.poll().sp;\n            }\n        }\n\n        return (int) (max%M);\n    \n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111","title_slug":"maximum-performance-of-a-team","has_notes":false,"flag_type":1}