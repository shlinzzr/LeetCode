{"id":921169789,"question_id":286,"lang":"java","lang_name":"Java","time":"1 year, 2 months","timestamp":1679643160,"status":10,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/921169789/","is_pending":"Not Pending","title":"Walls and Gates","memory":"46.6 MB","code":"class Solution {\n    public void wallsAndGates(int[][] rooms) {\n         int h = rooms.length;\n        int w = rooms[0].length;\n        \n        Queue<int[]> q = new LinkedList<>();\n        boolean[][] bool = new boolean[h][w];\n        int[][] dirs = new int[][]{{1,0}, {-1,0}, {0,-1}, {0,1}};\n        \n        \n        for(int i=0; i<h; i++){\n            for(int j=0; j<w; j++){\n                \n                if(rooms[i][j]==0){\n                    q.offer(new int[]{i,j});\n                    bool[i][j]=true;\n                }\n                \n                if(rooms[i][j]==-1)\n                    bool[i][j]=true;\n            }\n        }\n        \n        int step = 1;\n        while(!q.isEmpty()){\n            \n            int siz = q.size();\n            for(int i=siz; i>0; i--){\n                int[] p = q.poll();\n                \n                for(int[] d : dirs){\n                    \n                    int r = p[0]+d[0];\n                    int c = p[1]+d[1];\n                    \n                    if(r<0 || r>=h || c<0 || c>=w || bool[r][c]==true)\n                        continue;\n                    \n                    q.offer(new int[]{r,c});\n                    bool[r][c]=true;\n                    rooms[r][c]=step;\n                }\n            }\n            step++;\n        }\n        \n        \n    }\n}\n\n\n\n\n// [[2,-1,0,1],\n//  [2,1,1,-1],\n//  [1,-1,1,-1],\n//  [0,-1,2,3]]","compare_result":"11111111111111111111111111111111111111111111111111111111111111","title_slug":"walls-and-gates","has_notes":false,"flag_type":1}