{"id":964081277,"question_id":967,"lang":"java","lang_name":"Java","time":"1Â year","timestamp":1685938067,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/964081277/","is_pending":"Not Pending","title":"Minimum Falling Path Sum","memory":"44.4 MB","code":"class Solution {\n    public int minFallingPathSum(int[][] matrix) {\n        \n        int h = matrix.length;\n        int w = matrix[0].length;\n        \n        \n        int[] dp = new int[w];\n        for(int i=0; i<h; i++){\n            \n            \n            int[] temp = new int[w];\n            \n            for(int j=0; j<w; j++){\n                \n                if(i==0){\n                    temp[j] = matrix[i][j];\n                    \n                    // System.out.println(dp[j]);\n                    continue;\n                }\n                \n                \n                int val = ((j==0)? Math.min(dp[j], dp[j+1]) : (j==w-1) ? Math.min(dp[j-1], dp[j]) :Math.min(dp[j-1], Math.min(dp[j], dp[j+1])));\n                val +=  matrix[i][j] ;\n                temp[j]=val;\n                \n            }\n            dp = temp;\n            \n            \n        }\n        int res = Integer.MAX_VALUE;\n        \n        for(int i=0; i<w; i++){\n            // System.out.println(dp[i]);\n            res = Math.min(res, dp[i]);\n        }\n        \n        return res;\n        \n        \n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111","title_slug":"minimum-falling-path-sum","has_notes":false,"flag_type":1}