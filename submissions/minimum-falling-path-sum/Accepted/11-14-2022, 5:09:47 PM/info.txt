{"id":843163129,"question_id":967,"lang":"java","lang_name":"Java","time":"1 year, 7 months","timestamp":1668416987,"status":10,"status_display":"Accepted","runtime":"7 ms","url":"/submissions/detail/843163129/","is_pending":"Not Pending","title":"Minimum Falling Path Sum","memory":"47.7 MB","code":"class Solution {\n    public int minFallingPathSum(int[][] matrix) {\n        int h = matrix.length;\n        int w = matrix[0].length;\n        \n        int[][] dp = new int[h][w+2];\n        \n        \n        for(int i=0; i<h; i++){\n            \n            \n            dp[i][0]=Integer.MAX_VALUE;\n            dp[i][w+1]=Integer.MAX_VALUE;\n            \n            \n            for(int j=1; j<w+1; j++){\n                \n                if(i==0){\n                    dp[i][j]=matrix[0][j-1];    \n                    continue;\n                }\n                \n                dp[i][j] += Math.min(dp[i-1][j-1], Math.min(dp[i-1][j], dp[i-1][j+1]))+ matrix[i][j-1];\n            }\n        }\n        \n        \n        int res = Integer.MAX_VALUE;\n        \n        for(int j=1; j<w+2;j++){\n            res = Math.min(res, dp[h-1][j]);\n        }\n        \n        \n        \n        return res;\n            \n        \n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111","title_slug":"minimum-falling-path-sum","has_notes":false,"flag_type":1}