{"id":1150484143,"question_id":967,"lang":"java","lang_name":"Java","time":"4 months, 3 weeks","timestamp":1705648101,"status":10,"status_display":"Accepted","runtime":"10 ms","url":"/submissions/detail/1150484143/","is_pending":"Not Pending","title":"Minimum Falling Path Sum","memory":"45.2 MB","code":"class Solution {\n    public int minFallingPathSum(int[][] matrix) {\n        int h= matrix.length;\n        int w = matrix[0].length;\n\n        int[][] dp = new int[h+1][w];\n        for(int i=1; i<=h; i++){\n            Arrays.fill(dp[i], Integer.MAX_VALUE);\n        }\n\n        int min = Integer.MAX_VALUE;\n        for(int i=1; i<=h; i++){\n            for(int j=0; j<w; j++){\n\n                dp[i][j] = dp[i-1][j] + matrix[i-1][j];\n\n                if(j-1>=0)\n                    dp[i][j] = Math.min(dp[i][j], dp[i-1][j-1]+matrix[i-1][j]);\n                if(j+1<w)\n                    dp[i][j] = Math.min(dp[i][j], dp[i-1][j+1]+matrix[i-1][j]);\n\n                if(i==h){\n                    min = Math.min(min, dp[i][j]);\n                }\n\n            }\n        }\n\n        \n        return min;\n\n\n\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111","title_slug":"minimum-falling-path-sum","has_notes":false,"flag_type":1}