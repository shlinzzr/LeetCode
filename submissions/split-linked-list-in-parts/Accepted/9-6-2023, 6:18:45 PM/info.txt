{"id":1042025969,"question_id":725,"lang":"java","lang_name":"Java","time":"9 months, 1 week","timestamp":1693995525,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1042025969/","is_pending":"Not Pending","title":"Split Linked List in Parts","memory":"43.7 MB","code":"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode[] splitListToParts(ListNode head, int k) {\n        List<ListNode> list = new ArrayList<>();\n        \n        int len =0;\n        ListNode curr = head;\n        while(curr!=null){\n            curr= curr.next;\n            len++;\n        }\n        \n        \n\n        curr = head;\n        \n        ListNode prev = new ListNode();\n        prev.next = curr;\n        \n        while(curr!=null){\n            list.add(prev);\n\n            int each = len/k + (len%k>0? 1: 0);\n            len--;\n            \n            for(int i=0; i<each; i++){\n                if(curr!=null){\n                    prev = curr;\n                    curr= curr.next;\n                }\n            }\n        }\n        \n        ListNode[] res = new ListNode[k];\n        \n        for(int i=0; i<list.size(); i++){\n            prev = list.get(i);\n            res[i] =prev.next;\n            prev.next = null;\n        }\n        \n        return res;\n        \n    }\n}","compare_result":"1111111111111111111111111111111111111111111","title_slug":"split-linked-list-in-parts","has_notes":false,"flag_type":1}