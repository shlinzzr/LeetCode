{"id":1128526492,"question_id":2678,"lang":"java","lang_name":"Java","time":"5 months, 2 weeks","timestamp":1703558089,"status":10,"status_display":"Accepted","runtime":"66 ms","url":"/submissions/detail/1128526492/","is_pending":"Not Pending","title":"Design Graph With Shortest Path Calculator","memory":"55.5 MB","code":"class Graph {\n\n    // coppied for daily problem as I haven't studied graph yet\n    int[][] distance;\n    int n;\n    final int MAX_VALUE = 500_000_000;\n\n    public Graph(int n, int[][] edges) {\n        this.n = n;\n        distance = new int[n][n];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                distance[i][j] = MAX_VALUE;\n            }\n            distance[i][i] = 0;\n        }\n\n        for (int[] edge : edges) {\n            distance[edge[0]][edge[1]] = edge[2];\n        }\n\n        for (int k = 0; k < n; k++) {\n            for (int i = 0; i < n; i++) {\n                for (int j = 0; j < n; j++) {\n                    distance[i][j] = Math.min(\n                        distance[i][j],\n                        distance[i][k] + distance[k][j]\n                    );\n                }\n            }\n        }\n    }\n    \n    public void addEdge(int[] edge) {\n        if (distance[edge[0]][edge[1]] <= edge[2]) {\n            return;\n        }\n        distance[edge[0]][edge[1]] = edge[2];\n\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                distance[i][j] = Math.min(\n                    distance[i][j],\n                    distance[i][edge[0]] + edge[2] + distance[edge[1]][j]\n                );\n            }\n        }\n    }\n    \n    public int shortestPath(int node1, int node2) {\n        if (distance[node1][node2] == MAX_VALUE) {\n            return -1;\n        }\n        return distance[node1][node2];\n    }\n}","compare_result":"111111111111111111111111111111111111","title_slug":"design-graph-with-shortest-path-calculator","has_notes":false,"flag_type":1}