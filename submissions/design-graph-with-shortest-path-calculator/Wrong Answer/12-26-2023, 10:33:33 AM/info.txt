{"id":1128526037,"question_id":2678,"lang":"java","lang_name":"Java","time":"5 months, 2 weeks","timestamp":1703558013,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1128526037/","is_pending":"Not Pending","title":"Design Graph With Shortest Path Calculator","memory":"N/A","code":"class Graph {\n    int[][] g ;\n    int n ;\n    public Graph(int n, int[][] edges) {\n        g = new int[n][n];\n        this.n = n;\n        for(int i=0; i<n; i++){\n            Arrays.fill(g[i], Integer.MAX_VALUE);\n            g[i][i] = 0;\n        }\n\n        for(int[] e : edges){\n            g[e[0]][e[1]] = e[2];\n        }\n\n        for(int k=0; k<n; k++){\n            for(int i=0; i<n; i++){\n                if(g[i][k]==Integer.MAX_VALUE) continue;\n                for(int j=0; j<n; j++){\n\n                    if(g[k][j]==Integer.MAX_VALUE) continue;\n                    g[i][j] = Math.min(g[i][j], g[i][k] + g[k][j]);\n                }\n            }\n        }\n    }\n    \n    public void addEdge(int[] edge) {\n\n        int a = edge[0];\n        int b = edge[1];\n        int distance = edge[2];\n\n        if(g[a][b]<= distance) return;\n\n        g[a][b] = distance;\n\n        for(int i=0; i<n; i++){\n            for(int j=0; j<n; j++){\n                g[i][j] = Math.min(g[i][j], g[i][a] + distance + g[b][j]);\n            }\n        }\n\n       \n        \n    }\n    \n    public int shortestPath(int node1, int node2) {\n        return g[node1][node2]==Integer.MAX_VALUE ? -1 : g[node1][node2];\n    }\n}\n\n/**\n * Your Graph object will be instantiated and called as such:\n * Graph obj = new Graph(n, edges);\n * obj.addEdge(edge);\n * int param_2 = obj.shortestPath(node1,node2);\n */","compare_result":"111100001111001110111111111111111111","title_slug":"design-graph-with-shortest-path-calculator","has_notes":false,"flag_type":1}