{"id":800334332,"question_id":37,"lang":"java","lang_name":"Java","time":"1 year, 9 months","timestamp":1663232924,"status":10,"status_display":"Accepted","runtime":"6 ms","url":"/submissions/detail/800334332/","is_pending":"Not Pending","title":"Sudoku Solver","memory":"41.8 MB","code":"class Solution {\n    \n     boolean[][] row = new boolean[9][9];\n        boolean[][] col = new boolean[9][9];\n        boolean[][] box = new boolean[9][9];\n    \n    public void solveSudoku(char[][] board) {\n        \n       \n        \n        int h=board.length;\n        int w=board[0].length;\n        \n        for(int i=0; i<h; i++){\n            \n            for(int j=0; j<w; j++){\n                \n                if(board[i][j]!='.'){\n                    int num = board[i][j]-'1';\n                    row[i][num] = true;\n                    col[j][num] = true;\n                    box[i/3*3+j/3][num]=true;\n                    \n                    \n//                     for(char c='1'; c<='9'; c++){\n\n//                         if(isValid(board, j, i, c)){\n//                             board[i][j]=c;\n//                             if(helper(board)){\n//                                return true;\n//                             }else{\n//                                 board[i][j] = '.';    \n//                             }    \n//                         }\n                        \n//                     }\n                    \n//                     return false;\n                }\n            }\n            \n        }\n        \n        backtracking(board, 0, 0);\n        \n    }\n    \n     public boolean backtracking(char[][] board, int r, int c)\n    {\n        int i,j;\n        for(i=r;i<9;i++)\n        {\n            if(i==r) j=c;else j=0;\n            for(;j<9;j++)\n            {\n                if(board[i][j]!='.') \n                    continue;\n                for(int k=0;k<9;k++)\n                {\n                    if(legal(i,j,k)) \n                    {\n                        char pre = board[i][j];\n                        row[i][k] = true;\n                        col[j][k] = true;\n                        box[i/3*3+j/3][k] = true;\n                        board[i][j] = (char)(k+49);\n                        if(j==8 && backtracking(board,r+1,0)) return true;\n                        if(j!=8 && backtracking(board,r,c+1)) return true;\n                        row[i][k] = false;\n                        col[j][k] = false;\n                        box[i/3*3+j/3][k] = false;\n                        board[i][j]=pre;\n                    }\n                }\n                return false;\n            }\n        }\n        return true;\n    }\n    \n     public boolean legal(int i,int j, int num)\n    {\n        if(!row[i][num] && !col[j][num] && !box[i/3*3+j/3][num]) return true;\n        else return false;\n    }\n    \n    private boolean isValid(char[][] board, int col, int row, char c){\n        \n        for(int i=0; i<9; i++){\n            \n            if( board[i][col]==c) return false;\n            if( board[row][i]==c) return false;\n            if( board[3*(row/3) + i/3][3*(col/3) + i%3]==c) return false;\n        }\n        \n        return true;\n        \n    }\n\n\n\n}","compare_result":"111111","title_slug":"sudoku-solver","has_notes":false,"flag_type":1}