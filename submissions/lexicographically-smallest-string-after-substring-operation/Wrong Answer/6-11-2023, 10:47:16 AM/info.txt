{"id":968499686,"question_id":2828,"lang":"java","lang_name":"Java","time":"1Â year","timestamp":1686451636,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/968499686/","is_pending":"Not Pending","title":"Lexicographically Smallest String After Substring Operation","memory":"N/A","code":"class Solution {\n    public String smallestString(String s) {\n        int len = s.length();\n       \n        int st =0;\n        while(st<len){\n            \n            char ch = s.charAt(st);\n            \n            if(ch>'a'){\n                \n                int ed=st;\n                \n                while(ed<len && s.charAt(ed)>'a'){\n                    ed++;\n                }\n                \n                \n                s = T(s, st, ed);\n                break;\n            }\n            \n            st++;\n            \n            \n        }\n        \n        return s;\n        \n       \n    }\n    \n    \n    private String T(String s ,int st, int ed){\n         int len = s.length();\n        char[] res = s.toCharArray();\n        \n        for(int i=st; i<ed; i++){\n               char ch = s.charAt(i);\n            \n            char tmp = (char) (((ch-'a')+25)%26 + 'a');\n            \n            res[i] = tmp;\n        }\n       \n        \n         return new String(res);\n        \n    }\n}","compare_resulttitle_slug":"lexicographically-smallest-string-after-substring-operation","has_notes":false,"flag_type":1}