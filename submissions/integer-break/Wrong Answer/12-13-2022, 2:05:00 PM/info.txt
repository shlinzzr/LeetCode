{"id":859006872,"question_id":343,"lang":"java","lang_name":"Java","time":"1 year, 6 months","timestamp":1670911500,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/859006872/","is_pending":"Not Pending","title":"Integer Break","memory":"N/A","code":"class Solution {\n    public int integerBreak(int n) {\n        // dp \n        int[] dp = new int[n+1];\n        dp[0] = 0;\n        dp[1] = 0;\n        dp[2] = 1; //組成2的max product\n        \n        if(n==2){\n            return 1;\n        }\n        \n        if(n==3){\n            return 2;\n        }\n        \n        if(n==4)\n            return 4;\n        \n        if(n==5)\n            return 6;\n        \n        int product=1;\n        \n        while(n>3){\n            product*=3;\n            n-=3;\n        }\n        \n        product *= n;\n        \n        return product;\n        \n        \n        \n        \n        \n//      \n//         for(int i=2; i<=n; i++){\n            \n//             for(int j=1; j<=i/2; j++){\n//                 dp[i] = Math.max(dp[i], Math.max(j, dp[j])* Math.max(i-j, dp[i-j]));\n//             }\n            \n//         }\n        \n//         return dp[n];\n    }\n}","compare_result":"10111101111011011011011011011011011011011011011011","title_slug":"integer-break","has_notes":false,"flag_type":1}