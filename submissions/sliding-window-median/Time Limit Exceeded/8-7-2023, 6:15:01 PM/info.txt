{"id":1014578870,"question_id":480,"lang":"java","lang_name":"Java","time":"10 months, 1 week","timestamp":1691403301,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1014578870/","is_pending":"Not Pending","title":"Sliding Window Median","memory":"N/A","code":"class Solution {\n   public double[] medianSlidingWindow(int[] nums, int k) {\n       \n       int len = nums.length;\n       double[] result = new double[len - k + 1];\n       \n       int j=0;\n       PriorityQueue<Integer> maxHeap = new PriorityQueue<>(Collections.reverseOrder());\n       PriorityQueue<Integer> minHeap = new PriorityQueue<>();\n       \n       for (int i = 0; i < len; i++) {\n            minHeap.offer(nums[i]);\n            maxHeap.offer(minHeap.poll());\n           \n            if(maxHeap.size()>minHeap.size()) minHeap.offer(maxHeap.poll());\n            if (minHeap.size() + maxHeap.size() == k) {\n                result[j]= (minHeap.size()==maxHeap.size() ) ?(double)((long)minHeap.peek()+(long)maxHeap.peek())/2:(double) minHeap.peek();\n                if (!minHeap.remove(nums[j])) maxHeap.remove(nums[j]);\n                j++;\n            }\n        }\n        return result;\n    }\n}","compare_result":"1111111111111111111111111111111111111111110","title_slug":"sliding-window-median","has_notes":false,"flag_type":1}