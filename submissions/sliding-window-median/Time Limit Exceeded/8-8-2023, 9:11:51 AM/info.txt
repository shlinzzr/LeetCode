{"id":1015187497,"question_id":480,"lang":"java","lang_name":"Java","time":"10 months, 1 week","timestamp":1691457111,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1015187497/","is_pending":"Not Pending","title":"Sliding Window Median","memory":"N/A","code":"class Solution {\n    public double[] medianSlidingWindow(int[] nums, int k) {\n\n        double[] result = new double[nums.length - k + 1];\n\n        //integer.compare prevents overflow\n        Comparator<Integer> comp = (a, b)  ->  nums[a] != nums[b] ?  Integer.compare(nums[a], nums[b]) : a - b;\n        //the max and min sets store the index and are ordered by values at these indices. If 2 values are equal then the order depends on which one was seen first\n        //  desc with smaller values\n        // TreeSet<Integer> maxset =  new TreeSet<>(comp.reversed());\n        // //  asc with large values\n        // TreeSet<Integer> minset =  new TreeSet<>(comp);\n        \n        PriorityQueue<Integer> maxset = new PriorityQueue<>(comp.reversed());\n        PriorityQueue<Integer> minset = new PriorityQueue<>(comp);\n        \n\n        for (int i = 0; i < k; i++) \n            addIndex(i, maxset, minset);\n        \n        result[0] = getMedian(nums, maxset, minset);\n\n        int r = 1;\n        for (int i = k; i < nums.length  ; i++) {\n            if( ! maxset.remove(i-k)) minset.remove(i-k);\n            addIndex(i, maxset, minset);\n            result[r++] = getMedian(nums, maxset, minset);\n        }\n        return result;\n    }\n\n    // private double getMedian(int[] nums, TreeSet<Integer> maxset, TreeSet<Integer> minset) {\n    private double getMedian(int[] nums, PriorityQueue<Integer> maxset, PriorityQueue<Integer> minset) {\n        return maxset.size() == minset.size() ?    ((double) nums[maxset.peek()] + (double)nums[minset.peek()]) * 0.5 : nums[minset.peek()];\n    }\n\n\n    // private void addIndex(int idx, TreeSet<Integer> maxset, TreeSet<Integer> minset) {\n    private void addIndex(int idx, PriorityQueue<Integer> maxset, PriorityQueue<Integer> minset) {\n        // minset.add(idx);\n        // maxset.add(minset.pollFirst());\n        // if(maxset.size() > minset.size())  minset.add(maxset.pollFirst());\n        \n        minset.offer(idx);\n        maxset.offer(minset.poll());\n        if(maxset.size()>minset.size()) minset.offer(maxset.poll());\n    }\n\n}","compare_result":"1111111111111111111111111111111111111111111","title_slug":"sliding-window-median","has_notes":false,"flag_type":1}