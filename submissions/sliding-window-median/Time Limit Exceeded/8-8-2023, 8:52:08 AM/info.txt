{"id":1015178932,"question_id":480,"lang":"java","lang_name":"Java","time":"10 months, 1 week","timestamp":1691455928,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1015178932/","is_pending":"Not Pending","title":"Sliding Window Median","memory":"N/A","code":"class Solution {\n   public double[] medianSlidingWindow(int[] nums, int k) {\n       \n       int len = nums.length;\n       \n        double[] result = new double[len - k + 1];\n        PriorityQueue<Integer> left = new PriorityQueue<>(Collections.reverseOrder());\n        PriorityQueue<Integer> right = new PriorityQueue<>();\n\n        for(int i = 0; i < nums.length; i++) {\n            if(left.size() <= right.size()) {\n                right.add(nums[i]);\n                left.add(right.remove());\n            } else {\n                left.add(nums[i]);\n                right.add(left.remove());\n            }\n\n\n            if(left.size() + right.size() == k) {\n                double median;\n                if(left.size() == right.size()) {\n                    median = (double) ((long)left.peek() + (long)right.peek()) / 2;\n                } else {\n                    median = (double) left.peek();\n                }\n\n                int start = i - k + 1;\n                result[start] = median;\n                if(!left.remove(nums[start])) {\n                    right.remove(nums[start]);\n                }\n            }\n        }\n        return result;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111","title_slug":"sliding-window-median","has_notes":false,"flag_type":1}