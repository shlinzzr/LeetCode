{"id":1097728311,"question_id":536,"lang":"java","lang_name":"Java","time":"7Â months","timestamp":1699859951,"status":10,"status_display":"Accepted","runtime":"10 ms","url":"/submissions/detail/1097728311/","is_pending":"Not Pending","title":"Construct Binary Tree from String","memory":"44.3 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n\n    public TreeNode str2tree(String s) {\n\n        int len = s.length();\n        if(s==null || len==0)\n            return null;\n\n        // find root\n        int first = s.indexOf(\"(\");\n        if(first==-1){\n            return new TreeNode(Integer.valueOf(s));\n        }\n        TreeNode root = new TreeNode(Integer.valueOf(s.substring(0, first)));\n\n        int start = first, level = 0;\n\n        for (int i=start; i<s.length(); i++) {\n\n            if (s.charAt(i) == '(') \n                level++;\n            else if (s.charAt(i) == ')') \n                level--;\n\n            if (level == 0 && start==first) {\n                root.left = str2tree(s.substring(start+1,i)); \n                start = i+1;\n            } else if (level == 0) {\n                root.right = str2tree(s.substring(start+1,i));\n            }\n                \n        }\n        return root;\n\n\n    }\n\n/* \n  i->\n\"4(2(3)(1)) (6(5))\"\n  ^       ^\nfirst.   lv=0 (start==first)\n            ^\n           start\n   4\n  /\\\n\n*/\n\n\n\n\n\n\n    /*\n    public TreeNode str2tree(String s) {\n        int len = s.length();\n\n        TreeNode parent=null, curr=null;\n\n        Stack<TreeNode> st = new Stack<>();\n\n        int sign=1, idx=0;\n        while(idx<s.length()){\n            \n            char ch = s.charAt(idx);\n            if(ch==')'){\n                curr = st.pop();\n                parent = st.peek();\n                if(parent.left!=null){\n                    parent.right=curr;\n                }else{\n                    parent.left=curr;\n                }\n                idx++;\n\n            } else if(ch=='-'){\n                sign=-1;\n                idx++;\n\n            } else if(ch=='('){\n                idx++;\n\n            } else{\n\n                int num = ch-'0';\n                while(idx+1<len && s.charAt(idx+1)>='0' && s.charAt(idx+1)<='9'){\n                    num=num*10+s.charAt(idx+1)-'0';\n                    idx++;\n                }\n                num *= sign;\n                sign=1;\n                st.push(new TreeNode(num));\n                idx++;\n            }\n        }\n\n        if (!st.isEmpty()) {\n            return st.peek();\n        }\n\n        return parent;\n\n    }*/\n\n\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"construct-binary-tree-from-string","has_notes":false,"flag_type":1}