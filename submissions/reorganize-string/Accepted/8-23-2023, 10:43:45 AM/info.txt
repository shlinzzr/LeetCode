{"id":1029154630,"question_id":778,"lang":"java","lang_name":"Java","time":"9 months, 3 weeks","timestamp":1692758625,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/1029154630/","is_pending":"Not Pending","title":"Reorganize String","memory":"40.5 MB","code":"class Solution {\n    public String reorganizeString(String S) {\n        // Create map of each char to its count\n        Map<Character, Integer> map = new HashMap<>();\n        for (char c : S.toCharArray()) {\n            int count = map.getOrDefault(c, 0) + 1;\n            // Impossible to form a solution\n            if (count > (S.length() + 1) / 2) return \"\";\n            map.put(c, count);\n        }\n        // Greedy: fetch char of max count as next char in the result.\n        // Use PriorityQueue to store pairs of (char, count) and sort by count DESC.\n        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> b[1] - a[1]);\n        for (char c : map.keySet()) {\n            pq.add(new int[] {c, map.get(c)});\n        }\n        // Build the result.\n        StringBuilder sb = new StringBuilder();\n        while (!pq.isEmpty()) {\n            int[] first = pq.poll();\n            if (sb.length() == 0 || first[0] != sb.charAt(sb.length() - 1)) {\n                sb.append((char) first[0]);\n                if (--first[1] > 0) {\n                    pq.add(first);\n                }\n            } else {\n                int[] second = pq.poll();\n                sb.append((char) second[0]);\n                if (--second[1] > 0) {\n                    pq.add(second);\n                }\n                pq.add(first);\n            }\n        }\n        return sb.toString();\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"reorganize-string","has_notes":false,"flag_type":1}