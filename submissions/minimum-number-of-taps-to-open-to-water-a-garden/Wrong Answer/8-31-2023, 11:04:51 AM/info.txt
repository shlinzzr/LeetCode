{"id":1036465414,"question_id":1451,"lang":"java","lang_name":"Java","time":"9 months, 2 weeks","timestamp":1693451091,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1036465414/","is_pending":"Not Pending","title":"Minimum Number of Taps to Open to Water a Garden","memory":"N/A","code":"class Solution {\n    public int minTaps(int n, int[] ranges) {\n        List<int[]> list =new ArrayList<>();\n        \n        int len = ranges.length;\n        \n        PriorityQueue<int[]> pq = new PriorityQueue<>(\n            (a,b) -> b[1]-a[1]\n        );\n        \n        for(int i=0; i<len; i++){\n            int[] ele = new int[]{i-ranges[i], i+ranges[i]};\n            if(i-ranges[i]<0)\n                pq.offer(ele);\n            else{\n                list.add(ele);\n            }\n        }\n        \n        int covered = -1;\n        int cnt =0 ;\n        while(covered<n){\n            \n            if(pq.isEmpty())\n                return -1;\n            \n            int[] p = pq.poll();\n            covered = p[1];\n            \n            List<int[]> tmp = new ArrayList<>();\n            for(int[] ele : list){\n                if(ele[1]<= covered)\n                    continue;\n                else if(ele[0]<=covered && ele[0]>covered){\n                    pq.offer(ele);\n                }else if(ele[0] > covered){\n                    tmp.add(ele);\n                }\n            }\n            list = tmp;\n            \n            cnt++;\n        }\n        \n        return cnt;\n    }\n}","compare_result":"11000110000000000000000000000000001011","title_slug":"minimum-number-of-taps-to-open-to-water-a-garden","has_notes":false,"flag_type":1}