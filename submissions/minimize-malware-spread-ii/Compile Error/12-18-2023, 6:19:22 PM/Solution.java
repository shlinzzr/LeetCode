// https://leetcode.com/problems/minimize-malware-spread-ii

class Solution {

    class UnionFind{
        
        int[] parent;
        int[] weight;
        
        public UnionFind(int n){
            parent = new int[n];
            weight = new int[n];
            for(int i=0; i<n; i++){
                parent[i]= i;
            }
        
        }
        public int find(int x){
            
            if(parent[x]!=x)
                parent[x] = find(parent[x]);
            
            return parent[x];
        }
        
        public void union(int a, int b){

            a=find(a);
            b=find(b);
            
            if(a==b)
                return;
            
            if(weight[a]<=weight[b]){
                weight[a]+=weight[b];
                parent[b] = a;
            }else{
                weight[b]+=weight[a];
                parent[a] = b;
            }
        }
        
    }

    public int minMalwareSpread(int[][] graph, int[] initial) {
        int n = graph.length;

        UnionFind uf = new UnionFind(n);

        int res = 0;
        int maxWeight = 0;
        int maxNode = initial[0];

        boolean[] infected = new boolean[n];
        for(int u: initial) infected[u] = true;

         for(int i = 0; i < n; i++) {
            if(!infected[i]) {
                for(int j = i + 1; j < n; j++) {
                    if(!infected[j] && graph[i][j] == 1) uf.union(i, j);
                }
            }
        }
        while(!q.isEmpty()){

            int p = q.poll();

            if(seen[p])
                continue;
            seen[p]=true;

            for(int adj : graph[p]){

                int roota = uf.find(p);
                int rootb = uf.find(adj);
                if(roota!=rootb){
                    uf.union(roota, rootb);
                    

                    if(uf.weight[roota]>=maxWeight && roota<res){
                        maxWeight = uf.weight[roota];
                        res = roota;
                    }

                    if(uf.weight[roota]>=maxWeight && rootb<res){
                        maxWeight = uf.weight[rootb];
                        res = rootb;
                    }
                }

            }

        }

        return res;



    }
}