{"id":1128742190,"question_id":2803,"lang":"java","lang_name":"Java","time":"5 months, 2 weeks","timestamp":1703581725,"status":10,"status_display":"Accepted","runtime":"111 ms","url":"/submissions/detail/1128742190/","is_pending":"Not Pending","title":"Modify Graph Edge Weights","memory":"53.3 MB","code":"class Solution {\n    public int[][] modifiedGraphEdges(int n, int[][] edges, int source, int destination, int target) {\n        Map<Integer, Integer>[] adjs = new Map[n];\n        for (int i = 0; i < n; i++) {\n            adjs[i] = new HashMap<>();\n        }\n\n        for (int[] edge : edges) {\n            adjs[edge[0]].put(edge[1], edge[2]);\n            adjs[edge[1]].put(edge[0], edge[2]);\n        }\n\n        int[] distTo = new int[n];\n        Arrays.fill(distTo, Integer.MAX_VALUE);\n        distTo[source] = 0;\n\n        Queue<int[]> pq = new PriorityQueue<>((a,b)->a[1]-b[1]);\n        pq.add(new int[] {source, 0});\n\n        dijkstra(adjs, distTo, pq);\n\n        if (distTo[destination] == target) {\n            return fill(edges);\n        } else if (distTo[destination] < target) {\n            return new int[0][0];\n        } else {\n            for (int[] edge : edges) {\n                if (edge[2] == -1) {\n                    edge[2] = 1;\n                    adjs[edge[0]].put(edge[1], 1);\n                    adjs[edge[1]].put(edge[0], 1);\n\n                    pq.clear();\n                    pq.add(new int[] {edge[0], distTo[edge[0]]});\n                    pq.add(new int[] {edge[1], distTo[edge[1]]});\n\n                    dijkstra(adjs, distTo, pq);\n\n                    if (distTo[destination] == target) {\n                        return fill(edges);\n                    } else if (distTo[destination] < target) {\n                        edge[2] += target - distTo[destination];\n                        adjs[edge[0]].put(edge[1], edge[2]);\n                        adjs[edge[1]].put(edge[0], edge[2]);\n                        return fill(edges);\n                    }\n                }\n            }\n        }\n\n        return new int[0][0];\n    }\n\n    private int[][] fill(int[][] edges) {\n        for (int[] edge : edges) {\n            if (edge[2] == -1) {\n                edge[2] = (int) (2 * 1e9);\n            }\n        }\n        return edges;\n    }\n\n    private void dijkstra(Map<Integer, Integer>[] adjs, int[] distTo, Queue<int[]> pq) {\n        while (!pq.isEmpty()) {\n            int[] curr = pq.poll();\n\n            for (Map.Entry<Integer, Integer> entry : adjs[curr[0]].entrySet()) {\n                if (entry.getValue() > 0) {\n                    int next = entry.getKey();\n                    if (distTo[next] - entry.getValue() > distTo[curr[0]]) {\n                        distTo[next] = distTo[curr[0]] + entry.getValue();\n                        pq.add(new int[] {next, distTo[next]});\n                    }\n                }\n            }\n        }\n    }\n}","compare_resulttitle_slug":"modify-graph-edge-weights","has_notes":false,"flag_type":1}