{"id":1128741907,"question_id":2803,"lang":"java","lang_name":"Java","time":"5 months, 2 weeks","timestamp":1703581693,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1128741907/","is_pending":"Not Pending","title":"Modify Graph Edge Weights","memory":"N/A","code":"class Solution {\n    public int[][] modifiedGraphEdges(int n, int[][] edges, int src, int dest, int target) {\n        \n        int[][] g = new int[n][n];\n        for(int i=0; i<n;i++){\n            Arrays.fill(g[i], Integer.MAX_VALUE);\n            g[i][i]=0;\n        }\n\n        Set<int[]> set = new HashSet<>();\n        for(int[] e : edges){\n            int a = e[0];\n            int b = e[1];\n            int w = e[2];\n            if(w!=-1){\n                g[a][b]=Math.min(g[a][b], w);\n                g[b][a]=Math.min(g[b][a], w);\n            }\n            // set.add(new int[]{a,b});\n            // set.add(new int[]{b,a});\n        }\n\n        // int[] distTo = new int[n];\n        // distTo[src]=0;\n\n        // Queue<int[]> pq = new PriorityQueue<>((a,b)-> a[1]-b[1]);\n        // pq.add(new int[] {src, 0});\n\n        // while(!pq.isEmpty()){\n        //     int[] cur = pq.poll();\n\n        // }\n\n\n        List<int[]> list = new ArrayList<>();\n        for(int k=0;k<n; k++){\n            for(int i=0; i<n;i++){\n                if(g[i][k]<Integer.MAX_VALUE){\n                    for(int j=0; j<n; j++){\n                        if(g[k][j]<Integer.MAX_VALUE){\n                            g[i][j]=Math.min(g[i][j], g[i][k]+g[k][j]);\n                            list.add(new int[]{i, j, g[i][j]});\n                        }\n                    }\n                }\n            }\n        }\n\n        if(g[src][dest]==target){\n            return fill(edges);\n        }else if(g[src][dest]<target)\n            return new int[0][0];\n        else{\n            \n        }\n\n\n\n        for(int[] p : set){\n\n            int a = p[0];\n            int b = p[1];\n\n            if(g[a][b]==Integer.MAX_VALUE) \n\n                if(g[src][a]<Integer.MAX_VALUE && g[b][dest]<Integer.MAX_VALUE && g[src][a]+g[b][dest]<target){\n                g[a][b] = target - g[src][a] - g[b][dest];\n                list.add(new int[]{a,b,g[a][b]});\n            }\n\n\n\n             if(g[b][a]==Integer.MAX_VALUE) \n\n                if(g[src][b]<Integer.MAX_VALUE && g[a][dest]<Integer.MAX_VALUE && g[src][b]+g[a][dest]<target){\n                g[b][a] = target - g[src][b] - g[a][dest];\n                list.add(new int[]{b,a,g[b][a]});\n            }\n        }\n\n        int[][] res= new int[list.size()][];\n        for(int i=0; i<list.size(); i++){\n            res[i] = list.get(i);\n        }\n\n\n\n        return res;\n\n\n\n    }\n\n    private int[][] fill(int[][] edges) {\n        for (int[] edge : edges) {\n            if (edge[2] == -1) {\n                edge[2] = (int) (2 * 1e9);\n            }\n        }\n        return edges;\n    }\n}","compare_result":"01001011111011000011001001101111001110011010001111100100100010011100110011101001101010101100010111100000110101010101101110010000111001101101100011111110100010111111001100010100111101011100101100001010000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000100000000000000010000000000000000000000000001001001000000101000001010011110001010110001111111110010000111000010110000000010101101110001111001011000010100110010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000100110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"modify-graph-edge-weights","has_notes":false,"flag_type":1}