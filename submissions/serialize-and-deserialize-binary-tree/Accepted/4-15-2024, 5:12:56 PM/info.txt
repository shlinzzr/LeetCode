{"id":1232912388,"question_id":297,"lang":"java","lang_name":"Java","time":"1 month, 4 weeks","timestamp":1713172376,"status":10,"status_display":"Accepted","runtime":"9 ms","url":"/submissions/detail/1232912388/","is_pending":"Not Pending","title":"Serialize and Deserialize Binary Tree","memory":"45.7 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\npublic class Codec {\n\n    // Encodes a tree to a single string.\n    public String serialize(TreeNode root) {\n        StringBuilder sb = new StringBuilder();\n        serializeHelper(root, sb);\n        return sb.toString();\n\n    }\n\n    private void serializeHelper(TreeNode node, StringBuilder sb){\n        if(node==null){\n            sb.append(\"null,\");\n            return;\n        }\n\n        sb.append(node.val).append(\",\");\n        serializeHelper(node.left, sb);\n        serializeHelper(node.right, sb);\n    }\n\n    // Decodes your encoded data to tree.\n    public TreeNode deserialize(String data) {\n        Queue<String> q = new LinkedList<>(Arrays.asList(data.split(\",\")));\n        return deserializeHelper(q);\n    }\n\n    private TreeNode deserializeHelper(Queue<String> q){\n        if(q.isEmpty()) return null;\n\n        String p = q.poll();\n        if(\"null\".equals(p)) return null;\n\n        TreeNode root = new TreeNode(Integer.valueOf(p));\n        root.left = deserializeHelper(q);\n        root.right = deserializeHelper(q);\n\n        return root;\n\n    }\n}\n\n// Your Codec object will be instantiated and called as such:\n// Codec ser = new Codec();\n// Codec deser = new Codec();\n// TreeNode ans = deser.deserialize(ser.serialize(root));","compare_result":"11111111111111111111111111111111111111111111111111111","title_slug":"serialize-and-deserialize-binary-tree","has_notes":false,"flag_type":1}