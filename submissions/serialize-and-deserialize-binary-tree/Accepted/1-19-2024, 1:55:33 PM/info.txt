{"id":1150428365,"question_id":297,"lang":"java","lang_name":"Java","time":"4 months, 3 weeks","timestamp":1705643733,"status":10,"status_display":"Accepted","runtime":"15 ms","url":"/submissions/detail/1150428365/","is_pending":"Not Pending","title":"Serialize and Deserialize Binary Tree","memory":"46.5 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\npublic class Codec {\n    StringBuilder sb = new StringBuilder();\n    \n    // Encodes a tree to a single string.\n    public String serialize(TreeNode root) {\n        \n        serialHelper(root);\n        return sb.toString();\n    }\n    \n    private void serialHelper(TreeNode root){\n        if(root==null){\n            sb.append(\"null,\");\n            return;\n        }\n        \n        sb.append(root.val+\",\");\n        serialHelper(root.left);\n        serialHelper(root.right);\n    }\n\n    // Decodes your encoded data to tree.\n    public TreeNode deserialize(String data) {\n        return deserializeHelper(new LinkedList<>(Arrays.asList(data.split(\",\")))); \n    }\n    \n    private TreeNode deserializeHelper(Queue<String> q){\n        \n        if(q.isEmpty()) return null;\n        \n        String p = q.poll();\n        \n        if(p.equals(\"null\")) return null;\n        TreeNode node = new TreeNode(Integer.valueOf(p));\n        node.left = deserializeHelper(q);\n        node.right = deserializeHelper(q);\n        \n        return node;\n    }\n}\n\n// Your Codec object will be instantiated and called as such:\n// Codec ser = new Codec();\n// Codec deser = new Codec();\n// TreeNode ans = deser.deserialize(ser.serialize(root));","compare_result":"11111111111111111111111111111111111111111111111111111","title_slug":"serialize-and-deserialize-binary-tree","has_notes":false,"flag_type":1}