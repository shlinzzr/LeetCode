{"id":1086552524,"question_id":3178,"lang":"java","lang_name":"Java","time":"7 months, 2 weeks","timestamp":1698552762,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1086552524/","is_pending":"Not Pending","title":"Minimum Increment Operations to Make Array Beautiful","memory":"N/A","code":"class Solution {\n    public long minIncrementOperations(int[] arr, int k) {\n        int len = arr.length;\n        \n        int[] nums = new int[len];\n        System.arraycopy(arr, 0, nums, 0, len);\n        \n        long res = 0;\n        for(int i=0; i<len-2; i++){\n            \n            int n1 = nums[i];\n            int n2 = nums[i+1];\n            int n3 = nums[i+2];\n            \n            int max = Math.max(n1, Math.max(n2, n3));\n              // System.out.println(i + \" \" + max);\n            if(k>max){\n              \n                res += k-max;\n                \n                if(max==n3)\n                    nums[i+2]=k;\n                else if(max==n2)\n                    nums[i+1]=k;\n      \n            }\n        }\n        \n        \n         System.arraycopy(arr, 0, nums, 0, len);\n        \n        int res2=0;\n        \n        // len =4, i=1\n        for(int i=len-3; i>=0; i--){\n            \n            int n1 = nums[i];\n            int n2 = nums[i+1];\n            int n3 = nums[i+2];\n            \n            int max = Math.max(n1, Math.max(n2, n3));\n              // System.out.println(i + \" \" + max);\n            if(k>max){\n              \n                res2 += k-max;\n                \n                if(max==n1)\n                    nums[i]=k;\n                else if(max==n2)\n                    nums[i+1]=k;\n      \n            }\n        }\n        System.out.println(res2);\n        \n        return Math.min(res, res2);\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n//         long res = 0;\n//         int st = 0;\n        \n//         HashMap<Integer, Integer> idxMap = new HashMap<>();\n        \n//         TreeMap<Integer, Integer> map = new TreeMap<>();\n//         for(int ed=0; ed<len; ed++){\n//             map.put(nums[ed], map.getOrDefault(nums[ed],0)+1);\n//             idxMap.put(nums[ed], ed);\n            \n//             if(ed<2)\n//                 continue;\n            \n// //             System.out.println(\"ed=\"+ed + \" last=\"+map.lastKey());\n            \n// //             // System.out.println(\"nums[1]=\"+nums[1]);\n// //             System.out.println(\"idxMap.keySet()=\"+idxMap.get(3));\n            \n            \n//             if(map.lastKey()<k){\n//                 int last = map.lastKey();\n//                 long diff = (long) (k-last);\n//                 res+= diff;\n//                 map.put(k, 1);\n//                 nums[idxMap.get(last)] = k;\n                \n//                 map.put(last, map.getOrDefault(last,0)-1);\n//                 if(map.get(last)==0)\n//                      map.remove(last);\n                \n                \n//             }\n//             System.out.println(map.keySet());\n            \n//             map.put(nums[st], map.getOrDefault(nums[st],0)-1);\n//             if(map.get(nums[st])==0)\n//                 map.remove(nums[st]);\n            \n//         }\n//         return res;\n            \n    }\n}","compare_resulttitle_slug":"minimum-increment-operations-to-make-array-beautiful","has_notes":false,"flag_type":1}