{"id":809486024,"question_id":211,"lang":"java","lang_name":"Java","time":"1 year, 8 months","timestamp":1664247139,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/809486024/","is_pending":"Not Pending","title":"Design Add and Search Words Data Structure","memory":"N/A","code":"class WordDictionary {\n\n   // TrieNode\n    \n    public class TrieNode{\n        TrieNode[] children = new TrieNode[26];\n        boolean isWord = false;\n    }\n    \n    TrieNode root = null;\n    public WordDictionary() {\n        root = new TrieNode();\n        \n    }\n    \n    public void addWord(String word) {\n        \n        TrieNode node = root;\n        for(char c : word.toCharArray()){\n            if(node.children[c-'a']==null)\n                node.children[c-'a']=new TrieNode();\n            node = node.children[c-'a'];\n        }\n        node.isWord=true;\n    }\n    \n    public boolean search(String word) {\n        \n        TrieNode curr = root;\n        for(char c : word.toCharArray()){\n            if(c=='.'){\n                \n                for(TrieNode child : curr.children){\n                    \n                    if(child!=null)\n                        curr = child;\n                    \n                }\n                \n            }else{\n                if(curr.children[c-'a']!=null)\n                    curr = curr.children[c-'a'];\n                else \n                    return false;\n            }\n            \n           \n        }\n        \n        return curr.isWord;\n    }\n    \n    \n}\n\n/**\n * Your WordDictionary object will be instantiated and called as such:\n * WordDictionary obj = new WordDictionary();\n * obj.addWord(word);\n * boolean param_2 = obj.search(word);\n */","compare_result":"11111100000000110001100001110","title_slug":"design-add-and-search-words-data-structure","has_notes":false,"flag_type":1}