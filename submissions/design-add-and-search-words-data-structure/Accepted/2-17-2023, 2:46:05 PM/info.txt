{"id":899598213,"question_id":211,"lang":"java","lang_name":"Java","time":"1 year, 3 months","timestamp":1676616365,"status":10,"status_display":"Accepted","runtime":"494 ms","url":"/submissions/detail/899598213/","is_pending":"Not Pending","title":"Design Add and Search Words Data Structure","memory":"91.9 MB","code":"class WordDictionary {\n\n    class TrieNode{\n        \n        TrieNode[] arr;\n        boolean isWord;\n        \n        public TrieNode(){\n            arr = new TrieNode[26];\n             isWord = false;\n        }\n        \n    }\n    \n    TrieNode root;\n    \n    public WordDictionary() {\n        root = new TrieNode();\n        \n    }\n    \n    public void addWord(String word) {\n        \n        TrieNode curr = root;\n        for(char ch : word.toCharArray()){\n            if(curr.arr[ch-'a']==null)\n                curr.arr[ch-'a']=new TrieNode();\n            \n            curr = curr.arr[ch-'a'];\n        }\n        curr.isWord=true;\n    }\n    \n    public boolean search(String word) {\n        \n        return match(word.toCharArray(), 0, root);\n    }\n    \n    private boolean match(char[] arr, int k, TrieNode node) {\n        if(node==null)\n            return false;\n        \n        if(k==arr.length)\n            return node.isWord;\n        \n        if(arr[k]!='.'){\n            char ch = arr[k];\n            return match(arr, k+1, node.arr[ch-'a']);\n        }else{\n            \n            for(char dot='a'; dot<='z'; dot++){\n                \n               if (node.arr[dot-'a'] != null) {\n                    if (match(arr, k + 1, node.arr[dot-'a'])) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n    \n//     private boolean match(char[] chs, int k, TrieNode node) {\n        \n//         if(node==null)\n//             return false;\n        \n//         if (k == chs.length) return node.isWord;   \n//         if (chs[k] != '.') {\n//             return  match(chs, k + 1, node.arr[chs[k] - 'a']);\n//         } else {\n//             for (int i = 0; i < node.arr.length; i++) {\n//                 if (node.arr[i] != null) {\n//                     if (match(chs, k + 1, node.arr[i])) {\n//                         return true;\n//                     }\n//                 }\n//             }\n//         }\n//         return false;\n//     }\n    \n    \n}\n\n/**\n * Your WordDictionary object will be instantiated and called as such:\n * WordDictionary obj = new WordDictionary();\n * obj.addWord(word);\n * boolean param_2 = obj.search(word);\n */","compare_result":"11111111111111111111111111111","title_slug":"design-add-and-search-words-data-structure","has_notes":false,"flag_type":1}