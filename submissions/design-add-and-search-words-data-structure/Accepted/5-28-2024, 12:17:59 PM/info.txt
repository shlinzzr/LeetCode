{"id":1270028044,"question_id":211,"lang":"java","lang_name":"Java","time":"2 weeks, 1 day","timestamp":1716869879,"status":10,"status_display":"Accepted","runtime":"191 ms","url":"/submissions/detail/1270028044/","is_pending":"Not Pending","title":"Design Add and Search Words Data Structure","memory":"96 MB","code":"class WordDictionary {\n\n    class TrieNode{\n\n        TrieNode[] arr ;\n        boolean isWord;\n        public TrieNode(){\n            arr = new TrieNode[26];\n        }\n    }\n\n    TrieNode root;\n\n    public WordDictionary() {\n        root = new TrieNode();\n    }\n    \n    public void addWord(String word) {\n        TrieNode curr = root;\n        for(char ch : word.toCharArray()){\n            if(curr.arr[ch-'a']==null){\n                curr.arr[ch-'a'] = new TrieNode();\n            }\n\n            curr = curr.arr[ch-'a'];\n        }\n        curr.isWord = true;\n        \n    }\n\n    public boolean search(String word) {\n        return match(word.toCharArray(), 0, root);\n    }\n    \n    \n    private boolean match(char[] arr, int idx, TrieNode node){\n        if(node==null)\n            return false;\n        \n        if(idx==arr.length)\n            return node.isWord;\n        \n        if(arr[idx]!='.'){\n            char ch = arr[idx];\n            return match(arr, idx+1, node.arr[ch-'a']);\n        }else{\n            \n            for(char ch='a'; ch<='z'; ch++){\n                if(match(arr, idx+1, node.arr[ch-'a'])){\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    // public boolean search(String word) {\n    //     TrieNode curr = root;\n    //     for(int i=0; i<word.length(); i++){\n    //         char ch = word.charAt(i);\n    //         if(ch=='.'){\n    //             boolean flag = false;\n    //             for(char c='a'; c<='z'; c++){\n    //                 if(curr.arr[c-'a']!=null)\n    //                     flag |= helper(word, i+1, curr.arr[c-'a']);\n    //             }\n    //             break;\n    //         }\n    //         if(curr.arr[ch-'a']==null) return false;\n    //         curr = curr.arr[ch-'a'];\n    //     }\n    //     return curr.isWord;\n        \n    // }\n    // private boolean helper(String w , int idx, TrieNode curr){\n\n    //     for(int i=idx; i<w.length(); i++){\n    //         char ch = w.charAt(idx);\n    //         if(ch=='.'){\n    //             boolean flag = false;\n    //             for(char c='a'; c<='z'; c++){\n    //                 if(curr.arr[c-'a']!=null){\n    //                     flag |= helper(w, i+1, curr.arr[c-'a']);\n    //                 }\n                    \n    //             }\n    //             break;\n    //         }\n    //     }\n    //     return curr.isWord;\n    // }\n}\n\n/**\n * Your WordDictionary object will be instantiated and called as such:\n * WordDictionary obj = new WordDictionary();\n * obj.addWord(word);\n * boolean param_2 = obj.search(word);\n */","compare_result":"11111111111111111111111111111","title_slug":"design-add-and-search-words-data-structure","has_notes":false,"flag_type":1}