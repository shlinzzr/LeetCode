{"id":809492022,"question_id":211,"lang":"java","lang_name":"Java","time":"1 year, 8 months","timestamp":1664247788,"status":10,"status_display":"Accepted","runtime":"998 ms","url":"/submissions/detail/809492022/","is_pending":"Not Pending","title":"Design Add and Search Words Data Structure","memory":"289.6 MB","code":"class WordDictionary {\n\n   // TrieNode\n    \n    public class TrieNode{\n        TrieNode[] children = new TrieNode[26];\n        boolean isWord = false;\n    }\n    \n    TrieNode root = null;\n    public WordDictionary() {\n        root = new TrieNode();\n        \n    }\n    \n    public void addWord(String word) {\n        \n        TrieNode node = root;\n        for(char c : word.toCharArray()){\n            if(node.children[c-'a']==null)\n                node.children[c-'a']=new TrieNode();\n            node = node.children[c-'a'];\n        }\n        node.isWord=true;\n    }\n    \n    public boolean search(String word) {\n        return match(word.toCharArray(), 0, root);\n    }\n    \n    private boolean match(char[] chs, int k, TrieNode node) {\n        if (k == chs.length) return node.isWord;   \n        if (chs[k] != '.') {\n            return node.children[chs[k] - 'a'] != null && match(chs, k + 1, node.children[chs[k] - 'a']);\n        } else {\n            for (int i = 0; i < node.children.length; i++) {\n                if (node.children[i] != null) {\n                    if (match(chs, k + 1, node.children[i])) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n}\n\n/**\n * Your WordDictionary object will be instantiated and called as such:\n * WordDictionary obj = new WordDictionary();\n * obj.addWord(word);\n * boolean param_2 = obj.search(word);\n */","compare_result":"11111111111111111111111111111","title_slug":"design-add-and-search-words-data-structure","has_notes":false,"flag_type":1}