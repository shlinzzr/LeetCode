{"id":919320367,"question_id":211,"lang":"java","lang_name":"Java","time":"1 year, 2 months","timestamp":1679383084,"status":10,"status_display":"Accepted","runtime":"450 ms","url":"/submissions/detail/919320367/","is_pending":"Not Pending","title":"Design Add and Search Words Data Structure","memory":"82.6 MB","code":"class WordDictionary {\n\n    class TrieNode{\n        \n        TrieNode[] arr;\n        boolean isWord;\n        \n        public TrieNode(){\n            this.arr = new TrieNode[26];\n        }\n            \n    }\n    \n    TrieNode root;\n    \n    public WordDictionary() {\n        \n        root = new TrieNode();\n    }\n    \n    public void addWord(String word) {\n        \n        TrieNode node = root;\n        for(char ch : word.toCharArray()){\n            if(node.arr[ch-'a']==null)\n                node.arr[ch-'a'] = new TrieNode();\n            node = node.arr[ch-'a'];\n        }\n        \n        node.isWord=true;\n    }\n    \n    public boolean search(String word) {\n        return match(word.toCharArray(), 0, root);\n    }\n    \n    \n    private boolean match(char[] arr, int idx, TrieNode node){\n        if(node==null)\n            return false;\n        \n        if(idx==arr.length)\n            return node.isWord;\n        \n        if(arr[idx]!='.'){\n            char ch = arr[idx];\n            return match(arr, idx+1, node.arr[ch-'a']);\n        }else{\n            \n            for(char ch='a'; ch<='z'; ch++){\n                if(match(arr, idx+1, node.arr[ch-'a'])){\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}\n\n/**\n * Your WordDictionary object will be instantiated and called as such:\n * WordDictionary obj = new WordDictionary();\n * obj.addWord(word);\n * boolean param_2 = obj.search(word);\n */","compare_result":"11111111111111111111111111111","title_slug":"design-add-and-search-words-data-structure","has_notes":false,"flag_type":1}