{"id":1229976277,"question_id":1840,"lang":"java","lang_name":"Java","time":"2Â months","timestamp":1712887721,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1229976277/","is_pending":"Not Pending","title":"Minimize Hamming Distance After Swap Operations","memory":"N/A","code":"class Solution {\n    int[] parent;\n    public int minimumHammingDistance(int[] source, int[] target, int[][] swap) {\n        int len = source.length;\n\n        parent = new int[len];\n        for(int i=0; i<len ; i++){\n            parent[i] = i;\n        }\n\n        for(int[] s : swap){\n            int a = s[0];\n            int b = s[1];\n\n            union(a, b);\n        }\n\n\n        int res= 0 ;\n        HashMap<Integer, Set<Integer>> map = new HashMap<>();\n        for(int i=0; i<len; i++){\n            int idx = find(i);\n            map.putIfAbsent(idx, new HashSet<>());\n            map.get(idx).add(source[i]);\n        }\n\n        for(int i=0; i<len; i++){\n            int idx= find(i);\n            if(!map.getOrDefault(idx, new HashSet<>()).contains(target[i]))\n                res++;\n        }\n\n        return res;\n    }\n\n    private void union(int a, int b){\n        a = find(a);\n        b = find(b);\n\n        if(a==b) return ;\n        if(a<b){\n            parent[b] = a;\n        }else{\n            parent[a] = b;\n        }\n    }\n\n    private int find(int x){\n        if(parent[x]!=x) parent[x] = find(parent[x]);\n        return parent[x];\n    }\n}","compare_result":"11111011100111000010100000000000000000000000001111111111111100111111100","title_slug":"minimize-hamming-distance-after-swap-operations","has_notes":false,"flag_type":1}