{"id":1110058676,"question_id":1189,"lang":"java","lang_name":"Java","time":"6 months, 2 weeks","timestamp":1701415168,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1110058676/","is_pending":"Not Pending","title":"Encode Number","memory":"39.6 MB","code":"class Solution {\n    public String encode(int num) {\n        return Integer.toBinaryString(num + 1).substring(1);\n    }\n}\n\n/*\n\nf(5) = \"10\"\nf(6) = \"11\"\nThe prefix are both f(2) = \"1\"\n\nso we found that f(n) has f((n - 1) / 2) as prefix.\n\n\n\n\nAssume g(n) = \"1\" + f(n)\nwe can find:\ng(0) = \"1\" g(1) = \"10\" g(2) = \"111\" g(3) = \"100\" g(4) = \"101\" g(5) = \"110\" g(6) = \"111\"\n\nNow everything is obvious:\ng(n) = binary(n + 1)\n\"1\" + f(n) = binary(n + 1)\nf(n) = binary(n + 1).substring(1)\n\n*/","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"encode-number","has_notes":false,"flag_type":1}