{"id":951350886,"question_id":305,"lang":"java","lang_name":"Java","time":"1Â year","timestamp":1684232170,"status":10,"status_display":"Accepted","runtime":"1678 ms","url":"/submissions/detail/951350886/","is_pending":"Not Pending","title":"Number of Islands II","memory":"46.4 MB","code":"class Solution {\n    public List<Integer> numIslands2(int m, int n, int[][] positions) {\n        \n        int h = positions.length;\n        int w = positions[0].length;\n        \n        UnionFind uf = new UnionFind(m*n+1);\n        int len = positions.length;\n        \n        List<Integer> list = new ArrayList<>();\n        \n        \n        int[][] grid = new int[m][n];\n        \n        int[][] dirs = new int[][]{{0,1}, {1,0}, {0,-1}, {-1,0}};\n        \n        for(int i=0; i<len; i++){\n            int[] p = positions[i];\n            int y = p[0];\n            int x = p[1];\n            grid[y][x]=1;\n            \n            \n            for(int[] d: dirs){\n                int r = d[0]+p[0];\n                int c = d[1]+p[1];\n                \n                if(r<0 || c<0 || r>=m || c>=n || grid[r][c]==0)\n                    continue;\n                \n                int a = uf.find(y*n+x);\n                int b = uf.find(r*n+c);\n                \n                if(a!=b){\n                    uf.union(a, b);\n                }\n            }\n            \n            int cnt =0;        \n            for(int ii=0; ii<m; ii++){\n                for(int jj=0; jj<n; jj++){\n\n                    int a = ii*n+jj;\n\n                    \n                    if(grid[ii][jj]==1 && a==uf.parent[a])\n                        cnt++;\n                }\n            }\n            \n            list.add(cnt);\n            \n        }\n        \n        return list;\n        \n            \n            \n        \n        \n    }\n    \n    \n    \n     class UnionFind{\n        \n        int[] parent;\n        int[] weight;\n        \n        public UnionFind(int n){\n            \n            parent = new int[n];\n            weight = new int[n];\n            \n            for(int i=0; i<n; i++){\n                parent[i]=i;\n            }\n            Arrays.fill(weight, 1);\n            \n            \n        }\n        \n        \n        public void union(int a, int b){\n            \n            a = find(a);\n            b = find(b);\n            \n            if(a==b)\n                return ;\n            \n            if(weight[a]>= weight[b]){\n                weight[a]+=weight[b];\n                parent[b] = a;\n            }else{\n                weight[b]+=weight[a];\n                parent[a] = b;\n            }\n            \n            \n        }\n        \n        \n        public int find(int x){\n            if(parent[x] ==x)\n                return x;\n            \n            parent[x] = find(parent[x]);\n            return parent[x];\n        }\n        \n        \n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"number-of-islands-ii","has_notes":false,"flag_type":1}