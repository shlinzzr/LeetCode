{"id":825805514,"question_id":52,"lang":"java","lang_name":"Java","time":"1 year, 7 months","timestamp":1666170357,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/825805514/","is_pending":"Not Pending","title":"N-Queens II","memory":"40.2 MB","code":"class Solution {\n    int res =0;\n    char[][] board;\n    public int totalNQueens(int n) {\n    \n        board = new char[n][n];\n        for(char[] b : board){\n            Arrays.fill(b, '.');\n        }\n        dfs(0);\n            \n        return res;\n    }\n    \n    private void dfs(int i){\n        \n        if(i==board.length){\n            res++;\n            return;\n        }\n        \n        for(int j=0; j<board.length; j++){\n            if(isValid(i, j)){\n                board[i][j]='Q';\n                dfs(i+1);\n                board[i][j]='.';\n            }\n        }\n    }\n    \n    private boolean isValid(int r, int c){\n        \n        for(int i=0;i<r;i++){\n            if(board[i][c]=='Q') return false;\n            if(board[r][i]=='Q') return false;\n        }\n        int k=1;\n        while(r-k>=0 && c-k>=0){\n            if(board[r-k][c-k]=='Q') return false;\n            k++;\n        }\n        k=1;\n        while(r-k>=0 && c+k<board.length){\n            if(board[r-k][c+k]=='Q') return false;\n            k++;\n        }\n        return true;\n        \n        \n    }\n}","compare_result":"111111111","title_slug":"n-queens-ii","has_notes":false,"flag_type":1}