{"id":697931274,"question_id":800,"lang":"java","lang_name":"Java","time":"2 years, 1 month","timestamp":1652338337,"status":20,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/697931274/","is_pending":"Not Pending","title":"Letter Case Permutation","memory":"N/A","code":"// class Solution {\n//     public List<String> letterCasePermutation(String s) {\n//         List<String> ans = new ArrayList<String>();\n        \n//         if(s.length()==0)\n//             return ans;\n        \n//         // System.out.println(Character.charAt(91));\n        \n//         ans.add(\"\");\n//         for(char c : s.toCharArray()){\n            \n//             List<String> res = new ArrayList<String>();\n        \n//             boolean isAlphabet = (c-'a'<=25 && c-'a'>=0) || (c-'A'<=25 && c-'A'>=0);\n            \n         \n            \n            \n//             for(String a : ans){\n//                 if(isAlphabet){\n//                     res.add(a + Character.toUpperCase(c));\n//                     res.add(a + Character.toLowerCase(c));\n//                 }else{\n//                     res.add(a+c);\n//                 }\n//             }\n            \n//             ans = res;\n//         }\n        \n//         return ans;\n        \n//     }\n// }\n\n void recurse(char[] str, int pos, List<String> result) {\n        //If we have reached a leaf in the recursion tree, save the result.\n        if (pos == str.length) {\n            result.add(new String(str));\n            return;\n        }\n        \n        //If char is not a letter, no processing required.\n        if (Character.isLetter(str[pos])) {\n            //If uppercase char, we make it lower case, and recurse.\n            if (Character.isUpperCase(str[pos])) {\n                str[pos] = Character.toLowerCase(str[pos]);\n                \n                //Start a new branch in the recursion tree, exploring options that are possible only if we had changed the case.\n                recurse(str, pos + 1, result);\n                \n                //Backtracking. We undo the change so that we can start a new branch in the recursion tree.\n                str[pos] = Character.toUpperCase(str[pos]);\n            }\n            //If lowercase, then we make it upper case, and recurse.\n            else {\n                str[pos] = Character.toUpperCase(str[pos]);\n                recurse(str, pos + 1, result);\n                //Backtracking as explained above.\n                str[pos] = Character.toLowerCase(str[pos]);\n            }\n        }\n        //This branch explores options that are possible only if the previously performed change (if any) hadn't happened.\n        recurse(str, pos + 1,  result);\n    }\n    \n    public List<String> letterCasePermutation(String S) {\n        List<String> result = new ArrayList<>();\n        recurse(S.toCharArray(), 0, result);\n        return result;\n    }\n}","compare_result":null,"title_slug":"letter-case-permutation","has_notes":false,"flag_type":1}