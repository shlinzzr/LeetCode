{"id":1131013722,"question_id":444,"lang":"java","lang_name":"Java","time":"5 months, 2 weeks","timestamp":1703815679,"status":10,"status_display":"Accepted","runtime":"110 ms","url":"/submissions/detail/1131013722/","is_pending":"Not Pending","title":"Sequence Reconstruction","memory":"56.3 MB","code":"class Solution {\n    public boolean sequenceReconstruction(int[] nums, List<List<Integer>> sequences) {\n\n        int len = nums.length;\n        HashMap<Integer, Set<Integer>> g = new HashMap<>();\n        HashMap<Integer, Integer> deg = new HashMap<>();\n\n        for(List<Integer> seq : sequences){\n\n            if(seq.size()==1){\n                deg.putIfAbsent(seq.get(0), 0);\n                continue;\n            }\n\n            for(int i=0; i<seq.size()-1; i++){\n                int a = seq.get(i);\n                int b = seq.get(i+1);\n                deg.putIfAbsent(a, 0);\n                deg.putIfAbsent(b, 0);\n\n                g.putIfAbsent(a, new HashSet<>());\n                if(g.get(a).add(b))\n                    deg.put(b, deg.get(b)+1);\n            }\n        }\n\n        Queue<Integer> q = new LinkedList<>();\n        for(int k : deg.keySet()){\n            if(deg.get(k)==0){\n                q.offer(k);\n            }\n        }\n\n        // System.out.println(deg);\n\n        int idx= 0;\n        while(!q.isEmpty()) {\n\n            if(q.size()!=1) return false;\n\n            int p = q.poll();\n            if(p!=nums[idx++]) return false;\n\n            for(int next : g.getOrDefault(p, new HashSet<>())){\n                 deg.put(next, deg.getOrDefault(next,0)-1);\n                 if(deg.get(next)==0){\n                     q.offer(next);\n                 }\n            }\n        }\n        // System.out.println(idx);\n\n        return idx==len;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"sequence-reconstruction","has_notes":false,"flag_type":1}