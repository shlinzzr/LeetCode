{"id":1131005049,"question_id":444,"lang":"java","lang_name":"Java","time":"5 months, 2 weeks","timestamp":1703814428,"status":10,"status_display":"Accepted","runtime":"125 ms","url":"/submissions/detail/1131005049/","is_pending":"Not Pending","title":"Sequence Reconstruction","memory":"55.5 MB","code":"class Solution {\n    Map<Integer, Set<Integer>> map;\n    Map<Integer, Integer> indegree;\n    \n    public boolean sequenceReconstruction(int[] nums, List<List<Integer>> sequences) {\n        map = new HashMap<>();\n        indegree = new HashMap<>();\n        \n        for(List<Integer> seq: sequences) {\n            if(seq.size() == 1) {\n                addNode(seq.get(0));\n            } else {\n                for(int i = 0; i < seq.size() - 1; i++) {\n                    addNode(seq.get(i));\n                    addNode(seq.get(i + 1));\n\n                    // 加入子节点, 子节点增加一个入度\n                    // [1,2] => 1 -> 2\n                    // 1: [2]\n                    int curr = seq.get(i);\n                    int next = seq.get(i + 1);\n                    if(map.get(curr).add(next)) {\n                        indegree.put(next, indegree.get(next) + 1);\n                    }\n                }\n            }\n        }\n\n        Queue<Integer> queue = new LinkedList<>();\n        for(int key : indegree.keySet()) {\n            if(indegree.get(key) == 0){\n                queue.offer(key);\n            }\n        }\n\n        int index = 0;\n        while(!queue.isEmpty()) {            \n            // 如果只有唯一解, 那么queue的大小永远都是1\n            if(queue.size() != 1) return false;\n            \n            int curr = queue.poll();\n            if(curr != nums[index++]) return false;\n            \n            for(int next: map.get(curr)) {\n                indegree.put(next, indegree.get(next) - 1);\n                if(indegree.get(next) == 0) {\n                    queue.offer(next);\n                }\n            }\n        }\n        \n        return index == nums.length;\n    }\n    \n    private void addNode(int node) {\n        if(!map.containsKey(node)) {\n            map.put(node, new HashSet<>());\n            indegree.put(node, 0);\n        }\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"sequence-reconstruction","has_notes":false,"flag_type":1}