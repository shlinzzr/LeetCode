{"id":1128568425,"question_id":3238,"lang":"java","lang_name":"Java","time":"5 months, 2 weeks","timestamp":1703563931,"status":10,"status_display":"Accepted","runtime":"200 ms","url":"/submissions/detail/1128568425/","is_pending":"Not Pending","title":"Minimum Cost to Convert String II","memory":"45.7 MB","code":"class Solution {\n    public long minimumCost(String source, String target, String[] original, String[] changed, int[] cost) {\n        HashMap<String, Integer> index = new HashMap<>();\n        for (String o : original) {\n            if (!index.containsKey(o)) {\n                index.put(o, index.size());\n            }\n        }\n        for (String c : changed) {\n            if (!index.containsKey(c)) {\n                index.put(c, index.size());\n            }\n        }\n        long[][] dis = new long[index.size()][index.size()];\n        for (int i = 0; i < dis.length; i++) {\n            Arrays.fill(dis[i], Long.MAX_VALUE);\n            dis[i][i] = 0;\n        }\n        for (int i = 0; i < cost.length; i++) {\n            dis[index.get(original[i])][index.get(changed[i])] = Math.min(dis[index.get(original[i])][index.get(changed[i])], (long)cost[i]);\n        }\n        for (int k = 0; k < dis.length; k++) {\n            for (int i = 0; i < dis.length; i++)\n                if (dis[i][k] < Long.MAX_VALUE) {\n                    for (int j = 0; j < dis.length; j++) {\n                        if (dis[k][j] < Long.MAX_VALUE) {\n                            dis[i][j] = Math.min(dis[i][j], dis[i][k] + dis[k][j]);\n                        }\n                    }\n                }\n        }\n        HashSet<Integer> set = new HashSet<>();\n        for (String o : original) {\n            set.add(o.length());\n        }\n        long[] dp = new long[target.length() + 1];\n        Arrays.fill(dp, Long.MAX_VALUE);\n        dp[0] = 0L;\n        for (int i = 0; i < target.length(); i++) {\n            if (dp[i] == Long.MAX_VALUE) {\n                continue;\n            }\n            if (target.charAt(i) == source.charAt(i)) {\n                dp[i + 1] = Math.min(dp[i + 1], dp[i]);\n            }\n            for (int t : set) {\n                if (i + t >= dp.length) {\n                    continue;\n                }\n                int c1 = index.getOrDefault(source.substring(i, i + t), -1);\n                int c2 = index.getOrDefault(target.substring(i, i + t), -1);\n                if (c1 >= 0 && c2 >= 0 && dis[c1][c2] < Long.MAX_VALUE) {\n                    dp[i + t] = Math.min(dp[i + t], dp[i] + dis[c1][c2]);\n                }\n            }\n        }\n        return dp[dp.length - 1] == Long.MAX_VALUE ? -1L : dp[dp.length - 1];\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-cost-to-convert-string-ii","has_notes":false,"flag_type":1}