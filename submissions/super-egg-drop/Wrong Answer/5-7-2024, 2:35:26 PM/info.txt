{"id":1251521684,"question_id":923,"lang":"java","lang_name":"Java","time":"1Â month","timestamp":1715063726,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1251521684/","is_pending":"Not Pending","title":"Super Egg Drop","memory":"N/A","code":"class Solution {\n\n    Integer[][] dp = new Integer[101][10001];\n\n    public int superEggDrop(int k, int n) {\n\n        if(k==1) return n;\n        if(n==0 || n==1) return n;\n\n        if(dp[k][n]!=null) return dp[k][n];\n\n        int st=1, ed=n;\n        int res = Integer.MAX_VALUE;\n\n        while(st<ed){\n            int mid = st+(ed-st)/2;\n            \n            // egg broke\n            int broke = superEggDrop(k-1, mid-1); // broke and go down\n            int notBroke = superEggDrop(k, n-mid); // not broke and go up\n\n            int temp = 1 + Math.max(broke, notBroke);\n\n            if(broke<notBroke){ // find min\n                st = mid+1;\n            }else{\n                ed = mid-1;\n            }\n\n            res = Math.min(temp, res);\n                \n        }\n\n        dp[k][n] = res;\n        return res;\n\n\n\n\n\n\n    }\n\n\n    // public int superEggDrop1(int k, int n) {\n    //     // find f:  0 <= f <= n\n\n    //     // k eggs, floors n\n    //     int[][] dp = new int[k+1][0][n]; // min # of move to check f with first i egg at floor j1 ~ j2\n\n\n    //     // if not broke\n    //     dp[i+1][j1][j2] = dp[i][(j1+j2)/2+1][j2] // mid+1 ~ ed\n\n    //     // if broke\n    //     dp[i+1][j1][j2] = dp[i][j1][(j1+j2)/2]; // st ~ mid\n    // }\n}","compare_result":"1111111111111111111111111111111010111111110111111111111111111110110111111110111111111111111111111111010101010101010101011","title_slug":"super-egg-drop","has_notes":false,"flag_type":1}