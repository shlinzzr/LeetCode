{"id":727304851,"question_id":1762,"lang":"java","lang_name":"Java","time":"1 year, 11 months","timestamp":1655785433,"status":10,"status_display":"Accepted","runtime":"35 ms","url":"/submissions/detail/727304851/","is_pending":"Not Pending","title":"Furthest Building You Can Reach","memory":"70.6 MB","code":"// class Solution {\n//     public int furthestBuilding(int[] heights, int bricks, int ladders) {\n        \n//         int[] maxGap = new int[ladders];  // int new[1]\n//         int orgBricks = bricks;\n            \n//         for(int i=0; i<heights.length; i++){\n            \n//             if( i==heights.length-1 || heights[i] > heights[i+1]){\n//                 continue;\n            \n//             }else{\n//                 int needBricks = heights[i+1] - heights[i]; //8, 5\n                \n//                  System.out.println(\"i=\"+ i + \" bricks=\"+bricks + \"  needBricks=\"+needBricks);\n                \n                \n//                 if(needBricks>maxGap[0]){  // maxGap = [5, 8]\n//                     handleMaxGap(maxGap, needBricks);\n//                 }\n                \n//                 if(bricks > needBricks){\n//                     bricks -= needBricks;\n//                 }else{\n//                      System.out.println(\"1st round: i=\"+i);\n//                     break;\n//                 }\n//             }\n//         }\n        \n       \n        \n        \n//         for(int i=0; i<heights.length; i++){\n            \n//            if(i==heights.length-1 || heights[i] > heights[i+1]){\n//                 continue;\n            \n//             }else{\n               \n               \n//                int needBricks = heights[i+1] - heights[i];\n                \n//                 System.out.println(\"2nd: i=\" + i + \" orgBricks=\"+orgBricks + \"  needBricks=\"+needBricks);\n                 \n               \n//                 if( checkUseLadders(maxGap, needBricks) ){\n//                     continue;\n                    \n//                 }else if(needBricks < orgBricks){\n//                     orgBricks -= needBricks;\n                    \n//                 }else{\n//                     return i;\n//                 }\n//             }\n//         }\n        \n//         return heights.length-1;\n        \n        \n//     }\n    \n//     private boolean checkUseLadders(int[] maxGap, int ins){\n        \n//         for(int i=maxGap.length-1; i>=0 ; i--){\n            \n//             if(maxGap[i]==ins){\n//                 maxGap[i] = -1;\n//                 return true;\n//             } \n//         }\n        \n//         return false;\n        \n        \n//     }\n    \n//     private void handleMaxGap(int[] maxGap, int ins){\n        \n//         for(int i=maxGap.length-1; i>=0 ; i--){\n            \n//             if(ins > maxGap[i]){\n//                 int swp = maxGap[i];\n//                 maxGap[i] = ins;\n//                 ins = swp;\n//             }\n            \n//             if(ins==0)\n//                 break;\n            \n//         }\n        \n        \n//     }\n    \n \n// }\n class Solution {\n\n  public int furthestBuilding(int[] A, int bricks, int ladders) {\n        PriorityQueue<Integer> pq = new PriorityQueue<>();\n        for (int i = 0; i < A.length - 1; i++) {\n            int d = A[i + 1] - A[i];\n            if (d > 0)\n                pq.add(d);\n            if (pq.size() > ladders)\n                bricks -= pq.poll();\n            if (bricks < 0)\n                return i;\n        }\n        return A.length - 1;\n    }\n }","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"furthest-building-you-can-reach","has_notes":false,"flag_type":1}