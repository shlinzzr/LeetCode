{"id":1112713717,"question_id":1762,"lang":"java","lang_name":"Java","time":"6 months, 1 week","timestamp":1701759324,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1112713717/","is_pending":"Not Pending","title":"Furthest Building You Can Reach","memory":"N/A","code":"class Solution {\n    public int furthestBuilding(int[] heights, int bricks, int ladders) {\n        int len = heights.length;\n\n        // dp ? \n\n        PriorityQueue<Integer> pq= new PriorityQueue<>();\n        int i=0;\n        for(;i<len-1 && bricks>0; i++){\n\n            if(heights[i+1]<heights[i])\n                continue;\n\n            if(bricks<heights[i+1]-heights[i]){\n                if(ladders==0)\n                    break;\n                else{\n                    \n                }\n            }\n                \n\n            bricks -= heights[i+1]-heights[i];\n            pq.offer(heights[i+1]-heights[i]);\n        }\n\n        while(!pq.isEmpty() && ladders>0 && i+1<len){\n\n            bricks+=pq.poll();\n            ladders-=1;\n            while(i+1<len && bricks>=heights[i+1]-heights[i]){\n                bricks -= heights[i+1]-heights[i];\n                i++;\n            }\n        }\n\n        return i;\n\n    }\n}","compare_result":"101111110110001001110110111001111111111111111111111111111111111111111111110011","title_slug":"furthest-building-you-can-reach","has_notes":false,"flag_type":1}