{"id":1213312338,"question_id":654,"lang":"java","lang_name":"Java","time":"2 months, 2 weeks","timestamp":1711356404,"status":10,"status_display":"Accepted","runtime":"13 ms","url":"/submissions/detail/1213312338/","is_pending":"Not Pending","title":"Maximum Binary Tree","memory":"45 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public TreeNode constructMaximumBinaryTree(int[] nums) {\n\n        \n        int len = nums.length;\n\n        TreeMap<Integer, Integer> map = new TreeMap<>();\n        for(int i=0; i<len ;i++){\n            map.put(nums[i], i);\n        }\n\n        return helper(nums, 0, len-1, map);\n        \n    }\n\n    private TreeNode helper(int[] nums, int st, int ed, TreeMap<Integer,Integer> map){\n        int len = nums.length;\n        if(len==0 || st>ed){\n            return null;\n        }\n\n        // int val = map.lastKey();\n        // int idx = map.get(val);\n        // while(idx<st || idx>ed){\n        //     val=map.lowerKey(val);\n        //     idx = map.get(val);\n        // }\n\n        int idx = findMaxIndex(nums, st, ed);\n        int val = nums[idx];\n\n        int leftCnt = idx-st;\n        TreeNode node = new TreeNode(val);\n        node.left = helper(nums, st, idx-1, map );\n        node.right = helper(nums, idx+1, ed, map);\n\n\n        return node;\n\n    }\n\n     public int findMaxIndex(int[] nums, int start, int end){\n        int index = -1;\n        int max = Integer.MIN_VALUE;\n        for(int i=start; i<=end; i++){\n            if(max < nums[i]){\n                max = nums[i];\n                index = i;\n            }\n        }\n        return index;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-binary-tree","has_notes":false,"flag_type":1}