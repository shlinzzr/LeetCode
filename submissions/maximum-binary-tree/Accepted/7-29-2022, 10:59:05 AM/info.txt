{"id":759515694,"question_id":654,"lang":"java","lang_name":"Java","time":"1 year, 10 months","timestamp":1659063545,"status":10,"status_display":"Accepted","runtime":"6 ms","url":"/submissions/detail/759515694/","is_pending":"Not Pending","title":"Maximum Binary Tree","memory":"54 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public TreeNode constructMaximumBinaryTree(int[] nums) {\n        \n        int max = 0;\n        int maxIdx = 0;\n        for(int i=0; i<nums.length; i++){\n            \n            if(max < nums[i]){\n                max = nums[i];\n                maxIdx = i;\n            }\n            \n        }\n        \n        TreeNode root = new TreeNode(max);\n        if(maxIdx!=0) root.left =  constructMaximumBinaryTree(Arrays.copyOfRange(nums, 0, maxIdx));\n        if(maxIdx!=nums.length-1) root.right = constructMaximumBinaryTree(Arrays.copyOfRange(nums, maxIdx+1, nums.length));\n        \n        return root;\n        \n    }\n    \n    \n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-binary-tree","has_notes":false,"flag_type":1}