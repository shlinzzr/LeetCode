{"id":1099292385,"question_id":654,"lang":"java","lang_name":"Java","time":"7Â months","timestamp":1700040919,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1099292385/","is_pending":"Not Pending","title":"Maximum Binary Tree","memory":"44 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public TreeNode constructMaximumBinaryTree(int[] nums) {\n        int len = nums.length;       \n\n        return helper(nums, 0, len-1);\n\n    }\n\n    private TreeNode helper(int[] nums, int st, int ed){\n        \n        if(st>ed)\n            return null;\n\n        if(st==ed){\n            return  new TreeNode(nums[st]);\n        }\n\n        int len = nums.length;\n\n        int max = Integer.MIN_VALUE;\n        int idx = -1;\n        for(int i=st; i<=ed; i++){\n            if(nums[i]>max){\n                idx =i;\n                max = nums[i];\n            }\n        }\n\n        TreeNode node = new TreeNode(max);\n        TreeNode left = helper(nums, st, idx-1);\n        TreeNode right = helper(nums, idx+1, ed);\n        node.left= left;\n        node.right=right;\n\n        return node;\n\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-binary-tree","has_notes":false,"flag_type":1}