{"id":1279431951,"question_id":984,"lang":"java","lang_name":"Java","time":"6 days, 15 hours","timestamp":1717671583,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1279431951/","is_pending":"Not Pending","title":"Most Stones Removed with Same Row or Column","memory":"N/A","code":"class Solution {\n\n    Map<Integer, Integer> map;\n\n    public int removeStones(int[][] stones) {\n\n        Map<Integer, List<Integer>> row = new HashMap<>();\n        Map<Integer, List<Integer>> col = new HashMap<>();\n\n        int h=0, w=0;\n        for(int[] s : stones){\n            int x = s[0];\n            int y = s[1];\n            w = Math.max(w, x); \n            h = Math.max(h, y); \n            \n            row.putIfAbsent(y, new ArrayList<>());\n            row.get(y).add(x);\n\n            col.putIfAbsent(x, new ArrayList<>());\n            col.get(x).add(y);\n        }\n\n\n        map = new HashMap<>();\n\n        for(int r: row.keySet()){\n            List<Integer> listx = row.get(r);\n            int root = -1;\n            for(int j=0; j<listx.size();j++){\n                int x = listx.get(j);\n                int idx = r*w+x;\n                if(j==0) root = find(idx);\n                map.put(find(idx), root);\n            }\n        }\n\n        for(int c: col.keySet()){\n            List<Integer> listy = col.get(c);\n            int root = -1;\n            for(int i=0; i<listy.size();i++){\n                int y = listy.get(i);\n                int idx = y*w+c;\n                if(i==0) root = find(idx);\n                map.put(find(idx), root);\n            }\n        }\n\n\n        int cnt= 0 ;\n        for(int k : map.keySet()){\n            if(map.get(k)!=k){\n                cnt++;\n            }\n        }\n\n        return cnt;\n\n\n        \n\n    \n\n        // row = new int[h];\n        // col = new int[w];\n\n        // int cnt = 0;\n        // for(int i=0; i<h; i++) row[i] = i;\n        // for(int j=0; j<w; j++) col[j] = j;\n\n        // for(int i=0; i<h; i++){\n        //     int root_x = -1;\n        //     for(int j=0; j<w; j++){\n        //         if(stones[i][j]==1){\n        //             if(root_x==-1){\n        //                 root_x=j;\n        //             }else{\n        //                 if(union(root_x, j, col))\n        //                     cnt++;\n        //             }\n        //         }\n        //     }\n        // }\n\n        // for(int j=0; j<w; j++){\n        //     int root_y = -1;\n        //     for(int i=0; i<h; i++){\n        //         if(stones[i][j]==1){\n        //             if(root_y==-1){\n        //                 root_y=i;\n        //             }else{\n        //                 if( union(root_y, i, row))\n        //                     cnt++;\n        //             }\n        //         }\n        //     }\n        // }\n\n\n        // return cnt;\n            \n        \n        \n    }\n\n\n\n    private int find(int x){\n\n        if(map.get(x)==null){\n            map.put(x, x);\n        }\n\n        if(map.get(x)!=x) map.put(x, find(map.get(x)));\n        return map.get(x);\n    }\n}\n\n","compare_result":"111001111111111111011011101111011111101110111111111111111111111111111","title_slug":"most-stones-removed-with-same-row-or-column","has_notes":false,"flag_type":1}