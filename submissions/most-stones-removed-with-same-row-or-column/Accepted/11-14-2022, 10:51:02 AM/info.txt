{"id":843001971,"question_id":984,"lang":"java","lang_name":"Java","time":"1 year, 7 months","timestamp":1668394262,"status":10,"status_display":"Accepted","runtime":"472 ms","url":"/submissions/detail/843001971/","is_pending":"Not Pending","title":"Most Stones Removed with Same Row or Column","memory":"49.8 MB","code":"class Solution {\n    public int removeStones(int[][] stones) {\n        \n        int lands =0;\n        \n        Set<int[]> visited = new HashSet<>();\n        \n        for(int[] s1 : stones){\n                \n            if(!visited.contains(s1)){\n                dfs(s1, stones, visited);\n                lands++;    \n            }\n        }\n        \n        \n        return stones.length - lands;\n        \n        \n        \n    }\n    \n    \n    private void dfs(int[] s1, int[][]stones, Set<int[]>visited){\n        \n        visited.add(s1);\n        for(int[] s2 : stones){\n            if(!visited.contains(s2)){\n                if(s1[0]==s2[0] || s1[1]==s2[1]){\n                    dfs(s2, stones, visited);\n                }            \n            }\n        }\n    }\n    \n    \n    /*\n    1, 1, 0 \n    1, 0, 1\n    0, 1, 1\n    \n    */\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111","title_slug":"most-stones-removed-with-same-row-or-column","has_notes":false,"flag_type":1}