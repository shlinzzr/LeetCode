{"id":1207800538,"question_id":2131,"lang":"java","lang_name":"Java","time":"2 months, 3 weeks","timestamp":1710818338,"status":20,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/1207800538/","is_pending":"Not Pending","title":"Smallest Missing Genetic Value in Each Subtree","memory":"N/A","code":"class Solution {\n    List<Set<Integer>> setList = new ArrayList<>();\n    int[] setIdx = new int[100005];\n    int[] rets;\n    List<Integer>[] children = new ArrayList[100005];\n\n    public int[] smallestMissingValueSubtree(int[] parents, int[] nums) {\n\n        int len = parents.length;\n        rets = new int[len];\n        // buildgraph\n\n        for (int i=1; i<len; i++)   {\n            if(children[parents[i]]==null)\n                children[parents[i]] = new ArrayList<>();\n\n            children[parents[i]].add(i);\n        }     \n\n        dfs(0, nums);\n        return rets;\n    }\n\n    private void dfs(int node, int[] nums){\n        if (children[node]==null || children[node].isEmpty())\n        {\n            setIdx[node] = setList.size();\n            setList.add( new HashSet<>(Arrays.asList(nums[node])));\n            rets[node] = nums[node]==1?2:1;     \n            // cout<<node<<\":\"<<setIdx[node]<<\" \"<<setList[setIdx[node]].size()<<endl;       \n        }\n        else\n        {   \n            for (int child: children[node])\n                dfs(child, nums);\n\n            int maxSetSize = 0;\n            int maxSetIdx;\n            for (int child: children[node])\n            {\n                if (setList.get(setIdx[child]).size() > maxSetSize)\n                {\n                    maxSetSize = setList.get(setIdx[child]).size();\n                    maxSetIdx = setIdx[child];\n                }\n            }\n\n            for (int child: children[node])\n            {\n                if (setIdx[child] == maxSetIdx) continue;\n                for (int x: setList.get(setIdx[child]))\n                    setList.get(maxSetIdx).add(x);\n            }\n            setList.get(maxSetIdx).add(nums[node]);\n            setIdx[node] = maxSetIdx;\n\n            int maxMissing = 0;            \n            for (int child: children[node])            \n                maxMissing = Math.max(maxMissing, rets[child]);\n            int x = maxMissing;\n            while (setList.get(maxSetIdx).contains(x))\n                x++;\n            rets[node] = x;\n        }\n\n    }\n}","compare_result":null,"title_slug":"smallest-missing-genetic-value-in-each-subtree","has_notes":false,"flag_type":1}