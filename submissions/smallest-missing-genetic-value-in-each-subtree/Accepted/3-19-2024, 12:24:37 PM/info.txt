{"id":1207841718,"question_id":2131,"lang":"java","lang_name":"Java","time":"2 months, 3 weeks","timestamp":1710822277,"status":10,"status_display":"Accepted","runtime":"430 ms","url":"/submissions/detail/1207841718/","is_pending":"Not Pending","title":"Smallest Missing Genetic Value in Each Subtree","memory":"176.5 MB","code":"class Solution {\n//     List<Set<Integer>> setList = new ArrayList<>();\n//     int[] setIdx = new int[100005];\n    int[] res;\n\n    Map<Integer, List<Integer>> g = new HashMap<>();\n    Map<Integer, Set<Integer>> v = new HashMap<>();\n\n    public int[] smallestMissingValueSubtree(int[] parents, int[] nums) {\n\n        int len = parents.length;\n        res = new int[len];\n        for (int i=1; i<len; i++)   {\n            g.putIfAbsent(parents[i], new ArrayList<>());\n            g.get(parents[i]).add(i);\n        }     \n\n        dfs(0, nums);\n        return res;\n    }\n\n    private void dfs(int node, int[] nums){\n        if(!g.containsKey(node)){ // leaf\n            v.putIfAbsent(node, new HashSet<>(Arrays.asList(nums[node])));\n            res[node] = nums[node]==1?2:1;\n        }\n        else{   \n            for (int child: g.get(node))\n                dfs(child, nums);\n\n            int maxSetSize = 0;\n            int maxSetIdx = 0;\n            // choose the maxSetSize, maxSetIdx\n            for (int child: g.get(node))\n            {\n                if(v.getOrDefault(child, new HashSet<>()).size()> maxSetSize){\n                    maxSetSize = v.get(child).size();\n                    maxSetIdx = child;\n                }\n            }\n\n\n            // migrate to maxSetIdx\n            v.put(node, v.get(maxSetIdx));\n\n            for (int child: g.get(node))\n            {\n                if (child == maxSetIdx) continue; // 可加可不佳 反正是set\n                for(int x : v.getOrDefault(child, new HashSet<>())){\n                    // v.putIfAbsent(maxSetIdx, new HashSet<>());\n                    v.get(maxSetIdx).add(x);\n                }\n            }\n\n            v.putIfAbsent(maxSetIdx, new HashSet<>());\n            v.get(maxSetIdx).add(nums[node]);\n\n            int maxMissing = 0;            \n            for (int child: g.get(node))    \n                maxMissing = Math.max(maxMissing, res[child]);\n            int x = maxMissing;\n\n            while(v.get(maxSetIdx).contains(x))\n                x++;\n            res[node] = x;\n        }\n\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111","title_slug":"smallest-missing-genetic-value-in-each-subtree","has_notes":false,"flag_type":1}