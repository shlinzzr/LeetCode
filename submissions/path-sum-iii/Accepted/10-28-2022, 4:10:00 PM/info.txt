{"id":831938612,"question_id":437,"lang":"java","lang_name":"Java","time":"1 year, 7 months","timestamp":1666944600,"status":10,"status_display":"Accepted","runtime":"56 ms","url":"/submissions/detail/831938612/","is_pending":"Not Pending","title":"Path Sum III","memory":"46.4 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    \n    int cnt=0;\n    \n    public int pathSum(TreeNode root, int targetSum) {\n        HashMap<Long, Integer> map = new HashMap<>(); // val, 出現次數\n        \n        helper(root, targetSum, 0L, map);\n        return cnt;\n    }\n    \n    \n    private void helper(TreeNode root, int targetSum, long curr, HashMap<Long, Integer> map ){\n        \n        if(root==null)\n            return;\n        \n        System.out.println(root.val);\n        \n        curr+=root.val;\n\n        if(curr==targetSum)\n            cnt++;\n        \n        if(map.containsKey(curr - targetSum))\n            cnt+=map.get(curr-targetSum);\n        \n        map.put(curr, map.getOrDefault(curr, 0)+1);\n        \n        helper(root.left, targetSum, curr, map);\n        helper(root.right, targetSum, curr, map);\n        map.put(curr, map.get(curr)-1);\n        \n        \n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"path-sum-iii","has_notes":false,"flag_type":1}