{"id":1178512234,"question_id":3305,"lang":"java","lang_name":"Java","time":"3 months, 3 weeks","timestamp":1708228802,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1178512234/","is_pending":"Not Pending","title":"Count Prefix and Suffix Pairs II","memory":"N/A","code":"class Solution {\n    \n    \n    TrieNode pRoot = new TrieNode();\n    TrieNode sRoot = new TrieNode();\n    public long countPrefixSuffixPairs(String[] words) {\n        \n        int len = words.length;\n        \n        for(int i=1; i<len; i++){\n            String w = words[i];\n            insertPrefix(w, i);\n            insertSuffix(w, i);\n        }\n        \n        \n        long res = 0;\n        for(int i=0; i<len; i++){\n            String a = words[i];\n            \n            Set<Integer> pre = searchPrefix(a);\n            Set<Integer> suf = searchSuffix(a);\n            Set<Integer> inter = new HashSet<>(pre);\n            inter.retainAll(suf);\n            res += inter.size();\n            \n            removeSuffix(a,i);\n             removePrefix(a,i);\n            \n        }\n        \n        \n        return res;\n        \n    }\n    \n    \n    class TrieNode {\n        \n        TrieNode[] arr;\n        boolean isWord;\n        \n        public TrieNode(){\n            arr = new TrieNode[26];\n            set = new HashSet<>();\n            idxs = new HashSet<>();\n        }\n        \n        Set<String> set;\n        Set<Integer> idxs;\n     \n    }\n    \n      \n    public void removeSuffix(String word, int idx){\n        TrieNode node = sRoot;\n         node.idxs.remove(idx);\n        for(int i=word.length()-1; i>=0; i--){\n            char c = word.charAt(i);\n            if(node.arr[c-'a']==null)\n                node.arr[c-'a'] = new TrieNode();\n            node = node.arr[c-'a'];\n            node.idxs.remove(idx);\n        }\n        node.isWord = true;\n    }\n\n    \n    public void removePrefix(String word, int idx){\n        TrieNode node = pRoot;\n        node.idxs.remove(idx);\n        for(char c : word.toCharArray()){\n            if(node.arr[c-'a']==null)\n                node.arr[c-'a'] = new TrieNode();\n            node = node.arr[c-'a'];\n            node.idxs.remove(idx);\n            \n        }\n        node.isWord = true;\n    }\n    \n    \n\n    public void insertPrefix(String word, int idx){\n        TrieNode node = pRoot;\n        node.set.add(word);\n        node.idxs.add(idx);\n        for(char c : word.toCharArray()){\n            if(node.arr[c-'a']==null)\n                node.arr[c-'a'] = new TrieNode();\n            node = node.arr[c-'a'];\n            node.set.add(word);\n            node.idxs.add(idx);\n            \n        }\n        node.isWord = true;\n    }\n    \n    public void insertSuffix(String word, int idx){\n        TrieNode node = sRoot;\n         node.set.add(word);\n         node.idxs.add(idx);\n        for(int i=word.length()-1; i>=0; i--){\n            char c = word.charAt(i);\n            if(node.arr[c-'a']==null)\n                node.arr[c-'a'] = new TrieNode();\n            node = node.arr[c-'a'];\n            node.set.add(word);\n            node.idxs.add(idx);\n        }\n        node.isWord = true;\n    }\n\n    \n    public Set<Integer> searchSuffix(String word){\n        TrieNode node = sRoot;\n        for(int i=word.length()-1; i>=0; i--){\n            char c = word.charAt(i);\n            if(node.arr[c-'a']==null)\n                return new HashSet<>();\n            node = node.arr[c-'a'];\n        }\n\n        return node.idxs;\n    }   \n        \n    public Set<Integer> searchPrefix(String word){\n        TrieNode node = pRoot;\n        for(char c : word.toCharArray()){\n            if(node.arr[c-'a']==null)\n                return new HashSet<>();\n            node = node.arr[c-'a'];\n        }\n\n        return node.idxs;\n    }   \n\n\n}  \n    ","compare_resulttitle_slug":"count-prefix-and-suffix-pairs-ii","has_notes":false,"flag_type":1}