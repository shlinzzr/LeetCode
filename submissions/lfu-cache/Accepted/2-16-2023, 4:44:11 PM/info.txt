{"id":899024593,"question_id":460,"lang":"java","lang_name":"Java","time":"1 year, 3 months","timestamp":1676537051,"status":10,"status_display":"Accepted","runtime":"82 ms","url":"/submissions/detail/899024593/","is_pending":"Not Pending","title":"LFU Cache","memory":"129.9 MB","code":"public class LFUCache {\n    HashMap<Integer, Integer> vals;\n    HashMap<Integer, Integer> counts;\n    HashMap<Integer, LinkedHashSet<Integer>> lists;\n    int cap;\n    int min = -1;\n    public LFUCache(int capacity) {\n        cap = capacity;\n        vals = new HashMap<>();\n        counts = new HashMap<>();\n        lists = new HashMap<>();\n        lists.put(1, new LinkedHashSet<>());\n    }\n    \n    public int get(int key) {\n        if(!vals.containsKey(key))\n            return -1;\n        int count = counts.get(key);\n        counts.put(key, count+1);\n        lists.get(count).remove(key);\n        if(count==min && lists.get(count).size()==0)//freq (1:<2>)  /-> (2:<2>)\n            min++;\n        lists.putIfAbsent(count+1, new LinkedHashSet<>());\n        lists.get(count+1).add(key);\n        return vals.get(key);\n    }\n    \n    public void put(int key, int value) {\n        if(cap<=0)\n            return;\n        if(vals.containsKey(key)) {\n            vals.put(key, value);\n            get(key);\n            return;\n        } \n        if(vals.size() >= cap) {\n            for(int i:lists.get(min)){\n                lists.get(min).remove(i);\n                vals.remove(i);\n                break;\n            }\n        }\n        vals.put(key, value);\n        counts.put(key, 1);\n        min = 1;\n        lists.get(1).add(key);  \n    }\n}","compare_result":"1111111111111111111111111","title_slug":"lfu-cache","has_notes":false,"flag_type":1}