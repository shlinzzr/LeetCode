{"id":1254043868,"question_id":460,"lang":"java","lang_name":"Java","time":"1Â month","timestamp":1715306327,"status":10,"status_display":"Accepted","runtime":"74 ms","url":"/submissions/detail/1254043868/","is_pending":"Not Pending","title":"LFU Cache","memory":"127.5 MB","code":"class LFUCache {\n\n    TreeMap<Integer, LinkedHashSet<Integer>> lvmap;\n    int capacity;\n    int min = 0;\n    Map<Integer, Integer> vmap;\n    Map<Integer, Integer> fmap;\n    public LFUCache(int capacity) {\n        this.capacity = capacity;\n        fmap = new HashMap<>(); // key, freq\n        lvmap = new TreeMap<>(); // freq, key\n        vmap = new HashMap<>();// key, val\n        \n    }\n    \n    public int get(int key) {\n        if(!fmap.containsKey(key)) return -1;\n        int val = vmap.get(key);\n        int freq = fmap.get(key);\n        fmap.put(key, freq+1);\n\n        if(freq==min && lvmap.get(min).size()==1)\n            min++;\n\n        lvmap.get(freq).remove(key);\n        if(lvmap.get(freq).size()==0) lvmap.remove(freq);\n\n        lvmap.putIfAbsent(freq+1, new LinkedHashSet<>());\n        lvmap.get(freq+1).add(key);\n\n        return val;\n        \n    }\n    \n    public void put(int key, int value) {\n\n        if(fmap.containsKey(key)){\n\n            vmap.put(key, value);\n            get(key);\n\n        }else { // insert\n\n            if(vmap.size()==capacity){ // delete first\n                Set<Integer> set = lvmap.get(min);\n                for(int k : set){\n                    vmap.remove(k);\n                    fmap.remove(k);\n                    lvmap.get(min).remove(k);\n                    if(lvmap.get(min).size()==0)  lvmap.remove(min);\n                    break;\n                }\n            }\n\n\n            vmap.put(key, value);\n            fmap.put(key, 1);\n            lvmap.putIfAbsent(1, new LinkedHashSet<>());\n            lvmap.get(1).add(key);\n            min = 1;\n        }\n\n        \n        \n    }\n}\n\n/**\n * Your LFUCache object will be instantiated and called as such:\n * LFUCache obj = new LFUCache(capacity);\n * int param_1 = obj.get(key);\n * obj.put(key,value);\n */","compare_result":"1111111111111111111111111","title_slug":"lfu-cache","has_notes":false,"flag_type":1}