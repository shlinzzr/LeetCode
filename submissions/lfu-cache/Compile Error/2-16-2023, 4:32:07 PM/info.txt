{"id":899019499,"question_id":460,"lang":"java","lang_name":"Java","time":"1 year, 3 months","timestamp":1676536327,"status":20,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/899019499/","is_pending":"Not Pending","title":"LFU Cache","memory":"N/A","code":"/**\n * Your LRUCache object will be instantiated and called as such:\n * LRUCache obj = new LRUCache(capacity);\n * int param_1 = obj.get(key);\n * obj.put(key,value);\n */\n\nclass LFUCache {\n    \n    class Node{\n        \n        Node next;\n        Node prev;\n        int key;\n        int val;\n        \n        public Node(){}\n        public Node(int key, int val){\n            this.key=key;\n            this.val=val;\n        }\n    }\n    \n    Node head;\n    Node tail;\n    HashMap<Integer, Node> nmap; //key, node\n    int capacity;\n    \n    HashMap<Integer, Integer> fmap;// key freq;\n    TreeMap<Integer, List<Integer>> tmap// freq, List<key>\n\n    public LFUCache(int capacity) {\n        this.capacity = capacity;\n        fmap = new HashMap<>();\n        nmap = new HashMap<>();\n        head = new Node();\n        tail = new Node();\n        head.next = tail;\n        tail.prev = head;\n        \n    }\n    \n    public int get(int key) {\n\n        if(!nmap.containsKey(key))\n            return -1;\n        \n        Node node = nmap.get(key);\n        remove(nmap.get(key));\n        add(node);\n        \n        \n        int freq = fmap.get(key);\n        List<Integer> list = tmap.get(freq);\n        Iterator<Integer> iter = list.iterator();\n        while(iter.hasNext()){\n            int idx = iter.next;\n            if(idx==key){\n                iter.remove();\n                break;\n            }\n        }\n        \n        list = tmap.getOrDefautl(freq+1, new ArrayList<>());\n        list.add(key);\n        tmap.put(freq+1, list);\n        \n        fmap.put(key, fmap.get(key)+1);\n        \n        \n        \n        \n        return node.val;\n    }\n    \n    \n    private void add(Node node){\n        \n        Node next = head.next;\n        node.next = next;\n        next.prev = node;\n        node.prev = head;\n        head.next = node;\n        nmap.put(node.key, node);\n    }\n    \n    \n    private void remove(Node node){\n        \n        if(!nmap.containsKey(node.key))\n            return;\n        \n        nmap.remove(node.key);\n        \n        Node next = node.next;\n        Node prev = node.prev;\n        prev.next = next;\n        next.prev = prev;\n    }\n    \n    public void put(int key, int value) {\n        \n        fmap.put(key, fmap.getOrDefault(key, 0)+1);\n        \n        if(nmap.containsKey(key)){\n            remove(nmap.get(key));\n        }\n        \n        \n        \n        \n        Node node = new Node(key, value);\n        add(node);\n        \n        if(nmap.size()>capacity){\n            remove(tail.prev);\n        }\n    }\n}\n\n/**\n * Your LFUCache object will be instantiated and called as such:\n * LFUCache obj = new LFUCache(capacity);\n * int param_1 = obj.get(key);\n * obj.put(key,value);\n */","compare_result":null,"title_slug":"lfu-cache","has_notes":false,"flag_type":1}