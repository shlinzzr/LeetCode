{"id":82791732,"question_id":21,"lang":"c","lang_name":"C","time":"7 years, 6 months","timestamp":1479279726,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/82791732/","is_pending":"Not Pending","title":"Merge Two Sorted Lists","memory":"N/A","code":"/**\r\n * Definition for singly-linked list.\r\n * struct ListNode {\r\n *     int val;\r\n *     struct ListNode *next;\r\n * };\r\n\r\n \r\n //recursive\r\nstruct ListNode* mergeTwoLists(struct ListNode* l1, struct ListNode* l2) {\r\n\r\n    if(l1 == NULL)   return l2;\r\n    if(l2 == NULL)   return l1;\r\n    \r\n    if(l1->val <= l2->val)\r\n    {\r\n        l1->next = mergeTwoLists(l1->next, l2);\r\n        return l1;\r\n     }\r\n     else\r\n     {\r\n        l2->next = mergeTwoLists(l2->next, l1);\r\n        return l2;\r\n     }\r\n}\r\n */\r\n/*\r\n//iterative\r\nstruct ListNode* mergeTwoLists(struct ListNode* l1, struct ListNode* l2) {\r\n    struct ListNode* head;\r\n    if(l1 == NULL)   return l2;\r\n    if(l2 == NULL)   return l1;\r\n    \r\n    head = (l1->val < l2->val)? l1 : l2;\r\n    \r\n    struct ListNode* p = head;\r\n    \r\n    while(l1 && l2){\r\n        if(l1->val < l2->val)   \r\n        { \r\n            p->next = l1; \r\n            l1 = l1->next; \r\n        }\r\n        else                    \r\n        { \r\n            p->next = l2; \r\n            l2 = l2->next; \r\n        }\r\n        \r\n        p=p->next;\r\n    }\r\n    \r\n    if(l1)  p->next=l1;\r\n    else    p->next=l2;\r\n    \r\n    \r\n    \r\n    return head;\r\n}*/\r\n\r\n\r\nstruct ListNode *mergeTwoLists(struct ListNode *l1, struct ListNode *l2) {\r\n    \r\n    if(NULL == l1) return l2;\r\n    if(NULL == l2) return l1;\r\n    \r\n    struct ListNode* head=NULL;    // head of the list to return\r\n    \r\n    // find first element (can use dummy node to put this part inside of the loop)\r\n    if(l1->val < l2->val)       { head = l1;  }\r\n    else                        { head = l2;  }\r\n    \r\n    struct ListNode* p = head;     // pointer to form new list\r\n    \r\n    // I use && to remove extra IF from the loop\r\n    while(l1 && l2){\r\n        if(l1->val < l2->val)   { p->next = l1; l1 = l1->next; }\r\n        else                    { p->next = l2; l2 = l2->next; }\r\n        p=p->next;\r\n    }\r\n    \r\n    // add the rest of the tail, done!\r\n    if(l1)  p->next=l1;\r\n    else    p->next=l2;\r\n    \r\n    return head;\r\n}","compare_result":null,"title_slug":"merge-two-sorted-lists","has_notes":false,"flag_type":1}