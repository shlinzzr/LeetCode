{"id":1114912512,"question_id":1091,"lang":"java","lang_name":"Java","time":"6 months, 1 week","timestamp":1702020027,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/1114912512/","is_pending":"Not Pending","title":"Maximum Average Subtree","memory":"44.3 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    double max= 0 ;\n    public double maximumAverageSubtree(TreeNode root) {\n        \n        if(root==null){\n            return 0.0;\n        }\n\n        max = Math.max(max, getSumOfSubtree(root)/ getCntOfSubtree(root));\n        double left = maximumAverageSubtree(root.left);\n        double right = maximumAverageSubtree(root.right);\n\n        return Math.max(max, Math.max(left, right));\n\n\n    }\n\n    private double getCntOfSubtree(TreeNode root){\n        if(root==null)\n            return 0;\n        \n        double left = getCntOfSubtree(root.left);\n        double right = getCntOfSubtree(root.right);\n        return 1.0+ left+right;\n\n    }\n\n\n    private double getSumOfSubtree(TreeNode root){\n        if(root==null){\n            return 0;\n        }\n\n        double left = getSumOfSubtree(root.left);\n        double right = getSumOfSubtree(root.right);\n        return Double.valueOf(root.val + left + right);\n    }\n}","compare_result":"111111111111111111111111111111111","title_slug":"maximum-average-subtree","has_notes":false,"flag_type":1}