{"id":1095123001,"question_id":126,"lang":"java","lang_name":"Java","time":"7Â months","timestamp":1699523598,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1095123001/","is_pending":"Not Pending","title":"Word Ladder II","memory":"N/A","code":"class Solution {\n    public List<List<String>> findLadders(String beginWord, String endWord, List<String> wordList) {\n\n        List<List<String>>  res =new ArrayList<>();\n        Set<String> set= new HashSet<>(wordList);\n        if(!set.contains(endWord))\n            return res;\n\n        if(beginWord.length()!=endWord.length() )\n            return res;\n\n        List<String> ini = new ArrayList<>();\n        ini.add(beginWord);\n        \n\n        if(beginWord.equals(endWord)){\n            res.add(ini);\n            return res;\n        }\n            \n\n        Set<String> seen = new HashSet<>();\n        seen.add(beginWord);\n        Queue<List<String>> q = new LinkedList<>();\n        \n        q.offer(ini);\n        int step=1;\n\n        \n\n        while(!q.isEmpty()){\n\n            int siz=q.size();\n            while(siz-->0){\n\n                List<String> list = q.poll();\n                String p = list.get(list.size()-1);\n                \n                List<String> neighbors = getNeighbors(p, set);\n                for (String neb : neighbors) {\n                    List<String> tmp = new ArrayList<>(list);\n                    tmp.add(neb);\n                    seen.add(neb);\n                    if (neb.equals(endWord)) {\n                        res.add(tmp);\n                    } else {\n                        q.offer(tmp);\n                }\n            }\n            for (String s : seen)   // remove used words from wordSet to avoid going back\n                set.remove(s);\n            }\n\n        }\n\n        return res;\n    }\n\n     private List<String> getNeighbors(String word, Set<String> wordSet) {\n        List<String> neighbors = new LinkedList<>();\n        for (int i = 0; i < word.length(); i++) {\n            char[] ch = word.toCharArray();\n            for (char c = 'a'; c <= 'z'; c++) {\n                ch[i] = c;\n                String str = new String(ch);\n                if (wordSet.contains(str))  // only get valid neighbors\n                    neighbors.add(str);\n            }\n        }\n        return neighbors;\n    }\n}","compare_result":"011111010101111101000010000001001111","title_slug":"word-ladder-ii","has_notes":false,"flag_type":1}