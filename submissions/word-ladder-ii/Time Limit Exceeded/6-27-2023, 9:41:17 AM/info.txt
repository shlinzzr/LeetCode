{"id":980452771,"question_id":126,"lang":"java","lang_name":"Java","time":"11 months, 3 weeks","timestamp":1687830077,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/980452771/","is_pending":"Not Pending","title":"Word Ladder II","memory":"N/A","code":"class Solution {\n    public List<List<String>> findLadders(String beginWord, String endWord, List<String> wordList) {\n        \n        List<List<String>> res = new ArrayList<>();\n        int min = Integer.MAX_VALUE;\n        \n        \n        HashSet<String> set = new HashSet<>(wordList);\n        if(!set.contains(endWord))\n            return res;\n        \n        Queue<Tuple> q = new LinkedList<>();\n        \n        \n        List<String> list = new ArrayList<>();\n        list.add(beginWord);\n        q.add(new Tuple(beginWord, list, new HashSet<>(wordList)));\n        \n        while(!q.isEmpty()){\n//             System.out.print(\"q= \"); \n//             for(Tuple tu : q ){\n//                 System.out.print(tu.word + \" , \");\n//             }\n            \n//             System.out.println( \" sz=\"  + q.size());\n            \n            Tuple p = q.poll();\n            \n//              System.out.print(\"word=\" + p.word + \" list:\" );\n//             for(String l : p.list){\n//                 System.out.print(l + \", \");\n//             }\n//             System.out.println();\n            \n            \n            \n            \n            if(p.list.size()>min)\n                break;\n            \n            if(p.word.equals(endWord)){\n                res.add(new ArrayList<>(p.list));\n                min = Math.min(min, p.list.size());\n            }\n            \n            \n            String word = p.word;\n            \n            for(int i=0;i<word.length();i++){\n                for(char ch='a'; ch<='z';ch++){\n                    char[] temp = word.toCharArray();\n                    temp[i]=ch;\n                    if(p.set.contains(new String(temp))){\n                        \n                        Tuple next = new Tuple(new String(temp), new ArrayList<>(p.list), new HashSet<>(p.set));\n                        next.list.add(new String(temp));\n                        next.set.add(new String(temp));\n                        q.add(next);\n                    }\n                }\n            }\n            \n          \n        }\n        \n        return res;\n    }\n    \n    class Tuple{\n        String word;\n        List<String> list;\n        Set<String> set;\n        \n        public Tuple(String word ,List<String> list, Set<String> set){\n            this.word = word;\n            this.list = list;\n            this.set = set;\n        }\n        \n    }\n}\n","compare_result":"111000000000000000000000000000000000","title_slug":"word-ladder-ii","has_notes":false,"flag_type":1}