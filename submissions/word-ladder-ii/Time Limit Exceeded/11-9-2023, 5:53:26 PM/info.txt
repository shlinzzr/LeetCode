{"id":1095123070,"question_id":126,"lang":"java","lang_name":"Java","time":"7Â months","timestamp":1699523606,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1095123070/","is_pending":"Not Pending","title":"Word Ladder II","memory":"N/A","code":"class Solution {\n    public List<List<String>> findLadders(String beginWord, String endWord, List<String> wordList) {\n        List<List<String>> ans = new ArrayList<>();\n        Set<String> wordSet = new HashSet<>(wordList);\n        if (!wordSet.contains(endWord)) return ans;\n        \n        Queue<List<String>> queue = new LinkedList<>();   // each element in queue is a path\n        queue.offer(Arrays.asList(beginWord));\n        Set<String> visited = new HashSet<>();\n        visited.add(beginWord);\n        \n        while (!queue.isEmpty()) {\n            int sz = queue.size();\n            while (sz-- > 0) {\n                List<String> currPath = queue.poll();\n                String lastWord = currPath.get(currPath.size()-1);\n                List<String> neighbors = getNeighbors(lastWord, wordSet);\n                for (String neigh : neighbors) {\n                    List<String> newPath = new ArrayList<>(currPath);\n                    newPath.add(neigh);\n                    visited.add(neigh);\n                    if (neigh.equals(endWord)) {\n                        ans.add(newPath);\n                    } else {\n                        queue.offer(newPath);\n                    }\n                }\n            }\n            for (String s : visited)   // remove used words from wordSet to avoid going back\n                wordSet.remove(s);\n        }\n        \n        return ans;\n    }\n    \n    private List<String> getNeighbors(String word, Set<String> wordSet) {\n        List<String> neighbors = new LinkedList<>();\n        for (int i = 0; i < word.length(); i++) {\n            char[] ch = word.toCharArray();\n            for (char c = 'a'; c <= 'z'; c++) {\n                ch[i] = c;\n                String str = new String(ch);\n                if (wordSet.contains(str))  // only get valid neighbors\n                    neighbors.add(str);\n            }\n        }\n        return neighbors;\n    }\n}","compare_result":"111111111111111111111111111111110000","title_slug":"word-ladder-ii","has_notes":false,"flag_type":1}