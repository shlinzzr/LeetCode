{"id":873015210,"question_id":922,"lang":"java","lang_name":"Java","time":"1 year, 5 months","timestamp":1673060948,"status":10,"status_display":"Accepted","runtime":"13 ms","url":"/submissions/detail/873015210/","is_pending":"Not Pending","title":"Possible Bipartition","memory":"49.6 MB","code":"class Solution {\n    public boolean possibleBipartition(int n, int[][] dislikes) {\n     \n        List<List<Integer>> list = new ArrayList<>();\n        for(int i=0; i<=n; i++)\n            list.add(new ArrayList<>());\n        \n        for(int[] d : dislikes){\n            list.get(d[0]).add(d[1]);\n            list.get(d[1]).add(d[0]);\n        }\n        \n        int[] color = new int[n+1];\n        \n        for(int i=0;i<=n;i++){\n            \n            if(color[i]==0){\n                color[i]=1;\n                Queue<Integer> q = new LinkedList<>();\n                q.add(i);\n                \n                while(!q.isEmpty()){\n                    \n                    int curr = q.poll();\n                    List<Integer> nebs = list.get(curr);\n                    for(int nb : nebs){\n                        \n                        if(color[nb]==0){\n                            color[nb] = color[curr]==1? 2: 1;\n                            q.add(nb);\n                            \n                        }else{\n                            if(color[curr]==color[nb]){\n                                return false;\n                            }    \n                        }\n                    }\n                }\n            }\n        }\n        \n        return true;\n        \n        \n      \n        \n    }\n        \n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"possible-bipartition","has_notes":false,"flag_type":1}