{"id":876638253,"question_id":1643,"lang":"java","lang_name":"Java","time":"1 year, 5 months","timestamp":1673508631,"status":10,"status_display":"Accepted","runtime":"117 ms","url":"/submissions/detail/876638253/","is_pending":"Not Pending","title":"Number of Nodes in the Sub-Tree With the Same Label","memory":"117.8 MB","code":"class Solution {\n    public int[] countSubTrees(int n, int[][] edges, String labels) {\n     \n        HashMap<Integer, List<Integer>> map = new HashMap<>();\n        \n        \n        for(int i=0; i<n; i++) map.put(i, new ArrayList<>());\n            \n        for(int[] e : edges){\n            map.get(e[0]).add(e[1]);\n            map.get(e[1]).add(e[0]);\n        }\n        \n        boolean[] seen = new boolean[n];\n        \n        int[] res = new int[n];\n      \n        dfs(map, 0, labels,  res, seen);\n        \n        return res;\n    }\n    \n     private int[] dfs(Map<Integer, List<Integer>> map, int node, String labels, int[] res, boolean[] seen) {  \n         int[] cnt = new int[26];\n         \n         if(seen[node])\n             return cnt;\n         \n         seen[node] = true;\n         \n         \n         char ch = labels.charAt(node);\n         for(int child : map.get(node)){\n             int[] sub = dfs(map, child, labels, res, seen);\n             for(int i=0; i<26; i++){\n                 cnt[i]+=sub[i];\n             }\n         }\n         cnt[ch-'a']++;\n         res[node]=cnt[ch-'a'];\n         \n         return cnt;\n        \n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111","title_slug":"number-of-nodes-in-the-sub-tree-with-the-same-label","has_notes":false,"flag_type":1}