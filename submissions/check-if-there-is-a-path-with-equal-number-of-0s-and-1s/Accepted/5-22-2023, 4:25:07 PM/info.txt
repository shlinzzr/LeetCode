{"id":954980176,"question_id":2653,"lang":"java","lang_name":"Java","time":"1Â year","timestamp":1684743907,"status":10,"status_display":"Accepted","runtime":"78 ms","url":"/submissions/detail/954980176/","is_pending":"Not Pending","title":"Check if There is a Path With Equal Number of 0's And 1's","memory":"44.6 MB","code":"class Solution {\n    public boolean isThereAPath(int[][] grid) {\n        int h = grid.length;\n        int w = grid[0].length;\n        if ((h  + w) % 2 == 0) {\n            return false;\n        }\n        int[][] min = new int[h][w];\n        int[][] max = new int[h][w];\n        \n        min[0][0] = max[0][0] = grid[0][0];\n        for(int i = 1; i < h; ++i){\n            min[i][0] = min[i - 1][0] + grid[i][0];\n            max[i][0] = max[i - 1][0] + grid[i][0];\n        }\n        for(int j = 1; j < w; ++j){\n            min[0][j] = min[0][j - 1] + grid[0][j];\n            max[0][j] = max[0][j - 1] + grid[0][j];\n        }\n        for(int r = 1; r < h; ++r){\n            for(int c = 1; c < w; ++c){\n                \n                \n                \n                int minPrev = Math.min(min[r - 1][c], min[r][c - 1]);\n                min[r][c] = minPrev + grid[r][c];               \n                int maxPrev = Math.max(max[r - 1][c], max[r][c - 1]);\n                max[r][c] = maxPrev + grid[r][c];\n                \n                System.out.println(min[r][c] + \" \" + max[r][c]);\n            }\n        }\n        int target = (h + w - 1) / 2;\n        return min[h - 1][w - 1] <= target && max[h - 1][w - 1] >= target;\n    }\n    \n    \n}","compare_result":"111111111111111111111111111111111111111111","title_slug":"check-if-there-is-a-path-with-equal-number-of-0s-and-1s","has_notes":false,"flag_type":1}