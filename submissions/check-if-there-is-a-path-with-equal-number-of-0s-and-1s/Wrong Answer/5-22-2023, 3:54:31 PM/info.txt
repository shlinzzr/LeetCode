{"id":954966400,"question_id":2653,"lang":"java","lang_name":"Java","time":"1Â year","timestamp":1684742071,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/954966400/","is_pending":"Not Pending","title":"Check if There is a Path With Equal Number of 0's And 1's","memory":"N/A","code":"class Solution {\n    public boolean isThereAPath(int[][] grid) {\n        int h = grid.length;\n        int w = grid[0].length;\n        \n        if((h*w)%2==1)\n            return false;\n        \n        Queue<int[]> q= new LinkedList<>();\n        int offset = grid[0][0]==1? 1: -1;\n        q.offer(new int[]{0,0, offset});\n        boolean[][] seen = new boolean[h][w];\n        \n        \n        \n        seen[0][0]=true;\n        \n        int[][] dirs = new int[][]{{0,1},{1,0}};\n        \n        while(!q.isEmpty()){\n            \n            int[] p = q.poll();\n            int ofs = p[2];\n            \n            \n            for(int[] d : dirs){\n                \n                int r = d[0]+p[0];\n                int c = d[1]+p[1];\n                \n                if(r>=h || c>=w || (ofs==1 && grid[r][c]==1) || (ofs==-1 && grid[r][c]==0))\n                    continue;\n                \n                int val = ofs+ (grid[r][c]==1? 1 : -1);\n                \n                if(r==h-1 && c==w-1 && val==0)\n                    return true;\n                \n                seen[r][c]=true;\n                q.offer(new int[]{r,c,val});\n            }\n            \n            \n        }\n        \n        return false;\n    }\n}","compare_result":"111111001111111001111010110110110000000000","title_slug":"check-if-there-is-a-path-with-equal-number-of-0s-and-1s","has_notes":false,"flag_type":1}