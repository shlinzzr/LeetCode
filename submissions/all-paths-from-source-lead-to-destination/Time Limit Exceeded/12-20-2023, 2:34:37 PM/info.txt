{"id":1124002395,"question_id":511,"lang":"java","lang_name":"Java","time":"5 months, 3 weeks","timestamp":1703054077,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1124002395/","is_pending":"Not Pending","title":"All Paths from Source Lead to Destination","memory":"N/A","code":"class Solution {\n    public boolean leadsToDestination(int n, int[][] edges, int source, int destination) {\n         \n        Map<Integer, Set<Integer>> adjList = new HashMap<>();\n        for (int i = 0; i < edges.length; ++i) {\n            adjList.putIfAbsent(edges[i][0], new HashSet<Integer>());\n            adjList.get(edges[i][0]).add(edges[i][1]);\n        }\n        \n        if(adjList.containsKey(destination))\n            return false;\n        \n        return doDfs(n, edges, source, destination, new HashSet<>(), adjList);\n    }\n    \n    boolean doDfs(int n, int[][] edges, int node, int destination, Set<Integer> seenSet, Map<Integer, Set<Integer>> adjList){\n        if(node == destination)\n            return true;\n        // We wanna traverse paths, node nodes, so we may revisit a node\n        seenSet.add(node);\n        if(adjList.get(node) == null)\n            return false;\n        for(Integer target : adjList.get(node)){\n            if(seenSet.contains(target))\n                return false; // loop\n            if(!doDfs(n, edges, target, destination, seenSet, adjList))\n                return false;\n        }\n        // done visiting the node for the iteration, we may return to this node\n            // Currently it is out of the stack and no loop will happen\n        seenSet.remove(node);\n        return true;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111110","title_slug":"all-paths-from-source-lead-to-destination","has_notes":false,"flag_type":1}