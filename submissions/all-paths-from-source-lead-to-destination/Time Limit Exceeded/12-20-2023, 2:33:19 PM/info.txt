{"id":1124001451,"question_id":511,"lang":"java","lang_name":"Java","time":"5 months, 3 weeks","timestamp":1703053999,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1124001451/","is_pending":"Not Pending","title":"All Paths from Source Lead to Destination","memory":"N/A","code":"class Solution {\n    public boolean leadsToDestination(int n, int[][] edges, int source, int destination) {\n\n        Map<Integer, List<Integer>> graph = new HashMap();\n        \n        for(int[] edge : edges){\n            graph.putIfAbsent(edge[0], new ArrayList());\n            graph.get(edge[0]).add(edge[1]);\n        }\n        \n        return dfs(source, destination, graph, new HashSet());\n    }\n    \n    private boolean dfs(int node, int destination,Map<Integer, List<Integer>> graph, Set<Integer> seen){\n        if(!graph.containsKey(node) && node == destination) return true;  \n        if(!graph.containsKey(node) || seen.contains(node)) return false;\n        \n        for(int child : graph.get(node)){   \n            seen.add(node);\n            if(!dfs(child, destination, graph, seen))\n                return false;\n            seen.remove(node);\n        }\n        return true;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111110","title_slug":"all-paths-from-source-lead-to-destination","has_notes":false,"flag_type":1}