{"id":1277391627,"question_id":511,"lang":"java","lang_name":"Java","time":"1 week, 1 day","timestamp":1717503042,"status":10,"status_display":"Accepted","runtime":"15 ms","url":"/submissions/detail/1277391627/","is_pending":"Not Pending","title":"All Paths from Source Lead to Destination","memory":"47.9 MB","code":"class Solution {\n    \n    \n    public boolean leadsToDestination(int n, int[][] edges, int source, int destination) {\n        \n        \n        Map<Integer, Set<Integer>> map = new HashMap<>();\n        for(int[] e: edges){\n            map.putIfAbsent(e[0], new HashSet<>());\n            map.get(e[0]).add(e[1]);\n        }\n        \n        if(map.containsKey(destination)) return false;\n        \n        // int out = map.getOrDefault(source, new HashSet()).size();\n        // if(out==0) return false;\n        \n        \n        return helper(map, source, destination, new HashMap<>());\n        \n        \n\n        \n    }\n    \n    \n    private boolean helper( Map<Integer, Set<Integer>> map , int curr, int dest, Map<Integer, Boolean> memo){\n        \n        if(memo.containsKey(curr)) \n            return memo.get(curr);\n        \n        if(curr==dest){\n            return true;\n        }\n        \n        if(!map.containsKey(curr)) {\n            memo.put(curr, false);\n            return false;\n        }\n        \n        memo.put(curr, false); //這裡先給值, 避免了無窮回圈\n        for(int next:  map.get(curr)){\n            boolean res = helper(map, next, dest, memo);\n            if(res==false)\n                return false;\n        }\n        \n        memo.put(curr, true);\n        return true;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111","title_slug":"all-paths-from-source-lead-to-destination","has_notes":false,"flag_type":1}