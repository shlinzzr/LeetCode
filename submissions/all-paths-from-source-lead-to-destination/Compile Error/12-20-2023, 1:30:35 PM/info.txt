{"id":1123955488,"question_id":511,"lang":"java","lang_name":"Java","time":"5 months, 3 weeks","timestamp":1703050235,"status":20,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/1123955488/","is_pending":"Not Pending","title":"All Paths from Source Lead to Destination","memory":"N/A","code":"class Solution {\n    public boolean leadsToDestination(int n, int[][] edges, int source, int destination) {\n        \n\n        boolean[] toDest = new boolean[];\n        toDest[destination] = true;\n\n        boolean[] seen = new boolean[n];\n        Queue<Integer> q = new LinkedList<>();\n        q.offer(source);\n        seen[source] = true;\n\n\n        int out=0;\n\n        HashMap<Integer, List<Integer>> g = new HashMap<>();\n        for(int[] e: edges){\n            g.putIfAbsent(e[0], new ArrayList<>());\n            g.get(e[0]).add(e[1]);\n            if(e[0]==source)       \n                out++;\n        }\n        \n        while(!q.isEmpty()){\n            for(int i=q.size(); i>=0; i--){\n                int p = q.poll();\n                seen[p]=true;\n                \n                List<Integer> adj = g.get(p);\n\n\n\n\n\n            }\n        }\n\n    }\n}","compare_result":null,"title_slug":"all-paths-from-source-lead-to-destination","has_notes":false,"flag_type":1}