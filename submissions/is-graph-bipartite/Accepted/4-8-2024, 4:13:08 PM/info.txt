{"id":1226515539,"question_id":801,"lang":"java","lang_name":"Java","time":"2Â months","timestamp":1712563988,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/1226515539/","is_pending":"Not Pending","title":"Is Graph Bipartite?","memory":"44.3 MB","code":"class Solution {\n\n    int[] parent;\n    public boolean isBipartite(int[][] graph) {\n\n        int len = graph.length;\n        parent = new int[len];\n        for(int i=0; i<len; i++){\n            parent[i] = i;\n        }\n\n        for(int i=0; i<len; i++){\n            int[] adjs = graph[i];\n\n            if(adjs.length>0){\n                int root = adjs[0];\n\n                if(find(i)==find(root))\n                    return false;\n\n                for(int j=1; j<adjs.length; j++){\n                    if(find(i)==find(adjs[j]))\n                        return false;\n                    union(root, adjs[j]);\n                }\n            }\n        }\n\n        return true;\n\n\n\n\n        \n    }\n\n    private int find(int x){\n        if(parent[x]!=x){\n            parent[x] = find(parent[x]);\n        }\n        return parent[x];\n    }\n\n    private void union(int a, int b){\n        a = find(a);\n        b = find(b);\n\n        if(a==b) return;\n        if(a<b){\n            parent[b] = a;\n        }else{\n            parent[a] = b;\n        }\n    }\n        \n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"is-graph-bipartite","has_notes":false,"flag_type":1}