{"id":953109529,"question_id":801,"lang":"java","lang_name":"Java","time":"1Â year","timestamp":1684469512,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/953109529/","is_pending":"Not Pending","title":"Is Graph Bipartite?","memory":"44.2 MB","code":"class Solution {\n    public boolean isBipartite(int[][] graph) {\n        int len = graph.length;\n        int[] colors = new int[len];\n        \n        for (int i = 0; i < len; i++) {\n            if (colors[i] != 0) continue;\n            Queue<Integer> queue = new LinkedList<>();\n            queue.offer(i);\n            colors[i] = 1;   // Blue: 1; Red: -1.\n            \n            while (!queue.isEmpty()) {\n                int cur = queue.poll();\n                for (int next : graph[cur]) {\n                    if (colors[next] == 0) {          // If this node hasn't been colored;\n                        colors[next] = -colors[cur];  // Color it with a different color;\n                        queue.offer(next);\n                    } else if (colors[next] != -colors[cur]) {   // If it is colored and its color is different, return false;\n                        return false;\n                    }\n                }\n            }\n        }\n        \n        return true;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"is-graph-bipartite","has_notes":false,"flag_type":1}