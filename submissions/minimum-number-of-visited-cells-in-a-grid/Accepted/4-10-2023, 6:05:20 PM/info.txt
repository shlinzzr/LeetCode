{"id":931205608,"question_id":2697,"lang":"java","lang_name":"Java","time":"1 year, 2 months","timestamp":1681121120,"status":10,"status_display":"Accepted","runtime":"77 ms","url":"/submissions/detail/931205608/","is_pending":"Not Pending","title":"Minimum Number of Visited Cells in a Grid","memory":"76.8 MB","code":"class Solution {\n    public int minimumVisitedCells(int[][] grid) {\n        Queue<int[]> queue = new LinkedList<>();\n        \n        if(grid == null || grid.length == 0 || grid[0].length == 0)\n            return 0;\n        int m = grid.length;\n        int n = grid[0].length;\n        if(m == 1 && n == 1)\n            return 1;\n        \n        int[][] visited = new int[m][n];\n        queue.add(new int[]{0, 0});\n        int dist = 1;\n        while(!queue.isEmpty()) {\n            int size = queue.size();\n            // System.out.println(size);\n            while(size > 0) {\n                int[] cell = queue.poll();\n                // System.out.println(\"cell: \" + cell[0] + \", \"  + cell[1] + \", val: \" + grid[cell[0]][cell[1]]);\n                int val = grid[cell[0]][cell[1]];\n                //check right\n                for(int col=1; col <= val; col++) {\n                    if(col + cell[1] >= n)\n                        break;\n\n                    if(cell[0] == m-1 && col + cell[1] == n-1)\n                        return dist + 1;\n\n                    if(grid[cell[0]][col + cell[1]] != 0 && visited[cell[0]][col + cell[1]] == 0) {\n                        queue.add(new int[]{cell[0], col + cell[1]});\n                        visited[cell[0]][col + cell[1]] = 1;\n                    }\n                }\n\n                //check bottom\n                for(int row=1; row <= val; row++) {\n                    if(row + cell[0] >= m)\n                        break;\n\n                    if(cell[0] + row == m-1 && cell[1] == n-1)\n                        return dist + 1;\n\n                    if(grid[row + cell[0]][cell[1]] != 0 && visited[row + cell[0]][cell[1]] == 0) {\n                        queue.add(new int[]{row + cell[0], cell[1]});\n                        visited[row + cell[0]][cell[1]] = 1;\n                    }\n                }\n                size--;\n            }\n            dist++;\n        }\n        \n        // System.out.println(\"\");\n        // System.out.println(\"\");\n        return -1;\n    }\n}","compare_resulttitle_slug":"minimum-number-of-visited-cells-in-a-grid","has_notes":false,"flag_type":1}