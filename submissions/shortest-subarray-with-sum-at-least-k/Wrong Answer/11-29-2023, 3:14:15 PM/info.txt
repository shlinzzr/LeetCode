{"id":1108717844,"question_id":892,"lang":"java","lang_name":"Java","time":"6 months, 2 weeks","timestamp":1701242055,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1108717844/","is_pending":"Not Pending","title":"Shortest Subarray with Sum at Least K","memory":"N/A","code":"class Solution {\n    public int shortestSubarray(int[] nums, int k) {\n        int len = nums.length;\n        long[] presum = new long[len+1];\n\n        for(int i=0; i<len; i++){\n            presum[i+1] =  nums[i] + presum[i];\n        }\n\n        int min = Integer.MAX_VALUE;\n\n        Deque<Integer> dq = new ArrayDeque<>();\n\n        for(int i=0; i<=len; i++){ // 0~len\n\n            while(!dq.isEmpty() && presum[i] - presum[dq.peek()]>=k){\n                min = Math.min(min, i-dq.poll());\n            }\n\n            while(!dq.isEmpty() && presum[i]<dq.peekLast()){\n                dq.pollLast();\n            }\n\n            dq.offer(i);\n\n        }\n        return min==Integer.MAX_VALUE ? -1 : min;\n    }\n\n \n}","compare_result":"1111111101111111111111111101101101110111100000011011101011111010001101110110100011010000010110001","title_slug":"shortest-subarray-with-sum-at-least-k","has_notes":false,"flag_type":1}