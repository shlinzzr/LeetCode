{"id":1246567433,"question_id":113,"lang":"java","lang_name":"Java","time":"1 month, 1 week","timestamp":1714570784,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1246567433/","is_pending":"Not Pending","title":"Path Sum II","memory":"44.4 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n   List<List<Integer>> res =new ArrayList();\n    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {\n\n        helper(root, new ArrayList<>(), targetSum);\n\n        return res;\n\n    }\n\n    private int helper(TreeNode node, List<Integer>list, int targetSum){\n\n        if(node==null) return 0;\n\n      \n         if(node.left==null && node.right==null && targetSum == node.val){\n            list.add(node.val);\n            res.add(new ArrayList<>(list));\n            list.remove(list.size()-1);\n            return node.val;\n        }\n\n\n        list.add(node.val);\n        int left = helper(node.left, list, targetSum-node.val);\n        int right = helper(node.right,  list, targetSum-node.val);\n        list.remove(list.size()-1);\n\n        return node.val+Math.max(left, right);\n\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"path-sum-ii","has_notes":false,"flag_type":1}