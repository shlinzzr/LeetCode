{"id":1114803803,"question_id":1304,"lang":"java","lang_name":"Java","time":"6 months, 1 week","timestamp":1702008390,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1114803803/","is_pending":"Not Pending","title":"Longest Happy String","memory":"40.1 MB","code":"class Solution {\n    public String longestDiverseString(int a, int b, int c) {\n         \n\n        HashMap<Character, Integer> map = new HashMap<>();\n        if (a!=0) map.put('a', a);\n        if (b!=0) map.put('b', b);\n        if (c!=0) map.put('c', c);\n        \n        PriorityQueue<Map.Entry<Character, Integer>> pq = new PriorityQueue<>(\n            (x,y) -> y.getValue()-x.getValue()\n        );\n        pq.addAll(map.entrySet());\n\n\n        StringBuilder sb = new StringBuilder();\n        while (!pq.isEmpty())\n        {\n            if (pq.size()==1) \n            {\n                int k = Math.min(2, pq.peek().getValue());\n                for (int i=0; i<k; i++)                    \n                    sb.append(pq.peek().getKey());\n                return sb.toString();\n            }\n\n            Map.Entry<Character, Integer> x = pq.poll();\n            Map.Entry<Character, Integer> y = pq.poll();\n\n            int k = Math.min(1+x.getValue()-y.getValue(), 2);\n            for (int i=0; i<k; i++)\n                sb.append(x.getKey());\n            sb.append(y.getKey());\n\n            x.setValue(x.getValue()-k);\n            y.setValue(y.getValue()-1);\n\n            if (x.getValue()!=0) pq.offer(x);\n            if (y.getValue()!=0) pq.offer(y);\n\n            // cout<<ret<<endl;\n        }\n        return sb.toString();\n        \n    }\n}","compare_result":"1111111111111111111111111111111111","title_slug":"longest-happy-string","has_notes":false,"flag_type":1}