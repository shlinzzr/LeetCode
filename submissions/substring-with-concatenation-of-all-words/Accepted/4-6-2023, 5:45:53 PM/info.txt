{"id":928970004,"question_id":30,"lang":"java","lang_name":"Java","time":"1 year, 2 months","timestamp":1680774353,"status":10,"status_display":"Accepted","runtime":"287 ms","url":"/submissions/detail/928970004/","is_pending":"Not Pending","title":"Substring with Concatenation of All Words","memory":"43.4 MB","code":"class Solution {\n    public List<Integer> findSubstring(String s, String[] words) {\n        \n        if (s == null || words == null || s.length() == 0 || words.length == 0) {\n            return new ArrayList<>();\n        }\n        \n        int totalLen = 0;\n        \n        Map<String, Integer> counts = new HashMap<>();\n        for (String word : words) {\n            counts.put(word, counts.getOrDefault(word, 0) + 1);\n        }\n        \n        List<Integer> res = new ArrayList<>();\n        int sLen = s.length();\n        int len = words.length;\n        int wordLen = words[0].length();\n\n        for (int i = 0; i < sLen - len*wordLen + 1; i++) {\n            String sub = s.substring(i, i + len * wordLen);\n            if (isConcat(sub, counts, wordLen)) {\n                res.add(i);\n            }\n        }\n        return res;\n    }\n    \n    /**\n     * */\n    private boolean isConcat(String sub, Map<String, Integer> counts, int wordLen) {\n        Map<String, Integer> seen = new HashMap<>();\n        \n        for (int i = 0; i < sub.length(); i += wordLen) {\n            \n            String sWord = sub.substring(i, i + wordLen);\n            seen.put(sWord, seen.getOrDefault(sWord, 0) + 1);\n        }\n        return seen.equals(counts);\n    }\n}\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"substring-with-concatenation-of-all-words","has_notes":false,"flag_type":1}