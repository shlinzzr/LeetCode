{"id":928971542,"question_id":30,"lang":"java","lang_name":"Java","time":"1 year, 2 months","timestamp":1680774573,"status":10,"status_display":"Accepted","runtime":"9 ms","url":"/submissions/detail/928971542/","is_pending":"Not Pending","title":"Substring with Concatenation of All Words","memory":"43.1 MB","code":"class Solution {\n    private Map<String, Integer> wordCount = new HashMap<String, Integer>();\n    private int n;\n    private int wordLength;\n    private int substringSize;\n    private int k;\n    \n    public List<Integer> findSubstring(String s, String[] words) {\n        n = s.length();\n        k = words.length;\n        wordLength = words[0].length();\n        substringSize = wordLength * k;\n        \n        for (String word : words) {\n            wordCount.put(word, wordCount.getOrDefault(word, 0) + 1);\n        }\n        \n        List<Integer> answer = new ArrayList<>();\n        for (int i = 0; i < wordLength; i++) {\n            slidingWindow(i, s, answer);\n        }\n        \n        return answer;\n    }\n    \n    private void slidingWindow(int left, String s, List<Integer> answer) {\n        Map<String, Integer> wordsFound = new HashMap<>();\n        int wordsUsed = 0;\n        boolean excessWord = false;\n        \n        // Do the same iteration pattern as the previous approach - iterate\n        // word_length at a time, and at each iteration we focus on one word\n        for (int right = left; right <= n - wordLength; right += wordLength) {\n            \n            String sub = s.substring(right, right + wordLength);\n            if (!wordCount.containsKey(sub)) {\n                // Mismatched word - reset the window\n                wordsFound.clear();\n                wordsUsed = 0;\n                excessWord = false;\n                left = right + wordLength;\n            } else {\n                // If we reached max window size or have an excess word\n                while (right - left == substringSize || excessWord) {\n                    String leftmostWord = s.substring(left, left + wordLength);\n                    left += wordLength;\n                    wordsFound.put(leftmostWord, wordsFound.get(leftmostWord) - 1);\n\n                    if (wordsFound.get(leftmostWord) >= wordCount.get(leftmostWord)) {\n                        // This word was an excess word\n                        excessWord = false;\n                    } else {\n                        // Otherwise we actually needed it\n                        wordsUsed--;\n                    }\n                }\n                \n                // Keep track of how many times this word occurs in the window\n                wordsFound.put(sub, wordsFound.getOrDefault(sub, 0) + 1);\n                if (wordsFound.get(sub) <= wordCount.get(sub)) {\n                    wordsUsed++;\n                } else {\n                    // Found too many instances already\n                    excessWord = true;\n                }\n                \n                if (wordsUsed == k && !excessWord) {\n                    // Found a valid substring\n                    answer.add(left);\n                }\n            }\n        }\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"substring-with-concatenation-of-all-words","has_notes":false,"flag_type":1}