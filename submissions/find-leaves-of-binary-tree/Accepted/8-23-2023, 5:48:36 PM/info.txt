{"id":1029420479,"question_id":366,"lang":"java","lang_name":"Java","time":"9 months, 3 weeks","timestamp":1692784116,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1029420479/","is_pending":"Not Pending","title":"Find Leaves of Binary Tree","memory":"40.9 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    \n    HashMap<TreeNode ,TreeNode > map;\n    Queue<TreeNode> q ;\n    \n    List<List<Integer>> res;\n    \n    public List<List<Integer>> findLeaves(TreeNode root) {\n        map = new HashMap<>();\n        q = new LinkedList<>();\n        res = new ArrayList<>();\n        \n        if(root==null)\n            return res;\n            \n        while(root.left!=null || root.right!=null){\n            List<Integer> list = new ArrayList<>();\n            helper(null, root, list);\n            res.add(list);\n        }\n        \n        List<Integer> list = new ArrayList<>();\n        list.add(root.val);\n        res.add(list);\n        return res;\n        \n        \n        \n//         helper(null, root);\n        \n//         while(!q.isEmpty()){\n            \n//             int size = q.size();\n            \n            \n            \n           \n            \n            \n            \n//             while(size-->0){\n                \n//                 TreeNode p = q.poll();\n                \n//                 if(map.get(p)!=null)\n//                     q.offer(map.get(p));\n                \n//                 list.add(p.val);\n                \n//             }\n            \n//             res.add(list);\n//         }\n        \n//         return res;\n        \n    }\n    \n    private void helper(TreeNode parent, TreeNode curr, List<Integer> list ){\n        \n        if(curr.left==null && curr.right==null){\n            \n            list.add(curr.val);\n            \n            if(parent==null){\n                return;\n            }else if(parent.left==curr)\n                parent.left=null;\n            else\n                parent.right=null;\n            \n            // q.offer(curr);\n            // map.put(curr, parent);\n            // return;\n        }\n        \n        if(curr.left!=null)\n            helper(curr, curr.left, list);\n        \n        if(curr.right!=null)\n            helper(curr, curr.right, list);\n        \n    }\n    \n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-leaves-of-binary-tree","has_notes":false,"flag_type":1}