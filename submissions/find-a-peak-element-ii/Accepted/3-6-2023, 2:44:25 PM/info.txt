{"id":909987602,"question_id":2047,"lang":"java","lang_name":"Java","time":"1 year, 3 months","timestamp":1678085065,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/909987602/","is_pending":"Not Pending","title":"Find a Peak Element II","memory":"80.4 MB","code":"class Solution {\n    public int[] findPeakGrid(int[][] mat) {\n        int h = mat.length;\n        int w = mat[0].length;\n        \n        \n        int startCol = 0, endCol = mat[0].length-1;\n        \n        while(startCol <= endCol){\n            int maxRow = 0, midCol = startCol + (endCol-startCol)/2;\n            \n            for(int row=0; row<mat.length; row++){\n                 maxRow = mat[row][midCol] >= mat[maxRow][midCol]? row : maxRow;  \n            }\n            \n            boolean leftIsBig    =   midCol-1 >= startCol  &&  mat[maxRow][midCol-1] > mat[maxRow][midCol];\n            boolean rightIsBig   =   midCol+1 <= endCol    &&  mat[maxRow][midCol+1] > mat[maxRow][midCol];\n            \n            if(!leftIsBig && !rightIsBig)   // we have found the peak element\n                return new int[]{maxRow, midCol};\n            \n            else if(rightIsBig)  // if rightIsBig, then there is an element in 'right' that is bigger than all the elements in the 'midCol', \n                startCol = midCol+1; //so 'midCol' cannot have a 'peakPlane'\n            \n            else // leftIsBig\n                endCol = midCol-1;\n        }\n        return null;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111","title_slug":"find-a-peak-element-ii","has_notes":false,"flag_type":1}