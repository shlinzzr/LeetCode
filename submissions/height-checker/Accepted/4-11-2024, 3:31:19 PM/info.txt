{"id":1229233398,"question_id":1137,"lang":"java","lang_name":"Java","time":"2Â months","timestamp":1712820679,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1229233398/","is_pending":"Not Pending","title":"Height Checker","memory":"41.4 MB","code":"class Solution {\n    public int heightChecker(int[] heights) {\n        \n        int[] freq = new int[101];\n        \n        int len = heights.length;\n        \n        for(int i=0; i<len;i++){\n            freq[heights[i]]++;\n        }\n        \n        int idx= 0 , res=0;\n        \n        for(int i=0; i<len ; i++){\n            \n            while(freq[idx]==0){\n                idx++;\n            }\n            \n            if(idx!=heights[i]){\n                res++;\n            }\n            \n            freq[idx]--;\n            \n            \n            \n            \n        }\n        \n        return res;\n        \n        \n        \n        \n        \n        // O(nlgn)\n//         int len = heights.length;\n//         PriorityQueue<Integer> pq = new PriorityQueue<>();\n//         for(int i=0; i<len; i++){\n//             pq.offer(heights[i]);\n//         }\n        \n//         int res= 0 ;\n//         for(int i=0; i<len; i++){\n//             if(pq.poll()!= heights[i]){\n//                 res++;\n//             }\n//         }\n        \n//         return res;\n        \n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"height-checker","has_notes":false,"flag_type":1}