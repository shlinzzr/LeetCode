{"id":1229333602,"question_id":1865,"lang":"java","lang_name":"Java","time":"2Â months","timestamp":1712829419,"status":10,"status_display":"Accepted","runtime":"241 ms","url":"/submissions/detail/1229333602/","is_pending":"Not Pending","title":"Checking Existence of Edge Length Limited Paths II","memory":"66.3 MB","code":"class DistanceLimitedPathsExist {\n\n    TreeMap<Integer, int[]> map = new TreeMap<>();\n    public DistanceLimitedPathsExist(int n, int[][] edgeList) {\n        int[] parent = new int[n];\n        for(int i=0; i<n; i++){\n            parent[i] = i;\n        }\n\n        Arrays.sort(edgeList, (a,b)-> a[2]-b[2]);\n\n        for(int[] e : edgeList){\n\n            int a = e[0];\n            int b = e[1];\n            int d = e[2];\n            union(a, b, parent);\n            map.put(d, parent.clone());\n        }\n\n\n\n    }\n\n    private void union(int a ,int b, int[] parent){\n\n        a = find(a, parent);\n        b = find(b, parent);\n        if(a==b) return ;\n\n        if(a<b){\n            parent[b] = a;\n        }else \n            parent[a] = b;\n    }\n        \n\n    private int find(int x, int[] parent){\n        if(parent[x]!=x) parent[x] = find(parent[x], parent);\n        return parent[x];\n    }   \n\n\n    public boolean query(int p, int q, int limit) {\n\n        Integer d = map.lowerKey(limit);\n        if(d==null) return false;\n        int[] parent = map.get(d);\n        return find(p, parent)==find(q, parent);\n    }\n}\n\n/**\n * Your DistanceLimitedPathsExist object will be instantiated and called as such:\n * DistanceLimitedPathsExist obj = new DistanceLimitedPathsExist(n, edgeList);\n * boolean param_1 = obj.query(p,q,limit);\n */","compare_result":"111111111111111111111111111111111111111111111111111","title_slug":"checking-existence-of-edge-length-limited-paths-ii","has_notes":false,"flag_type":1}