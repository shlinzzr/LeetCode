{"id":1140210772,"question_id":446,"lang":"java","lang_name":"Java","time":"5Â months","timestamp":1704696536,"status":12,"status_display":"Memory Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1140210772/","is_pending":"Not Pending","title":"Arithmetic Slices II - Subsequence","memory":"N/A","code":"class Solution {\n    public int numberOfArithmeticSlices(int[] nums) {\n        int len = nums.length;\n\n        // boolean[] seen = new boolean[len];\n        HashSet<Long> seen = new HashSet<>();\n        List<List<Long>> res = new ArrayList<>();\n        helper(nums, 0, seen, new ArrayList<>(), res);\n\n        return res.size();\n    }\n\n    private void helper(int[] nums, int st, HashSet<Long> seen, List<Long> list, List<List<Long>> res){\n\n        if(list.size()>=3){\n            res.add(new ArrayList<>(list));\n        }\n\n        for(int i=st; i<nums.length; i++){\n\n            if(!seen.contains(i)){\n             \n\n                if(list.isEmpty() || list.size()==1 || (nums[i]-list.get(list.size()-1)== list.get(list.size()-1)- list.get(list.size()-2))){\n                    seen.add((long)i);\n                    // seen[i]=true;\n                    list.add((long)nums[i]);\n                    helper(nums, i+1, seen, list, res);\n                    list.remove(list.size()-1);\n                    // seen[i]=false;\n                    seen.remove(i);\n                }\n                \n            }\n        }\n\n    }\n}","compare_result":"11111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000","title_slug":"arithmetic-slices-ii-subsequence","has_notes":false,"flag_type":1}