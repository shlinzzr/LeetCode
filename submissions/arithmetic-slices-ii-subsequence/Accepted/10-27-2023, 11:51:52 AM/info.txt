{"id":1085074378,"question_id":446,"lang":"java","lang_name":"Java","time":"7 months, 2 weeks","timestamp":1698378712,"status":10,"status_display":"Accepted","runtime":"37 ms","url":"/submissions/detail/1085074378/","is_pending":"Not Pending","title":"Arithmetic Slices II - Subsequence","memory":"52 MB","code":"\nclass Solution {\n    public int numberOfArithmeticSlices(int[] A) {\n\n\n        /*\n            dp[2][1] = dp[1][0] +1;\n            dp[3][2] = dp[2][1] +1\n            dp[4][3] = dp[3][2] +1\n            dp[4][2] = dp[2][0] +1\n            dp[i][j] = dp[j][k] +1\n\n        */\n        int n = A.length;\n        int[][] dp = new int[n][n];\n        Map<Long, List<Integer>> map = new HashMap<>();\n        for (int i = 0; i < n; i++) {\n            map.putIfAbsent((long) A[i], new ArrayList<>()); //  val, List<valIndex>\n            map.get((long) A[i]).add(i);\n        }\n        \n        int res = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                long target = 2 * (long) A[j] - A[i];\n                if (map.containsKey(target)) {\n                    for (int k : map.get(target)) {\n                        if (k < j) {  // check valIndex \n                            dp[i][j] += (dp[j][k] + 1); // \n                        }\n                    }\n                }\n                res += dp[i][j];\n            }\n        }\n        \n        return res;\n    }\n}\n\n         ","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"arithmetic-slices-ii-subsequence","has_notes":false,"flag_type":1}