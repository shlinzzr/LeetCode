{"id":759680212,"question_id":2239,"lang":"java","lang_name":"Java","time":"1 year, 10 months","timestamp":1659079582,"status":10,"status_display":"Accepted","runtime":"55 ms","url":"/submissions/detail/759680212/","is_pending":"Not Pending","title":"Execution of All Suffix Instructions Staying in a Grid","memory":"54.7 MB","code":"class Solution {\n    public int[] executeInstructions(int n, int[] startPos, String s) {\n        \n        int[] ini = new int[]{startPos[0], startPos[1]};\n        \n        \n        int[] res = new int[s.length()];\n        \n        for(int i=0; i<s.length(); i++){\n            \n            String steps = s.substring(i, s.length());\n            int cnt = 0;\n            \n            startPos[0] = ini[0];\n            startPos[1] = ini[1];\n            \n            for(int j=0; j<steps.length(); j++){\n                char c = steps.charAt(j);\n                \n                int y = startPos[0];\n                int x = startPos[1];\n                \n                \n                if(c=='R' && x+1<n){\n                    startPos[1] +=1;\n                    \n                }else if(c=='L' && x-1>=0){\n                \n                    startPos[1] -=1;\n                    \n                }else if(c=='U' && y-1>=0){\n                    startPos[0] -=1;\n                    \n                }else if(c=='D' && y+1<n){\n                \n                    startPos[0] +=1;\n                }else{\n                    break;\n                }\n                cnt++;\n            }\n            \n            res[i] = cnt;\n            \n            \n            \n        }\n        return res;\n        \n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"execution-of-all-suffix-instructions-staying-in-a-grid","has_notes":false,"flag_type":1}