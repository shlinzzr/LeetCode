{"id":949701251,"question_id":2730,"lang":"java","lang_name":"Java","time":"1 year, 1 month","timestamp":1683995069,"status":10,"status_display":"Accepted","runtime":"38 ms","url":"/submissions/detail/949701251/","is_pending":"Not Pending","title":"Maximum OR","memory":"61.4 MB","code":"class Solution {\n    \n   // 12=101000\n   //    9=1001  \n    \n //    32 16 8 4 2 1\n//     12 =   1 1 0 0\n//      9 =   1 0 0 1\n        \n        \n//    res =     1 1 0 1  k\n        \n//         res (~OR 12) OR 12*2  <> (~OR 9) OR 9*2\n        \n//      [9, 12]  => [4, 6]   res +=1 \n//                  [2, 3]   \n//                  [1, 1]   1\n//                  [0, 0]   \n        \n//            // 1 1 1 1 0 = 30\n    \n        \n//          11001 = 25\n//          11110 = 30\n    \n    \n        \n    public long maximumOr(int[] nums, int k) {\n        Arrays.sort(nums);\n        \n        int len = nums.length;\n        \n        int[] prefix = new int[len];\n        int[] suffix = new int[len];\n        \n        \n        int cur =0; \n        for(int i=0; i<len; i++){\n             cur |= nums[i];\n            prefix[i] = cur;\n           \n        }\n        \n        cur =0; \n        for(int i=len-1; i>=0; i--){\n             cur |= nums[i];\n            suffix[i] = cur;\n           \n        }\n        \n        long p = 1<<k;\n        \n//         long max = 0;\n//         for(int i=0; i<len ;i++){\n            \n//             int n = nums[i];\n            \n//             max = Math.max(max , prefix[i]*n*p*suffix[i]);\n//         }\n        \n        \n//         return max;\n        \n           long maxOr = 0;\n        for (int i = 0; i < len; i++) {\n            long or = ((long) nums[i]) * (1L << k) | (i > 0 ? prefix[i-1] : 0) | (i < len-1 ? suffix[i+1] : 0);\n            maxOr = Math.max(maxOr, or);\n        }\n        \n        return maxOr;\n        \n        \n        \n        \n//         int maxLen =0;\n//         HashSet<String> set = new HashSet<>();\n//         for(int n : nums){\n//             String bin = Integer.toBinaryString(n);\n//             if(bin.length()==maxLen)\n//                 set.add(bin);\n//             else if(bin.length()>maxLen){\n//                 set = new HashSet<>();\n//                 set.add(bin);\n//                 maxLen = bin.length();\n//             }\n//         }\n        \n//         int max = 0;\n//         for(String s : set){\n//             max = Math.max(max, Integer.parseInt(s+\"0\",2));\n//         }\n        \n// //         int max = 0;\n// //         int idx = 0;\n// //         int mul = Math.pow(2, k);\n// //         for(int i=0; i<len; i++){\n            \n// //         }\n        \n//         System.out.println(max);\n        \n        \n//         long res = 0;\n//         for(int i=0; i<len&&k>0 ; i++){\n            \n//             while(k>0 && nums[i]==max){\n//                 nums[i]*=2;\n//                 k--;\n//             }\n            \n//             res |= nums[i] ;\n//         }\n        \n        \n//         for(int i=len-1; i>=0 && k>0; i--){\n            \n//             long tmp = res;\n            \n//             int n = nums[i];\n            \n//             if()\n            \n            \n//             nums[len-1] *=2;\n//             k--;\n//         }\n        \n        \n        \n        // return res;\n        \n    }\n}","compare_resulttitle_slug":"maximum-or","has_notes":false,"flag_type":1}