{"id":1154220828,"question_id":547,"lang":"java","lang_name":"Java","time":"4 months, 3 weeks","timestamp":1705983252,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1154220828/","is_pending":"Not Pending","title":"Number of Provinces","memory":"47.9 MB","code":"class Solution {\n    public int findCircleNum(int[][] isConnected) {\n        int n = isConnected.length;\n        \n        int[] parent = new int[n];\n        for(int i=0; i<n; i++){\n            parent[i] = i;\n        }\n        \n        for(int i=0; i<n; i++){\n            for(int j=i+1; j<n; j++){\n                if(isConnected[i][j]==1 && find(parent, i)!=find(parent, j)){\n                    union(parent, i, j);\n                }\n            }\n        }\n        \n        int res = 0;\n        for(int i=0; i<n; i++){\n            if(parent[i]==i)\n                res++;\n        }\n        \n        return res;\n    }\n    \n    private void union(int[] parent, int a, int b){\n        a = find(parent, a);\n        b = find(parent, b);\n        \n        if(a==b) return ;\n        \n        if(a<b){\n            parent[b] = a;\n        }else \n            parent[a] = b;\n    }\n    \n    private int find(int[] parent, int x){\n        \n        if(parent[x]!=x){\n            return find(parent, parent[x]);\n        }\n        \n        return parent[x];\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"number-of-provinces","has_notes":false,"flag_type":1}