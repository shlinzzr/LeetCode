{"id":903355189,"question_id":547,"lang":"java","lang_name":"Java","time":"1 year, 3 months","timestamp":1677133918,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/903355189/","is_pending":"Not Pending","title":"Number of Provinces","memory":"54.3 MB","code":"class Solution {\n    public int findCircleNum(int[][] isConnected) {\n        int n = isConnected.length;\n        int provinces = n;\n        int[] parent = new int[n];\n        \n        for(int i=0; i<n; i++) parent[i]=i;\n        \n        \n        \n        int[] weight = new int[n];\n        Arrays.fill(weight, 1);\n        \n        for(int i=0; i<n; i++){\n            for(int j=i+1; j<n; j++){\n                \n                if(isConnected[i][j]==1){\n                    \n                    int root = find(parent, i);\n                    int node = find(parent, j);\n                    \n                    if(root!=node){\n                        \n                        weight[root] += weight[node];\n                        parent[node] = root;\n                        provinces--;\n                    }\n                }\n            }\n        }\n        \n        return provinces;\n        \n        \n    }\n    \n    private int find(int[] parent, int x){\n        if(parent[x]==x)\n            return x;\n        \n        parent[x] = find(parent, parent[x]);\n        return parent[x];\n        \n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"number-of-provinces","has_notes":false,"flag_type":1}