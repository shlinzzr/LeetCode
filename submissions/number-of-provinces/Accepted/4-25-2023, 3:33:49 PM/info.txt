{"id":939380796,"question_id":547,"lang":"java","lang_name":"Java","time":"1 year, 1 month","timestamp":1682408029,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/939380796/","is_pending":"Not Pending","title":"Number of Provinces","memory":"43.7 MB","code":"class Solution {\n    public int findCircleNum(int[][] isConnected) {\n        int len = isConnected.length;\n        \n        UnionFind uf = new UnionFind(len);\n        int res =len;\n        for(int i=0; i<len; i++){\n            \n            int[] row = isConnected[i];\n            for(int j=i+1; j<len; j++){\n                \n                if(isConnected[i][j]==1){\n                    \n                    int root = uf.find(i);\n                    int node = uf.find(j);\n                    \n                    if(root!=node){\n                        \n                        uf.parent[node] = root;\n                        res--;\n                    }\n                }\n            }\n        }\n        \n        return res;\n            \n            \n        \n        \n        \n    }\n    \n    \n    \n    class UnionFind{\n        \n        \n        int[] parent;\n        int[] weight;\n        \n        public UnionFind(int n){\n            \n            parent = new int[n];\n            weight = new int[n];\n            \n            for(int i=0; i<n; i++)\n                parent[i]=i;\n        }\n        \n        \n        public int find(int x){\n            if(parent[x] ==x)\n                return x;\n            \n            parent[x] = find(parent[x]);\n            return parent[x];\n        }\n        \n        \n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"number-of-provinces","has_notes":false,"flag_type":1}