{"id":1252568267,"question_id":1171,"lang":"java","lang_name":"Java","time":"1Â month","timestamp":1715165337,"status":10,"status_display":"Accepted","runtime":"18 ms","url":"/submissions/detail/1252568267/","is_pending":"Not Pending","title":"Shortest Path in Binary Matrix","memory":"45.2 MB","code":"class Solution {\n    public int shortestPathBinaryMatrix(int[][] grid) {\n        int n = grid.length;\n        \n        if(grid[0][0]==1 || grid[n-1][n-1]==1)\n            return -1;\n        \n        if(n==1)\n            return 1;\n        \n        \n        Queue<int[]> q = new LinkedList<>();\n        boolean[][] bool = new boolean[n][n];\n        bool[0][0]=true;\n        q.offer(new int[]{0,0});\n        \n        int[][] dirs = new int[][]{{0,1},{1,0}, {-1, 0}, {0, -1}, {1,1}, {-1,-1},{1,-1},{-1,1}};\n        \n        int step=1;\n        \n        while(!q.isEmpty()){\n            \n            for(int i =q.size(); i>0; i--){\n                \n                int[] p = q.poll();\n                \n                for(int[] d : dirs){\n                    int r = d[0]+p[0];\n                    int c = d[1]+p[1];\n                    \n                    if(r<0 || c<0 || r>=n || c>=n || bool[r][c] || grid[r][c]==1)\n                        continue;\n                    \n                    if(r==n-1 && c==n-1)\n                        return step+1;\n                    \n                    \n                    bool[r][c]=true;\n                    q.offer(new int[]{r,c});\n                    \n                }\n            }\n            step++;\n        }\n        \n        return -1;\n    \n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"shortest-path-in-binary-matrix","has_notes":false,"flag_type":1}