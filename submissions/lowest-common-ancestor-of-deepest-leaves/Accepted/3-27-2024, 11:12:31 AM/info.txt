{"id":1215004854,"question_id":1218,"lang":"java","lang_name":"Java","time":"2 months, 2 weeks","timestamp":1711509151,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1215004854/","is_pending":"Not Pending","title":"Lowest Common Ancestor of Deepest Leaves","memory":"44.1 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n\n    int maxDepth= 0;\n    int maxCnt;\n    TreeNode res;\n    public TreeNode lcaDeepestLeaves(TreeNode root) {\n\n        dfs(root, 0);\n        dfs2(root, 0);\n        return res;\n        \n    }\n\n    private void dfs(TreeNode node, int lv){\n        if(node==null) return;\n        if(node.left==null && node.right==null){\n            if(lv>maxDepth){\n                maxDepth = lv; \n                maxCnt=1;\n            }else if(lv==maxDepth){\n                maxCnt++;\n            }\n        }\n\n        dfs(node.left, lv+1);\n        dfs(node.right, lv+1);\n\n    }\n\n\n    private int dfs2(TreeNode node, int lv){\n        if(node==null) return 0;\n\n        int self = lv==maxDepth ? 1 : 0;\n\n        int left = dfs2(node.left, lv+1);\n        int right = dfs2(node.right, lv+1);\n        if(left+right+self==maxCnt && res==null)\n            res = node;\n\n        return left+right+self;\n    }\n\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"lowest-common-ancestor-of-deepest-leaves","has_notes":false,"flag_type":1}