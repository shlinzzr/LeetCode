{"id":1272000013,"question_id":1218,"lang":"java","lang_name":"Java","time":"1 week, 6 days","timestamp":1717042606,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1272000013/","is_pending":"Not Pending","title":"Lowest Common Ancestor of Deepest Leaves","memory":"44.1 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n\n    int max = 0;\n    List<TreeNode> leaves = new ArrayList<>();\n    public TreeNode lcaDeepestLeaves(TreeNode root) {\n\n\n        getDepth(root, 0);\n\n\n        return helper(root);\n    }\n\n    private TreeNode helper(TreeNode node){\n\n        if(node==null) return null;\n\n        for(TreeNode leaf : leaves){\n            if(leaf.val==node.val) return node;\n        }\n\n        TreeNode left = helper(node.left);\n        TreeNode right = helper(node.right);\n\n        if(left!=null && right!=null) return node;\n\n        return left!=null ? left : right; \n    }\n\n    private void getDepth(TreeNode node, int d){\n\n        if(node==null) return;\n\n        if(node.left==null && node.right==null){\n            if(d>max){\n                max = d;\n                leaves = new ArrayList<>();\n            }\n            \n            if(d>=max){\n                leaves.add(node);\n            }\n        }\n\n        getDepth(node.left, d+1);\n        getDepth(node.right, d+1);\n\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"lowest-common-ancestor-of-deepest-leaves","has_notes":false,"flag_type":1}