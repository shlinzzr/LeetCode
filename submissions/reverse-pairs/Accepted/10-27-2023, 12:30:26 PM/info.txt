{"id":1085094820,"question_id":493,"lang":"java","lang_name":"Java","time":"7 months, 2 weeks","timestamp":1698381026,"status":10,"status_display":"Accepted","runtime":"545 ms","url":"/submissions/detail/1085094820/","is_pending":"Not Pending","title":"Reverse Pairs","memory":"54.2 MB","code":"class Solution {\n    public int reversePairs(int[] nums) {\n        // int len = nums.length;\n\n        // int cnt =0 ;\n        // // bruteforce\n        // for(int j=0; j<len; j++){\n        //     for(int i=0; i<j; i++){\n        //         if((long)nums[i] > (long)2 * nums[j]){\n        //             cnt++;\n        //         }\n\n        //     }\n        // }\n        // return cnt;\n        int res = mergeSort(nums, 0, nums.length-1);\n\n        for(int n: nums){\n            System.out.println(n);\n        }\n        return res;\n    }\n\n\n    private int mergeSort(int[] nums, int lo, int hi){\n        if(lo>=hi) return 0;\n        int mid = lo + (hi-lo)/2;\n        int res = 0;\n        res += mergeSort(nums, lo, mid);\n        res +=mergeSort(nums, mid+1, hi);\n        res +=mergeHalves(nums, lo, mid, mid+1, hi);\n        return res;\n    }\n    \n    \n    private  int mergeHalves(int[] nums, int lo, int loEnd, int hi, int hiEnd){\n        \n        int cnt =0;\n        int loIdx = lo, hiIdx=hi;\n        int len = hiEnd-lo+1;\n        int[] sorted = new int[len];\n        int idx =0;\n\n         int p = lo, q = hi;\n        while (p <= loEnd && q <= hiEnd) {\n            if ((long) nums[p] > 2 * (long) nums[q]) {\n                cnt += loEnd - p + 1;\n                q++;\n            } else {\n                p++;\n            }\n        }\n        \n\n        while(loIdx<=loEnd && hiIdx<=hiEnd){\n            if(nums[loIdx]<=nums[hiIdx]){\n                sorted[idx++] = nums[loIdx++];\n            }else{\n                sorted[idx++] = nums[hiIdx++];        \n            }\n        }\n        \n        while(loIdx<=loEnd){\n            sorted[idx++] = nums[loIdx++];\n        }\n        \n        while(hiIdx<=hiEnd){\n            sorted[idx++] = nums[hiIdx++];\n        }\n        \n        System.arraycopy(sorted, 0, nums, lo, len);\n        return cnt;\n    }\n    \n\n\n    private int mergeSort2(int[] nums, int st, int ed){\n        if(st>=ed) return 0;\n\n        int mid = st+(ed-st)/2;\n\n        int res = 0;\n        res += mergeSort2(nums, st, mid);\n        res += mergeSort2(nums, mid+1, ed);\n        res += mergeHalves2(nums, st, mid, mid+1, ed);\n        return res;\n    }\n\n    private int mergeHalves2(int[]nums, int lo, int loEnd, int hi, int hiEnd){\n\n        int cnt =0;\n\n        int loIdx = lo, hiIdx=hi;\n        int len = hiEnd-lo+1;\n        int[] tmp = new int[len];\n        int idx= 0 ;\n        \n\n        int p = lo, q = hi;\n        while (p <= loEnd && q <= hiEnd) {\n            if ((long) nums[p] > 2 * (long) nums[q]) {\n                cnt += loEnd - p + 1;\n                q++;\n            } else {\n                p++;\n            }\n        }\n        \n        while(loIdx<loEnd && hiIdx<hiEnd){\n\n            if(nums[loIdx]<=nums[hiIdx]){\n                tmp[idx++] = nums[loIdx++];\n            }else{\n                tmp[idx++] = nums[hiIdx++];\n            }\n        }\n\n        while(loIdx<loEnd){\n            tmp[idx++] = nums[loIdx++];\n        }\n\n        while(hiIdx<hiEnd){\n            tmp[idx++] = nums[hiIdx++];\n        }\n\n        System.arraycopy(tmp, 0, nums, lo, len);\n\n        return cnt;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"reverse-pairs","has_notes":false,"flag_type":1}