{"id":1237895185,"question_id":3404,"lang":"java","lang_name":"Java","time":"1 month, 3 weeks","timestamp":1713671937,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1237895185/","is_pending":"Not Pending","title":"Minimum Number of Operations to Satisfy Conditions","memory":"N/A","code":"class Solution {\n    public int minimumOperations(int[][] grid) {\n        \n        int h = grid.length;\n        int w = grid[0].length;\n        \n         \n        int[] cost = new int[w];\n        int[][] color = new int[w][2];\n        \n        Map<Integer , Integer>[] map = new HashMap[w]; \n        \n        \n        for(int j=0; j<w; j++){\n            map[j] = new HashMap<>();\n            \n            \n            int top1 = 0;\n            int top2 = 0;\n            \n            \n            for(int i=0; i<h; i++){\n                \n                int c = grid[i][j];\n                \n                map[j].put(c, map[j].getOrDefault(c, 0)+1);\n                \n                if(map[j].get(c)>top1){\n                    top2 = top1;\n                    top1 = c;\n                    \n                }else if(map[j].get(c)>top2){\n                    top2 = c;\n                }\n            }\n            \n            color[j] = new int[]{top1, top2};\n        }\n        \n        \n        int res=0;\n        \n        \n        for(int j=w-2; j>=0; j--){\n            \n            if(color[j][0] == color[j+1][0]){\n                \n                if(j>0){\n                    \n                    \n                    boolean check_prev = color[j-1][0]==color[j][0];\n                    \n                    // chage me\n\n                    int cur1 =  h-map[j].get(color[j][1]);\n                    int next1 = h-map[j+1].get(color[j+1][0]);\n                    int prev1 = h-map[j-1].get(color[j-1][0]);\n                    int sum1 = prev1 + cur1 + next1;\n\n                    // change nexxt\n                    int cur2 = h-map[j].get(color[j][0]);\n                    int next2 =h-map[j+1].get(color[j+1][1]);\n                    \n                    \n                    int prev2 = h-map[j-1].get(color[j-1][ check_prev ? 1 : 0]);\n                    int sum2 = prev2 = cur2 + next2;\n                    \n                    \n                    \n                    if(sum1<sum2){\n                        res += next1;\n                        \n                        if(j==w-2)\n                            res+= next1;\n                        \n                    }else{\n                        res += next2;\n                        \n                        if(j==w-2)\n                            res += next2;\n                    }\n                    \n                    \n                }else{\n                    \n                    int cur1 =  h-map[j].get(color[j][1]);\n                    int next1 = h-map[j+1].get(color[j+1][0]);\n                    int sum1 = cur1 + next1;\n                    \n                     int cur2 = h-map[j].get(color[j][0]);\n                    int next2 =h-map[j+1].get(color[j+1][1]);\n                    \n                    int sum2 =  cur2 + next2;\n                    \n                      if(sum1<sum2){\n                        res += next1;\n                      }else{\n                        res += next2;\n                      }\n                    \n                }\n                \n                \n            }else{\n                \n                if(j==w-2)\n                    res+= color[j+1][0];\n                res += color[j][0];\n            }\n            \n        }\n        \n        \n        return res;\n        \n        \n        \n        \n        \n        \n        \n        \n        \n    }\n}","compare_result":"0101111111111000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"minimum-number-of-operations-to-satisfy-conditions","has_notes":false,"flag_type":1}