{"id":1238888337,"question_id":3404,"lang":"java","lang_name":"Java","time":"1 month, 3 weeks","timestamp":1713775794,"status":10,"status_display":"Accepted","runtime":"59 ms","url":"/submissions/detail/1238888337/","is_pending":"Not Pending","title":"Minimum Number of Operations to Satisfy Conditions","memory":"145.7 MB","code":"class Solution {\n    public int minimumOperations(int[][] grid) {\n        int h = grid.length;\n        int w = grid[0].length;\n\n        int[][] dp = new int[w][10]; // choose first j col with selecting p as last num;\n\n        // dp[j][p] = Math.min(dp[j][p], dp[j-1][q] + cost with select p where p!=q\n\n        for(int j=0; j<w; j++){\n            Arrays.fill(dp[j], Integer.MAX_VALUE);\n\n            for(int p=0; p<10; p++){\n                \n                int cost = 0;\n                for(int i=0;i<h; i++){\n                    cost += (p==grid[i][j]) ? 0 : 1;\n                }\n\n                if(j==0){\n                    dp[j][p] = cost;\n                }else{\n                    for(int q =0; q<10; q++){\n                        if(p==q) continue;\n\n                        dp[j][p] = Math.min(dp[j][p], dp[j-1][q]+ cost);\n                    }   \n                }\n            }\n        }\n\n        int min = Integer.MAX_VALUE;\n        for(int p=0; p<10; p++){\n            min = Math.min (dp[w-1][p], min); \n        }\n        return min;\n\n\n        // int[][] cost = new int[w][10];\n        // for(int j=0; j<w; j++){\n        //     int[] cnt = new int[10];\n        //     for(int i = 0; i < h; i++) {\n        //         cnt[grid[i][j]]++;\n        //     }\n        //     for(int k = 0; k < 10; k++) {\n        //         cost[j][k] = h-cnt[k];\n        //     }\n        // }\n\n\n        // int[][] dp = new int[w][10];\n        // for(int k=0; k<10; k++) dp[0][k] = cost[0][k];\n\n        // for(int j=1; j<w; j++) {\n        //     for(int p = 0; p < 10; p++) { // prev 0~9\n        //         int min = 1000000;\n        //         for(int q = 0; q < 10; q++) { // next 0~9\n        //             if(p!=q) min = Math.min(min, dp[j-1][q]); //前一個最小的cost\n        //         }\n        //         dp[j][p] = min + cost[j][p];\n        //     }\n        // }\n        // int ans = Integer.MAX_VALUE;\n        // for(int k=0; k<10; k++) ans = Math.min(ans, dpp[w-1][k]);\n        \n        // return ans;\n    }\n}","compare_resulttitle_slug":"minimum-number-of-operations-to-satisfy-conditions","has_notes":false,"flag_type":1}