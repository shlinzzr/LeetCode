{"id":770983473,"question_id":47,"lang":"java","lang_name":"Java","time":"1 year, 10 months","timestamp":1660213541,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/770983473/","is_pending":"Not Pending","title":"Permutations II","memory":"47.4 MB","code":"class Solution {\n    public List<List<Integer>> permuteUnique(int[] nums) {\n        \n        List<List<Integer>> res = new ArrayList<>();\n        boolean[] used = new boolean[nums.length];\n        Arrays.sort(nums);\n        \n        backtrack(res, nums, new ArrayList<>(), used);\n        \n        \n        return res;\n    }\n    \n    private void backtrack(List<List<Integer>> res, int[] nums, List<Integer> list, boolean[] used){\n        \n        if(list.size()==nums.length){\n            res.add(new ArrayList<>(list));\n        }\n        \n        for(int i=0; i<nums.length; i++){\n            \n            if(used[i])\n                continue;\n            \n            if(i>0 && nums[i-1]==nums[i] && used[i-1]==false)\n               continue;\n            \n            list.add(nums[i]);\n            used[i]=true;\n            backtrack(res, nums, list, used);\n            used[i]=false;\n            list.remove(list.size()-1);\n                \n                \n            \n        }\n        \n    }\n    \n    \n}","compare_result":"111111111111111111111111111111111","title_slug":"permutations-ii","has_notes":false,"flag_type":1}