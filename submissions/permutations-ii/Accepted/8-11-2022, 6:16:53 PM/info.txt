{"id":770978906,"question_id":47,"lang":"java","lang_name":"Java","time":"1 year, 10 months","timestamp":1660213013,"status":10,"status_display":"Accepted","runtime":"74 ms","url":"/submissions/detail/770978906/","is_pending":"Not Pending","title":"Permutations II","memory":"54.2 MB","code":"class Solution {\n    public List<List<Integer>> permuteUnique(int[] nums) {\n        boolean[] used = new boolean[nums.length];\n        \n        Set<List<Integer>> set = new HashSet<>();\n        backtrack(set, nums, new ArrayList<>(), used, 0);\n        \n        \n        return new ArrayList<>(set);\n    }\n    \n    private void backtrack(Set<List<Integer>> res, int[] nums, List<Integer> list, boolean[] used, int start){\n        \n        if(list.size()==nums.length){\n            res.add(new ArrayList<>(list));\n        }\n        \n        for(int i=0; i<nums.length; i++){\n            \n            if(used[i]==false){\n                \n                list.add(nums[i]);\n                used[i]=true;\n                backtrack(res, nums, list, used, start);\n                used[i]=false;\n                list.remove(list.size()-1);\n                \n            }\n                \n            \n        }\n        \n    }\n    \n    \n}","compare_result":"111111111111111111111111111111111","title_slug":"permutations-ii","has_notes":false,"flag_type":1}