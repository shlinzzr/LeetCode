{"id":770981661,"question_id":47,"lang":"java","lang_name":"Java","time":"1 year, 10 months","timestamp":1660213329,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/770981661/","is_pending":"Not Pending","title":"Permutations II","memory":"N/A","code":"class Solution {\n    public List<List<Integer>> permuteUnique(int[] nums) {\n        boolean[] used = new boolean[nums.length];\n        \n        List<List<Integer>> res = new ArrayList<>();\n        backtrack(res, nums, new ArrayList<>(), used);\n        \n        \n        return res;\n    }\n    \n    private void backtrack(List<List<Integer>> res, int[] nums, List<Integer> list, boolean[] used){\n        \n        if(list.size()==nums.length){\n            res.add(new ArrayList<>(list));\n        }\n        \n        for(int i=0; i<nums.length; i++){\n            \n            if(used[i])\n                continue;\n            \n           if(i>0 && nums[i-1]==nums[i] && used[i-1]==true)\n               continue;\n            \n            // if(used[i]==false){\n                list.add(nums[i]);\n                used[i]=true;\n                backtrack(res, nums, list, used);\n                used[i]=false;\n                list.remove(list.size()-1);\n                \n            // }\n                \n            \n        }\n        \n    }\n    \n    \n}","compare_result":"111111011000011111100001100010000","title_slug":"permutations-ii","has_notes":false,"flag_type":1}