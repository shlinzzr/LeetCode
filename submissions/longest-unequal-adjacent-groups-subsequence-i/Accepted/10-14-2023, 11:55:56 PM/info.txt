{"id":1075100344,"question_id":3143,"lang":"java","lang_name":"Java","time":"8Â months","timestamp":1697298956,"status":10,"status_display":"Accepted","runtime":"5 ms","url":"/submissions/detail/1075100344/","is_pending":"Not Pending","title":"Longest Unequal Adjacent Groups Subsequence I","memory":"44.5 MB","code":"class Solution {\n    public List<String> getWordsInLongestSubsequence(int n, String[] words, int[] groups) {\n        \n        \n        List<String> res =new ArrayList<>();\n        \n        for(int st=0; st<n; st++){\n            List<Integer> list = new ArrayList<>();\n            for(int j=st; j<n; j++){\n                if(list.isEmpty() || groups[list.get(list.size()-1)]!=groups[j]){\n                    list.add(j);\n                }\n            }\n            \n            if(list.size()>res.size()){\n                \n                for(int idx : list){\n                    res.add(words[idx]);\n                }\n                \n            }\n            \n        }\n        \n        return res;\n        \n        \n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-unequal-adjacent-groups-subsequence-i","has_notes":false,"flag_type":1}