{"id":1225405722,"question_id":3348,"lang":"java","lang_name":"Java","time":"2Â months","timestamp":1712461922,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1225405722/","is_pending":"Not Pending","title":"Minimum Cost Walk in Weighted Graph","memory":"N/A","code":"class Solution {\n    \n    \n    int[]parent;\n    \n    \n    \n    public int[] minimumCost(int n, int[][] edges, int[][] query) {\n        \n        parent = new int[n];\n        for(int i=0; i<n ; i++)\n            parent[i]=i;\n        \n        \n        \n        int len = query.length;\n        \n        int[] res = new int[len];\n        \n        Map<Integer, Map<Integer, Integer>> g = new HashMap<>();\n        \n        for(int[] e : edges){\n            \n            int u = e[0];\n            int v = e[1];\n            int w = e[2];\n            \n            if(find(u)!=find(v)){\n                union(u, v);\n            }\n            \n            \n            \n            g.putIfAbsent(u, new HashMap<>());\n            g.get(u).put(v, w);\n              \n            g.putIfAbsent(v, new HashMap<>());\n            g.get(v).put(u, w);\n        }\n        \n        \n        for(int i=0; i<len; i++){\n            int[] q = query[i];\n            \n            int a = q[0];\n            int b = q[1];\n            \n            if(find(a)!=find(b)){\n                 res[i]= -1;\n                continue;\n            }\n            \n            \n            res[i] = dfs(g, a, b);\n               \n        }\n        \n        return res;\n    }\n    \n    \n    private int dfs( Map<Integer, Map<Integer, Integer>> g, int a, int b){\n        \n        \n        Map<Integer, Integer> seen = new HashMap<>();\n        \n        Queue<int[]> q = new LinkedList<>();\n        \n        q.offer(new int[]{a, Integer.MAX_VALUE});\n        \n        while(!q.isEmpty()){\n            \n            int[] p = q.poll();\n            int cur = p[0];\n            int w = p[1];\n            \n            \n            Map<Integer, Integer> adjs = g.get(cur);\n            for(int k : adjs.keySet()){\n                \n              \n                \n                int ww = w & adjs.get(k);\n                \n                  // System.out.println(a+ \" \" + k + \" \"+w + \" \" + ww);\n                \n                if(!seen.containsKey(k) || seen.get(k)>ww){\n                    seen.put(k, ww);\n                    q.offer(new int[]{k, ww});\n                }\n                \n            }\n            \n        }\n        \n        \n        return seen.get(b);\n        \n         \n        \n    }\n    \n    \n    private int find(int x){\n        if(parent[x]!=x){\n            parent[x] = find(parent[x]);\n        }\n        \n        return parent[x];\n    }\n    \n    private void union(int a, int b){\n        a = find(a);\n        b = find(b);\n        \n        if(a<b){\n            parent[b] = a;\n        }else if(b<a){\n            parent[a] = b;\n        }\n    }\n    \n    \n    \n}","compare_resulttitle_slug":"minimum-cost-walk-in-weighted-graph","has_notes":false,"flag_type":1}