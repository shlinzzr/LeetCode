{"id":941570596,"question_id":1815,"lang":"java","lang_name":"Java","time":"1 year, 1 month","timestamp":1682778445,"status":10,"status_display":"Accepted","runtime":"103 ms","url":"/submissions/detail/941570596/","is_pending":"Not Pending","title":"Checking Existence of Edge Length Limited Paths","memory":"73.4 MB","code":"class Solution {\n    public boolean[] distanceLimitedPathsExist(int n, int[][] edgeList, int[][] queries) {\n        int M = edgeList.length, N = queries.length;\n        \n        UnionFind uf = new UnionFind(n);\n        \n        for (int i = 0; i < queries.length; i++) \n            queries[i] = new int[]{queries[i][0], queries[i][1], queries[i][2], i}; \n        \n        Arrays.sort(queries, (a, b) -> a[2] - b[2]);\n        Arrays.sort(edgeList, (a, b) -> a[2] - b[2]);\n        boolean[] res = new boolean[N];\n        \n        for (int i = 0, j = 0; i < N; i++) {\n            int[] query = queries[i];\n            while (j < edgeList.length && edgeList[j][2] < queries[i][2])\n                uf.union(edgeList[j][0], edgeList[j++][1]);\n            \n            res[queries[i][3]] = uf.find(queries[i][0]) == uf.find(queries[i][1]);\n        }\n        return res;\n    }\n}\n\nclass UnionFind {\n    int[] parent;\n    public UnionFind(int N) {\n        this.parent = new int[N];\n        for (int i = 0; i < N; i++) parent[i] = i;\n    }\n    public int find(int x) {\n        if (parent[x] != x) parent[x] = find(parent[x]);\n        return parent[x];\n    }\n    public void union(int x, int y) {\n        parent[find(x)] = parent[find(y)];\n    }\n}","compare_result":"11111111111111111111111","title_slug":"checking-existence-of-edge-length-limited-paths","has_notes":false,"flag_type":1}