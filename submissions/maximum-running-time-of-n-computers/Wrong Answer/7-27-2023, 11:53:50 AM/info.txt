{"id":1004990723,"question_id":2263,"lang":"java","lang_name":"Java","time":"10 months, 3 weeks","timestamp":1690430030,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1004990723/","is_pending":"Not Pending","title":"Maximum Running Time of N Computers","memory":"N/A","code":"class Solution {\n    public long maxRunTime(int n, int[] batteries) {\n       \n        Arrays.sort(batteries);\n        \n        int max = 0;\n        \n        for(int b : batteries){\n            max = Math.max(max, b);\n        }\n        \n        long st=0, ed=Integer.MAX_VALUE/n;\n        \n        while(st<ed){\n            long mid = st+(ed-st+1)/2, minutes=0;\n            System.out.println(st + \" \" + ed + \" \" + mid);\n            if(isOk(batteries, mid, n)){\n                st = mid;\n            }else{\n                ed = mid-1;\n            }\n        }\n        \n        System.out.println(st);\n        \n        if(isOk(batteries, st, n)){\n            return st;\n        }else if(isOk(batteries, st-1, n))\n            return st-1;\n        \n//         long minutes = 0;\n        \n//         for (int b : batteries)\n//                 minutes += Math.min((long)b, st+1);\n//         if(minutes>=n*(st+1))\n//             return st+1;\n        \n        \n        return st;\n        \n        \n    }\n    \n    private boolean isOk(int[] batteries, long mid, int n){\n        \n        long sum=0;\n        \n        for(int b : batteries){\n            sum += Math.min(mid, b);\n            if(sum>=mid*n)\n                return true;\n        }\n        return false;\n    }\n    \n    \n    \n}","compare_result":"1111111111111111111111111100000000110111111111111111","title_slug":"maximum-running-time-of-n-computers","has_notes":false,"flag_type":1}