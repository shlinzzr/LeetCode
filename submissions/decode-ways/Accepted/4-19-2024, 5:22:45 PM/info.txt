{"id":1236443775,"question_id":91,"lang":"java","lang_name":"Java","time":"1 month, 3 weeks","timestamp":1713518565,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/1236443775/","is_pending":"Not Pending","title":"Decode Ways","memory":"40.9 MB","code":"class Solution {\n\n    Map<Integer, Integer> memo = new HashMap<>();\n\n    public int numDecodings(String s) {\n        int len = s.length();\n        int[] dp = new int[len+1]; // 用到第幾個digit的時候的組合數\n\n        dp[0] = 1; \n        //這邊補1是指說 如果之後被用上了like dp = dp[i-1]+ \"dp[i-2]\", \n        //dp[0]此時代表的是s.charAt(0)可以跟s.charAt(1)湊成一個數字<=26, 組合數是1\n        dp[1] = s.charAt(0)=='0' ? 0 : 1; //如果第1個digit是'0' 表示完全沒得搞 組合數是０\n        for(int i=2; i<=len; i++){ \n\n            if(s.charAt(i-1)!='0')\n                dp[i]+=dp[i-1]; //累積的組合數量從上一輪來\n            \n            // 檢查一下 dp[2] check prev = s.charAt(0)+s.charAt(1)\n            String prev = s.substring(i-2, i);\n            int val = Integer.parseInt(prev);\n             if(s.charAt(i-2)!='0' && val<=26 && val>0 ){\n                dp[i]+= dp[i-2];\n            }   \n        }\n\n        return dp[len];\n\n        // return recur(0, s);\n    }\n    \n    private int recur(int idx, String str) {\n        // Have we already seen this substring?\n        if (memo.containsKey(idx)) {\n            return memo.get(idx);\n        }\n        \n        // If you reach the end of the string\n        // Return 1 for success.\n        if (idx == str.length()) {\n            return 1;\n        }\n\n        // If the string starts with a zero, it can't be decoded\n        if (str.charAt(idx) == '0') {\n            return 0;\n        }\n\n        if (idx == str.length() - 1) {\n            return 1;\n        }\n\n\n        int ans = recur(idx + 1, str);\n        if (Integer.parseInt(str.substring(idx, idx + 2)) <= 26) {\n             ans += recur(idx + 2, str);\n         }\n\n        // Save for memoization\n        memo.put(idx, ans);\n\n        return ans;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"decode-ways","has_notes":false,"flag_type":1}