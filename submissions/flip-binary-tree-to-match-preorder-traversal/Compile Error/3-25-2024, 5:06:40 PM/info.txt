{"id":1213324378,"question_id":1011,"lang":"java","lang_name":"Java","time":"2 months, 2 weeks","timestamp":1711357600,"status":20,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/1213324378/","is_pending":"Not Pending","title":"Flip Binary Tree To Match Preorder Traversal","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n\n    Map<Integer, Integer> map = new HashMap<>();\n    public List<Integer> flipMatchVoyage(TreeNode root, int[] voyage) {\n        List<Integer> res = new ArrayList<>();\n\n        for(int i=0; i<voyage.length; i++){\n            map.put(voyage[i], i);\n        }\n\n        helper(res, root, voyage, 0);\n\n        if(res.isEmpty()) res.add(-1);\n\n        return res;\n    }\n\n    private void helper(List<Integer> res, TreeNode root, int[] v, int idx){\n\n        if(root==null) return;\n\n        if(root.val!=v[idx]) return;\n\n        if(root.left!=null && root.right!=null){\n            int leftVal = root.left.val;\n            int leftIdx = map.get(leftVal);\n            int rightVal = root.right.val;\n            int rightIdx = map.get(rightVal);\n\n            if(rightVal==v[idx+1]){\n                res.add(idx+1);\n                helper(res, root.)\n            }\n        }\n\n\n\n\n\n\n    }\n}\n","compare_result":null,"title_slug":"flip-binary-tree-to-match-preorder-traversal","has_notes":false,"flag_type":1}