{"id":1005825521,"question_id":594,"lang":"java","lang_name":"Java","time":"10 months, 2 weeks","timestamp":1690516230,"status":10,"status_display":"Accepted","runtime":"60 ms","url":"/submissions/detail/1005825521/","is_pending":"Not Pending","title":"Longest Harmonious Subsequence","memory":"44.5 MB","code":"class Solution {\n    public int findLHS(int[] nums) {\n        \n        // TreeMap\n        \n        TreeMap<Integer, Integer> map = new TreeMap<>();\n        \n        for(int n : nums){\n            map.put(n , map.getOrDefault(n, 0)+1);\n        }\n        \n        List<Integer> list = new ArrayList<>(map.keySet());\n        \n        int max = 0;\n        \n        for(int i=0; i<list.size()-1; i++){\n            \n            int cur = list.get(i);\n            int nxt = list.get(i+1);\n            \n            if(cur+1!=nxt)\n                continue;\n            \n            max = Math.max(max, map.get(cur)+map.get(nxt));\n        }\n        \n        return max;\n        \n        \n        \n        \n        \n        \n//         Arrays.sort(nums);\n//         HashMap<Integer, Integer> map = new HashMap<>();\n//         int len = nums.length;\n//         int max = 0;\n//         for(int i=0; i<len; i++){\n//             int n = nums[i];\n//             if(map.containsKey(n+1)){\n//                 max = Math.max(max, i-map.get(n+1)+1);\n//             }\n            \n//             if(map.containsKey(n-1)){\n//                 max = Math.max(max, i-map.get(n-1)+1);\n//             }\n//             if(!map.containsKey(n))\n//                 map.put(n, i);\n//         }\n//         return max;\n        \n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-harmonious-subsequence","has_notes":false,"flag_type":1}