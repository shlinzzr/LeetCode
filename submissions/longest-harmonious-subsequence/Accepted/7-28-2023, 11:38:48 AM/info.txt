{"id":1005820026,"question_id":594,"lang":"java","lang_name":"Java","time":"10 months, 2 weeks","timestamp":1690515528,"status":10,"status_display":"Accepted","runtime":"27 ms","url":"/submissions/detail/1005820026/","is_pending":"Not Pending","title":"Longest Harmonious Subsequence","memory":"44.7 MB","code":"class Solution {\n    public int findLHS(int[] nums) {\n        \n        Arrays.sort(nums);\n        \n        HashMap<Integer, Integer> map = new HashMap<>();\n        \n        int len = nums.length;\n        \n        int max = 0;\n        \n        for(int i=0; i<len; i++){\n            \n            int n = nums[i];\n            \n            if(map.containsKey(n+1)){\n                max = Math.max(max, i-map.get(n+1)+1);\n            }\n            \n            if(map.containsKey(n-1)){\n                max = Math.max(max, i-map.get(n-1)+1);\n            }\n            \n            if(!map.containsKey(n))\n                map.put(n, i);\n            \n            \n              // System.out.println(i + \" max=\"+max);\n        }\n        \n      \n        \n        return max;\n        \n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"longest-harmonious-subsequence","has_notes":false,"flag_type":1}