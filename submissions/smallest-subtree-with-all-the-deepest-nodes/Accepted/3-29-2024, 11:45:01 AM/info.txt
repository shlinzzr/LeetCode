{"id":1216937952,"question_id":896,"lang":"java","lang_name":"Java","time":"2 months, 2 weeks","timestamp":1711683901,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1216937952/","is_pending":"Not Pending","title":"Smallest Subtree with all the Deepest Nodes","memory":"41.5 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n\n    \n    int maxDepth = 0;\n    int maxCnt=0;\n    TreeNode res;\n    Map<TreeNode, TreeNode> map; //leaf, parent\n    public TreeNode subtreeWithAllDeepest(TreeNode root) {\n\n        map = new HashMap<>();\n        helper(root, 0);\n        helper2(root, 0);\n        return res;\n    }\n\n    private void helper(TreeNode root, int lv){\n        if(root==null) return ;\n\n        if(root.left==null && root.right==null){\n            if(lv>maxDepth){\n                maxDepth = lv;\n                maxCnt=1;\n            }else if(lv==maxDepth){\n                maxCnt++;\n            }\n        }\n\n        \n\n        helper(root.left,lv+1);\n        helper(root.right, lv+1);\n    }\n\n    private int helper2(TreeNode root, int lv){\n\n        if(root==null) return 0;\n\n        int self = lv==maxDepth ? 1 : 0;\n        int left = helper2(root.left, lv+1);\n        int right = helper2(root.right, lv+1);\n\n        if(self + left + right ==maxCnt && res==null){\n            res = root;\n        }\n\n        return self + left + right;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111","title_slug":"smallest-subtree-with-all-the-deepest-nodes","has_notes":false,"flag_type":1}