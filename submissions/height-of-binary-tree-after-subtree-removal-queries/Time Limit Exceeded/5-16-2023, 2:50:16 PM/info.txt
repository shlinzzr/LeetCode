{"id":951259749,"question_id":2545,"lang":"java","lang_name":"Java","time":"1Â year","timestamp":1684219816,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/951259749/","is_pending":"Not Pending","title":"Height of Binary Tree After Subtree Removal Queries","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    \n    List<List<TreeNode>> list;\n    int H=0;\n    \n    public int[] treeQueries(TreeNode root, int[] queries) {\n        int m = queries.length;\n        \n        int[] res = new int[m];\n        \n        for(int i=0; i<m; i++){\n            int q = queries[i];\n            res[i] = getH(root, q)-1;\n        }\n        \n        return res;\n        \n    }\n    \n    private int getH(TreeNode root, int rm){\n        \n        if(root==null || root.val==rm)\n            return 0;\n        \n        \n        int left = getH(root.left, rm);\n        int right = getH(root.right, rm);\n        \n        return Math.max(left, right)+1;\n        \n    }\n    \n}","compare_result":"1111111111111111111111111111111111100000","title_slug":"height-of-binary-tree-after-subtree-removal-queries","has_notes":false,"flag_type":1}