{"id":1246148896,"question_id":988,"lang":"java","lang_name":"Java","time":"1 month, 1 week","timestamp":1714530321,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1246148896/","is_pending":"Not Pending","title":"Flip Equivalent Binary Trees","memory":"40.8 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public boolean flipEquiv(TreeNode root1, TreeNode root2) {\n\n        if(root1==null && root2==null) return true;\n        else if(root1==null || root2==null) return false;\n        else if(root1.val != root2.val) return false;\n\n\n        boolean chg1 = flipEquiv(root1.left, root2.right);\n        boolean chg2 = flipEquiv(root1.right, root2.left);\n\n        boolean same1 = flipEquiv(root1.left, root2.left);\n        boolean same2 = flipEquiv(root1.right, root2.right);\n\n        return (chg1 && chg2) || (same1 && same2);\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"flip-equivalent-binary-trees","has_notes":false,"flag_type":1}