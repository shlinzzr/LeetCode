{"id":1053148733,"question_id":988,"lang":"java","lang_name":"Java","time":"8 months, 4 weeks","timestamp":1695091921,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1053148733/","is_pending":"Not Pending","title":"Flip Equivalent Binary Trees","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public boolean flipEquiv(TreeNode root1, TreeNode root2) {\n        if(root1==null && root2==null)\n            return true;\n\n        if(root1==null || root2==null)\n            return false;\n\n        if(root1.val!=root2.val)\n            return false;\n\n\n        boolean left =true;\n        if(root1.left!=null && root2.right!=null){\n            left = flipEquiv(root1.left, root2.right);\n        }\n\n        boolean right = true;\n        if(root1.right!=null && root2.left!=null){\n            right = flipEquiv(root1.right, root2.left);\n        }\n\n        return (left && right ) || (flipEquiv(root1.left, root2.left) && flipEquiv(root1.right, root2.right)) ;\n\n\n    }\n}","compare_result":"11111111101111110111111011110111111101110011111111111010111101111001010010111","title_slug":"flip-equivalent-binary-trees","has_notes":false,"flag_type":1}