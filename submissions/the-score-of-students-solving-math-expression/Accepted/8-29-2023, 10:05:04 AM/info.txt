{"id":1034617276,"question_id":2147,"lang":"java","lang_name":"Java","time":"9 months, 2 weeks","timestamp":1693274704,"status":10,"status_display":"Accepted","runtime":"336 ms","url":"/submissions/detail/1034617276/","is_pending":"Not Pending","title":"The Score of Students Solving Math Expression","memory":"46.5 MB","code":"class Solution {\n    public int scoreOfStudents(String s, int[] answers) {\n        StringBuilder numbers = new StringBuilder();\n        StringBuilder operators = new StringBuilder();\n        int len = s.length();\n        \n        for(int idx = 0;idx<len;idx++){\n            char ch = s.charAt(idx);\n            if(ch=='+'||ch=='*') operators.append(ch);\n            else numbers.append(ch);\n        }\n        \n        len = numbers.length();\n        \n        // init dp \n        HashSet<Integer>[][] dp = new HashSet[len][len]; \n        for(int row =0; row<len; row++){\n            for(int col=0; col<len; col++){\n                dp[row][col] = new HashSet();  \n            } \n        }\n        \n        //dp[start][end] is a HashSet, which stores all the possible values of the    \n        //expression from index start to end \n        \n        for(int gap=0; gap<numbers.length(); gap++){ // gap between start and end\n            for(int start=0 , end=gap; end<numbers.length(); start++,end++){\n                if(gap==0){\n                    dp[start][end].add(numbers.charAt(start)-'0');\n                }else{\n                    for(int operatorIdx=start; operatorIdx<end; operatorIdx++){\n                        HashSet<Integer> leftSet = dp[start][operatorIdx];\n                        HashSet<Integer> rightSet = dp[operatorIdx+1][end];\n                        char operator = operators.charAt(operatorIdx);\n                        // cross left and right evaluations and \n                        // evaluate current expression\n                        for(int leftEval : leftSet){\n                            for(int rightEval : rightSet){\n                                 if(operator=='+'){\n                                     int eval = leftEval+rightEval; \n                                     // answer belongs in [0,1000] (constraints)\n                                     // pruning it \n                                     if(eval>1000) continue; \n                                     dp[start][end].add(eval);\n                                 }else if(operator=='*'){\n                                     int eval = leftEval*rightEval; \n                                     if(eval>1000) continue; \n                                     dp[start][end].add(eval);\n                                 }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        // all evaluations are in dp[0][n-1]\n        HashSet<Integer> evaluations = dp[0][len - 1];\n        \n        int correctAns = leetcode227calculate(s);\n        \n        int totalScore =0;\n        for(int answer : answers){\n            if(answer==correctAns) totalScore+=5;\n            else if(evaluations.contains(answer)) totalScore+=2;\n        }\n        \n        return totalScore;\n    }\n    \n    private List<Integer> leetcode241(String s){\n        \n        List<Integer> res = new ArrayList<>();\n        int len = s.length();\n        for(int i=0; i<len; i++){\n            \n            char ch = s.charAt(i);\n\n            if(ch=='+' || ch=='*'){\n                \n                List<Integer> lista = leetcode241(s.substring(0, i));\n                List<Integer> listb = leetcode241(s.substring(i+1, len));\n                \n                \n                for(int a : lista){\n                    for(int b : listb){\n                        \n                        if(ch=='+' && a+b<=1000){\n                            res.add(a+b);\n                        }else if(ch=='*' && a*b<=1000){\n                            res.add(a*b);\n                        }\n                    }\n                }\n            }\n        }\n        if(res.size()==0){\n            res.add(Integer.valueOf(s));\n        }\n        \n        return res;\n    }\n    \n    \n     public int leetcode227calculate(String s) {\n        s = s.trim();\n        \n        int len = s.length();\n        \n        \n        Stack<Integer> ist = new Stack<>();\n        Stack<Character> ost = new Stack<>();\n        char op='+';\n        int num = 0;\n\n        \n        \n        for(int i=0; i<len ; i++){\n            \n            char ch = s.charAt(i);\n            \n            if(ch ==' ')\n                continue;\n            \n            if(Character.isDigit(ch)){\n                \n                num = ch-'0';\n                while(i+1<len && Character.isDigit(s.charAt(i+1))){\n                    num = num*10 + (s.charAt(i+1)-'0');\n                    i++;\n                }\n                \n                // ist.push(num);\n                \n            }\n            \n            if(s.charAt(i)!=' ' || i==len-1){\n                \n                if(op=='+'){\n                    ist.push(num);\n                    \n                }else if(op=='-')\n                    ist.push(-num);\n                    \n                else if(op=='*'){\n                    ist.push(ist.pop()*num);\n                    \n                }else if(op=='/'){\n                    ist.push(ist.pop()/num);\n                }\n                op=ch;\n                num=0;\n            }\n        }\n        \n        int total = 0;\n        \n        for(int i : ist){\n            total+=i;\n        }\n        \n        return total;\n        \n        \n        \n    }\n    \n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"the-score-of-students-solving-math-expression","has_notes":false,"flag_type":1}