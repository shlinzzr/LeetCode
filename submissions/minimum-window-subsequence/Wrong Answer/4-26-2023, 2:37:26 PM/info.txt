{"id":939910322,"question_id":727,"lang":"java","lang_name":"Java","time":"1 year, 1 month","timestamp":1682491046,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/939910322/","is_pending":"Not Pending","title":"Minimum Window Subsequence","memory":"N/A","code":"class Solution {\n    public String minWindow(String S, String T) {\n        char[] s = S.toCharArray(), t = T.toCharArray();\n        int sindex = 0, tindex = 0, slen = s.length, tlen = t.length, start = -1, len = slen;\n        while(sindex < slen) {\n            if(s[sindex] == t[tindex]) {\n                if(++tindex == tlen) {\n                    //check feasibility from left to right of T\n                    int end = sindex+1;\n                    //check optimization from right to left of T\n                    while(--tindex >= 0) {\n                        while(s[sindex--] != t[tindex]);\n                    }\n                    ++sindex;\n                    ++tindex;\n                    //record the current smallest candidate\n                    if(end - sindex < len) {\n                        len = end - sindex;\n                        start = sindex;\n                    }\n                }\n            }\n            ++sindex;\n        }\n        return start == -1? \"\" : S.substring(start, start + len);\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111101111111110","title_slug":"minimum-window-subsequence","has_notes":false,"flag_type":1}