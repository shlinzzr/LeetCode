{"id":939910592,"question_id":727,"lang":"java","lang_name":"Java","time":"1 year, 1 month","timestamp":1682491085,"status":10,"status_display":"Accepted","runtime":"107 ms","url":"/submissions/detail/939910592/","is_pending":"Not Pending","title":"Minimum Window Subsequence","memory":"52.5 MB","code":"class Solution {\n    public String minWindow(String S, String T) {\n        int m = T.length(), n = S.length();\n        int[][] dp = new int[m + 1][n + 1];\n        for (int j = 0; j <= n; j++) {\n            dp[0][j] = j + 1;\n        }\n        for (int i = 1; i <= m; i++) {\n            for (int j = 1; j <= n; j++) {\n                if (T.charAt(i - 1) == S.charAt(j - 1)) {\n                    dp[i][j] = dp[i - 1][j - 1];\n                } else {\n                    dp[i][j] = dp[i][j - 1];\n                }\n            }\n        }\n\n        int start = 0, len = n + 1;\n        for (int j = 1; j <= n; j++) {\n            if (dp[m][j] != 0) {\n                if (j - dp[m][j] + 1 < len) {\n                    start = dp[m][j] - 1;\n                    len = j - dp[m][j] + 1;\n                }\n            }\n        }\n        return len == n + 1 ? \"\" : S.substring(start, start + len);\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-window-subsequence","has_notes":false,"flag_type":1}