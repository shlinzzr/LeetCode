{"id":1029116601,"question_id":727,"lang":"java","lang_name":"Java","time":"9 months, 3 weeks","timestamp":1692753755,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1029116601/","is_pending":"Not Pending","title":"Minimum Window Subsequence","memory":"N/A","code":"class Solution {\n    public String minWindow(String s1, String s2) {\n        \n        \n        int m = s1.length();\n        int n = s2.length();\n        \n        int[][] dp = new int[m+1][n+1];\n        \n        s1 = \"#\"+s1;\n        s2 = \"#\"+s2;\n        \n        for(int j=1; j<=n; j++){\n            dp[0][j] = Integer.MAX_VALUE/2;\n        }\n        \n        \n        \n        for(int i=1; i<=m; i++){\n            for(int j=1; j<=n; j++){\n                \n                if(s1.charAt(i)==s2.charAt(j)){\n                    dp[i][j] = dp[i-1][j-1]+1;\n                }else{\n                    dp[i][j] = dp[i-1][j] + 1;\n                }\n            }\n        }\n        \n        int wLen = Integer.MAX_VALUE/2;\n        int pos = -1;\n        String res = \"\";\n\n        for(int i=1; i<=m; i++){\n            if(dp[i][n]<wLen){\n                wLen = dp[i][n];\n                pos = i;\n            }\n        }\n        \n        if(wLen == Integer.MAX_VALUE)\n            return \"\";\n        \n        return s1.substring(pos-wLen+1, pos+1);\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        /*\n        \n        \n        int m = s1.length();\n        int n = s2.length();\n        \n        s1 = \"#\"+s1;\n        s2 = \"#\"+s2;\n        \n        int[][] dp = new int[m+1][n+1];  //dp[i][j] : 當s1走到i, s2走到j當下的 Minimum Window Subsequence\n        \n        //針對dp  要特別思考一下dp[0][x] 跟 dp[x][0]的意義\n        \n        \n        for (int j=1; j<=n; j++) // 對於所有dp[0][x] 不可能存在\n            dp[0][j] = Integer.MAX_VALUE/2;\n        \n        for (int i=1; i<=m; i++){\n            for (int j=1; j<=n; j++) {\n                \n                if (s1.charAt(i)==s2.charAt(j))\n                    dp[i][j] = dp[i-1][j-1]+1;\n                else\n                    dp[i][j] = dp[i-1][j]+1;\n            }\n        }\n        \n        //此時所有dp完成, 要在所有dp內找最短長度\n        \n        int wLen = Integer.MAX_VALUE/2;\n        int pos=0;\n        for (int i=1; i<=m; i++)\n        {\n            if (dp[i][n] < wLen)\n            {\n                wLen = dp[i][n];\n                pos = i;\n            }\n        }\n        \n        if (wLen>=Integer.MAX_VALUE/2) //表示沒找到\n            return \"\";\n        \n        return s1.substring(pos-wLen+1, pos+1);\n        \n        \n        */\n        \n        /*\n        // huifeng 狀態機 O(M+N) 47ms 58.91%\n        // https://www.bilibili.com/video/BV18w411o7NA/?spm_id_from=333.337.search-card.all.click\n        int m = s1.length();\n        s1 = \"#\"+s1;\n        \n        int[][] next = new int[m+1][26]; //站在第m位往後看找ch的的idx;\n        \n        for(int ch=0; ch<26 ; ch++) {//初始化所有最後看到的下一個char 都是空的\n            next[m][ch] = -1;\n        }\n        \n        for(int i=m-1; i>=0; i--){ // 由後往前\n            for(int ch=0; ch<26; ch++)\n                next[i][ch] = next[i+1][ch]; //一般狀況 我看的跟之前看的都一樣\n            next[i][s1.charAt(i+1)-'a']=i+1; // 唯一要更新的就是i+1這位的char最近的位置是i+1\n        }\n        \n        //找所有起點\n        List<Integer> start = new ArrayList<>();\n        for(int i=1; i<=m; i++){\n            if(s1.charAt(i)==s2.charAt(0))\n                start.add(i);\n        }\n        \n        String ret=\"\";\n        \n        for(int i : start){\n            int j=i-1; // i-1位向右看\n            boolean flag=true;\n            \n            for(char ch : s2.toCharArray()){ //遍歷s2\n                j = next[j][ch-'a'];\n                if(j==-1){ //如果找不到\n                    flag=false;\n                    break;\n                }\n            }\n            if(flag){ //找到了\n                int wLen = j-i+1;\n                if(ret.isEmpty() || wLen<ret.length())\n                    ret = s1.substring(i, i+wLen);\n            }\n        }\n        \n        return ret;*/\n            \n            \n            \n        \n        \n        \n        \n        /*\n        \n        // sliding window O(S*(m+n))  2775ms,  5.94% \n        \n        int len = s1.length();\n        String[] dp = new String[len+1]; // 執行到第i個字符的 min subseq?\n        \n        if(s1.equals(s2))\n            return s1;\n        \n        String res = s1+\"#\";\n        \n        \n        for(int i1=0; i1<s1.length(); i1++){\n        \n            int i2 = 0;\n            \n            if(s1.charAt(i1)!=s2.charAt(i2)){\n                continue;\n            }\n            \n            int st=i1, ed=i1;\n            while(ed<s1.length() && i2<s2.length()){\n                \n                if(s1.charAt(ed)==s2.charAt(i2)){\n                    i2++;\n                    ed++;\n                }else{\n                    ed++;\n                }\n            }\n            \n            String sub = s1.substring(st, ed);\n            \n            if(i2==s2.length() && sub.length()<res.length()){\n                res = sub;\n            }\n            \n        }\n        \n        return res.length()==len+1 ? \"\" : res;\n        */\n        \n    }\n}","compare_result":"10000000000000000000000000000000000000000000000000000000000000000000","title_slug":"minimum-window-subsequence","has_notes":false,"flag_type":1}