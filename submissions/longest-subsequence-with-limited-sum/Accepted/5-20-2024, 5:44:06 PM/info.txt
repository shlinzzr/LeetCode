{"id":1262959276,"question_id":2469,"lang":"java","lang_name":"Java","time":"3 weeks, 2 days","timestamp":1716198246,"status":10,"status_display":"Accepted","runtime":"6 ms","url":"/submissions/detail/1262959276/","is_pending":"Not Pending","title":"Longest Subsequence With Limited Sum","memory":"44.8 MB","code":"class Solution {\n    public int[] answerQueries(int[] nums, int[] queries) {\n\n        int n = nums.length;\n        int m = queries.length;\n        int[] ans = new int[m];\n\n        // O(nlgn + mn) .... not good\n        // the best sol is using presum + binarysearch to enhance perf\n        // ==> O(nlgn + n + mlgn) => O((m+n)lgn) ... since nlgn>n\n\n\n        Arrays.sort(nums); // O(nlgn)\n\n        for(int i=0; i<m; i++){ // O(m)\n            int q = queries[i];\n            int j=0;\n            for(int sum=0; j<n; j++){ // O(n)\n                sum+= nums[j];\n                if(sum>q) break;\n            }\n            ans[i] = j;\n           \n        }\n\n        return ans;\n\n        \n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111","title_slug":"longest-subsequence-with-limited-sum","has_notes":false,"flag_type":1}