{"id":1112742791,"question_id":1824,"lang":"java","lang_name":"Java","time":"6 months, 1 week","timestamp":1701762507,"status":10,"status_display":"Accepted","runtime":"93 ms","url":"/submissions/detail/1112742791/","is_pending":"Not Pending","title":"Maximum Number of Eaten Apples","memory":"46.2 MB","code":"class Solution {\n    public int eatenApples(int[] apples, int[] days) {\n        int res = 0;\n        PriorityQueue<int[]> pq = new PriorityQueue<int[]>((a, b) -> a[0] - b[0]);\n        // select the apple whose rotten day is closer\n\n        int len = apples.length;\n        for(int i = 0; i < 40001; i++){\n            if (i < len)\n                pq.add(new int[]{i + days[i]-1, apples[i]}); // rot day, cnt\n            // poll rot apple\n            while (!pq.isEmpty()){\n                int[] cur = pq.peek();\n                if(cur[0] < i){\n                    pq.poll(); \n                }else{\n                    break;\n                }\n            }\n            if (!pq.isEmpty()) {\n                int[] cur = pq.poll();\n                cur[1]--;\n                res += 1;\n                if(cur[1] > 0){\n                    pq.add(cur);\n                }\n            }\n        }\n        return res;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-number-of-eaten-apples","has_notes":false,"flag_type":1}