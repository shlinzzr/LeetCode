{"id":1015259590,"question_id":699,"lang":"java","lang_name":"Java","time":"10 months, 1 week","timestamp":1691465706,"status":10,"status_display":"Accepted","runtime":"19 ms","url":"/submissions/detail/1015259590/","is_pending":"Not Pending","title":"Falling Squares","memory":"44.2 MB","code":"class Solution {\n    \n    //https://leetcode.com/problems/falling-squares/discuss/108775/Easy-Understood-TreeMap-Solution\n    \n    \n    public List<Integer> fallingSquares(int[][] positions) {\n        List<Integer> list = new ArrayList<>();\n        TreeMap<Integer, Integer> map = new TreeMap<>();\n\n        // at first, there is only one segment starting from 0 with height 0\n        map.put(0, 0);\n        \n        // The global max height is 0\n        int max = 0;\n\n        for(int[] position : positions) {\n\n            // the new segment \n            int start = position[0], end = start + position[1];\n\n            // find the height among this range\n            Integer key = map.floorKey(start);\n            int h = map.get(key);\n            key = map.higherKey(key);\n            while(key != null && key < end) {\n                h = Math.max(h, map.get(key));\n                key = map.higherKey(key);\n            }\n            h += position[1];\n\n            // update global max height\n            max = Math.max(max, h);\n            list.add(max);\n\n            // update new segment and delete previous segments among the range\n            int tail = map.floorEntry(end).getValue();\n            map.put(start, h);\n            map.put(end, tail);\n            key = map.higherKey(start);\n            while(key != null && key < end) {\n                map.remove(key);\n                key = map.higherKey(key);\n            }\n        }\n        return list;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111","title_slug":"falling-squares","has_notes":false,"flag_type":1}