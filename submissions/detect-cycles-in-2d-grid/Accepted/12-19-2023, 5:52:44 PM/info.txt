{"id":1123302916,"question_id":1663,"lang":"java","lang_name":"Java","time":"5 months, 3 weeks","timestamp":1702979564,"status":10,"status_display":"Accepted","runtime":"19 ms","url":"/submissions/detail/1123302916/","is_pending":"Not Pending","title":"Detect Cycles in 2D Grid","memory":"90.7 MB","code":"class Solution {\n    int count = 0;\n    public boolean dfs(char[][] grid, int i, int j, int[][] seen, int previ, int prevj, char ch){\n        \n        if(i<0 || j<0 || i>=grid.length || j>=grid[0].length || grid[i][j]!=ch)\n            return false;\n       \n        if(seen[i][j]-seen[previ][prevj]>=3)\n            return true;\n\n        if(seen[i][j]!=0)\n            return false;\n        \n        seen[i][j]=count++;\n        \n        return dfs(grid,i+1,j,seen,i,j,ch) || dfs(grid,i-1,j,seen,i,j,ch) || dfs(grid,i,j+1,seen,i,j,ch) || dfs(grid,i,j-1,seen,i,j,ch);\n    }\n    public boolean containsCycle(char[][] grid) {\n        \n        int h = grid.length;\n        int w = grid[0].length;\n\n        int[][] seen = new int[h][w];\n\n        for(int i=0;i<h;i++){\n            for(int j=0;j<w;j++){\n                if(seen[i][j]==0 && dfs(grid, i, j, seen, i, j, grid[i][j]))\n                    return true;\n            }\n        }\n        return false;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"detect-cycles-in-2d-grid","has_notes":false,"flag_type":1}