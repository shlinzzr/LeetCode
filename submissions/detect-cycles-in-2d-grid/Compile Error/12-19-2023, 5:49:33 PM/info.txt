{"id":1123301079,"question_id":1663,"lang":"java","lang_name":"Java","time":"5 months, 3 weeks","timestamp":1702979373,"status":20,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/1123301079/","is_pending":"Not Pending","title":"Detect Cycles in 2D Grid","memory":"N/A","code":"class Solution {\n    public boolean containsCycle(char[][] grid) {\n        int h = grid.length;\n        int w = grid[0].length;\n\n        boolean[][] seen = boolean[h][w];\n\n        for(int i=0; i<h; i++){\n            for(int j=0; j<w; j++){\n\n                if(!seen[i][j]){\n                    boolean res = helper(grid, i, j, seen);\n                    if(res) return true;\n                }\n            }\n        }\n    }\n\n    private boolean helper(char[][] grid, int i, int j, boolean[][] seen){\n\n        int h = grid.length;\n        int w = grid[0].length;\n\n\n        Stack<int[] > q = new LinkedList<>();\n        q.offer(new int[]{i, j});\n        seen[i][j] = true;\n\n        int step = 0;\n\n        while(!q.isEmpty()){    \n            int siz = q.size();\n            for(int a=0; a<siz;a++){\n                int[] p = q.poll();\n\n                for(int[] d: dirs){\n                    int r =  d[0] + p[0];\n                    int c = d[1] + p[1];\n\n                    if(r<0 || c<0 || r>=h || c>=w)\n                        continue;\n\n                    if(r==i && c==j && step>=3){\n                        return true;\n                    }\n\n                    if(seen[r][c] && step>=2) return true;\n\n                    seen[r][c] = true;\n\n\n                }\n\n            }\n\n            step++;\n\n            \n        }\n    }\n}","compare_result":null,"title_slug":"detect-cycles-in-2d-grid","has_notes":false,"flag_type":1}