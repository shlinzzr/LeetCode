{"id":1123312799,"question_id":1663,"lang":"java","lang_name":"Java","time":"5 months, 3 weeks","timestamp":1702980654,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1123312799/","is_pending":"Not Pending","title":"Detect Cycles in 2D Grid","memory":"N/A","code":"class Solution {\n    public boolean containsCycle(char[][] grid) {\n        int h = grid.length;\n        int w = grid[0].length;\n\n        int[][] seen = new int[h][w];\n\n        for(int i=0; i<h; i++){\n            for(int j=0; j<w; j++){\n\n                if(seen[i][j]!=0){\n                    boolean res = helper(grid, i, j, seen);\n                    if(res) return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    int[][] dirs = new int[][]{{0,1},{1,0}, {0,-1}, {-1,0}};\n\n    private boolean helper(char[][] grid, int i, int j, int[][] seen){\n\n        int h = grid.length;\n        int w = grid[0].length;\n\n\n        Queue<int[] > q = new LinkedList<>();\n        q.offer(new int[]{i, j, i, j}); // curr ,prev\n\n        int step = 0;\n\n        while(!q.isEmpty()){    \n            int siz = q.size();\n            for(int a=0; a<siz;a++){\n                int[] p = q.poll();\n                int pr = p[2];\n                int pc = p[3];\n\n                for(int[] d: dirs){\n                    int r = d[0] + p[0];\n                    int c = d[1] + p[1];\n\n                    if(r<0 || c<0 || r>=h || c>=w)\n                        continue;\n                    \n                    if(seen[pr][pc]-seen[r][c]>=3) return true;\n\n                    if(seen[r][c]!=0) continue;\n                    seen[r][c] = step;\n                }\n\n            }\n\n            step++;\n\n            \n        }\n\n        return false;\n    }\n\n}","compare_result":"0011111101111011110101111001110111001111011111101101111100110011001010010000","title_slug":"detect-cycles-in-2d-grid","has_notes":false,"flag_type":1}