{"id":1108804539,"question_id":1787,"lang":"java","lang_name":"Java","time":"6 months, 2 weeks","timestamp":1701253031,"status":10,"status_display":"Accepted","runtime":"5 ms","url":"/submissions/detail/1108804539/","is_pending":"Not Pending","title":"Sum of Absolute Differences in a Sorted Array","memory":"60.3 MB","code":"class Solution {\n    public int[] getSumAbsoluteDifferences(int[] nums) {\n        /*\n        For nums[i], the answer is \n          (nums[i] - nums[0]) + (nums[i] - nums[1]) + ... + (nums[i] - nums[i-1]) \n        + (nums[i+1] - nums[i]) + (nums[i+2] - nums[i]) + ... + (nums[n-1] - nums[i]). \n        \n        It can be simplified to \n          (nums[i] * i - (nums[0] + nums[1] + ... + nums[i-1])) \n        + ((nums[i+1] + nums[i+2] + ... + nums[n-1]) - nums[i] * (n-i-1)). \n        One can build prefix and suffix sums to compute this quickly.\n        \n        */\n\n        int n = nums.length;\n        int[] result = new int[n];\n        int[] prefixSum = new int[n];\n        int[] suffixSum = new int[n];\n\n        // Calculate and initialize the prefix sums & suffixSum array\n        prefixSum[0] = nums[0];\n        suffixSum[n - 1] = nums[n - 1];\n\n        // Calculate the prefix sums & suffixSum array in one loop\n        for (int i = 1; i < n; ++i) {\n            prefixSum[i] = prefixSum[i - 1] + nums[i];\n            suffixSum[n - i - 1] = suffixSum[n - i] + nums[n - i - 1];\n        }\n\n        // Calculate absolute differences and update the result array\n        for (int i = 0; i < n; ++i) {\n            int currentAbsoluteDiff = ((nums[i] * i) - prefixSum[i]) + (suffixSum[i] - (nums[i] * (n - i - 1)));\n            result[i] = currentAbsoluteDiff;\n        }\n\n        return result;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111","title_slug":"sum-of-absolute-differences-in-a-sorted-array","has_notes":false,"flag_type":1}