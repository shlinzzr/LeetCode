{"id":1252490811,"question_id":1144,"lang":"java","lang_name":"Java","time":"1Â month","timestamp":1715157437,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1252490811/","is_pending":"Not Pending","title":"Optimize Water Distribution in a Village","memory":"N/A","code":"class Solution {\n    \n\n    // Prim's\n    public int minCostToSupplyWater(int n, int[] wells, int[][] pipes) {\n        \n        Map<Integer, Map<Integer,Integer>> map = new HashMap<>();\n        \n        buildGraph(pipes, map);\n\n        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> (a[1] - b[1])); //idx, cost\n        // Prim's algo : start from any node, let's say we start from node 1;\n        // always choosing the min edge from map\n\n        int min_well = Integer.MAX_VALUE;\n        for(int w: wells){\n            min_well = Math.min(min_well, w);\n        }\n\n        Set<Integer> seen = new HashSet<>();\n        seen.add(1);\n        Map<Integer, Integer> adjs = map.get(1);\n        for(int adj : adjs.keySet()){\n            pq.offer(new int[]{adj, adjs.get(adj)});\n        }\n\n        for(int[] a : pq){\n            System.out.println(a[0] + \" \" + a[1]);\n        }\n\n        int currCost = 0;\n        while(!pq.isEmpty()){\n            int size =pq.size();\n            while(size-->0){\n\n                int[] p = pq.poll();\n                int idx = p[0];\n                int pipeCost = p[1];\n\n                if(seen.contains(idx)) continue;\n                seen.add(idx);\n                currCost += pipeCost;\n\n                adjs = map.get(idx);\n                for(int k : adjs.keySet()){\n                    if(seen.contains(k)) continue;\n                    pq.offer(new int[]{k, adjs.get(k)});\n                }\n\n                System.out.println(idx+ \" pc=\"+pipeCost);\n            }\n\n            System.out.println(pq.size());\n        }\n\n        System.out.println(currCost +\" \" + min_well);\n\n        return currCost + min_well;\n\n    }\n\n\n    private void buildGraph(int[][] pipes, Map<Integer, Map<Integer,Integer>> map ){\n\n        for(int[] p : pipes){\n            int a = p[0];\n            int b = p[1];\n            int c = p[2];\n\n            map.putIfAbsent(a, new HashMap<>());\n            if(!map.get(a).containsKey(b) || map.get(a).get(b)>c)\n                map.get(a).put(b, c);\n\n            map.putIfAbsent(b, new HashMap<>());\n            if(!map.get(b).containsKey(a) || map.get(b).get(a)>c)\n                map.get(b).put(a, c);\n        }\n\n    }\n}","compare_result":"1110000000000000000000000000000000000001","title_slug":"optimize-water-distribution-in-a-village","has_notes":false,"flag_type":1}