{"id":944199781,"question_id":2567,"lang":"java","lang_name":"Java","time":"1 year, 1 month","timestamp":1683180795,"status":10,"status_display":"Accepted","runtime":"278 ms","url":"/submissions/detail/944199781/","is_pending":"Not Pending","title":"Closest Nodes Queries in a Binary Search Tree","memory":"96.3 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public List<List<Integer>> closestNodes(TreeNode root, List<Integer> queries) {\n      \n        TreeSet<Integer> set = new TreeSet<>();\n        helper(root, set);\n        \n        int siz = queries.size();\n        List<List<Integer>>  res = new ArrayList<>();\n        for(int q : queries){\n            \n            int flo = set.floor(q)==null ? -1 : set.floor(q);\n            int cel = set.ceiling(q)==null ? -1 : set.ceiling(q);\n            \n            res.add(Arrays.asList(flo, cel));\n        }\n        \n        return res;\n        \n    }\n    \n    private void helper(TreeNode root, TreeSet<Integer> set  ){\n        if(root==null)\n            return;\n        \n        set.add(root.val);\n        helper(root.left, set);\n        helper(root.right, set);\n    }\n}\n","compare_result":"11111111111111111111111111111111111","title_slug":"closest-nodes-queries-in-a-binary-search-tree","has_notes":false,"flag_type":1}