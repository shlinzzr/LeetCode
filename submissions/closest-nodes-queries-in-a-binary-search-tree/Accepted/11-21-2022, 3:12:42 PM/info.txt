{"id":847314058,"question_id":2567,"lang":"java","lang_name":"Java","time":"1 year, 6 months","timestamp":1669014762,"status":10,"status_display":"Accepted","runtime":"364 ms","url":"/submissions/detail/847314058/","is_pending":"Not Pending","title":"Closest Nodes Queries in a Binary Search Tree","memory":"190.7 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public List<List<Integer>> closestNodes(TreeNode root, List<Integer> queries) {\n        TreeSet<Integer> set = new TreeSet<>();\n        fill(set,root);\n        \n        List<List<Integer>> list = new ArrayList<>();\n        \n        for(int val : queries){\n            ArrayList<Integer> al = new ArrayList<>();\n            \n            al.add(set.floor(val)==null?-1:set.floor(val));\n            al.add(set.ceiling(val)==null?-1:set.ceiling(val));\n            \n            list.add(al);\n        }\n        \n        return list;\n    }\n    \n    public void fill(TreeSet<Integer> set,TreeNode root){\n        if(root==null){\n            return;\n        }\n        \n        set.add(root.val);\n        \n        fill(set,root.left);\n        fill(set,root.right);\n    }\n}","compare_result":"1111111111111111111111111111111111111","title_slug":"closest-nodes-queries-in-a-binary-search-tree","has_notes":false,"flag_type":1}