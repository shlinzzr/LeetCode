{"id":1253375186,"question_id":1192,"lang":"java","lang_name":"Java","time":"1Â month","timestamp":1715242804,"status":10,"status_display":"Accepted","runtime":"9 ms","url":"/submissions/detail/1253375186/","is_pending":"Not Pending","title":"Divide Chocolate","memory":"46.1 MB","code":"class Solution {\n    public int maximizeSweetness(int[] sw, int k) {\n\n        int len = sw.length;\n\n        int sum = 0 ;\n        for(int n : sw){\n            sum+=n;\n        }\n\n        if(k==0) return sum; //45\n\n        int st=1, ed=sum;\n        int res=0;\n\n        while(st<ed){ //0, 1\n            int mid = ed-(ed-st)/2; // 5, 11=> 8\n            System.out.println(mid);\n            if(isOk(sw, mid, k+1)){\n                st = mid;\n            }else{\n                ed = mid-1;\n            }\n                \n        }\n\n        return st;\n    }\n\n    private boolean isOk(int[] sw, int need, int k){\n\n        int pc = 0;\n        int cur = 0;\n        for(int i=0; i<sw.length; i++){\n            cur+= sw[i];\n            if(cur>=need){\n                cur=0;\n                pc++;\n            }\n        }\n\n        return pc>=k;\n    }\n}","compare_result":"11111111111111111111111","title_slug":"divide-chocolate","has_notes":false,"flag_type":1}