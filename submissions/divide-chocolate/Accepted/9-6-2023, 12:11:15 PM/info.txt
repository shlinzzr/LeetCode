{"id":1041790109,"question_id":1192,"lang":"java","lang_name":"Java","time":"9 months, 1 week","timestamp":1693973475,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/1041790109/","is_pending":"Not Pending","title":"Divide Chocolate","memory":"44.4 MB","code":"class Solution {\n    public int maximizeSweetness(int[] sw, int k) {\n        int len = sw.length;\n        \n        \n        int total = 0;\n        for(int w : sw){\n            total += w;\n        }\n        \n        int st =0, ed=total;\n        \n        while(st<ed){\n            \n            int mid = ed - (ed-st)/2;\n            \n            if(isOk(sw, mid, k+1)){\n                st = mid;\n                \n            }else{\n                ed = mid-1;\n            }\n        }\n        \n        if(isOk(sw, st, k+1)){\n            return st;\n        }\n        \n        return st-1;\n    }\n    \n    \n    private boolean isOk(int[] sw, int mid, int k){\n        \n        // List<Integer> list= new ArrayList<>();\n        int cnt=0;\n        int sum = 0;\n        for(int i=0; i<sw.length; i++){\n            \n            sum += sw[i];\n            if(sum>=mid){\n                // list.add(sum);\n                cnt++;\n                sum=0;\n            }\n        }\n        \n        // System.out.println(\"isOk \" + mid + \" list=\"+list.toString() + \" res=\"+(list.size()>=k));\n        \n        return cnt>=k;\n        \n        \n    }\n}","compare_result":"11111111111111111111111","title_slug":"divide-chocolate","has_notes":false,"flag_type":1}