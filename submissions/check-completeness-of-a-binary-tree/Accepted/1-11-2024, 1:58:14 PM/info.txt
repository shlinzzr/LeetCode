{"id":1143050151,"question_id":998,"lang":"java","lang_name":"Java","time":"5Â months","timestamp":1704952694,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1143050151/","is_pending":"Not Pending","title":"Check Completeness of a Binary Tree","memory":"42.3 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n\n    int max = 0;\n    public boolean isCompleteTree(TreeNode root) {\n\n\n        getMax(root, 0);\n        return helper(root, 0);\n    }\n\n    private void getMax(TreeNode root, int idx){\n\n        if(root==null) return;\n\n        max = Math.max(max, idx);\n\n        helper(root.left, 2*idx+1);\n        helper(root.right, 2*idx+2);\n\n    }\n\n    private boolean helper(TreeNode root, int idx){\n\n        if(root==null && idx<max) return false; \n        if(root==null) return true;\n\n        max = Math.max(max, idx);\n\n        boolean left = helper(root.left, 2*idx+1);\n        boolean right = helper(root.right, 2*idx+2);\n\n        return left && right;\n\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"check-completeness-of-a-binary-tree","has_notes":false,"flag_type":1}