{"id":899625624,"question_id":785,"lang":"java","lang_name":"Java","time":"1 year, 3 months","timestamp":1676619837,"status":10,"status_display":"Accepted","runtime":"6 ms","url":"/submissions/detail/899625624/","is_pending":"Not Pending","title":"Basic Calculator III","memory":"40.6 MB","code":"class Solution {\n    public static int calculate(String s) {\n        if (s == null || s.length() == 0) return 0;\n        Stack<Integer> nums = new Stack<>(); // the stack that stores numbers\n        Stack<Character> ops = new Stack<>(); // the stack that stores operators (including parentheses)\n        int num = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if (c == ' ') continue;\n            if (Character.isDigit(c)) {\n                num = c - '0';\n                // iteratively calculate each number\n                while (i < s.length() - 1 && Character.isDigit(s.charAt(i+1))) {\n                    num = num * 10 + (s.charAt(i+1) - '0');\n                    i++;\n                }\n                nums.push(num);\n                num = 0; // reset the number to 0 before next calculation\n            } else if (c == '(') {\n                ops.push(c);\n            } else if (c == ')') {\n                // do the math when we encounter a ')' until '('\n                while (ops.peek() != '(') nums.push(operation(ops.pop(), nums.pop(), nums.pop()));\n                ops.pop(); // get rid of '(' in the ops stack\n            } else if (c == '+' || c == '-' || c == '*' || c == '/') {\n                while (!ops.isEmpty() && precedence(c, ops.peek())) nums.push(operation(ops.pop(), nums.pop(),nums.pop()));\n                ops.push(c);\n            }\n        }\n        while (!ops.isEmpty()) {\n            nums.push(operation(ops.pop(), nums.pop(), nums.pop()));\n        }\n        return nums.pop();\n    }\n\n    private static int operation(char op, int b, int a) {\n        switch (op) {\n            case '+': return a + b;\n            case '-': return a - b;\n            case '*': return a * b;\n            case '/': return a / b; // assume b is not 0\n        }\n        return 0;\n    }\n    // helper function to check precedence of current operator and the uppermost operator in the ops stack \n    private static boolean precedence(char op1, char op2) {\n        if (op2 == '(' || op2 == ')') return false;\n        if ((op1 == '*' || op1 == '/') && (op2 == '+' || op2 == '-')) return false;\n        return true;\n    }                      \n                              \n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"basic-calculator-iii","has_notes":false,"flag_type":1}