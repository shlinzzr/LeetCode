{"id":1140094546,"question_id":95,"lang":"java","lang_name":"Java","time":"5Â months","timestamp":1704687098,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/1140094546/","is_pending":"Not Pending","title":"Unique Binary Search Trees II","memory":"44.4 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n    public List<TreeNode> generateTrees(int n) {\n\n        return helper(1, n);\n        \n    }\n\n    private List<TreeNode> helper(int left, int right){\n\n        List<TreeNode> res = new ArrayList<>();\n\n        if(left>right){\n            res.add(null);\n            return res;\n        }\n\n        for(int i=left; i<=right; i++){\n\n            List<TreeNode> leftSub = helper(left, i-1);\n            List<TreeNode> rightSub = helper(i+1, right);\n\n            for(TreeNode l : leftSub){\n                for(TreeNode r : rightSub){\n                    TreeNode root = new TreeNode(i);\n                    root.left = l;\n                    root.right = r;\n                    res.add(root);\n                }\n            }\n        }\n\n        return res;\n\n    }\n}","compare_result":"11111111","title_slug":"unique-binary-search-trees-ii","has_notes":false,"flag_type":1}