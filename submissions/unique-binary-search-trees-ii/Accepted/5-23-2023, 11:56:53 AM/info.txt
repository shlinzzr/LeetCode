{"id":955525786,"question_id":95,"lang":"java","lang_name":"Java","time":"1Â year","timestamp":1684814213,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/955525786/","is_pending":"Not Pending","title":"Unique Binary Search Trees II","memory":"43.7 MB","code":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode() {}\n *     TreeNode(int val) { this.val = val; }\n *     TreeNode(int val, TreeNode left, TreeNode right) {\n *         this.val = val;\n *         this.left = left;\n *         this.right = right;\n *     }\n * }\n */\nclass Solution {\n  public LinkedList<TreeNode> generate_trees(int start, int end) {\n    LinkedList<TreeNode> all_trees = new LinkedList<TreeNode>();\n    if (start > end) {\n      all_trees.add(null);\n      return all_trees;\n    }\n\n    // pick up a root\n    for (int i = start; i <= end; i++) {\n      // all possible left subtrees if i is choosen to be a root\n      LinkedList<TreeNode> left_trees = generate_trees(start, i - 1);\n\n      // all possible right subtrees if i is choosen to be a root\n      LinkedList<TreeNode> right_trees = generate_trees(i + 1, end);\n\n      // connect left and right trees to the root i\n      for (TreeNode l : left_trees) {\n        for (TreeNode r : right_trees) {\n          TreeNode current_tree = new TreeNode(i);\n          current_tree.left = l;\n          current_tree.right = r;\n          all_trees.add(current_tree);\n        }\n      }\n    }\n    return all_trees;\n  }\n\n  public List<TreeNode> generateTrees(int n) {\n    if (n == 0) {\n      return new LinkedList<TreeNode>();\n    }\n    return generate_trees(1, n);\n  }\n}","compare_result":"11111111","title_slug":"unique-binary-search-trees-ii","has_notes":false,"flag_type":1}