{"id":854956809,"question_id":215,"lang":"java","lang_name":"Java","time":"1 year, 6 months","timestamp":1670235424,"status":10,"status_display":"Accepted","runtime":"21 ms","url":"/submissions/detail/854956809/","is_pending":"Not Pending","title":"Kth Largest Element in an Array","memory":"75.8 MB","code":"class Solution {\n    public int findKthLargest(int[] nums, int k) {\n        \n        return quickSelect(nums, nums.length-k, 0, nums.length-1);\n    }\n    \n    private int quickSelect(int[] nums, int k, int left, int right){\n        \n        int idx = partition(nums, left, right);\n        if(idx==k)\n            return nums[idx];\n        else if(idx>k)\n            return quickSelect(nums, k, left, idx-1);\n        else \n            return quickSelect(nums, k, idx+1, right);\n        \n    }\n    \n    \n     private int partition(int[] nums, int left, int right){\n         \n         int pivot = left; // this is key point\n         int n = nums[pivot];\n         while(left<=right){\n             \n             while( left<=right && nums[left]<=n) left++;   // this is key point with this \"<=\" condition, it will by pass pivot, to avoid pivot position chg.\n             while( left<=right && nums[right]>n) right--;\n             if(left<right)\n                 swap(nums, left, right);\n         }\n         \n         swap(nums, pivot, right);\n         \n         return right;\n         \n     }\n    \n    private void swap(int nums[], int left, int right){\n        int temp = nums[left];\n        nums[left] = nums[right];\n        nums[right] = temp;\n    }\n    \n    \n}","compare_result":"111111111111111111111111111111111111111","title_slug":"kth-largest-element-in-an-array","has_notes":false,"flag_type":1}