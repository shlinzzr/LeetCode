{"id":820016529,"question_id":215,"lang":"java","lang_name":"Java","time":"1 year, 8 months","timestamp":1665479519,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/820016529/","is_pending":"Not Pending","title":"Kth Largest Element in an Array","memory":"N/A","code":"class Solution {\n    public int findKthLargest(int[] nums, int k) {\n        \n        return quickSelect(nums, 0, nums.length-1, nums.length-k);\n        \n        \n    }\n    \n    \n    private int quickSelect(int[] nums, int left, int right, int k){\n        \n        if(left>right)\n            return Integer.MAX_VALUE;\n        \n        int mid = left+(right-left)/2;\n        int pivot=nums[mid];\n        \n        \n        // System.out.println(\"mid=\"+mid);\n        // System.out.println(\"p=\"+pivot);\n       \n        int idx = partition(nums, left, right);\n        \n        for(int n : nums)\n            System.out.print(n + \", \");\n        System.out.println(\", idx=\"+idx);\n        \n        if(idx==k)\n            return nums[idx];\n        else if(idx>k){\n            return quickSelect(nums, left, idx-1, k);    \n        }else\n            return quickSelect(nums, idx+1, right, k);\n        \n    }\n    \n    \n    private int partition(int[] nums, int left, int right){\n        \n        int pivot = (left+right)/2;\n        \n        System.out.println(\" l=\"+left + \" r=\"+right + \" pivot=\"+pivot);\n        \n        while(left<right){\n            \n            while( nums[left]<nums[pivot]){\n                left++;\n            }\n            while( nums[right]>nums[pivot]){\n                right--;\n            }\n            \n            if(left<right){\n                \n                if(pivot==left)\n                    pivot=right;\n                else if(pivot==right)\n                    pivot=left;\n                \n                swap(nums, left, right);\n                left++;\n                right--;\n                \n            }\n        }\n        \n         System.out.println(\" l=\"+left + \" r=\"+right + \" pivot=\"+pivot);\n        \n        \n        swap(nums, left, pivot);\n        \n        return left;\n    }\n    \n    \n    private void swap(int[] A, int i, int j) {\n        int tmp = A[i];\n        A[i] = A[j];\n        A[j] = tmp;\t\t\t\t\n    }\n}","compare_result":"111111111101111101111111111011110110000","title_slug":"kth-largest-element-in-an-array","has_notes":false,"flag_type":1}