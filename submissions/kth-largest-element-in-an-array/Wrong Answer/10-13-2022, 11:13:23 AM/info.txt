{"id":821330108,"question_id":215,"lang":"java","lang_name":"Java","time":"1 year, 8 months","timestamp":1665630803,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/821330108/","is_pending":"Not Pending","title":"Kth Largest Element in an Array","memory":"N/A","code":"class Solution {\n    public int findKthLargest(int[] nums, int k) {\n        \n        return quickSelect(nums, nums.length-k, 0, nums.length-1);\n        \n        \n        \n    }\n    \n    private int quickSelect(int[] nums, int k, int left, int right){\n        \n        int idx = partition(nums, left, right);\n        if(idx==k)\n            return nums[idx];\n        else if(idx>k)\n            return quickSelect(nums, k, left, idx-1);\n        else \n            return quickSelect(nums, k, idx+1, right);\n        \n    }\n    \n    \n     private int partition(int[] nums, int left, int right){\n         \n         int pivot = left+ (right-left)/2;\n         int n = nums[pivot];\n         while(left<=right){\n             \n             while( left<=right && nums[left]<=n) left++;\n             while( left<=right && nums[right]>n) right--;\n             if(left<=right)\n                 swap(nums, left, right);\n         }\n         \n         swap(nums, pivot, right);\n         \n         return right;\n         \n     }\n    \n    \n    \n//      private int partition(int[] nums, int left, int right){\n         \n//          int pivot = left+(right-left)/2;\n//          int n = nums[pivot];\n         \n//          while(left<right){\n             \n//              while(left<right && nums[left]<=n) left++;\n//              while(left<right && nums[right]>n) right--;\n//              if(left<right)\n//                  swap(nums, left, right);\n//          }\n         \n//          swap(nums, pivot, right);\n         \n//          return right;\n         \n//      }\n    \n    \n    \n//     private int partition(int[] nums, int start, int end){\n//         int pivot = nums[end];\n//         int left = start;\n//         for(int i = start; i < end; i++){\n//             if(nums[i] < pivot){\n//                 swap(nums, left, i);\n//                 left++;\n//             }\n//         }\n//         swap(nums, left, end);\n        \n//         return left;\n        \n        \n//     }\n    \n    private void swap(int nums[], int left, int right){\n        \n        int temp = nums[left];\n        nums[left] = nums[right];\n        nums[right] = temp;\n        \n    }\n    \n    \n    \n    \n}","compare_result":"111111111101111101111101010011110000010","title_slug":"kth-largest-element-in-an-array","has_notes":false,"flag_type":1}