{"id":820001014,"question_id":215,"lang":"java","lang_name":"Java","time":"1 year, 8 months","timestamp":1665477420,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/820001014/","is_pending":"Not Pending","title":"Kth Largest Element in an Array","memory":"N/A","code":"class Solution {\n    public int findKthLargest(int[] nums, int k) {\n        \n        return quickSelect(nums, 0, nums.length-1, nums.length-k);\n        \n        \n    }\n    \n    \n    private int quickSelect(int[] nums, int left, int right, int k){\n        \n        if(left>right)\n            return -1;\n        \n        int mid = left+(right-left)/2;\n        int pivot=nums[mid];\n        int idx = partition(nums, left, right, mid);\n        \n//         for(int n : nums)\n//             System.out.print(n + \", \");\n        \n//         System.out.println(\", idx=\"+idx);\n        \n        if(idx==k)\n            return nums[idx];\n        else if(idx>k){\n            return quickSelect(nums, left, idx, k);    \n        }else\n            return quickSelect(nums, idx+1, right, k);\n        \n    }\n    \n    \n    private int partition(int[] nums, int left, int right, int mid){\n        \n        int pivot = nums[mid];\n        \n        \n        while(left<right){\n            \n            while(nums[left]<pivot){\n                left++;\n            }\n            while(nums[right]>pivot){\n                right--;\n            }\n            \n            if(left<right){\n                \n                if(left==mid)\n                    mid=right;\n                \n                else if(right==mid)\n                    mid=left;\n                \n                swap(nums, left, right);\n                left++;\n                right--;\n            }\n        }\n            \n        swap(nums, left, mid);\n        \n        return left;\n    }\n    \n    \n    private void swap(int[] A, int i, int j) {\n        int tmp = A[i];\n        A[i] = A[j];\n        A[j] = tmp;\t\t\t\t\n    }\n}","compare_result":"111111000000000000000000000000000000000","title_slug":"kth-largest-element-in-an-array","has_notes":false,"flag_type":1}