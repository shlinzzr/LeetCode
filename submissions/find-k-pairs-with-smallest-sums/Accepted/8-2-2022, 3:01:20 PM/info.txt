{"id":763022969,"question_id":373,"lang":"java","lang_name":"Java","time":"1 year, 10 months","timestamp":1659423680,"status":10,"status_display":"Accepted","runtime":"51 ms","url":"/submissions/detail/763022969/","is_pending":"Not Pending","title":"Find K Pairs with Smallest Sums","memory":"129.2 MB","code":"class Solution {\n    public List<List<Integer>> kSmallestPairs(int[] nums1, int[] nums2, int k) {\n        List<List<Integer>> res = new ArrayList<>();\n        \n        if(nums1 == null || nums1.length == 0 || nums2 == null || nums2.length == 0 || k <= 0) \n            return res;\n        \n        int m = nums1.length, n = nums2.length;\n        PriorityQueue<Tuple> pq = new PriorityQueue<>();\n        \n        for(int j=0; j<nums2.length; j++){\n            pq.offer(new Tuple(0, j, nums1[0]+nums2[j]));\n        }\n        \n        \n       while(k>0 && !pq.isEmpty()){\n            \n            Tuple tuple = pq.poll();\n            List<Integer> list = new ArrayList<>();\n            list.add(nums1[tuple.x]);\n            list.add(nums2[tuple.y]);\n            res.add(list);\n             k--;\n           \n            if(tuple.x==m-1)\n                continue;\n            pq.offer(new Tuple(tuple.x+1, tuple.y, nums1[tuple.x+1]+nums2[tuple.y]));\n            \n            \n            \n        }\n        \n        return res;\n        \n        \n        \n        \n    }\n}\n\nclass Tuple implements Comparable<Tuple>{\n    int x, y, val;\n    public Tuple (int x, int y, int val) {\n        this.x = x;\n        this.y = y;\n        this.val = val;\n    }\n    \n    @Override\n    public int compareTo (Tuple that) {\n        return this.val - that.val;\n    }\n}\n    \n    \n    \n","compare_result":"11111111111111111111111111111111111","title_slug":"find-k-pairs-with-smallest-sums","has_notes":false,"flag_type":1}