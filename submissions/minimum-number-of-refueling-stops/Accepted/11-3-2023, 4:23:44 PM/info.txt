{"id":1090470300,"question_id":902,"lang":"java","lang_name":"Java","time":"7 months, 1 week","timestamp":1698999824,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/1090470300/","is_pending":"Not Pending","title":"Minimum Number of Refueling Stops","memory":"43.3 MB","code":"class Solution {\n    public int minRefuelStops(int target, int startFuel, int[][] stations) {\n        int len = stations.length;\n\n        // Arrays.sort(stations, (a,b)->a[0]-b[0]);\n        //https://leetcode.com/problems/minimum-number-of-refueling-stops/solutions/294025/java-simple-code-greedy/\n\n        if(startFuel >= target) \n            return 0;\n        \n        PriorityQueue<Integer> pq = new PriorityQueue<>((a,b)->b-a);\n\n        int stop = 0;\n        int max = startFuel;\n\n        int i=0;\n        while(max<target){\n            while(i<len && max>=stations[i][0]){\n                pq.offer(stations[i++][1]);\n            }\n\n            if(pq.isEmpty()) return -1;\n\n            max += pq.poll();\n            stop++;\n        }\n\n\n        return max>=target ? stop : -1;\n\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-number-of-refueling-stops","has_notes":false,"flag_type":1}