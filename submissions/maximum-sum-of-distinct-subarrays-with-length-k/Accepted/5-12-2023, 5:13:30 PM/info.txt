{"id":948923155,"question_id":2552,"lang":"java","lang_name":"Java","time":"1 year, 1 month","timestamp":1683882810,"status":10,"status_display":"Accepted","runtime":"52 ms","url":"/submissions/detail/948923155/","is_pending":"Not Pending","title":"Maximum Sum of Distinct Subarrays With Length K","memory":"61.7 MB","code":"class Solution {\n    public long maximumSubarraySum(int[] nums, int k) {\n        int len = nums.length;\n        \n        \n        Queue<Integer> q = new LinkedList<>();\n        HashSet<Integer> set = new HashSet<>();\n        long sum=0;\n        long max = 0;\n        Integer prev = null;\n        int st=0;\n        for(int ed=0; ed<len; ed++){\n            \n            \n            if(set.contains(nums[ed])){\n                \n                while(!q.isEmpty()){\n                    int p = q.poll();\n                    set.remove(p);\n                    st++;\n                    sum-=p;\n                    if(p==nums[ed])\n                        break;\n                }\n            }\n            \n            q.offer(nums[ed]);\n            set.add(nums[ed]);\n            sum += nums[ed];\n            if(ed-st+1<k){\n                continue;\n            }\n            \n            max = Math.max(max, sum);\n            \n            set.remove(nums[st]);\n            q.poll();\n            sum-=nums[st++];\n        }\n        \n        return max;\n        \n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-sum-of-distinct-subarrays-with-length-k","has_notes":false,"flag_type":1}