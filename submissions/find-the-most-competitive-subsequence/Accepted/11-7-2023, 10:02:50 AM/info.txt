{"id":1093243516,"question_id":1792,"lang":"java","lang_name":"Java","time":"7 months, 1 week","timestamp":1699322570,"status":10,"status_display":"Accepted","runtime":"61 ms","url":"/submissions/detail/1093243516/","is_pending":"Not Pending","title":"Find the Most Competitive Subsequence","memory":"58.8 MB","code":"class Solution {\n    public int[] mostCompetitive(int[] nums, int k) {\n        int len = nums.length;\n        int del = len-k;\n        Stack<Integer> stk = new Stack<>();\n\n        for(int i=0; i<len; i++){\n\n            while(!stk.isEmpty() && del>0 && nums[i]<stk.peek()){\n                stk.pop();\n                del--;\n            }\n            stk.push(nums[i]);\n        }\n\n        while(!stk.isEmpty() && del>0){\n            stk.pop();\n            del--;\n        }\n\n        int[] res = new int[stk.size()];\n        for(int i=res.length-1; i>=0; i--){\n            res[i] = stk.pop();\n        }\n\n        return res;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-the-most-competitive-subsequence","has_notes":false,"flag_type":1}