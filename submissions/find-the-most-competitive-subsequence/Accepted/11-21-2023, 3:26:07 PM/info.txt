{"id":1103280725,"question_id":1792,"lang":"java","lang_name":"Java","time":"6 months, 3 weeks","timestamp":1700551567,"status":10,"status_display":"Accepted","runtime":"49 ms","url":"/submissions/detail/1103280725/","is_pending":"Not Pending","title":"Find the Most Competitive Subsequence","memory":"59.7 MB","code":"class Solution {\n    public int[] mostCompetitive(int[] nums, int k) {\n        int len = nums.length;\n\n        if(k==0)\n            return new int[0];\n\n\n        k = len-k;\n\n\n        Stack<Integer> st = new Stack<>();\n\n        for(int i=0; i<len; i++){\n            while(k>0 && !st.isEmpty() && nums[st.peek()]>nums[i]){\n                st.pop();\n                k--;\n            }\n            st.push(i);\n        }\n\n        while(k>0 && !st.isEmpty()){\n            st.pop();\n            k--;\n        }\n\n\n        int[] res = new int[st.size()];\n        int idx = 0;\n        for(int i : st){\n            res[idx++]=nums[i];\n        }\n\n        return res;\n\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-the-most-competitive-subsequence","has_notes":false,"flag_type":1}