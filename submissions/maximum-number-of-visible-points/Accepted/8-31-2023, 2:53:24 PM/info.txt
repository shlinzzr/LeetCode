{"id":1036597371,"question_id":1733,"lang":"java","lang_name":"Java","time":"9 months, 2 weeks","timestamp":1693464804,"status":10,"status_display":"Accepted","runtime":"125 ms","url":"/submissions/detail/1036597371/","is_pending":"Not Pending","title":"Maximum Number of Visible Points","memory":"86.3 MB","code":"class Solution {\n    public int visiblePoints(List<List<Integer>> points, int angle, List<Integer> location) {\n        List<Double> angles = new ArrayList<>();\n        int count = 0;\n        for (List<Integer> p : points) {\n            int dx = p.get(0) - location.get(0);\n            int dy = p.get(1) - location.get(1);\n            if (dx == 0 && dy == 0) { // edge case of same point\n                count++;\n                continue;\n            } \n            angles.add(Math.atan2(dy, dx) * (180 / Math.PI));\n        }\n        Collections.sort(angles);\n        List<Double> tmp = new ArrayList<>(angles);\n        for (double d : angles) tmp.add(d + 360); // concatenate to handle edge case\n        int res = count;\n        for (int ed = 0, st = 0; ed < tmp.size(); ed++) {\n            while (tmp.get(ed) - tmp.get(st) > angle) {\n                st++;\n            }\n            res = Math.max(res, count + ed - st + 1);\n        }\n        return res;\n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-number-of-visible-points","has_notes":false,"flag_type":1}