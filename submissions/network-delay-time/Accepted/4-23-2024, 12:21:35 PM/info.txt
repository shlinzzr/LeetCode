{"id":1239576808,"question_id":744,"lang":"java","lang_name":"Java","time":"1 month, 2 weeks","timestamp":1713846095,"status":10,"status_display":"Accepted","runtime":"41 ms","url":"/submissions/detail/1239576808/","is_pending":"Not Pending","title":"Network Delay Time","memory":"47.3 MB","code":"\nclass Solution {\n    \n    int[] parent;\n    int[] weight;\n    \n    Map<Integer, Map<Integer,Integer>> map = new HashMap<>();\n    \n    public int networkDelayTime(int[][] times, int n, int k) {\n        \n        buildGraph(times, n);\n        \n        Queue<int[]> q = new LinkedList<>();\n        q.offer(new int[]{k, 0}); // node, time\n        int[] t = new int[n+1];\n        Arrays.fill(t, Integer.MAX_VALUE);\n        t[k] = 0;\n        \n        while(!q.isEmpty() ){\n            int[] p = q.poll();\n            int node = p[0];\n            int time = p[1];\n            Map<Integer, Integer> adjs = map.getOrDefault(node, new HashMap<>());\n            for(int adj : adjs.keySet()){\n                \n                int cost= adjs.get(adj);\n                \n                if(time+cost < t[adj]){\n                    t[adj] = time+cost;\n                    q.offer(new int[]{adj, t[adj]});\n                }\n            }\n        }\n        \n        int max = 0;\n        for(int i=1; i<=n; i++){\n            if(t[i]==Integer.MAX_VALUE) return -1;\n            max = Math.max(max, t[i]);\n        }\n        return max;\n        \n//         parent = new int[n];\n//         for(int i=0; i<n; i++){\n//             parent[i] = i;\n//         }\n        \n//         int len = times.length;\n//         for(int[] t : times){\n//             int u = t[0];\n//             int v = t[1];\n//             int cost = t[2];\n            \n//             union(u, v, cost)            \n//         }\n    }\n    \n    private void buildGraph(int[][] times, int n){\n        \n        for(int i=0; i<times.length; i++){\n            int [] t = times[i];\n            int u = t[0];\n            int v = t[1];\n            int cost = t[2];\n            map.putIfAbsent(u, new HashMap<>());\n            \n            if(!map.get(u).containsKey(v) || map.get(u).get(v)<cost)\n                map.get(u).put(v, cost);\n        }\n        \n        \n    }\n    \n//     private int find(int x){\n//         if(parent[x]!=x) return find(parent[x]);\n//         return parent[x];\n//     }\n    \n//     private void union(int a,int b, int cost){\n//         a= find(a);\n//         b = find(b);\n        \n//         if(a==b) return ;\n        \n//         parent[b]= a;\n//         weight[a] = cost + weight[b];\n        \n//     }\n}","compare_result":"11111111111111111111111111111111111111111111111111111","title_slug":"network-delay-time","has_notes":false,"flag_type":1}