{"id":1085242343,"question_id":85,"lang":"java","lang_name":"Java","time":"7 months, 2 weeks","timestamp":1698397067,"status":10,"status_display":"Accepted","runtime":"22 ms","url":"/submissions/detail/1085242343/","is_pending":"Not Pending","title":"Maximal Rectangle","memory":"43.6 MB","code":"class Solution {\n    \n    //huifeng 我大哥 https://www.youtube.com/watch?v=Psd_SSYxuYM\n    \n    \n    public int maximalRectangle(char[][] matrix) {\n        int h = matrix.length;\n        int w = matrix[0].length;\n        \n        int[] histogram = new int[w];\n        \n        int res = 0;\n        \n        for(int i=0; i<h; i++){ // build histogram row by row \n            for(int j=0; j<w; j++){\n                \n                if(matrix[i][j]=='1')\n                    histogram[j]+=1;\n                else\n                    histogram[j]=0;\n            }\n            \n            res = Math.max(res, largestRectangleArea(histogram)); \n        }\n        \n        return res;\n    }\n    \n    \n    \n    // 84. Largest Rectangle in Histogram\n\n     public int largestRectangleArea(int[] H) {\n        \n        // heights[i] * (nextSmaller-prevSmaller-1)\n        \n        int len = H.length;\n        \n        Stack<Integer> st = new Stack<>();\n        int[] nextSmaller = new int[len];\n        Arrays.fill(nextSmaller, len);\n        \n        for(int i=0; i<len; i++){\n            if(!st.isEmpty()){\n                while(!st.isEmpty() && H[i]<H[st.peek()]){\n                    nextSmaller[st.peek()] = i;\n                    st.pop();\n                }\n            }\n            st.push(i);\n        }\n        \n        int[] prevSmaller = new int[len];\n        st = new Stack<>();\n        Arrays.fill(prevSmaller, -1);\n        for(int i=len-1; i>=0; i--){\n            if(!st.isEmpty()){\n                while(!st.isEmpty() && H[i]<H[st.peek()]){\n                    prevSmaller[st.peek()] = i;\n                    st.pop();\n                }\n            }\n            st.push(i);\n        }\n        \n        \n        int max =0;\n        for(int i=0; i<len; i++){\n            max = Math.max(max, H[i] * (nextSmaller[i]-1-(prevSmaller[i]+1)+1));\n        }\n        \n        return max;\n        \n        \n    }\n}","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximal-rectangle","has_notes":false,"flag_type":1}