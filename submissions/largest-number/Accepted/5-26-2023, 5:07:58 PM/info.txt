{"id":957593282,"question_id":179,"lang":"java","lang_name":"Java","time":"1Â year","timestamp":1685092078,"status":10,"status_display":"Accepted","runtime":"5 ms","url":"/submissions/detail/957593282/","is_pending":"Not Pending","title":"Largest Number","memory":"43.3 MB","code":"class Solution {\n    public String largestNumber(int[] nums) {\n        \n        \n\t\t// // Comparator to decide which string should come first in concatenation\n\t\t// Comparator<String> comp = new Comparator<String>(){\n\t\t//     @Override\n\t\t//     public int compare(String str1, String str2){\n\t\t//         String s1 = str1 + str2;\n\t\t// \t\tString s2 = str2 + str1;\n\t\t// \t\treturn s2.compareTo(s1); // reverse order here, so we can do append() later\n\t\t//     }\n\t\t// };\n        \n        \n        int len = nums.length;\n        \n        String[] arr = new String[len];\n        \n        for(int i=0; i<len ; i++){\n            arr[i] = String.valueOf(nums[i]);\n        }\n        \n        // Arrays.sort(arr, new Comparator<String>(){\n        //    public int compare(String a, String b){\n        //        String sa = a+b;\n        //        String sb = b+a;\n        //        return sb.compareTo(sa);\n        //    }\n        // });\n        \n        Arrays.sort(arr,(s1,s2)->(s2+s1).compareTo(s1+s2) );\n        \n        \n        if(arr[0].equals(\"0\"))\n            return \"0\";\n        \n        StringBuilder res = new StringBuilder();\n        for(String s : arr){\n            res.append(s);\n        }\n        \n        \n        \n        \n        return res.toString();\n    }\n    \n    \n}\n","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"largest-number","has_notes":false,"flag_type":1}