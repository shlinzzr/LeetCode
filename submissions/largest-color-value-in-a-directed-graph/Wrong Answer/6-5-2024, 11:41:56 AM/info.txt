{"id":1278036220,"question_id":1986,"lang":"java","lang_name":"Java","time":"1Â week","timestamp":1717558916,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1278036220/","is_pending":"Not Pending","title":"Largest Color Value in a Directed Graph","memory":"N/A","code":"class Solution {\r\n    List<List<Integer>> g;\r\n    int[] inDegree;\r\n\r\n    public int largestPathValue(String colors, int[][] edges)  {\r\n        int ans = 1;\r\n        int len = colors.length();\r\n\r\n        //buildMap, inDeg to find start point\r\n        inDegree = new int[len];\r\n        g = new ArrayList<>();\r\n        for(int i=0; i<len; i++){\r\n            g.add(new ArrayList<>());\r\n        }\r\n        for (int[] edge: edges){\r\n            int src = edge[0];\r\n            int dst = edge[1];\r\n            g.get(src).add(dst);\r\n            inDegree[dst]++;\r\n        }\r\n        \r\n        Set<Character> set = new HashSet<>();\r\n        for (char ch='a'; ch<='z'; ch++) // assumed largest color\r\n        {\r\n            if(!set.add(ch)) continue;\r\n            int t = helper(ch, colors, edges);\r\n            if(t==-1) return -1; // contains cycle\r\n            // how to find cycle => go throught all edge from which indeg==0,\r\n            // cnt the visited node should equal to colors.length()\r\n            ans = Math.max(ans, t);\r\n        }\r\n        return ans;        \r\n    }\r\n\r\n    private int helper(char ch, String colors, int[][] edges) {\r\n\r\n        int len = colors.length();\r\n        int[] count = new int[len];\r\n        int[] indeg = Arrays.copyOf(inDegree, len);\r\n        \r\n        int visited = 0;\r\n        Queue<int[]> q = new LinkedList<>();\r\n\r\n        // init q\r\n        for (int i=0; i<len; i++){\r\n            if (indeg[i]==0){\r\n                visited++;\r\n                if (colors.charAt(i)==ch) \r\n                    q.offer(new int[]{i, 1});\r\n                else \r\n                    q.offer(new int[]{i, 0});\r\n            }\r\n        }\r\n        \r\n        int ret = 0;\r\n        while (!q.isEmpty()){\r\n\r\n            int[] p = q.poll();\r\n            \r\n            for (int next: g.get(p[0])) {\r\n\r\n                // count[next] = Math.max(count[next], count[curr]+(colors.charAt(next)==ch ? 1 : 0));                \r\n                int state = p[1]+(colors.charAt(next)==ch ? 1 : 0);\r\n                ret = Math.max(ret, state);                \r\n                indeg[next]--;\r\n                if (indeg[next]==0) {\r\n                    visited++;\r\n                    q.offer(new int[]{next, state});\r\n                }\r\n            }            \r\n        }\r\n        \r\n        if (visited!=len) return -1;\r\n        return ret;\r\n    }\r\n}","compare_result":"11111111111111111111111110111111111111010000101011100100100000000000000111111111111","title_slug":"largest-color-value-in-a-directed-graph","has_notes":false,"flag_type":1}