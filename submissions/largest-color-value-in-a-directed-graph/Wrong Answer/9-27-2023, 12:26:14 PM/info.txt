{"id":1060223022,"question_id":1986,"lang":"java","lang_name":"Java","time":"8 months, 2 weeks","timestamp":1695788774,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1060223022/","is_pending":"Not Pending","title":"Largest Color Value in a Directed Graph","memory":"N/A","code":"class Solution {\r\n    int[] inDegree;\r\n\r\n    HashMap<Integer, List<Integer>> map ;\r\n    public int largestPathValue(String colors, int[][] edges) {\r\n        int ans = 1;\r\n        inDegree = new int[100000];\r\n        map = new HashMap<>();\r\n\r\n        for (int[] edge: edges)\r\n        {            \r\n            int a = edge[0], b = edge[1];\r\n            map.putIfAbsent(a, new ArrayList<>());\r\n            map.get(a).add(b);\r\n            inDegree[b]++;\r\n        }\r\n        \r\n        HashSet<Character> set = new HashSet<>();\r\n        for (char ch='a'; ch<='z'; ch++)\r\n        {\r\n            if (!set.contains(ch)) continue;\r\n            int t = helper(ch-'a', colors, edges);\r\n            if(t==-1) return -1;\r\n            ans = Math.max(ans, t);\r\n        }\r\n        return ans;        \r\n    }\r\n\r\n\r\n    private int helper(int k, String colors, int[][] edges){\r\n        int n = colors.length();\r\n\r\n        int[] count = new int[n];\r\n        int[] in = new int[n];\r\n\r\n        for (int i=0; i<n; i++)\r\n            in[i] = inDegree[i];\r\n        \r\n        int nodes = 0;\r\n        Queue<Integer> q = new LinkedList<>();\r\n        for (int i=0; i<n; i++)\r\n        {\r\n            if (in[i]==0)\r\n            {\r\n                nodes++;\r\n                if (colors.charAt(i)-'a'==k) count[i]++;\r\n                q.offer(i);\r\n            }\r\n        }\r\n        \r\n        int ret = 0;\r\n        while (!q.isEmpty())\r\n        {\r\n            int cur = q.poll();\r\n            \r\n            for (int p: map.get(cur))\r\n            {\r\n                count[p] = Math.max(count[p], count[cur]+ (colors.charAt(p)-'a'==k ? 1 : 0));                \r\n                ret = Math.max(ret, count[p]);\r\n                in[p]--;\r\n                if (in[p]==0)\r\n                {                    \r\n                    nodes++;\r\n                    q.offer(p);                 \r\n                }\r\n            }            \r\n        }\r\n        \r\n        if (nodes!=n) return -1;\r\n        return ret;\r\n    }\r\n}","compare_result":"00000000000000000000000000000000101000000000000000000000000000000000000000000000100","title_slug":"largest-color-value-in-a-directed-graph","has_notes":false,"flag_type":1}